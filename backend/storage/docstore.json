{"docstore/metadata": {"629f60a1-f37d-45e2-a7c9-d84d66a80152": {"doc_hash": "b88ac7747ec0dc7178b6adfa4e4f4c8be660bce99222f528f7526e146a5064da"}, "0a44df04-7921-4620-b824-69101bc14674": {"doc_hash": "47bc244cf2737d3e577715634c9d05c3788abb59c7b15aa4e4c24a9b33573e01"}, "994f125a-7045-404c-821b-dc76ffe0d2ad": {"doc_hash": "5457a8e3074efb04928bd4e47038a1a2388ad564dfdc05cf36e6a37dbcbcc1fa"}, "6fd1610d-3ac2-4bbd-98cd-40f1d7b33f19": {"doc_hash": "475b08c524c4b4fedac47ad8e96f7f70488367155021bc59b67a4dd284300627"}, "e753f969-540b-4f08-924f-c72d4bca31d2": {"doc_hash": "0497c095f4a120b7bd74b6b31a6553f0f4165f91be89b9768f7dacceb3f7eb95"}, "e79d47b7-78cc-4bb7-b114-605a6bca14e0": {"doc_hash": "d29638b2d6a21198223677463fb88e60a3a488aad88ba53727173c32ba517d77"}, "f1d7e2a7-a732-4805-ad02-e0ed1173a52d": {"doc_hash": "374c58b6f796808ba02000dae4a44a80f5127671510143fffed60875cdeb896f"}, "242809b8-d85d-4fc9-b3c4-0995e1c77fe9": {"doc_hash": "905d422aa003604787fa490e4a8f320d93371685725789496368e763af968358"}, "b718dbba-4346-417d-8362-4ab55b0a1d65": {"doc_hash": "9be9e8c88c57cb84a4e4cdf82e3c0f13cf87c95ab8875622f3c0955817fbb209"}, "91f8b85c-b71e-4bb5-8a4d-0061d53b1f2c": {"doc_hash": "7058db9e2e0cd16d4a1cafc783a012406e884312ca9959614f3b6a632bf440fa"}, "8aed8f3d-2b11-485f-9d76-e7af0668c4eb": {"doc_hash": "37963d3c535fdc01f019212af69f738fba40b5e61d9597630cdf85c3aabc18d1"}, "388409aa-f003-4090-8b99-c0dde374275e": {"doc_hash": "bcd3c12327cf7ed5c2d7856174ca97903c40243f81557ac231f1da3feeecef0e"}, "e2d923a0-2ae0-40de-901e-d26d417024dd": {"doc_hash": "df1d5e9786be57a4c80de3b1dd0b5eaf0cccef92ea18e55510e8fe280dc92b7b"}, "b85c2d9e-6d2f-44da-82ac-981da3d7d9b6": {"doc_hash": "44d5787eaeb3e0496853211c0c7bb608459de9f4cbbf61e08959e8bc02e76051"}, "ff696c81-945f-4c5d-bce4-0dd189b445c4": {"doc_hash": "8f81ae776d6ff50db0e2d7517515660a7d18ce0f146df453a4adc6f76f02ef5e"}, "b01f9da2-c494-4419-8198-5d604e30bb2d": {"doc_hash": "b7e6dd078733b4f53ab15dd0e6b698dd22fa948b8b79b75c573263977f139ce3"}, "1a8cfaba-79d6-4b2c-87a1-fd12719ac2a3": {"doc_hash": "d660ffa207d90e5a42feb4937bcaa10d44ec0e9e3d2d8a135d04740ba1c4c834"}, "38a957ac-019f-4fe9-a138-c68f13df5f20": {"doc_hash": "7b3811f35247a2e703d7cafc6692df055d73fcb88bf4914fca5b9bad758dc28a"}, "6157ea44-8759-4e1f-8f5e-03e7522cf4eb": {"doc_hash": "89c6ffc35cd031da577b2852c43cd66b04f0b468b073867e4f18d96fb24119cd"}, "3495425c-5714-47d8-891a-4bfe10fa6362": {"doc_hash": "91be0ae64119018c8c9e1b36c5e09bc63f5b0df760890f92b75c71fc2de1b443"}, "8762bcf9-9473-4885-96c7-2be3eaf9c967": {"doc_hash": "5254004e9763fed57c216315bb84a82dc17c61d5a7030f8ac6c7f76e9a9b0451"}, "28d7bb6b-7f9c-492b-a42b-db882f445dae": {"doc_hash": "8b189bec3b95799e8b232e4a5b4e4f049642d9818fc619ff8d20cdc7c515cd09"}, "4a5b617e-66c0-481d-861c-66e8af2e915d": {"doc_hash": "fdc1388e805bcfc4c95f9311f38c504551c31af110c6cce4eff939639780d969"}, "28d33d61-805c-4010-a3a0-31a7e4ee26ed": {"doc_hash": "ac8eff047c3d897aedf99a09c934402594a666988ac9b43200dbcf23d95da3a1"}, "cf52630a-d5c7-4b29-b984-57c36e62076c": {"doc_hash": "32189965ad0538a64c8728c6c86c6245e75c29c893eb1bbd727e08fd86c2d7b2"}, "b6b59816-3770-4d69-a1e4-e5da08e3c866": {"doc_hash": "1538f5111a3242bc7bb77c3463997044646e7d92db6d61d44c799bf72dd67a52"}, "1d324d5a-cff7-4cfb-943e-93d4e6a26302": {"doc_hash": "22c30c90aff88ac84caa12e2afcaf4a7d4ff5f878e1c6e885b11f44274ab8576"}, "ad4ee837-15a5-40e0-b683-3fa32b023f89": {"doc_hash": "4128dadcab5128c715c4f7a744923d063e33e20c3a60f8084bc47744ac1afe9a"}, "9738033e-e061-48d5-90f3-709abb0c38ee": {"doc_hash": "faad56b61ba43eca7c412d115f6243e6f81a63b58d4210091b8778192eabe20f"}, "5e00bb1b-8aa2-4d70-8526-d96b960536c9": {"doc_hash": "5253ae625a8f4b54eac32fb4fbeb8a3467d0ac3da68bda1a9acf89c77d32039a"}, "350dad45-2353-44c4-9f00-164cca9b0adf": {"doc_hash": "afab156cfbb01c2695d1623fa891578b6b1bbec5e13e0afd8b4a0e8517149374"}, "89343d67-09db-4f1f-9ae9-d43b48307ea8": {"doc_hash": "782fdd8ff3bdc0ff839324cd37735479212d970da11b7f0cbfd6672b571d76cf"}, "f341a2ef-a1f7-4239-9524-77d0c50b5d6f": {"doc_hash": "4b0619ece2fcb7233f967c9482a8abd05d675b89cbd433c69178ca81ca4b0458"}, "a9a6cac3-58b7-4df0-a1de-5fee6cef8053": {"doc_hash": "3f6a3e4f9c5314e3debd53c58938d4d6d244914f2877445743e2fa70ea843c49"}, "e5cbc491-0678-48b8-b5cc-a316ac6334b0": {"doc_hash": "763335eb90a068a8336b1d60dd3351700a96fbbece08c3554b9b549472cee505"}, "378ff420-6be7-47cc-8798-4026aaab998a": {"doc_hash": "e8b254da0a1b9b872e6d3d607ea6637b7ccd74b37149a39c6c8dfe52f31349b3"}, "1643a85e-7463-425e-84c9-96535274e302": {"doc_hash": "4ed753384198a504847a473b565c1ae7acfe54c2a0e423542f8333b2e35d37ad"}, "62cfd6e9-3382-4e50-bc3d-f199bfc81621": {"doc_hash": "096aab19a452ff29719a3f48b541ef4c978058d5c04ec1669c5bee61400e4b6f"}, "ab53415b-088d-42a5-82e1-1cca55ce7de8": {"doc_hash": "49ef1bee2ea14deb4cbfa45b7b2db0458f41195d1b78441a0a83cc241aaf6ffb"}, "7550842d-33b0-40c1-8ba7-c3e2ebdb933a": {"doc_hash": "8a85bcce43c5f2b265863384dcc326e59523a88f64d0f22b52e1cde0f2909b9b"}, "1ee339c3-623c-4513-8dc7-66d228624a00": {"doc_hash": "c4f7e5a9dbb1e969546c4957459f91dbe6e6064d8248ebbf188a1dbbf531fe28"}, "5f7d0cb2-972f-4648-9f12-d02878482c4d": {"doc_hash": "b18e45b0924176a30cc86f785d5763141ecd7dcedddf02af30ae0ee4f113bf56"}, "4aedbd18-9196-4cc0-bdc1-afdd02995c73": {"doc_hash": "898448cfd5401095275e205868ae85a1ec7b5f010a264f1f40f354d13e8907e5"}, "46ce888b-17d2-464c-8ac7-f0fb720b929a": {"doc_hash": "e1cf8826c284b83249f013a8c1f911af0801db7e2a7bba84fa46d41abe27e2fd"}, "ceaa6c69-4e31-45fd-9610-e8e962d55c4f": {"doc_hash": "e1e61e8240b4062638e2e41db22aeb1a63ee1bc33fbe7e80636558f95f9d0303"}, "e20bb027-906b-4ce8-9e38-6e15e0d83105": {"doc_hash": "a908f9177ce2462fa234051dd8d6d92d01d6f24c027fe6ba3a7ac8ab6a9ccebf"}, "7c06bb48-f661-44c3-85dd-ca1fa62e24a6": {"doc_hash": "3bcaf83ce3b30ea3dd575d3005459330cd96db0e9ed48ea20ff0f6fd9b65ebe0"}, "5ce3f1ba-5adc-49b9-97a3-b024b79ea91a": {"doc_hash": "8f7029cd4c486c1b578c8adcd12bab164d1b2a9a23acf866ee3609a8e59e0fd2"}, "b463850d-22f6-4d94-8448-0509305ef7dc": {"doc_hash": "602337e4f1e3353ef5f98d632ecc81ca2dd4473ba011d3dec3533b8ca6d8658b"}, "82a92e26-8841-421e-b27c-b8f9ae666284": {"doc_hash": "796ca5bfa4cd44d5569f3619eb69462ee902c17684c0828362f01ea082acc3c8"}, "f08c4ce9-910a-49a3-be9c-26ef3374fb4a": {"doc_hash": "e28e1d196077650b4ef4f9c62442a62193a9f9ad7abfe8f4f613a1253fe883de"}, "4b50bda4-facd-4247-870e-d56cf27c5536": {"doc_hash": "9edf17da28c8111e8c91608cdda92a49b6037b0d677706fb36320bb9b46ba61d"}, "528b80c6-c307-46fb-b541-d277465f5409": {"doc_hash": "22d50b6422876db0e06456a2fefae6def1d1341343f8c194c33847fba22f06b3"}, "a7345415-6734-43db-93a1-81d9e4acf434": {"doc_hash": "5b3b8905eb06bc559e8de8ca555d1d3af0a5f2440dd04e8469047d03678aeacc"}, "1a53cc2f-980f-4dc5-99d6-8533bb450753": {"doc_hash": "b8ec089d6f10f7527457d8743fa1d3bde7d1f2682a8a57355d8eb9ccc04390a7"}, "ef8a6ebb-70c4-409c-8479-e327a494e3c7": {"doc_hash": "f71bc8fec2de50e5ecaa34852a7d19f8ce967ee94bc124db7e44ac3314686644"}, "6842edef-b877-4756-8790-9ec5c3b3720a": {"doc_hash": "5f1d0642e68d0bcf1cc35ccec9d80100ed6eb59bf18434616933d5d4d6f49e80"}, "e5471883-542f-4eff-8cb0-1310aecaf2b1": {"doc_hash": "620044d6bd29484496aef3b83e502e402553d0a454d506af92ad72728c1ec10d"}, "dc517f41-dafa-44d7-b82c-17a26d138a11": {"doc_hash": "d5eba1ba50cc129cae8ac144b5c920604fc938b7702dd050108d76f827a7c4d4"}, "66328e89-b0fd-4f94-92ad-6c665df528ab": {"doc_hash": "80a47a1ae1e0b4b2d5baf39acb7fe73ba8a42a7ea84a5eec32ac4feb07880250"}, "84ecf00c-7e22-4786-9806-62847f1b8d9c": {"doc_hash": "317540c3f3059562750690d89224be9c7c7ec73069e4df1396cd4f991530ef36"}, "435b278e-ed20-4580-bb2c-cc745ad35184": {"doc_hash": "dfeec3256f755484e4d5028ac4d7ed45071cd384a28617717df38f899b210a11"}, "8fb47794-89f0-47ab-83d6-f62107bb0020": {"doc_hash": "30bb0decfd8f42b296b029c89f4361f8e40f47fd307f28cdf6ba3c76db578b9c"}, "330bab7e-cbd9-4dc2-822d-d12f866cbe37": {"doc_hash": "1eb9715d37c4d24fba60e23c83a07990eac7011d7dbf917d9b2946309fef54a5"}, "0aaee9aa-73a1-45fb-85f5-790b29b2db05": {"doc_hash": "9e59432468c94d767df5894cab832e29cd09666bb19bdf4085f83233c5011c5d"}, "dae8a37e-8c93-477d-ae75-5bafdef17f17": {"doc_hash": "5eed06d5838923bf600b1c9b09b16fc2bb3aea138e940574b23f5b167dc0d174"}, "ab1718f4-ea57-42d8-992a-5bc469317a0d": {"doc_hash": "04dd35b09af90a430bbba10a136c4a4ff7cf3bbbd166f29f8c16e4cd5e759ef5"}, "b5c99ce6-84e4-4e9b-b50e-e60429e416c9": {"doc_hash": "81a48db6f4e458a1ec3b2cd99c224ac09afd5b891dc665c99246991ba820e2f6"}, "c17643a5-cfb4-4cc3-bc73-0f9092552578": {"doc_hash": "5ada752925add2b776df7d9f6cebc7dbc1ee6e72a4497803f7561f7426a66a05"}, "351d57c5-ff1b-4231-9566-744521573933": {"doc_hash": "d95d6c32c427e65b891a2ad9524db0a041b9d3912a35ea6f4902fb5fe3016cfd"}, "7863bb32-00c6-40a3-a6fe-12ae2f4f351e": {"doc_hash": "7b651297c27171c0eeeeddf2e1c1b47a0257327ec15fa12ad6dc9ae6c01c1a68"}, "fe40bc78-0ead-44ee-9816-2f160a50b9b2": {"doc_hash": "07992082abb6e9123c6722e19f4fd19b06d5316254e752ce9e5d580fc21500c2"}, "ab7d288d-ecc5-43cc-8dbb-80623a56505c": {"doc_hash": "d235878961cf7bc4526f43659c8774dcb1ba05e75e1fd6fa57c615d4ac788e96"}, "332b4bae-4ee8-4c57-be18-19aa34afd4e2": {"doc_hash": "f53519dacb3d200d4757be8512edc67c40ead54e74b31cbdd46cfb1b4fc0f51e"}, "ae6c4b9f-d5dc-4a94-8f17-377d82863bb0": {"doc_hash": "900e92df430972d28d80db4a36b60f29f3ca8ef717b71c71ba5923bce68d6451"}, "dcfd519e-5d22-4ce4-8508-c3b9f65a1a86": {"doc_hash": "2fd4ac61ad68da8aeda1988b776a53953df02f970288c83bdf9d7d5fad7aac7c"}, "09880d95-5468-4783-9494-6f0ab61b510d": {"doc_hash": "4f2ca82e6b32b55e8c6d3a850270f41ec01d49e3d7e04980218eb8c3ee3558ab"}, "a551cd23-f505-4d1d-9e8f-fb25efa74964": {"doc_hash": "c1c592c255aa18764af9e8ed1d24059b3ed4c9ef777fd17c50598aa564f4e72a"}, "4022ebb5-409c-439f-96dc-9cf38602d3b8": {"doc_hash": "5962c8834f8b415b58dcf754fbef11b222e7c3fbd176e503baadb3ddf914c592"}, "ff7fbb4c-c0a1-4009-a3b1-5267e2423882": {"doc_hash": "abe22c609d96abac42855e8d21d43645a4ab471d2cc149e54b207e08ba929a69"}, "23802fd5-9f80-4b27-99a1-5e14cef7e0b8": {"doc_hash": "b476febab453ff080d216ffc9f3a6098615014fa73d2e57282b0c9ad9e654c92"}, "369e441d-40fd-4a08-8fb0-ec7529b99608": {"doc_hash": "36a2907a22c2b7c8f88e0ed29e975dad2672034c1b5bba40116cb98f6151c19a"}, "50db8e63-e50a-4394-9378-ab9e93882b5a": {"doc_hash": "d80417c1f4bb3374322dbacb6eea1aa23e5ddb96dfa5113341b06d2feeae0d5d"}, "b603ea07-9f11-4e53-ab1a-b1b752129b96": {"doc_hash": "129acca8ff06652a14bbbf760e79106b29e3ff48280e190cc23964dffaa7f6a5"}, "97c798e6-3503-4a34-be16-b7bea0112ada": {"doc_hash": "bfd3f59d19893dc3080e94784d0181f4c20319afc8927fa847174e098b242ec8"}, "bdb3d118-c3e5-470b-b90c-b79de6090700": {"doc_hash": "addba1db9bbe5a291be5d21b40e58d01824260f47f21ec3a5efa626503ceb155"}, "ed0aa928-2a23-4ac1-a565-84108dc36ab7": {"doc_hash": "0872a87be8feba2638ed61c3ae9a5e125752c173a3e1f4c998ca33227496a221"}, "4d59de42-2c2b-408a-a0de-5c2fe3af7beb": {"doc_hash": "3b2f343b4ef45e90efbdbac6d05a63f43a68db069316364a793daf6909041942"}, "2314cbb0-f279-4d22-a1a6-5f6d1d1aa1b0": {"doc_hash": "439b5c904dd6b508219e58fbc2c5f1283ab46a1d682fd02d55c6fdbc52e0b390"}, "eb0ba338-007d-4c5a-bac5-e4502d44b1be": {"doc_hash": "f9f859c9995050432d3b8480329eac7d5de8254c3fdb3fa4dcad5755981bac6b"}, "c4ba1e8b-3eeb-4f81-8996-b36b1c8b2abb": {"doc_hash": "158286367583cfb7cbb3de9095a16e3976f83c7e6507eb516983034f6f07b4a7"}, "287fc8aa-839a-4a17-84c2-c8177a2b15e0": {"doc_hash": "8cc1e461255531191df0b17cf66c049fd9d7a01922da81637680a5efc25018aa"}, "a21a626d-d435-4528-b4c0-20264d82c6fc": {"doc_hash": "28bed099de6c1c26062a266a2d97eb80dc1344207b3d31382496c201ae2b6de1"}, "56f6a72f-e0e3-47c9-a9da-4c11978d3e41": {"doc_hash": "26f308ab9c273ee0ef889062df7dfa1bbbe42f87b35f863210ef6d576a1ffb41"}, "2a180203-d19e-4d3e-bc77-d7d09d2ab466": {"doc_hash": "132e38fcea3c45f428426d2d486db60b3a09055dfcccf41d83f1bdd5bcb433d8"}, "b2dd8d90-9fd6-4f28-9b92-6a143da02960": {"doc_hash": "8e4507853b98cbabde9db484dd1cc5b46ad6ea3fef972abbaafb283d8e77eeb4"}, "5c12f777-c88e-459a-ba8f-5d95f41d6c33": {"doc_hash": "fc7bde454cf7b9dbc9ae9b5b60a2965c82e0e413ef4f62ba2ff6589694d51189"}, "34cbdfc8-3b8c-436c-bee7-75e6fc34bcf0": {"doc_hash": "847bfc5b7a4db30e66159f9044440869765b6f226d292a4213bc7689e3fee742"}, "03d63983-1162-4749-becb-db8a5e64cffa": {"doc_hash": "c19d2b55559fda2d29d71971371a7af72e55b48b5e577cc090a374926c23bc87"}, "9cab7d73-8f63-4689-b548-6bc241b31d3c": {"doc_hash": "1c1fdad60c22a5604af82d73c1dde7574dcd518694e47a18ba2aa27c288272c9"}, "5780f2a4-8056-4d6f-a9f7-a5a85a35e01a": {"doc_hash": "34c4c1c7cb9b9bddabda64ef92dd79d3956ef5fd62f0306aa8d565ca9ed4800a"}, "17783aad-177a-481b-836b-3e69ed01b2ce": {"doc_hash": "b102ca29cc9a19ee3597e78f1fafc8ab14db3bbd5610b53b068191de3cfd2a26"}, "759fc5b5-a0d5-4d23-9d7b-25cac1fad2d4": {"doc_hash": "739276283dddebcb5fe450b37deac253a5b662a8ae9eea1edde86d06d5bd2d31"}, "52d6fbd6-af2b-4e73-844a-3b2eaa1646ab": {"doc_hash": "576ad86685d97ad71b384f0e9f5bb5b48fca07e946498d57748352b4729e74a2"}, "b5a8ff18-37b9-43df-b966-875d76f0aeae": {"doc_hash": "2bdaf10097436f654578d22fb001d4a070e91b0c819bcc0b8471a0c6a3ff70b5"}, "045dd6ae-3c3c-4071-9799-e368813da91c": {"doc_hash": "3967fdbda5c82669920c9f77730083e0285523f078b69bd9c9df760be84a703b"}, "afe4159b-5fd8-4f1d-9e3d-45ca57f060c7": {"doc_hash": "9d7ae0537eebcc29bd65326219dad4c7e825bc5e12859e66f1bed9bf71114b59"}, "686136bb-c390-4921-93b3-bbe9a150c506": {"doc_hash": "ae15505d01993152de5cd0ab7f5f1492a69d2c4b71b5c13d314409e4dbc4d88e"}, "2cae75c1-8a5e-4465-a08b-cc4cb4c7213c": {"doc_hash": "61207f9bde5807ff939ca7ede03d1910602b2df4d6d708cd54f1b0693785493a"}, "fdc47546-6751-4150-a470-279ee05dcf12": {"doc_hash": "2a2242327c43886e10efe563ee2f1aef952288e2a74f062be80bbc984b981532"}, "9f68c38f-4202-44db-9729-9be14a208ea4": {"doc_hash": "e5b6969294edf35b81ac0c925b58ff0f3a67db8939b06a8707f1a823841f2857"}, "bf848001-9f7a-4371-b4bb-ad61c06dc90e": {"doc_hash": "3d1d0dd3df90bdcba57d6f84af8a906d3de94c9662b7981014a24b0ad5ca4c6c"}, "3b206bfe-1882-403d-addb-a5b990ff713f": {"doc_hash": "6cd4ea054fc4db078fb54fcedf87184a91807003e14de14f86a93f705707fb63"}, "19ae4b10-0cc5-468a-8b55-19f8a9adb5bf": {"doc_hash": "7da7eddfd01e00d8973a76f3198b5b0b79ab7d71a119dc2aeace9e5317ccdfdc"}, "47832c1d-c36e-4954-8375-2e61e249ea2a": {"doc_hash": "896112d848d3e91ece1185ec0e146043ee23a6c359245d9052896b9cf39bddb5"}, "30fddddb-546a-4516-8174-abd16085bf3f": {"doc_hash": "5c189aa8f0fe27b61f0e02f27836981325ff89bcaaacab40ba020c357ccce3f4"}, "1bfa07d6-dd0b-482f-bc8d-2b71dba2f0d8": {"doc_hash": "beb1c6bd7c5556c3fd5ed90d328478e018625d21bce8ed7453e0f0f1d7886b75"}, "c09d1ef2-5462-4165-8fef-1ec59f47f01b": {"doc_hash": "6acaa23db7926021600c0a3029574def6b8e84a549e05dceaba1826e43b867a5"}, "d3eb8a82-0b76-4e8a-85da-7d06fc38f54c": {"doc_hash": "3d85be9bbe73385dc20a70700ab14684eb0a3385af8a21cb2f38736517226e42"}, "4be7cab3-7353-40e5-a2b4-14cc819ac52b": {"doc_hash": "0cf5ed29c02bda24d1a78e3e09eec9e4e88bf6c3cd07a6daa31bf7a33517b854"}, "48aec6ef-0a27-40c4-9912-8a8277039c28": {"doc_hash": "a913b2f4164045534283c425528bbfa502d7bed60e7e77d45e7f3c4903a6732e"}, "e7c53777-0974-4a1a-948b-798307ad4772": {"doc_hash": "dfff7af6efd83be4d58db22e97a19c76aee784abfe88e118d9515bad05fa38b0"}, "1747899f-94c5-446a-a482-85f9b3f6489f": {"doc_hash": "bf2bee51b3cecab3e145b604256282416e4c8e9b221ab8a76306e5798e22a673"}, "dee25f30-6c6e-44e1-9d62-bd38cce6aa3d": {"doc_hash": "a9e4efe9b69bcc4781c27f00e6b2697f74a49a8fbca3ee4f24a9b4d87114d872"}, "340374ab-1596-4bbe-b1aa-fdfd288f420e": {"doc_hash": "3bb685464b02a4b78e558488180f1269e1c75689d810fe52b3211768a1ede95b"}, "f6d086e9-246a-43df-8b13-a763d0b05100": {"doc_hash": "8d511d331fd0bc75bb863f4c82ed40d1bd19ae4b19cc9b259fe30015c8df0f49"}, "ceac2b5b-f45c-4246-8ff2-b8eb0acbb58a": {"doc_hash": "5b146a927464b316140da4a48fe027a36ecad732e03a983ef66dd24ad626d35f"}, "2e540acb-42fa-4e0a-815c-c7c58027fd6f": {"doc_hash": "76389c253573ea56adc2212126df21e3164127a799804bae25ac5c81093181a5"}, "9402e49f-dcca-4bd1-970c-28a5934a1b6b": {"doc_hash": "431d1bb2c84f0a952ee0bfa9f5cce2850811047474189606514e708db684f516"}, "290d5a3d-1e2f-42d8-94bc-85c97b0695fa": {"doc_hash": "bb594d7e976c1d61aeb345bbb48e8e252abad65e593f9bd7a199a706f97fa4b7"}, "e34e455c-e4be-4bc5-b66d-2bf201702c4d": {"doc_hash": "756b9c02e27578c5d1ec324ea66f5afe6c30b9cd9fa600fe69edcd99ad781bf4"}, "76079f0d-a68b-4f0b-aa19-11b86ed74018": {"doc_hash": "844a8d6425af3a007088e65c0fa523f0e2f336e5d37c727fdd3741445f6e55eb"}, "5fe12502-54bd-4f60-b451-86d62f1ffc7c": {"doc_hash": "d5b2ec776eaa5595077e8f20e67de19e0a33da3ee7961482c51749ecd9037d74"}, "5b242b1b-7e9a-45b7-9b98-bd5db3196056": {"doc_hash": "2c17b894a540bee666631f25d95c7dd362563148ded49a6d2b562fd40d2eb4f5"}, "cc7297bc-102c-4679-b102-d9e36fe328c5": {"doc_hash": "4c2bdc0afd4a4416c6eb95e58cca767b8f814ed3d7aef55eb8c3bd78e811804c"}, "7a332816-5e5b-46e2-b75f-fe2a23e482f7": {"doc_hash": "b83238282d6fc15e6ffd1c6c60ede3c5f6bbf380df970d13610293c277a5f6c9"}, "ec1d9ee5-af95-4b4e-8e11-c3e55f42ad6a": {"doc_hash": "647ee28582e719ee87ec409107722f57f476ffe6c89400bd26a0d7df132dcdbb"}, "78dd2248-d8b7-428d-855b-a3df42581976": {"doc_hash": "37600debffd74f474e7a726ca1b60c84df5fa8f5950dd853962730494a96c13c"}, "19e56ebb-d54f-4a02-a573-2fa08c308f9f": {"doc_hash": "35240138e3882f01305b2bf2572fc018fe3f214f3d921636f118f57d1c2f2264"}, "cd33d220-8990-4e23-a726-9a729353e8ab": {"doc_hash": "f2b5f0612f7b562998784220240c6695f61f3e3d8ba66c7669eeae8a36b52ddd"}, "75d69581-fd1f-4b18-95e6-a34a485c324d": {"doc_hash": "c744354ead966a2d5013086a37c9b625c5260308505f7b71e36361726d6c906c"}, "07ff47c0-ca64-4cc9-9177-a1ff31658502": {"doc_hash": "a6020c69b04447ec18d27d5d5be56467767214a6b502e498b80644ea5c12b037"}, "c9e66868-9402-4364-9d1c-98f40f2e9d15": {"doc_hash": "856c980f8215512ea005d5a8d35e122e0c9f9067eda1743389c0130dfed58176"}, "a6bd1cdc-cff3-4f30-80dd-970a280c0e3f": {"doc_hash": "571c3d3e443f47aa60f4d029de343da35e4e2d782008edabdaf51561cba42aef"}, "02f871bc-c814-4c99-8b68-ffcce9df6d95": {"doc_hash": "9372dc09fabb2189622f435fba163bd21f97b9947cf79a0043616e9f3d67e1b4"}, "3b803f40-4017-4bfd-9b75-11c938b9191d": {"doc_hash": "76ef76de2c3092dcfce8f63629d4fc66e8bcde00c3d5256791c0be72c91133a1"}, "6acd6715-8a2e-48dc-88ae-b9d65fb94717": {"doc_hash": "ea7580f726ac33089c22f6193b1d4ae1be8b72078c4018a77081a85a22f0dd9f"}, "9d5a39c0-424a-4e3a-acce-145a182b6b0a": {"doc_hash": "60117e9f0fa4b57d932ea2413bf082df07c60a460c86cf24844e897ff6bc37e3"}, "125b72eb-9ba5-4336-901d-7314c7303e69": {"doc_hash": "5f21a060819c323ddc9d7580be81ed106fde5ee576a4b4a0213ed0d064b8a44d"}, "cfe4ecb4-33cf-4c82-b9cc-cffb5dd1f236": {"doc_hash": "731480ed124164fd80a52e62b43da8c148e78ac0fd899592627c32c1addd1660"}, "a6d3da09-0aaa-4a87-ab11-5065326bc133": {"doc_hash": "635f38c40fe52eb8ccd9473b2375b93d5a8abf8e106402240a58ba78389d8699"}, "00107f62-db39-4acf-9e7b-0f2e6265abec": {"doc_hash": "d0f88b7721a24b1f8cf4196ff5261c34091175f0e42fd50f4d6cdec853187b28"}, "907dd3c7-8ce2-4da9-a02a-37d2f6fb2520": {"doc_hash": "922c030b8571091d16c0c6d053bf4715d477c5542d7f91882cf76f18757bf96e"}, "1d2bc850-742a-49c7-98ae-b828f632a827": {"doc_hash": "647b231830f05f41fec9e0dcfad098efc43b4ae591d8cfd1082d64abc913cab5"}, "d2aa29af-12c6-4b69-a220-9d3f91a257a9": {"doc_hash": "c0c74adf41e36f16a00933a77147538ff091b71d31393d12d619bcfc540a48d4"}, "2caa2ab1-3d69-4096-89b4-ef86c5deafd1": {"doc_hash": "5cbbfdb33e836fa491c22ea13aa1ae265c3a152453a5688c1b7961cb91b2076e"}, "3c5acc39-53b1-4034-845e-e452ed1c3922": {"doc_hash": "1748b647d5dcee06fa36d779d2f0336e35e5470f73c60671b36e56fa1ce9e862"}, "f35ea2c0-dced-41a9-a8d9-17a2a2a1559d": {"doc_hash": "2ca2743254216c2da952350e33c6e35adee60f9eb6d3ed45e4181a18a4b8825a"}, "19dc8560-d51a-4751-9476-7f78574cf25e": {"doc_hash": "59f792da48cacdc868b1dfae519f70c92287beba6a4af13911f81c82f925d927"}, "3aca442a-8d58-4649-a1ce-0c3e42ab0a6b": {"doc_hash": "bb653dab1f570135bf7a2ed046540a79ff91de2ec014536284ed0207a7f76987"}, "dce2fd1c-e062-4acf-ae2b-4ca50df25179": {"doc_hash": "0396b63180509ef0161e9cde7d79b26cfc291adc224ad5722e07a655b8e2a464"}, "ec7fa825-0663-4215-a0c1-2a6f924c6f09": {"doc_hash": "de80df5c6c1726851da342a3af85062df41f9d5adebadaac9dde9349de818aa5"}, "fc1f52aa-27b1-418b-95d0-5e37035d4e61": {"doc_hash": "e7657400ec0a50b31fbf7a41a0d9199b59299f813e493f4697ba8550c2913256"}, "c648b129-7f42-4023-8f01-6f56c821dd1c": {"doc_hash": "79bda509c23ce256d2a02dbf0f255362d3bb6b875295b67073542c410bd94c16"}, "ad87f158-1406-4d1f-9683-958b72a2fc03": {"doc_hash": "564ed1122b05201498e6398ae20780bb15c2d694b3494aae0bdcf4a199292466"}, "9b5e6d32-d4bb-4cc0-af19-ba4c755b87c3": {"doc_hash": "24a54eb3b38307ac19d4ec1c3a0dbe03a5a3295cd5f3c349ab3c82491e534dcc"}, "98e50b48-65ba-4ab7-a00a-7ad91dd3e836": {"doc_hash": "19c8ca799fd499e8bb720c0f1f7d603b599303ea1edf87865d593bf9f3a7d486"}, "5d35d923-ce81-45c9-97c3-7060275b2a50": {"doc_hash": "2f85622125188dc7410dff780206e90275af6b55e7c7c1a01514c76ea0ef1c4f"}, "e5631165-2c53-49c1-b2eb-755288942e87": {"doc_hash": "2b302d598ece4dfc3016b6598dd45aa720cc8e9a19399f5105505851690b1f5a"}, "3495f5f8-a641-432b-877c-4f7a6f4a939b": {"doc_hash": "d70cbab605ae8393e429200fc477be58e11861c953e0c7ec26b077809730a282"}, "a646d20b-dac9-40c9-b9fc-c97e27259412": {"doc_hash": "ec2c90aefda800bafd68386c43b00a8afe58b102f0d3e6b8e13e66c67b28448a"}, "70f666bf-51f7-4ae6-acb9-d0e54f8e914f": {"doc_hash": "3c1c4a2fc537c5569d05117ae642c9e3f157034dfcae9bdfc823f4e963fb41bf"}, "bb4fa1c4-3387-49cb-88bf-9ef0492402cb": {"doc_hash": "bba6d26e393a0138ed407171f50ad4c169e3ae174bd393c7e05f10e1a841a9a2"}, "5744cdd2-ffde-40ba-ac96-babcd200b9af": {"doc_hash": "30485aa053ef2aa2a6f8ad932d93f8b231332b0fbbe15acfeb30ba595cf7abd7"}, "d1e49761-2745-4d27-98c9-0184e60183e4": {"doc_hash": "66a3c309194f70668073d6356beca7792a9da95f7896c5ee6ee63705a1b711c8"}, "cfe425bb-8b21-4ce8-af54-733e218ea7b4": {"doc_hash": "2d9a0c01e60db42b6e8205995e6ca2303603920ee5e2c7020fd33df5042cb5b0"}, "80376e6b-432e-462f-b50d-ae8902dae753": {"doc_hash": "a15556c305b4f1f476ec6f20c422e94b3fddc922026109a97f2672ef3b014ef1"}, "3a2f5e5c-93c4-44a9-addf-b97eb463f419": {"doc_hash": "34a2054ddd8e42e1ddd35c64f46a997ce45b4407a9911630ca80513f180ba8e0"}, "5a0fea3b-68d3-4e4b-9dbf-d338912b33d9": {"doc_hash": "3e11c35adfbc8392688de1a5bf67fc879a5e200de2df7e72fda3e818ff585b81"}, "cb6055ca-9bcd-410c-9fe1-3bb4c85638ed": {"doc_hash": "9b02dd2a5cd6e2399c1a9168537fc0a69048cb23fda8a02bd811e30c0f0f5d7e"}, "5d2d835f-5636-47d4-b07a-60052bbe5e72": {"doc_hash": "96633ecfcc16e302a46184ce7b4134e28ee81f2b77dd89ca94cfdd327b32864b"}, "06602d2f-2c67-4dc0-a4e4-0ed6fe6a2f63": {"doc_hash": "e6f7ae331612f00503a5bf2592212ae1c19ad503017635ed10807db5bfc0f7c6"}, "223bbd2f-ad96-4b72-bbe5-27cb71f77de5": {"doc_hash": "a8da63f64e9295581a704ca26771892ce33bc6fab7cd2b84fa5bcccf04aa5f43"}, "a13ce0df-2f43-4bb9-b737-fd98dabbc243": {"doc_hash": "79c4f62730a5286d4d35aa5bd442293b49ad91ba57020b9c9821c7978ca3be63"}, "cbc010d0-b971-4113-aeb7-f771021d97ab": {"doc_hash": "de368055778d728bafe5d84f53bb5684dca484208f797a8e8467c98aeaaf661c"}, "baba5cdf-3059-43ce-954a-cdd8337f1dff": {"doc_hash": "22e5c42ce1e782fff419970d4ebd3d67ee8af21d8cb145c60de58fdf087edd0f"}, "901430c4-ce2b-4276-8279-4b283ff16e43": {"doc_hash": "faa5c5471f1c0faae5e337fc3375aee9a4773654a5e9e06ff92f87e33f88cbcf"}, "e9942dff-800a-4856-a8a2-4cfe44757984": {"doc_hash": "da586b9ec344407cb9553aa2059afbad87a2bde1bdf0206954a5e03337f851ea"}, "8c08935d-7a63-4750-974d-0ffb532fa72c": {"doc_hash": "30c48f4b1b82151ed2af4ee8b617e52a1ed307036deb4a1f5f6ef341c9ba554b"}, "00adb995-c0bb-4655-9cad-bb24052459c0": {"doc_hash": "0297996258eeb7c5fda864d0a9fc6d752502c8fe25bbfa1b56f0c5362260595c"}, "5e826f64-e7e0-46df-8d98-bbadae242f3a": {"doc_hash": "a345218084c285624ea77f5897c38dd0c0005859193f32bd300b538f459bf6dd"}, "8ad7180b-cc9b-4bda-a164-663f7aa7ae9a": {"doc_hash": "c7422c5e1394bb91bce2fd92992f42ce6c3b2a1ddb40749f21abb32dbfe490e4"}, "b5956b05-b0f7-4a2f-bfb8-10a25b3080d6": {"doc_hash": "6f4cfc48958379fc3c9da2a407d6abbeefb0b528da1001af2a91dff826cee7ea"}, "3f12aef3-0361-42bf-861a-5c0c3ac261bc": {"doc_hash": "7cd37620f45ed489672d9483b75e6e54aa12db0a0eec4b4b08a80ee52da6f9b1"}, "26cb638c-9469-4d4f-9766-7818b9220ac2": {"doc_hash": "0f4c802718f56faf68807541ac370ff3e45cabe27c155ea66b45bcdf6759d176"}, "bb324287-5422-4490-bbe0-acdafcd87a9b": {"doc_hash": "91acdbf174a162e84c1f15f405e8851dc020146b3e2375e2297ab438edbc65c7"}, "a2da856e-c1a1-4424-a0ec-356182ee5529": {"doc_hash": "e6fe766705c317141cde9c540cef174425251315f96a80e8494a359a0786f6c8"}, "954c1f4c-a655-4a34-b79b-cd7a2e470908": {"doc_hash": "301aadc9afa6adb906054a38b0ea337c33d25207674be5838cbac3a835509149"}, "c2e62d55-24d3-49fd-9256-ed43992e7492": {"doc_hash": "e49eb744f693e55658e418759e825616f8d8d776e10497e7fc156d46ef9a5ce5"}, "d305e2b0-b95d-4221-ac04-e9a632292d3a": {"doc_hash": "aa4bb5f4f280e3eebab44b3e32ce2192d53a7b7983ea391dd672963a09b191ba"}, "11ad9a04-786b-44c3-91a3-475ac8027f4c": {"doc_hash": "b937ef6a02d9bcdab6bb446d3519397bd733163b20540037a75a6032f5e745d3"}, "3ab12c9d-7a85-4d83-9971-e305ec2ce763": {"doc_hash": "82c7b59cbda7750bf8094659085e141a9af86862a06fa6840be33a6c766ba5bc"}, "2507823d-ae7a-4f37-adbf-f73a41118d3f": {"doc_hash": "106537a16582214d9acc9f306616f629441cff9e15868ac2d81ce3f3e68464e7"}, "15e5a9c0-0fbf-4067-8ec2-5c3ffbd242ca": {"doc_hash": "036d56c50ae6a2c20fb696730273bc849b66bd299f4d4a2ddeee1de2e6a2c392"}, "9e35cd07-2b1c-4c28-848e-a45b19ce7372": {"doc_hash": "1df2014400cd825630b2c6d0e3d7457c796e323b122d861776497a3f56eeef07"}, "cc56ba8e-09df-49fd-9b62-7c7e3f7e8f0b": {"doc_hash": "a8386b01860f0bca1779dcc63c933f24aad204cc04afae7429412c4951bbfcd0"}, "d062b573-7124-48ca-ac8e-4b98ee37c9e1": {"doc_hash": "c14f8616b385815d9fa9170e0860e3e31456bc208e6e3ceb67d90fc632f6c8bc"}, "c6084c26-3599-4357-9636-d1296e3d13da": {"doc_hash": "8dc15484815e9619e541e6269cc7adeca24d177b668d2977e3e0d26b02b0c693"}, "ad8f5a53-78aa-449c-ba57-931af1bc6e33": {"doc_hash": "bf5c9255ba8dcf5b528d1927488a857908b0405c973b1ecb6034a7cf2dffaa62"}, "7808aa5c-46d9-4118-b90f-d1a1f9a6850b": {"doc_hash": "98aa16fac11ed49c33be835267e60441ab3b09385d2a179074ba5bf9374d1cef"}, "0d6ab4f3-bfc1-4a86-8dff-e693b8b75dc0": {"doc_hash": "a7ed503bca5c1be1dc33f688081fe6588558985c42959fb200732e9c6cfad720"}, "81c41fab-0e69-45a9-9e02-3ae94bfca27b": {"doc_hash": "1a76c1c4fa0247d6b0f152f07707b6d211be45af5368dc6817a64b4341cf85c7"}, "b6e37b3d-5510-47f0-9257-befae6fdd152": {"doc_hash": "fc2bb86760d2fac07bb676429ee72c9b94ae09bf6fe68354eae570ba12fc9bf8"}, "43512e3f-ee2d-4115-8e46-9f211baf2524": {"doc_hash": "c59d2c5f17ce33a3ea23884ddb7cef278d7c0b31d303e6c93b3f52f31132393a"}, "ad3bf511-89bb-4a1c-b70d-1e47eef1920a": {"doc_hash": "afb35437e2fd8e2bbf5e659c6bee301422f79a94488d67cfe526d90288858063"}, "7850d479-8582-42e5-acc1-33c9a0af5c39": {"doc_hash": "feb22d6dbbfdb95b2456c2de2802567d566776f1860483289680f4968b1e4129"}, "5a384a83-08c1-422b-9d75-3d1b6b7e591b": {"doc_hash": "6bbc6c0446c93f7fe4636b525ca8955c30bd09c18ae9c22e014d958cce526d92"}, "046984bf-6a90-4226-86f7-4e12e367e53d": {"doc_hash": "449ec0bea063f1939a751679e0513ae9e89cf0e2ff3b97653993d007a9f50639"}, "98128fd6-a024-4e91-8fbc-7542ab4289f3": {"doc_hash": "552a5f622be91ee352fb20e9ac00f3e12eda9bcde353ab6c0f3b81507fe0e97e"}, "09fc4f38-aa4e-4c1e-a0b9-b7508670e6d6": {"doc_hash": "8503e9324c6d4a3e5ab9f36bfe3c3099f1f217a27cb737e7d8cf66e3a15936ce"}, "6b32c23b-20b8-455b-b826-847763f6cdda": {"doc_hash": "7de3acf777fbbf861566d639a9a7e15d4cac26501baa20c206f165eb1dfbfcc4"}, "5e847c31-e781-4616-9784-ff9421cd0ea2": {"doc_hash": "a3ee814efc90d8dccac371f5adf05f01fcd9c7d23c118acc945e1730f96c4515"}, "5f778788-2aec-4a43-a630-4af88b35266e": {"doc_hash": "ad6786c9961b00ad3ddb1d425519fd747c7814a144dcc415ee6e22c5d3daba06"}, "50c669d2-2e37-44a9-9583-e41f72ec05c3": {"doc_hash": "21e528656b6655c433d9a62dff3291ea27938634951415f88785afc2c1cdbb95"}, "3c4293d8-d295-4cd2-a603-07d23b4b9cee": {"doc_hash": "26e6def32f6512b27d09de0dfce7dcb7248fdb9d5051705392d773862385596a"}, "f62672fe-84ad-4a41-a2ad-bc37ed30e41f": {"doc_hash": "7d1441fd7e3209c6a156cf5b4e81f8bbf80c2f46abd2dc14b891f9c564d51e2f"}, "44d7d43e-d21e-419e-a0b7-dedf6504b8f6": {"doc_hash": "35c7665006708c68dd41d84e86ee9377e73e574a2609049ecb9b21df087dba80"}, "bee42ca5-41a6-4904-a90d-f7400d2417a3": {"doc_hash": "00f19176fed4805d614573dd0bc4458e2e720addc5131548ad9d4e735d2e597f"}, "caff4e75-787e-495a-a0c2-89ffbcc2e133": {"doc_hash": "f6c7bfab2c9fd5acbc5210b74dd767fbca174a52bfc9e92f0b0669b92a6b9b11"}, "74a0dacc-77c1-47e1-ba86-fad1602c1442": {"doc_hash": "c146e1c06ff830b1dc55e9bb66249b4551d07c7a6c9ea228e6f2a0efa9194d71"}, "caefa15f-8957-4152-8aa7-c2c0e7ccb352": {"doc_hash": "e4f21f9238bd9043f086cba94e173fc1dacd568a95bef25c929708c875dc96e3"}, "e712ac33-47d6-4312-ae2d-4d507d239c0d": {"doc_hash": "d757c4bcc6e2a3af25136cbfbc62f1863422c654c68451f14e06d6f5670319d7"}, "9cc330af-6b00-4698-8a69-ce78f7e311bb": {"doc_hash": "8041af3c6e29a2c5a27217d4a8b9f2b3ea14a03ef9e0465216dc614e634e89df"}, "71fef793-0a6c-492e-a03f-880eea16cb18": {"doc_hash": "0694be73348573f55ae60af6a6b2627ff95eb1180b9f0d3fa85558c3022f25a7"}, "c50c0bb2-7df6-4dc4-91a4-4c5742b6ca81": {"doc_hash": "fd5b321e4e6440246220d725f8d771f974bc698bd51461240013287087f6ab2d"}, "e1d63c2a-80b9-4291-8a67-05641c07fdbc": {"doc_hash": "37515398ad26e60bd3e2db706e66bdd2d1fe5c85b6d7ffeeb5910a69c9bd8100"}, "8ff13679-3b43-459d-8e58-996354454863": {"doc_hash": "00f5acd65526c3db40ad2b136889495fe51d14e21ef46a84d41973406b66f8b1"}, "e6f56514-5dec-4d4a-a9be-d93b6f89bef2": {"doc_hash": "fbdc66c3c8f99cd4e01f136e3825671ca5f52aee68095401072a29339bc80c13"}, "49c26bcd-1d87-43ce-90a7-2347f567c804": {"doc_hash": "3a4d124d04913cc74d89ef6731195a2c471099142b59651f67e4208d1052f3e5"}, "ecccc4f3-9d88-4234-98fa-7368117c1c6f": {"doc_hash": "beb61ca0edf2ddfbb378a995ddd4928f6f0e79510125b8a28ad7c0ba5b2c66c7"}, "ec3b40e1-d906-4812-adee-ed525404832d": {"doc_hash": "f567e6f842e2fd75465c0499690036bf75565cc19f5e5ab7f57e6e9b7cea5a47"}, "9f7a214f-04a6-486e-916d-a6aae8b1c739": {"doc_hash": "d04f56832565c450ac933942d5fcf10369dc0426d70116c4c1c1d6fb86f133bc"}, "964c5e1c-8778-46b1-8e6d-bdffde3f2bb6": {"doc_hash": "0492888664277b0ea3c02971d7f591f4f14e8d169fa2fb3cafd6d093a5431875"}, "805bb99a-3473-4756-b914-ab3fe0a51da9": {"doc_hash": "bb8c0454118e69d2bc39d57782f5f1841479b0498dd0b75017fad5c0cd3b7855"}, "a24c9a0a-7cbc-48c3-b3b2-339a2bdd5b1f": {"doc_hash": "fa956038e71253d17d6ebc713ca1bfbe4f53b36d18c54289a887c55e27f0888a"}, "a965a8a9-dd15-4565-bc30-5298c9cba25b": {"doc_hash": "ce0e0b1952f0f0070c4a24e091af39bf7595a46994214ae4cd497a4dcb5409ce"}, "f377e790-8556-442e-ae67-844d189cdd81": {"doc_hash": "d1083a1f34813f100a8b0ab08693bc73877a74ed09e82ebdfda7a4923fcd1cb2"}, "6729378c-c0b5-4f7c-82da-1defe160e62d": {"doc_hash": "fff85dd1bd86703231f59ac5f4eae686a19ac8a90dc37a608cd656a9339aab19"}, "0b091c35-6ea0-41e7-95fd-fb126491912e": {"doc_hash": "d9706ddd8eb6ed45ece605b0f7cc094c53d6c62feca453f6e63f914c043e7632"}, "bcaec3c1-de55-49d4-9737-5228f2021e55": {"doc_hash": "9888effea549cdef30d7982e37421e0c760050fcdc0a50654c389787e2225dfd"}, "6da769e2-2f28-49d8-acee-80a617e8b936": {"doc_hash": "60435230da62bdda3f31ddc76ae4e6fd2e5a7b58530ec728396a4a86ba6bc7ce"}, "e48e0742-d4e6-4040-ae24-8b89215a1f2d": {"doc_hash": "2227fd9e95a442be261ec873b309375ceeca35b3e37b3cac08fbd070e82b0d4e"}, "0c04764b-3ee5-4b4b-9e5e-b3bd1743c19c": {"doc_hash": "8303db4023bc55a7cf5f1d5a750ffa1420065120cb11eacb8a016795953c27f7"}, "bc9dc249-ad2e-422a-91c6-06d3afc242de": {"doc_hash": "87305f4d6cb0da7971e24d516ae200938be8e718837769840754607ce9bd3caa"}, "8297c76e-0721-4088-8f30-7730455f5682": {"doc_hash": "71b2a384b2655e91fadef793025957a95205cf30accb07623acf8cfffd5651e3"}, "0c412444-1c0e-4375-9468-3d009f6e959f": {"doc_hash": "16d540bdaeefaac64bc8277fa26e7049e18e0bbe77c4983d94a73e4a54678174"}, "10b9fffa-0d1c-4fa1-812c-36352a8949c5": {"doc_hash": "922592e92a2e940bb9525a124a07da5b3733e755bac9c8ab4d5f76bfb1add83e"}, "6fb36892-17d0-476c-9e06-f9fc3546b239": {"doc_hash": "090f2806a745c58ef9b906db3528dcced58335e14580ed805d01ccb49a65e3e9"}, "d04b13ce-4bb9-49bf-b37b-ffdb361be193": {"doc_hash": "9ca71e4548cbcdea389c1d171cc4e8d688a20df2e031580c88d007e609606d8a"}, "6b2c2b11-5a35-4fe7-a9c9-cd826e196428": {"doc_hash": "de65e69656c8b95d3674fa981ac26c019f9dcec66fc3eb3ba19234fd6cebd178"}, "d4f229ff-f9a6-454f-8c8f-14223b5381e9": {"doc_hash": "e16a62b157eceb266a71c4574a6614634f35a63f0052ff953fd6dc540c541eb0"}, "48fd3d4a-0db8-4ea1-8156-20ca595872e4": {"doc_hash": "7db1e026776ef6f2eeb15a68742c80b9f63c27fb7946096c600bfd8d62f82c20"}, "5b58311e-9362-4ec9-b065-d1187bae82f1": {"doc_hash": "02baf85c65b3a5d32bbc439c113c24251e924828891c41532ec16687354b2ce0"}, "ee3f69be-3e0d-4a78-92f5-cfc16c2aa534": {"doc_hash": "f3610fa8eede519d5226d183675dd7c04b9f94802da621b4ec8b4765fe197f9d"}, "ab971895-e0e9-47b5-a29d-61b63bdca91e": {"doc_hash": "776362aa513f3901bf90a6ece3a8615105dc9d17f69eca0e4f6077d75be58588"}, "f717f52e-dfbd-4fc2-a24e-245cfecb69de": {"doc_hash": "611dbd422805e4f8ae37fd8515ec77cdba1b702cba61d31ccdc79f1c8048a9c5"}, "f4b8122a-7599-46fb-b398-77181296219e": {"doc_hash": "1898f7346f265ed76dac794173ee4b9746d6d6ae210c76832c7d7e8561517c65"}, "1af51978-8ca5-4853-aed2-b80d20c9b100": {"doc_hash": "b1f0266e00b55f5ca03baaab1eacf23a1083e8e58ac007c7b40a730a2a0cd420"}, "e0a109ba-a75c-42bf-bb00-5be1b7a301cf": {"doc_hash": "0941e9772a3ee84cbefcb4a547c9af85f59a28ceea31ab502a34840e37ee33a3"}, "d85fbf35-0c2c-4ca8-ba7f-1a8d417d154a": {"doc_hash": "4ed112de55850da1bef0eae501bc4492d982a926f9b90ee08b0f0fdf5bf7ecfe"}, "1dee9ce2-ca00-44b2-8f48-76c57551b272": {"doc_hash": "d105e330455c45c94dbfdb825d035d9d35d492a2ee07d14b98a48fd894186d96"}, "dee0be0b-ff5b-47e0-90b6-c9f1e7a0c57b": {"doc_hash": "b3e8394ef4045d178fa3f02b61f9e1eb58a897bb85660a3413e8da1908fecb6e"}, "14a821c4-ccc2-4045-8a30-6d59b3f77ddf": {"doc_hash": "fd2d5699b7bae86e9b826e8d5081e72d610ac795facfd6639a3ea775789b1926"}, "5a02ea50-5f39-4ae8-9c7c-60309c8c9144": {"doc_hash": "853e84b4a8f6bb8ecd2af4d25847e31eaf1b99710d5f4465d6bcc4e2c04b4ede"}, "90ba6b19-143b-45f9-bfe4-54c0e4cd7791": {"doc_hash": "c971d6540c5d8df248cc816fe2efcd213f0ee8c0bc6d769314a363e18916ac6c"}, "3cfeadb2-ba85-4531-a835-742a85aa0442": {"doc_hash": "3e014ceda1da397c992ef2ffe29a3c23cddaa6d54ab0405c066c8d376ea2739a"}, "37bc96a4-474f-48e7-b469-32df425f61b1": {"doc_hash": "be67a7a8be6da26575ba9a537fa45be95b0ac5c06527a9532092cc2679802a13"}, "cc376b0f-1e3f-4a0b-9fe8-32d23f927510": {"doc_hash": "d58e46c3f63b19264f90fece7635694ef5d4dfd2435ea06d6621aa6197047965"}, "a945daf6-17f2-4dca-89b2-f34e1245275f": {"doc_hash": "3a0399a2ae52a6273d3d5249838d12b708aa61e0b311c2229f24253f8d7c436d"}, "c6614abf-0613-4b79-8034-63242b2e96a5": {"doc_hash": "7e4a09bfd04f8f431a28d738b61d4650dc505102b5e325a715425b345a866e8b"}, "8a685682-a834-48b0-9caf-3b70e11a1d6c": {"doc_hash": "28d5040806858e0c2ad467e9862d14bbe80782b6d8b8c998c0a5edcd423471d4"}, "eb7b8b5a-e649-4567-8187-45a1c0a1e74e": {"doc_hash": "301e9d6e28611325d3842a47568504fe9707dc203fa085ce9d3c0aaf4d9d7ecd"}, "894f259d-2a60-4d21-96d5-e1cefac39447": {"doc_hash": "91713395770da57b8a2a662f9a041e86a3f98eae5d21a62ddad7d54a0b94187e"}, "d34f7ce3-0174-4175-9268-0e628e547653": {"doc_hash": "7b02339256824c9f4c852e71ea82d0363467327c7e8b9042b68823a6375109e5"}, "635454cb-a99e-42c7-80bd-d3eb22dc2eea": {"doc_hash": "b5ef55c04d3dc0129986b854e663f0960dc1cabcac95bd7fbf4a93c3d990b4d7"}, "f02d0cc3-9105-4c29-b230-46eab391d9b7": {"doc_hash": "c21aa0e76abf3579308052d8a778bb62f386b5aabc16374449c287cb9e044249"}, "38ddc103-a3fc-4495-a4fa-e027cf952a43": {"doc_hash": "187929722f7e70d9fe66d76d9dfea03af4f87e119f6b0021826af023e0fabe8f"}, "01734ade-d30a-48e2-b2e3-d863903555a3": {"doc_hash": "6acec1c551f3df4e9136631569a166be0e0cb53c3980212e5a2ed7b77713e98a"}, "6a34e83a-e66d-41c5-b92b-fa1eed20ff23": {"doc_hash": "438e57d5a7a1d5c3384c41467f8e4c87195a71d892d56df024c26d1136775c78"}, "057ecfc8-761c-4320-a092-0899f4c4d07b": {"doc_hash": "1f5dd0a244eb2f79088fa090aa20b6a374651f60e158fc6748e4189b348594c7"}, "6b45f254-03e0-4433-bcbe-05b71c6926e7": {"doc_hash": "218d47323bb245cd47aa9295434061d7d6d946449489144af84be56eb52fff0f"}, "6dad700b-8a1b-4404-be87-96f3dd3295f5": {"doc_hash": "34c71cb708ad10d1f16d5770b310220b195df1ec515fda3bd21183fee48dde5b"}, "0853a91f-a960-42c1-b0f6-9baa8f8adc13": {"doc_hash": "d832087b0b8879bc088566038ca371faa0175b7b84ecf0e24a9a3120d056366f"}, "9c7c6b04-d790-4cf5-bffc-16ddd95b1b34": {"doc_hash": "b9ad84e4bd67461e4d439b4140e9da5ad9443921c7e6b4c76841b97373b94d16"}, "d4e57f75-132e-482a-bcdf-270f38acbac1": {"doc_hash": "aff345d29964409d3b25aa9fc636ab3d55cc64bd223d65e9335afa720cf1faa6"}, "37ec63a4-6df6-4ed0-aaa3-e59ff6a2f35c": {"doc_hash": "64d6b318592fa4d5abcd4f5055f86eac1fa6a7eb5eb5b31d302f3f898643c68a"}, "42f50af4-2c73-4f00-a917-911e403c75cd": {"doc_hash": "682e67fd67a9338d3450814bafd3c3eb9de062d5e49b7286ccc89eceb160b10b"}, "3fae26c6-a079-4e1f-ace2-d6aaa5dabf65": {"doc_hash": "e71f325355bc264f1095aa8fb6e29d475c42bdbaffc4cee7007af34e29ee9915"}, "75979810-6419-4098-853f-37f464e898db": {"doc_hash": "8ee655fbf19f24e2447a7338c13a6127aff87e0ecdd262b76cb5a9e757d16964"}, "f80af379-fd6b-4f95-a291-5b9cfd308078": {"doc_hash": "b0c94bd1afc2959bb162a2f7bd107f444530249d5ea4ecf86e25bdcc5b90a4eb"}, "5cc82101-62d5-412b-86e8-11c3f840df54": {"doc_hash": "3204afb2065123381ea5eed7f729efcf9d303f3f9082496f907aa5a80bd0669d"}, "c644b6f3-895d-4c0f-bd06-0f5e06fcee78": {"doc_hash": "971e9a9e8ef4eeb5770fc1024b67c69e1f701a553e0db2afe24f398427bcd4e5"}, "1e262d43-1198-41d8-8d8a-6f7670343339": {"doc_hash": "74d58c3bfc61464edc89287ccebcd987b02cfaf34bc42033fb35d25e8bab2e63"}, "e2063691-df5c-4125-b62c-5a263e127ab9": {"doc_hash": "6f554be67ef7b26b9b3eca45d93ae89f14cfcef696af3af789bd76e21de0664d"}, "ee6ce97d-029c-4490-b4a3-db07aa31b9e6": {"doc_hash": "18841f91406de64daea1de41a03d31fefa624103ae0824a8052d57fa8a83c8d7"}, "797a7b73-f4d3-4923-a360-dbf451551192": {"doc_hash": "09045fc857cbbc066749e0723a2da2e8b66409648ac812e7d226d449402ec0f7"}, "16a113c1-82a9-479a-88f8-26f94038b6a7": {"doc_hash": "39a5af31d2fb42571726dd275989fa481c30b411f0079789f83f142449b6ddff"}, "8d7330c2-535f-4501-a8fe-caa62577b0a8": {"doc_hash": "d18fe3897fffd58ed5d90bf409a7d1bafe59657df69842f501fe1b206f9f44e3"}, "10bc834e-da68-4933-aa76-9d1fff813a21": {"doc_hash": "b031e3bfaf00b2862ec51c530782d34ea0377697c9f8a9c083443a60e934b65b"}, "de07417a-628e-4f7f-9be7-e7c3f09dc087": {"doc_hash": "c50ae64569e174fe18325d71576cb5328e08afbbf428b424cdb71d025f12faec"}, "a0deb0fc-1fda-40ad-b4bf-be6825d8c749": {"doc_hash": "aeec4c339c310c7f1aac08b50efd68ece94873d8e1d3f55f6ce02b8d88165cef"}, "f3bd359d-9f66-4f11-a732-0bcef15f73f9": {"doc_hash": "5e4043f53612d3cbca15cb1244ba9650b972397ad4a0843e64297c0d7ae4729c"}, "c4aa7098-4014-4f37-b5db-5f94c771e5e7": {"doc_hash": "9336a28a982adea236bd0befcb25c11121d1d9703f82bf1b9bcc9af54929b824"}, "f0203cc0-ea7d-4276-b67a-223311739df1": {"doc_hash": "e48cb9ab661644e38ed997f15a4c5c5364699779373d971bee81ce0cbc99ebef"}, "7863a71f-7cab-4460-9eeb-9656fe30e401": {"doc_hash": "c590e4191449a38c021f66da053bf347bfeba0173de3a341d673a17435854b4e"}, "36b3d26b-7471-4804-bad4-2d1f180c7b7d": {"doc_hash": "f2f714186de6e6e51425e330f04a4fccc94135a3ba57228988c25ebb6e3b634e"}, "403c9c16-6a0c-4263-bf75-6d71428b1af7": {"doc_hash": "b3afddc83922dbb512d8f5c99378e78e0b83be2cae7610d6aa5cc41b4663c710"}, "35cf410d-49ab-416c-a813-bdf7f8837d7f": {"doc_hash": "3587183c546d4a2253a839bb201ca49b024db9ba0689238c491cecc60c2434cd"}, "b95be12b-d1bd-4074-93b9-cd814031fba9": {"doc_hash": "f357431dece7e8e105fe84b1e98ea32cbb4307b1a49062c292a52ac7bfca8c42"}, "e475547e-556a-4faa-bf6d-5cf450987bfb": {"doc_hash": "9af6738de4a3a0b8cf240d29f9ff81b8be2f1840ca1508d35fff0f712cf1faa4"}, "afdf01dc-1776-40ef-9c62-0c15e1d657f2": {"doc_hash": "67a902e324723983676fb340272daf925d5db2ac2fb78ba154bb71f57e5970b1"}, "c4b46bff-69e0-4058-b1ca-f7baca95ca18": {"doc_hash": "33a9fac39f11cfa13819488bd7f82bee4c912e6c346ce70917b53418e2db8b9f"}, "74c8dc61-5119-4df7-946e-e12ba0a878cf": {"doc_hash": "624715d8ae98701a86cda846872136a7fa62d6f442aca57c45f61afe0caf8a8e"}, "d14ef6dd-a376-4161-98ee-09043710f475": {"doc_hash": "a478dc537e705924a0f970503e607f0d8531042d4abb85a05ecd359d9f9610c5"}, "29a6c8b2-efb7-4c30-b404-82f6daab22af": {"doc_hash": "e8d30e6c3cdb456144df7cde0f526712f2e7e2cb07a9925c163e0a32d1696b5c"}, "16fd39e4-6d54-47fc-991a-51fc9d8db306": {"doc_hash": "d7445868eed2daa3f76c1baf6faf79b00b199602b34f411cfd10c4cc70be36c0"}, "95f91784-872e-443e-8c5d-9ec857e7f8b4": {"doc_hash": "f34602b9697241560f33c26e27b4088ccf2beeb287e7405296f2fe7837b68c72"}, "805711ff-fc58-4b1e-b7ba-be9c2a90e81e": {"doc_hash": "c3300e18fd64b5ef14f141da1704d4d24f6ca68ea0c5e8fe7223d81682154456"}, "c5d5f2ee-2d24-481b-aa0f-a1e672d8d7c2": {"doc_hash": "132d54bc591ddd8e06cd251898c51a07cd1e9a426b3d2d54711aa5cefaba6927"}, "b2b147eb-4e8c-4b59-a4c6-5527018386b8": {"doc_hash": "f87e2dce758128913d05e7d09392efec52e943a0a11924403a9b4297770c4841"}, "d5bcc824-134e-463e-9879-d9689fa4e72a": {"doc_hash": "9aac0af1839582c44a3eea081c86f5cd787699135a2b13216d8bb911854f93f3"}, "a94daa11-4bc8-43d2-bb55-bfb4fe3fab49": {"doc_hash": "d1b5be9518fca748f81fe03d8b32a9e170ec2cc9046afdf30d92545a8770463b"}, "896a0d62-e9cc-409e-ba20-3038a067a5d9": {"doc_hash": "2c6e57e9ba7aa804be9c094af1d4257523fa8edd35cacd0c8bf3c9b923c2a402"}, "19c0839d-ad3a-45d0-867e-94c5ec4dce19": {"doc_hash": "aae079490e556e115683b68a3f753b3a697c46241fbfc3775d2ffa42829b207c"}, "7295b5ed-3551-46b9-8585-d83ca6892395": {"doc_hash": "59abbe9e1f3264d1889d55daa558d7320c51c9ba7a0b492e10b02f380df11676"}, "0ba57251-0a16-4042-8760-3ebf2c5f8a7e": {"doc_hash": "eaf23e9ed0d387b2cf8d8753212cd14f4f2a061fbce6e75c955a6685a804081b"}, "aa70feb9-2fcc-42b1-b670-634d996a1ffa": {"doc_hash": "29df694ca15c316693604eac21836035379723933c9ca2933979c68847ff8e3d"}, "1df352b6-b749-4f92-a09e-88dc00117603": {"doc_hash": "f0a1f02fc1a0e060f7b26510b1633bf40e980a9a5bee138aab524a6203a2c7c4"}, "2327da6d-0def-41cd-8d06-fc9fc7f37c48": {"doc_hash": "b732b941f15ecd35ddd16bde8cfeec7d900b18b5410fe6e782de43e7496afda8"}, "13416d19-4476-4a9a-b430-a0fea55ab0a8": {"doc_hash": "3807ac8be0218cfa2ce7ec5c5e89867107a04902199cc777b1bd4e0aca97ba79"}, "905d733b-b320-4f7d-80e6-ec347be1f6e5": {"doc_hash": "d779ef860e46b6b66d692a5f15ba0599ac4371af8955e1c7afbbe9522234a81e"}, "2dfd9ae9-4c98-4bd8-bfbc-0222226ab9f3": {"doc_hash": "9746aedcc8e2fd5a8181434c6cbfbc21dbb88099ef2e34d8227bc94c97520839"}, "a4f3f97d-2692-444f-b286-a4d89a655dc4": {"doc_hash": "3cdebb5859dcb8950949e22a3397c6de208bc952d4ef7e9e5167beb97115453b"}, "41cc6a27-4487-47d6-b684-fd5d26f1a835": {"doc_hash": "f29c32d8c49543684162e85f2b82142f56fc6f3cf1c0fa6432cd97d10ae49f4d"}, "8a8d01f5-6740-4108-97cd-8ae04ff9e1c4": {"doc_hash": "9ee7c8ff06b2ca553a4d888eee86936ad0b9b161aa9cc516d8380344bc0a3cd4"}, "b43723c8-9658-4f9f-9433-bc6872e5f5c7": {"doc_hash": "f62463dc122529e833c02ee6ae5d86c729c399bf0a357c4306ed7fa567663aab"}, "faa39ab5-962e-4a54-a7ee-5e9d1fe4b294": {"doc_hash": "22c1120980a5ae42a2b9bc2665489cf13a6eb741dba54a0daee5302d92f1b7d1"}, "58b8f63e-4b5d-4c68-8925-4db416b624ef": {"doc_hash": "b4254c5b0a5219ebdf1c5ba187ffafb8c13ceb38aa74e8778d9497087fbf608d"}, "faa9b7cd-ec6c-478b-a740-249ed26ec60f": {"doc_hash": "b5bdb8b52f5d192fdac87ffb0044441fc5d46a958fbf2111d71b3c97e5219b6b"}, "0881a790-589c-4e7b-9b61-81283ad36e34": {"doc_hash": "81233dc69200c67823e5b277ac04cb099a3d85619e9d03fe68e37e9bd6c633b9"}, "3fa928d2-45f8-4142-af82-9e149e3f82ee": {"doc_hash": "4a6f14e079f8971ca762857dec0fd45020364484857d096e1a26e460bea99524"}, "e0bce934-aec1-4f8d-a4d1-a58ea3213057": {"doc_hash": "a631c60c81c55018f3e658b2d2e3058bb03a2e88ae3aad1d74ab7527d9fa0f60"}, "00f2a5f1-29b0-4ee5-b6d1-1c310efee388": {"doc_hash": "f4871a5bf1b1091eaf9492f2a151ffb8cb4e98860414544828924da3bf38b9d8"}, "a7ea9d83-d97b-4d8d-b994-266604edd55c": {"doc_hash": "0c82444706155eb6011d9cc21f30a7cc0b4bf3fcd82eefe9d0c1e3221fa414c4"}, "927edddb-f50b-4b6c-ade9-0a1d82003e16": {"doc_hash": "3c59bf926619a51c86228af1b514f15e280e0b0813a0ec5bc14ac3707fd8f487"}, "db65070d-ecb1-4206-8ebf-fc81d8e3bbe3": {"doc_hash": "6bf6a99bb4050fdcb6390297892a66fb50eb1c6b819779ecbb58a794c432ac3c"}, "a7b6d2bf-2ce8-4505-852d-123a1424fd5d": {"doc_hash": "790d7ed3615ba26071b0b14d873f3fbe16320e7a8a7d37346a4e977fc270b0b3"}, "8db30909-9db2-4429-9f5d-22b4c6a91b08": {"doc_hash": "d871525458b10c3f3d326f4129a6df2680d56ee44e2b07d42cb4bf20f08a0ed9"}, "dd35f9a1-5a21-4e9b-8a74-7c216306b78f": {"doc_hash": "8f00263d863b3d8edc3eba7e2f36288c91fca8d2f46e419bf485142780dedeb9"}, "60b45658-c9ce-4001-8283-f7206e997e43": {"doc_hash": "23d636bef9f5f91ab710eb1c7d2728c507e1cafe627876b11344fbbdfb83ced1"}, "8f4aa600-f146-4a8f-b379-8f0af6bc647e": {"doc_hash": "14e9d62d9f8d8d02aadcd4b2f88e1070f7f860c595d1a618994a3925b3d7d4e2"}, "c952c7dc-0543-4dfa-8d6b-5601458c8fc7": {"doc_hash": "da8b48146ce0afd45023618b3a140cec82ed804ecffe6d9f48322a7f93437381"}, "33fae1a3-763a-4980-ae79-0d29c5ae30b9": {"doc_hash": "1fbd864e3fef8828207dac522ca75276835b50154bb687be6f50ee63273827f9"}, "6b7d7ddc-01a0-437c-9dff-20f3352a1ab2": {"doc_hash": "065ec6a2a7bf3ecd4243525692f1ce31c73d8906f8d2eae1fc75a8993185e9c7"}, "868c4946-0500-4f37-9fc2-afbfa857a3ef": {"doc_hash": "7e16895d5d669e96a47f93abf70fb08e1ed31f8ce04334c1d507bebc721936b0"}, "60b39855-be2f-412b-a014-67b2b40b7429": {"doc_hash": "9713af7e2cce42e99add2c3cd3cc1b8df06a606d436fe309752df5b259ea42ab"}, "fc69de6d-d34f-4492-aa46-e919852178de": {"doc_hash": "2acf796b18e88729ce83633bf4138985b7943f16684ca8512d6a015ae3d0556e"}, "391ea42a-2276-4397-aee4-03baacdd2ff2": {"doc_hash": "ab83b62bcc4eb98cc7f79423d6e59f1cc46e67f57f67478daa7a818257c73629"}, "3fd0c1a5-90e1-4cbb-b154-fb21b036b43c": {"doc_hash": "5fa97d536affda7c712166a70bda7ecb8ae724e6714df0eb7a0835f8bb81c26a"}, "8af4c9da-6fa7-4f72-81b8-821435c2d851": {"doc_hash": "377068321f0dc827d051b1fc3a7c64170bd6c8a0015eb7db6553d95cb5e72f18"}, "8da61bb5-1434-4913-a1db-3ed8ff0139ad": {"doc_hash": "740e3516d0c7389c46178e9594b0170f071b29d33c27b69e9502ad3441042428"}, "255afbd0-a37f-4f4a-8c8d-406b0e32e6bf": {"doc_hash": "cdee17abe8bf27a0fefa11f2522e628991daefe4347935f7324a13f40ee254de"}, "1883e804-6ed5-486c-a939-c0e69afca23f": {"doc_hash": "1c6dd5d9ef27d76a4f20e3b1247aaf4564dcdbbff1fd2450ba4aca87e70be802"}, "c74ea664-c253-4e93-9019-5528bb9d7482": {"doc_hash": "729ce1392ebedf5e1807a44cd4391a8d25754612139b2ebf0f6395569bb21043"}, "c191cd8a-5a1a-40d4-8359-e4e0b09e688d": {"doc_hash": "a7ae7d67746f16e9448abe0ec0a7ce5f677772ed6238e1a40b11d29e01af2a46"}, "1d001377-ee0e-45ea-a11b-3c2887f33afd": {"doc_hash": "e875ed60c58241a46b6e94a5dff7b315d13a46225d4e545ad98fe2e54f8c7457"}, "6c28ad50-1e4c-4fc8-80a2-7e40788c9dd6": {"doc_hash": "246e7ee502c82b2af2373229d0c6f1865701350cc1a64ec1ec218eab120aeb74"}, "289db677-2391-478e-9b1c-4b1193b751b7": {"doc_hash": "981e1d90775577c5fb5ff475d9a66009f79b00f4ccb5c25253c3118ce75996d2"}, "2f149ff6-101d-4d39-acdc-f6e32b0a5f21": {"doc_hash": "fe500ac01c3e8fcd7db53479abc105d8a34e3c4c73ead4d28bc0afa25c6e52b1"}, "4a096443-a162-47d9-939a-0fb0946c98ac": {"doc_hash": "ba7d6d9f2f2da86d91104c5c3cfdf24baa5929c985c6937fda38f7881526a49c"}, "d6dd358b-3b4c-4af0-9d18-49c7ea701347": {"doc_hash": "0be94caaf002f2fa06586425b956cba465ec6db724b7134e0e84faebdd9388f4"}, "5ded4edd-68db-4ad0-9da1-7d98cd12debb": {"doc_hash": "0e9ef88a3575d50957c1f1efa28372561b89640b607b7a92055644681c6f83cc"}, "a853aed6-311d-4435-aaae-d20761d89c00": {"doc_hash": "a9f85bddba13eb191450d11b3a362bfe40400d2edcb5e0690e6a616ab9386859"}, "c07f65d5-a94b-4b55-8ed4-59879e88eb03": {"doc_hash": "06a046b64cbbe34dc5765a6613112023b37f3d8c84dc674b2b68cf2bad4d7d54"}, "f54364ad-b8a8-4810-bedf-a17c88636320": {"doc_hash": "754128a1c7625308a87755c9487de1d5f8861388a56b6a7ca06967c13e0e823a"}, "f219b70f-f4a0-4d97-941d-0104df8369e7": {"doc_hash": "3b16b9cb1234f0be2f2308a0d9d1bada164ad1fa92027e5992b16eb043a2fa42"}, "6ba0f0a3-6855-4d5f-a810-8cf32b168acf": {"doc_hash": "f09d98e1a3c03d73382372b984714aca8f93bd7644c86c59f7f36a8a2d488a3b"}, "e115c218-e8fe-4d89-995e-8d77f6d29329": {"doc_hash": "c0b6f7906c7638e216452776bf70bf7b7a9c0a8e62156257d47127cada756a72"}, "829e68b1-b135-4847-a859-d7b204eaa65a": {"doc_hash": "cab6eff6d9f5a47ed74ab45002226ebf72568e2b26d1c7719ff4dc5bd7eabce6"}, "a61615ef-df3d-4173-a9e2-14a96da682ef": {"doc_hash": "9cc09561e6a9f1701e12d605cc5adfbaec1cc3e8738d686288170755a07d43b0"}, "8227dd3a-4b7a-49ea-9282-fbc4ad984b99": {"doc_hash": "b0daa92bf373e81b093f4bece255e7447b10fa478e48a52345bf289bc886d6a5"}, "445fd25a-ccf4-4d79-b0cb-547cf5d773fa": {"doc_hash": "ea62c2d9afd453ff9e4a4b41ebb0ee6cf32158ac70e2d9b77afab103e7ed384c"}, "1dd15f7f-56ac-4b7a-80bd-35a5cf936497": {"doc_hash": "1c1bb37e0dc1926ff179883e8ce65a635c71c305b4ffd194ab94b09354a459c3"}, "c0e00c40-a006-4394-bb86-7dfe428bc3fd": {"doc_hash": "61e6d669196807b4102d9777babd6a332f90d0eb1fb9704d64ce605bea620ea0"}, "8aefe9e1-3da1-4b0c-a0eb-c88bcfcf5c35": {"doc_hash": "05296b6c3302d62d22659ab3931b13dca3f52f4ab0d32bb5ebb4ddb01353893e"}, "e61def83-4e90-417e-bd0c-609ad1b2ecab": {"doc_hash": "c8a64a177f34e8b8b3cf1fd3f9fa0ffe5378afccffc85b69a9e09238c5503e5c"}, "19755f5e-5c1b-45c5-92bf-0a3918ff1d3d": {"doc_hash": "65ddba7c4baabbe2bea7194bcf187bb5f22c716c0ad85af45cced2946a6cf980"}, "63522a09-9807-415a-bdc8-13ad3f868004": {"doc_hash": "30f00e2518d3a0be9296a68afdfcf295c2e6f1e99a81a2850d5e9e5d193e5cbd"}, "d42e1da1-e8d0-4188-8d49-d870a96ae45e": {"doc_hash": "40b39ad552f184c983ca373ef927d4162fe94aaf4b9669708c4695acc01b9376"}, "638fd362-9e0f-41a7-b3c3-25a9b6266a99": {"doc_hash": "9c597446824b8f2f6dddbe2a4f3275d276490771427ecda1da4fb2cd50af620b"}, "cb506695-c3ed-477b-810b-f158cea54a96": {"doc_hash": "d39ee71523a580c7ae6dcac03e550e3bdf515c3b7cc50c3977c13f9edcc35a4d"}, "3b619a66-a90d-4611-8b84-f1400c26bb74": {"doc_hash": "e6bab68fc6ef29808878f4c11c1f46efbaadde29b47d95edf6ee28acbbc0262b"}, "8cd8ae84-425c-43b8-8073-642e3fc6a33a": {"doc_hash": "80c7cd3ea44007014bdd12cc708757a8e7807947a2645a12926934cee5871dfe"}, "a2cb4083-2ee1-4bab-a7a1-45d1d20d258c": {"doc_hash": "3afb3b56fa341ed7fa1cf97e210848946177d5d531e5915224bc758cf9e675bf"}, "2f039022-0615-4abd-8d02-b418b6f391ff": {"doc_hash": "d97893a65e61c6e19fad9621de475ea920fc6ca43828101d760c260365714144"}, "bf56cf77-3c0a-4134-8684-108344100996": {"doc_hash": "e61d13b18400a9de23d2add29f957d2522e45deae8c422be90b508405e4a45a2"}, "cb404486-d9fe-42f5-a34e-dd174e0fe925": {"doc_hash": "999c7ced8d480c5b0934b907f378bce3c25ec4ac114372aa8724d071f6cb036e"}, "5843ec08-6a84-4be0-9378-123123f7ce99": {"doc_hash": "32fe581214edac8c2e306161ce905f2359fdb60ba5e093553f2aff699e373a0f"}, "d113e6e0-ab4c-41f6-8080-53d2d985b2ed": {"doc_hash": "fe693c05be0eaf29c7ea4edb72da46deb52e3ab4294ad67d6559af40ef52bc19"}, "3572ffc6-e39e-44bb-aef4-21254e195207": {"doc_hash": "e41829f5311935093ccab127482f000085c8b5a1611fdef2e34d24c543d5455c"}, "aadcf74f-b9a7-4744-a0e9-7fe7be15181c": {"doc_hash": "f5c665de4a6456766abf03e0b92188d48dcf83a1e6bf24a48f47fdb72599f686"}, "5cedaaaf-5d4c-4256-9078-a0578b3bb162": {"doc_hash": "d06623c82d9f4eda9ee53ea28046d760b468368cf71cd0c092c7170b06f8ad9d"}, "b0096533-6636-46c8-965e-21d6c495476e": {"doc_hash": "96507cba88edd0faa0f6b639b0a2a71161cf0864a557233638a0355a8273930f"}, "f568caf1-38b6-4259-a243-020e8b9847fc": {"doc_hash": "efaae084cf0ba13309b9ac8a53119af2402f1e0abd744fe13b27c5afd1b20f3d"}, "c0d02e3d-28b5-452f-b631-67a7c910234b": {"doc_hash": "47e70ec12a8aafe20e7b8c9af9e549afa52ff4ef874e13cd7ded115dbaf94f83"}, "8c4f6acb-375f-4247-a375-86163978a4db": {"doc_hash": "862ebad243199a00ee126ad1ae3448f222ddff0e51373d3ddfd08c39dcde5416"}, "ca08241d-8020-4baf-a638-9c5dc773408a": {"doc_hash": "55e77b9f0267b9d0261a7d14387a66cd07b26ab4a2b114cca2f1eaef28eb7756"}, "59b4fd11-4d2d-4818-8453-ad8c0ac2ee9e": {"doc_hash": "828725c21eb1dce0996622fecfd6f22f0fe3237475fd010af78260b755f4b02c"}, "51000967-d717-43e7-8d27-011ab05a377a": {"doc_hash": "a3edac73fd9323a9e6af5c9abf897bbb70d12e757b4f9dfa0947e318d987aea6"}, "477d3e3d-6a12-4faf-b0ec-d52ac008b126": {"doc_hash": "8c32226805542bed1efd9fd8ac111fd048c436d2f1a183745b3b355fe647ad6e"}, "476d10c6-b80c-49d6-9432-53e4d51deb03": {"doc_hash": "a1d3e7fa9de072fc2e1f676acf3331357972e087cfe389ad7b62bc95f247bccf"}, "8212dda6-2965-4045-a459-a2f7859ec491": {"doc_hash": "9b41fc0929ebe673ca7c63f1fa836e1114d81e138c66407e497a295fdb470cee"}, "d9255a00-27af-4637-8714-5c58401a8b1e": {"doc_hash": "f30d3f205da365e82520f46317b2ae4b8ebadf304930a21a599bd0f7558c594b"}, "3ab23acd-13f1-4289-9cb0-2949ae9e5cae": {"doc_hash": "22b6a5d3357e6894576c348ca1e2f872a643d9532a5bb8a619632d2fbfd5cc4c"}, "457f1027-efcc-4572-b554-b9cdf2b4b749": {"doc_hash": "d5b0f1a062d8d2fbabdbc4ea4a884c27a26f7902d41b63bca3002401e07aa9be"}, "4be61f4b-98d2-44f8-94e5-e41919ad1e8a": {"doc_hash": "e5a2ddcadd311418f9294cd24768a709f1102ec71cb1044a8701dd74ff4c0f4b"}, "b537b42c-cedb-49f8-b089-2b8a2b928182": {"doc_hash": "624681400b7ca118bdcaf2979a22c2a36a630332431cb56a407a6f7794b4b2e2"}, "1e756e56-bb98-40f6-bf40-83043d7e17d9": {"doc_hash": "a59f0030a3133cf7e5c89ac4b5fe159ba44c77b1a719e31afa96dada8a7f18ed"}, "d11c5c0e-aca6-4070-b201-0bc26c16f582": {"doc_hash": "0c83e1f1a1474d220ef68775ed73537be99de06c2ce7d7852df3fa5bd0ed8ab7"}, "53003ffe-399a-41f5-bec5-5c20a293c219": {"doc_hash": "aab23adc7b38a01b0c2e4af1449f5b7ed9f02cf4adc29c20c45162f626f0a6b5"}, "e3e49bb7-573e-433e-8009-79a390d40da2": {"doc_hash": "a629732ff10dfe6b9a55092c9b6cc7ec4052aae351312db2320f8d9c85bd7d3a"}, "8a0648d2-63cd-497b-9e29-0d2a5e650c90": {"doc_hash": "240ebf7232d8bcfad10bcc5a8e8b8565139c28adb0e10e12e0aa940d6af094f5"}, "8590d746-d655-47ad-a100-3d21b3be820b": {"doc_hash": "bc05379e62110009e8784a80f4bc05111cb69ed8b08c5fb7178d416228f61b2c"}, "f55947e5-9e3f-4ed6-a9ee-19f40cef618d": {"doc_hash": "9fb262c5423a699b8ca76fdaa127c71dd8b6d07e4d1d6b95ef32c3d987a31ba6"}, "6911cf87-d9c8-4f6f-869f-00dedd0c8633": {"doc_hash": "5a5c780e1136b1517a000d5ad169450e73f18960fc2e5b1a299d8eef2416bfcf"}, "34b60732-bb92-4e50-901a-42cb4940908a": {"doc_hash": "e668f8a36ab96c2678e90aa4d24859aadcaec8849607efbc3db29891806307cc"}, "54d10ea7-1df0-4280-9d72-50364112c6c4": {"doc_hash": "7614e0aae689d6c18e358ca221f1b6e5ccfadfa2b0f66e26439ec9044c6f887e"}, "3c3b6c4b-3bf0-4e1c-ab45-7abb6b68e50c": {"doc_hash": "acf75aa74941ecde37182ec8affb4253c15703840c352e8ad1619d5e7561a63d"}, "77113889-baf8-480c-855d-79e147f41cc5": {"doc_hash": "9655aae0c464e58cfe0ee0c238bc83f9054cb9c1df91a63e480e1ea5a12237f5"}, "876637c5-60c1-4351-8344-5983a67af204": {"doc_hash": "277eb5ed9ea1b436621acaa8e3cc42e60f43d1ac88125876df79bee0cdc90457"}, "b381c1ce-09f3-4916-889b-11d43307e5f7": {"doc_hash": "01ef71ca342381c94c42b5a3ff17154de00596cc2971ad70c1e317efded5eafb"}, "a7d8f5fc-2936-4457-be90-436652008428": {"doc_hash": "120d26727615ebdf911f2929c793df87ee7cfb81a5c0f62a2e0c23b0b0fe680b"}, "c6521e71-f6d5-4c16-aefe-0c4cf1dc3c32": {"doc_hash": "7e2f62ef77c36bb5d6edd5331c9d7755a0d6cb4f79d516c3f71f9d56c631c72d"}, "73cfcb29-04db-4dcb-a9d5-dd08f4c82c61": {"doc_hash": "250f3dec9b2b67be445fa906be3956c1848f0036d11d96294bd9fd223b647c08"}, "c47caf3d-9243-44d5-aeb9-5527f91885a4": {"doc_hash": "c83eaea0d19f7fea735ba666980296e8e5b5a0f352ca6184bd55cafc7123f056"}, "6cc4faff-b692-4a03-9146-49fa6020e04d": {"doc_hash": "fc5eec289129e857b0b87bb0d341194591d894d0808744aa3283c8db11644169"}, "f883f8be-4211-4221-bd6b-bb053a70967a": {"doc_hash": "3846df3487c45f429569ae33baa09def20663ec3b84665832edaacbd93d2ab85"}, "e99fd6fb-484c-4804-a046-f2f1085e445f": {"doc_hash": "f6ffd12b07050346f9799b87a524ba56fddb7f8e76fe009309af0d3e52bc3209"}, "ddc19f2c-bad3-4786-a264-55c2dd89b554": {"doc_hash": "2b269a552151707114e120ed621f5ab030a53ef2b02ce24ab4f2fc146d941cca"}, "9b216d01-1019-437e-8d59-a6c0e7ec8dc9": {"doc_hash": "405a032d1a7e2a202775974aefd499c4fa592482823a44efd13665e6d8ee3d0f"}, "8db5e1ca-33e8-4a25-95b3-3f15d34b6f60": {"doc_hash": "092049bd8989eab4f53d9ad246a501e5fdacb0b05d10b13b719b20399cdc0641"}, "4bfe78b6-f161-4128-b770-63fab47693b7": {"doc_hash": "468763422711e2a5af119900f5a54bc8afe3cb163fc220c656eab2acb01ff529"}, "b0596770-ce42-43c3-96e3-e911138fdaee": {"doc_hash": "1d0907147f0382b64f28bbcc46a694e7b3020669b4f1225bda5f0952c6379bc9"}, "6e01e6c5-3eb1-4824-8a03-44742ec3fb63": {"doc_hash": "c4641930e365775d8143fbb84448a24a92ea9ee0708cc11fa465d2a9f4355220"}, "6f63531a-ad63-4d98-9906-047a5ea1e7c7": {"doc_hash": "bae1e63ed19dbd8f253f98361d546e775f63e6516a8da0e6ff587af5bd263fb6"}, "18171836-d597-40ba-80d3-ac3abbd45117": {"doc_hash": "db38032b69a619d8d52ba1c96fa9a213914c0a81618f15c3edc2392ab0b1acf6"}, "99f9bcfb-a2a1-4758-8f83-7b32e281b26c": {"doc_hash": "84827c1e47c280b5982c71bb8f54b08fcac73cee77248a2092be518ea3733db1"}, "5ecb3515-d8ed-49c1-bbd0-4c28170f162c": {"doc_hash": "96124f0a1ebb04e4e1a0c9a7af22b97a16eb36d09829248ba5974ebf91b6c5dd"}, "8651660d-5f66-4ce3-8d46-8395ccb0208a": {"doc_hash": "3da7286f715d0f2666659a17c3bf42bade2086069948cba1745bfbd7bfdb72e6"}, "02951735-9752-42df-b6fa-00fb80db7bc4": {"doc_hash": "4e1c0a437c43bdf1775c738774951ec50aa194b0a2c5ca9cde33f41cc0d2ab88"}, "51e483d4-fe6f-494b-91cb-a168a952baa3": {"doc_hash": "baec8d852ab90e213761596883104374edb12fdd89a2e759b93aaf189ae33f8f"}, "3a91f6fd-06e7-4d31-aee6-7a8cbc758a9a": {"doc_hash": "63af839e99d5a5e73dc60e4a48eeedc915d2096103377034cf9a34dd348d9864"}, "f88d829b-d4d1-4002-964f-e901c153bf51": {"doc_hash": "cdc61f1f74577bbc3b5e1bc7035488f5809e284a819b484a68017c729a36f0db"}, "2f1d47bb-1c96-4a6e-9f36-414ade1c369e": {"doc_hash": "a66061aac2b5d2134ab4d5463a3a79219436309c1b064206d9f056843707b248"}, "f58a1067-f3d2-4bce-9037-4f352d3e716e": {"doc_hash": "e459bb38acf2b2b07262187da360234953578da851c201ddec60626308482de5"}, "ff393923-7299-47d2-a5e7-56c5981d8454": {"doc_hash": "ea422d2f42cde2d16e18ac9b78d9215d39b02654ddd3cc0cf9dfcf3e8464f033"}, "2207db1a-f0cf-433b-ba25-8e324887beb8": {"doc_hash": "5e3e5cfed7e0fe54cceb8485a011bfc0910fbf067c3211b1a2cf700215dd3f00"}, "2cd99a0f-41ba-49ef-b66e-f1be7a24e7c4": {"doc_hash": "17a23b817a543de109d39a4b8c5c29dc6d38e4132c8de9931d10c7f98e20241c"}, "bab13340-ac85-4ad3-a4e9-69ce02d53a22": {"doc_hash": "aa708e5348447aae3e79846029199f283c77fdece756deba5cbb4dd6035958f7"}, "2901d76f-ddfb-493e-9aff-0917fb98d9b8": {"doc_hash": "e4a47888c61e91b65b4f5b74fb9d339cf0fc8625b57d5bc2972d77ea87a94925"}, "8168aa4d-837f-479a-b375-578222b42bd0": {"doc_hash": "7c33d9d459040af8c4b682012f77dd157871909122deba5eea5327a75abd67ce"}, "6a928a86-1137-4139-a6e0-a1e6545a6e0c": {"doc_hash": "5e6feaddc02c3f27d4fc8604523a4c53033007e6d3786606c0da619c71eee13e"}, "423e1ad4-1533-4ac6-93d8-cc2a3d18ec43": {"doc_hash": "dfb49772401148e1a412695cbc13ca4beb68c045100fae2af33172d2feacdfb5"}, "aea1591d-b6bd-437c-b8d2-309d7aabbc42": {"doc_hash": "242382d611d8ad105579ed68ff0da5c4c660a9896a5f4be324603b6dd77b363b"}, "d7828f60-d38a-45b5-9bb1-c2cb95111bf7": {"doc_hash": "8c27efc31bfacd008ffe89c54e18be7634b46c13269c97d2e13fd8d104aa1915"}, "f17cb0b0-7402-4b3c-88f0-eab703f511bb": {"doc_hash": "4fbd17b033b638e256a4ef83a737da82ce9530db9ac55afc794ab646ccaf4c4f"}, "369c9a57-5b38-4d7f-8eff-7888a9f14c6f": {"doc_hash": "992d4b85883ecde324f8d58c1399f941dd59e44704e0d0ace364d708f53fbcef"}, "991a181a-fc94-4561-9218-eeaa28590844": {"doc_hash": "abb6ff23a131540bd4b0e80fa360e742df65dd7610ef12a68c7b8921bf55949c"}, "fcd26150-6916-40e5-83cb-82af0c2ab6ad": {"doc_hash": "33a49c2e845a2a1505b53c374238b8c63984a3cbe46be3768ecfa41f0d1752a3"}, "8e55505c-1397-4d23-bd25-4a9d56830c6f": {"doc_hash": "4dd794f81eb58c4dd2b8a1008b52e6eef4502631b9a89250293908348a962046"}, "9a6a6d4f-d617-41ae-be02-13fcdff0b31e": {"doc_hash": "c083449bea43aa0f660effb85d82f28667d68e07aafb9aefc794bdab20fd07fc"}, "c7a8b548-9bbd-4641-bb40-b395f555a252": {"doc_hash": "db268bdb2e9c34efa7036e3a0559c4ccd649a8ddf6615036e72c381b4a98427d"}, "bc43cce8-c2ec-492a-8b09-2de27968178d": {"doc_hash": "e5a226ef1ed41e2ef48aabb996b7611cb2888dbc05f052715d58fda884f55cd0"}, "4b4643d8-a99b-45b6-9d55-89b9bd53f0b4": {"doc_hash": "eece2a7d1c27e7f30d368fd3569419788a6bc33be5b7b9ccda9b2150455d66ba"}, "035ddaae-0770-4fa2-aa78-8cbff94e1822": {"doc_hash": "0340c47ae558243888ca4874b9fc91b0e1f7266ebc5c2835ca58654959686f47"}, "6411c440-2548-486c-8860-a1a673ea6408": {"doc_hash": "1474a469dda40be8633ed3e59a5f2c488e436462f0e57ec5c7a052325e859843"}, "efcef797-7eb8-4574-b0e7-e8bc1c4fd321": {"doc_hash": "7d827e1defd3cec3126eeab105e9041b2bc17ebb2ab1a18437a98a78df9ec738"}, "1b163fef-8a3d-4398-9b58-41d3bae4e656": {"doc_hash": "9d92eb07fafa6f4efe859cc245beb1b1ecab05ea0fd65658aaefcea41045282c"}, "93ba3609-f944-449e-8706-3ec5a2be44d5": {"doc_hash": "6cb4062535a3f524fd9dd1c97bee6f176f83ffe0c2c7f7351a9ec10602b55920"}, "45148a1b-3c36-47d9-8177-a98e37f9a188": {"doc_hash": "6832b30cad3f4f5bd8314f8248941ce540983716d577d33be4e0131434a7abeb"}, "66000ee8-8c66-4867-aced-a77715019147": {"doc_hash": "f157168457758e81c640a3fe2e31c3157a7cb3aaa9fb4901780a673c839c0d87"}, "84b500fa-5242-492b-8a71-804751986660": {"doc_hash": "4da19eebe167138bfd88083a5655595e8393971a5b59fa00601bd51c5dbea843"}, "7149c17e-c002-40c6-a76b-6cd9990a969a": {"doc_hash": "dde1fb5844327fd4c8f29c579323c5156c5f8412e16e77b809925a1664c2f8f7"}, "8b9c5aa3-5dad-42d2-bff5-8ceb2b237026": {"doc_hash": "34dbe812e970049bc464545446bc646b0bee319d78178037e134d396896a9f0a"}, "1c550740-0641-456a-ba04-019a592cffd7": {"doc_hash": "08f48776bdea451f69eda7d8a2eb9de301a3cb43728decaf377644cc8c2319d1"}, "89d81dc7-cd2f-49f9-9e84-67cb5d75ff77": {"doc_hash": "c547785905d8dfa687e736c67316cdb925dab375f87aa0867e506654afabc63d"}, "842a3793-e6f7-4ecf-8bf8-5a0c18eefac7": {"doc_hash": "d45a062da45fdeb6582f0d4972ef14b772367c18c36379617081aab4371251c0"}, "65d10e17-d380-44d4-ac81-bfa62bfb7b23": {"doc_hash": "f89d7e419e6a9bf3936d1d7471b18c848ded51798fd70fcd99380994f28bf24e"}, "6406d3d2-d9e4-41e6-bf26-4c433a70ab1f": {"doc_hash": "7f506367cc1ce29975d1437fab24c41cbe862adba7ae42e52692f528afd0bb7e"}, "abf16e74-d0f3-4d72-97bd-8d89ab7da461": {"doc_hash": "cc15a484c604133f4ec0105efb939761f406c797d8156bb7ddb95b7c0be6d625"}, "100cbee8-e244-4286-a1eb-818a810949ef": {"doc_hash": "3482b35eaa638b4da819918fec108b6ec455a844a5b38ecb648095a50278d158"}, "670edbce-c53d-43c5-b053-054f9a19acb3": {"doc_hash": "f32c037a98e33a97dc729d690dfec2724a3a7b41e7c67e4efb8e54f1bd2fa57d"}, "736737ac-cf65-4ac1-bffa-05d0b96508ea": {"doc_hash": "2dc860ed2347b18f98f77c8a56035ee7e52875987d86ba176b71653a3d74865c"}, "f7da4d14-98f4-40f0-9829-111623ee3192": {"doc_hash": "dfbe82da2e9827c1e1ef5f80185edb78373e8e009b32b6c1c486e86599c20c33"}, "eb0f707e-ad1e-42f4-8325-a2bfa4f61df0": {"doc_hash": "5c92c1fbdbd45c8b60cbcd0b5186e6028209fa899d69a10f90e5c15481e973ce"}, "f1c9b2d8-71dd-40d9-87a7-86d6d9732b21": {"doc_hash": "3fc52c833fd5a102eaffff752676e085331ecf107410956d05747bb9852851e3"}, "666f0c95-b46e-40f2-8ee1-38bd8dac9683": {"doc_hash": "469f07ff2afb4b3240b7974437572e2705b094670cfda3af2963976dce5a7b43"}, "e4bbd617-a4b4-4b02-9988-912468ed8fa8": {"doc_hash": "1bb986f5235f29148f7b2b7268396daeb6acbba8a5fee9a0f64a3329a65c2070"}, "7ca4ae93-a141-48f1-9c40-4a9ae36cf277": {"doc_hash": "493786e68960799eced004a27a3c8872057dac81112ae4a2e9b6ee167b3faa82"}, "69adc5c1-3549-44d2-94bb-77e5e38305d7": {"doc_hash": "cdb15f67d50a83fc05d7f1d6ad967c4a0ef532a464b0c8f38e04f326d969ce7b"}, "d9b9ff1c-5951-473f-8c82-5dd6106d763e": {"doc_hash": "8435bc1300312cb6fd5f15f44ba133a5674f1da8737a80f0d0b2ef55a7dd36b1"}, "0c65ab96-cbb7-43b0-aa19-9a77363bae87": {"doc_hash": "39f820eb1db8fdc55b33dc952dc2c7233ced4e3e037f9914548481091dc91b3a"}, "0f8b2fe2-08c0-4d3c-a756-3a7feb069186": {"doc_hash": "e996ad40dbd03ce66050a9adb87155b99037ef9ec68d02b8a6284529243ba686"}, "0d34336b-26aa-44a0-8e8b-bb9957e8f982": {"doc_hash": "e2352b81fa6004d6dd9e07ef952aa9c037e7b8aa5eebe6f8c9c24d0393891fb2"}, "e7bff352-15f2-4592-9a94-07b0fcd592c1": {"doc_hash": "10833e51b28232106c6d8f9bf544b4c653bb482a4119cd2a60227251b0647b7d"}, "25db3167-9976-4578-85d8-d9c3fa348fe7": {"doc_hash": "37cddc6aaad8d64c6a95b8f056a827e55255b263302e5712bdd3b8938d3a65d7"}, "c32bb3b7-6bb2-4aba-9aa6-b08e856a7fdc": {"doc_hash": "1b747e3c8279de33378a681424a135498688393bef1585182bea4692355a9756"}, "156554be-74af-486b-ac06-bdeef59d7ee2": {"doc_hash": "14ec4601da5da869a33d61f8a1ad36cfab71c7fed327caf91ca6a1d14cc132f0"}, "de2cd7cb-307d-4c8b-baa6-45cf223d51df": {"doc_hash": "a338f195a1ee950e2ba9a2c384d92c1cdce2a12d218e39da89775eb1235c4fb7"}, "2e91a7fb-ff60-4e67-83bf-b265686eccb8": {"doc_hash": "e011c543740f56e7ffe2d81760d0403af60be05fee387e3d34da525df6008f14"}, "9a18ad38-e308-464a-93d5-c528abcab29b": {"doc_hash": "b462b432f9455af6e18484fbbdfc2f167e09b58ca07caedcff7daca950500390"}, "19cf6f4f-c7cc-49fe-9350-5a1712807e27": {"doc_hash": "04cc4f4dd6fa10f3bdf86d42294b874e0caaf178626622ce87b863f508ded6d7"}, "0fd90f61-f53a-487c-b20d-52ca821bf0d2": {"doc_hash": "09503343205514ab4adb3391178fa860ba136fbfbb7bcb5c88a35713a945e9ce"}, "b33af683-9391-4dcb-8622-ca9001200c6f": {"doc_hash": "70234410fe315dadbff647ed4c802bf905b240f9a1f87b8f024bcd72f21e0234"}, "3ae7dede-bc1b-4d1d-afe0-c1da08e70dc0": {"doc_hash": "2481d97b31be7d27872dfaf9c6878d34cfcee00a651decd4ce6a654c124dbec3"}, "57405947-f0a7-4856-9007-b0da7f4564ea": {"doc_hash": "a36c4f0dc3e9ad036ca09c4b8014e9c1f87397a8fa290b436867adc476897dd6"}, "71840c48-b07e-40bb-8bce-82b568750df7": {"doc_hash": "2ba02dc4019ea5e858d6acb4851a02d23a13920aaee634deadbe2bf703d00a4d"}, "945f44c0-15d0-4061-b5ae-17dc69e978ca": {"doc_hash": "e31e135724142535ba3d79c680e926ee5755ef02bb76d7fec5875e42c46df3fe"}, "63b8cf5c-7a4b-4de1-bc36-d233578870e9": {"doc_hash": "6304897633adbd6d13460e025ca7a2365c816c5d46c67129129dd9463674e9a7"}, "1cca56ee-b6c6-4988-bf86-c4be660596c0": {"doc_hash": "81823db8eaa06e9e0507c176c0b2a59c18a94767a3e1070c0a34b786f1e36d94"}, "f0a17c75-01ed-4d00-8be1-450e1af02ab4": {"doc_hash": "1f42d1d1bce36cb858fc16be0974f0dc1c1eb2bfb3466fc6177d6e667ef26db0"}, "1a1fa406-74d1-460f-833b-b99c5971c1c4": {"doc_hash": "69f1d0b1f258328ca34103152ab5ccbb61534ea96cdef1e7dd55ec43b22b3d08"}, "1407516d-237d-466c-acfb-04980df71270": {"doc_hash": "a34364cb8f213a7639740028c7dfe209eab4c2349ab61d18023f7a1cb41e7afc"}, "c24817e2-c8ed-4e22-aef7-0dab7f7a0f6d": {"doc_hash": "1c0947a231e29cfbd0d7b34f6cd508d0303e4fd98a2d017d329ff06f1b346683"}, "f2a898ea-f146-4897-83e4-70afc781587c": {"doc_hash": "e24a3be29d8e080a410c5a8d289ebc82180d4f1ab87fe62a04db2e69c198811f"}, "ce9e5ecf-03e3-4a83-baf4-70b34a051c1f": {"doc_hash": "16936d3960777a4fd1f99bc99c874571dc126f59213c88691f240bbc7991dd4e"}, "0fbb9971-95f9-4188-abea-c208c994e6fa": {"doc_hash": "794a9cf29fd380c141c6017f8621845fb46142c7ec67a00227c09de4c30f4f6a"}, "916fe532-6486-4cef-83b4-919fffe60fc2": {"doc_hash": "4a457c712c905a48433054a97046249e0dc93bc6189195e101c7bebf521706e1"}, "49896b79-db0f-49b9-8b7c-eaf9691848d6": {"doc_hash": "b455d8342dc1e6ccbfe559edda353294da614ec3b9ebe853bf50ff9450a4d399"}, "2d3f0628-dde2-4485-b3b9-1199128e2e49": {"doc_hash": "99568583d220c53ebb5155afaca6e08a313b8dc2005ee09522461d4ac75ac987"}, "ddece4a9-0bf7-4695-ae96-f420ac79d310": {"doc_hash": "16914edd496b9706a1bc6be958433ac887e8b05eafea3b6bb79416f60994388a"}, "320a33ac-d9e3-4da1-a7a2-8249cb518f58": {"doc_hash": "5976d04abda00f4708a0d9091bf962df46780d87153966e9607321cc83c2dbd2"}, "b33a3dc7-3f20-4d4e-8352-12f945155105": {"doc_hash": "db98cf9e66f4180d033320ae482ea6a657b3e18881306fd8695637c91e86d6fa"}, "e488a99a-0ce9-4ed5-aac2-2705841e6c86": {"doc_hash": "4294eb691fcf436fd1919009e2de28e194d22ac1331643f0b82e9737c7da14d9"}, "8b74abb4-f08b-45f7-8337-08ec26f954c3": {"doc_hash": "d990e4801e470e2a76f7cbd27a5d05ae7f187859a1471082e63bab71c05ca4c2"}, "97988f04-df17-4b95-9e25-857aa86ce61c": {"doc_hash": "474679ee77d2959710c7ce3eec9ada7af0a527b417f07dea56cde70ed68a1497"}, "1315fe7d-28da-4bea-832f-ab262e1459a1": {"doc_hash": "5346987f17030ccdb29e1af4b71df405e941254b85e9bfd0e12536f9a17eb323"}, "705816f0-fcd6-4b23-b2b5-b29e3eee70ab": {"doc_hash": "33f8bb9d391a2538bf0ad2c074b3302194646c4772824b13d9360d3759bd2790"}, "76c30e17-ae9c-4b60-9567-c1825ec9db78": {"doc_hash": "2a1cb3be34f43d3445bdfdafd33a397b04a97e990fe7cd67e496bd595aed586f"}, "82edef89-8d0a-4563-896f-4d6c4bb990d2": {"doc_hash": "4b3409c524d25e73778b7ad95f8df35cc7fcb7f1c4159c2955f5189f92b93bdb"}, "bb1a5010-11a0-4661-bc33-678098c178a6": {"doc_hash": "969a77c607dfb9d740f0503d055d787fa9efa56e34554281c5b7eaa1e43b7c9b"}, "3e12be2f-9b8c-46d2-a033-33452c432501": {"doc_hash": "f859d852520a7c954ddcdef07d65969b8c66d5c63abfc745e734c9574a304783"}, "dc9c0258-3bad-4846-bbf1-a50297705b5e": {"doc_hash": "4ae6cbdfae20681b81f68ead24e55076350ff92fc9ee8e06b0542cae87288da6"}, "885419e6-71b8-4db3-8eff-cf9ff319d571": {"doc_hash": "9622eb6828b3dda4f1d1746025597d7cd1f96cad6e99088bac7f0541d2a1f8d3"}, "76b785d8-9237-4b49-84b8-a424901da45c": {"doc_hash": "dfcce5d136dc540326bb797a2b7dfa119455843b894bf1031a7e069fddfaba7f"}, "26427d66-bb77-49a5-a0fb-0e7562f29675": {"doc_hash": "2944ccfe445506d9521e2a62779230ee81c999d97a184b523d73fc9b19e10538"}, "d5849112-bb6a-4bf1-9f92-33f624f2fda0": {"doc_hash": "92ceacfa20b55b92b50895e9c5f944c7f7f20430d3a83098bde711c2989a1aa8"}, "70e058ad-160b-4b1c-844a-91825cfee09b": {"doc_hash": "b3ec090499d5985d98f77766c8802b9c35e0ed79985fdca2c8d8855fee1cd92e"}, "3bb9769c-a324-4150-b291-328b0f3e25d0": {"doc_hash": "690a5c95c162e29b5044831d5a7a0e6d0cebf6bfbd4dc1ed0f93643a7dfceb2f"}, "7a129958-1750-40f8-be0b-7b4be9c8ddbb": {"doc_hash": "dd44361ee5a97287663c575ba98e2f4bcf9d9c6a0c51697f4e2d9171f5da577a"}, "3d097433-2c84-4dd2-a5a5-07fc1fab02e3": {"doc_hash": "1d01cbd406c0175603edbd10f396a8471a522baa76e900578ecd627aaef0af5c"}, "99e8ac6a-77fd-4bfd-9d60-696fc4026ffc": {"doc_hash": "e35016382fbe32a97a9864cd58a0d6e177f3da6131816bede90be57f81a884db"}, "2d0b6c89-6b4d-4096-81fd-96e03686d751": {"doc_hash": "ed100d62917336da161110cd92e6e802154cbca4d4f590d2903203620eaf0f06"}, "f08dce25-ba5c-4739-b9be-e88e1553ec83": {"doc_hash": "042566510f340d7702d3d518d1f44959ad007f10458e9b3c7136acdf14578586"}, "b7b3d4ba-c1be-4781-a5f3-ae4707ad8773": {"doc_hash": "a772025f63748fdc63e21756aba8d09741ff08cf316c00c421b569e4b8801719"}, "68848041-6200-4312-a6c5-25420beb7e87": {"doc_hash": "d6805b478e267879e754905ac01a5b2a88355237dfa9629c27792de92c0bedea"}, "6e955d32-9807-41ca-aa3e-d44c101c8bf3": {"doc_hash": "2363f70f82731a06a6111d66d2e519b6e26c28359fbcfb4feb289658430bac76"}, "84304a1c-86a2-4927-8e05-3a8e5b843418": {"doc_hash": "7b64f0cbf9faf85b7af7c2557a46f505c0cedf3effded76d281659226bc436c8"}, "75a0c649-f76a-46e8-82bb-8958c234cdb0": {"doc_hash": "bfa36f07d59c41dbc85113ba850ee1fd12aea0a5dbabf167b7ab5367e2da277b"}, "9613b036-2564-4969-89fc-ac5ad9ed1553": {"doc_hash": "b1e243a3e82013efe9139d47b82bd9c514c29450d75f3ab34d6ff3f10fc2a2ff"}, "6b535e2f-4352-4ace-bdca-abfec18b9d72": {"doc_hash": "11d0bd49cbb9ec558e42b45d0b7fb466ac9f2e7e98ee9e0f0bacb147bd467a3b"}, "33766326-d603-4172-9216-185e1a3af1a3": {"doc_hash": "9e550ab3a719d2b9e0f93aa6d25c467e924dfba527406aa6b71a333781b0a326"}, "c370eb14-5abf-4fc0-a567-6425e95f02a1": {"doc_hash": "9b9d87a497a3cbbff1fbc5b74e29f2e2a9b24665c5d108c05908c08297019644"}, "4405f22e-4cf9-4990-bf49-716687071719": {"doc_hash": "a7c9d216824b46c58815737e28763d1a8b25b9ad95a9e7f9d35a0ae2348262d0"}, "a3f8d2ca-b3eb-4dc4-811c-8f2b693827ce": {"doc_hash": "3d04f381c89fcffed8a164aab97f6a6ceb2c3e354bd0dddc614ae12ae5d090bd"}, "bd6bef1a-f34b-4232-87b3-3bb9dc2cab93": {"doc_hash": "f18bba0d1c3daececeb15d801e9ea60e8e12fa948637aa16ad8a6d081187e271"}, "f20b4cf3-a044-470d-8164-430f1ee28996": {"doc_hash": "70cf03dcef5d4d2f30245a6596193427b992732e04b472fab4a0ba915c9378c0"}, "4f59675b-ba35-459a-a913-4af8efb4bfd5": {"doc_hash": "49fa381ae6c0cb51e696d65f84a1a03d492eb0ab466e115d940cf99f89907803"}, "aee005ce-55ac-4a26-95d6-396f8d14c49d": {"doc_hash": "7745ac6b06803244eb9716eca7383955745cef48f9c48496ab8a463f873f4a38"}, "659a3f80-45e8-4de6-be6c-c5775355c661": {"doc_hash": "11547db45a6628162d6d6d4bc878dc0c4d850bc08a488d374b6791dfb0a8a6f6"}, "b0bcaf8a-712e-49d9-99e1-05d0f2f77725": {"doc_hash": "1b6b357d697cbc1d936bbf9663f499f98af1eeb4144f5e5974f906ce1403a461"}, "23cd8a10-87fc-489d-ac8c-5768cbd0740b": {"doc_hash": "4321534f178218f56f18ae2ff9f82640d8b669cb0dc77880f0fa6b551bb6fa05"}, "98b61723-8bb4-4570-93b8-8341d438cdcb": {"doc_hash": "3aadd60e976a7f292f0fce9cfe9525554c550437257d84e4f167731faf127ebf"}, "91ea60f6-26f9-4363-9bdb-c955e293854d": {"doc_hash": "c12486bc58c202a6645e6da4facdd8ba182cb8952b515dad4bf871cee432ad99"}, "dfe497f8-26b8-4e5c-8e5c-6d5fd0d41055": {"doc_hash": "d3968c4bb157a08e82458a0641e7a0af868ec8b70572e0368696eedae30b4466"}, "9a283e18-63b4-42d8-b7e3-f80434d36e7e": {"doc_hash": "7c18653b8a2a120d59ab6b75ce688e5879664bb924ff8345bfe95ad141435202"}, "d00d75a4-a8de-4271-8d56-c53f6cd68773": {"doc_hash": "341cc243183952fb18a81f579bbfe6f8d4d3728d7309c9525463a465bfcbfe85"}, "5a0d48ab-4fd0-4eef-8497-2d9b40d14a8b": {"doc_hash": "22e91e3c34ad3594a48ae2dcc0f15d633965e7f999023ab328f39a19178fcf94"}, "9e70cb36-8e1f-4dec-bb42-04de56b1fb3e": {"doc_hash": "d02db631c90ad39b0d2dbf0a91c8f51ecf984ebcc261fb5ceab8af7770427860"}, "18425161-0e20-43d0-b022-b99fe8503b23": {"doc_hash": "401f391805829fa387615e509318d2f202c2118b00dcb95ee056fee8aa8fe8a5"}, "c2ba2725-e4ae-4a92-888d-25bab2210d98": {"doc_hash": "503737731bb7953982a9acc61c0842fa7003e554466850d27c89459d6898bf67"}, "3c1a7493-275f-412f-af05-9ad0a1284987": {"doc_hash": "4ec17523cf17d8fc7b44db571ab960abd2048f5d654ee5706a4c5090c5466772"}, "eeac4b2c-03b9-41e6-b4f3-0a3516d591a8": {"doc_hash": "9d5cb77a2ab6e0943ec8a9e99fbd1c2a2f3484ff3b9dcb1c59936ef15d4d9c7a"}, "f8c5f044-ffe1-4543-9822-f358fa2b0746": {"doc_hash": "396ff0642e20ef28fefde4b2015fb599c6a372036c1be3c122ae9b666685bf7d"}, "8c0a8d1c-4b58-4ade-ab85-4ca953647091": {"doc_hash": "de95c09990fd05836fd14150385863bfdea2d9c8a85ee37799e5fa474bd7ac63"}, "5c303545-8bb9-437a-9cab-af251b99a2c7": {"doc_hash": "56974080d3ad522723c7d2f8b223ccf3b54f75efbd7f993c5e15d940e8ba77b4"}, "94c4a39b-2d26-4d29-b6c0-5216ccb27556": {"doc_hash": "9873407e9ef3f8fd947866896d6ebb51f4b96607d9bea15e8de9594592680b57"}, "73784c4d-3691-49ba-9fc7-a8adfe8eab80": {"doc_hash": "cd584a1996f1127f5a132488a76ad1eb396a9410babd81b3165b525e60d80da5"}, "a2f14db2-b062-4977-a5c9-f2b5927c74b7": {"doc_hash": "7de0bebc32bab90626506e03939c37be5c311ddd9041b506578f49632f0757d8"}, "74278583-c5b7-4b7d-b822-74bba33af6ba": {"doc_hash": "acfe9e20e7a1b33dc15b9fccf7f43ed49dc2ab44492018ecdcc1f7c9c98deafc"}, "e67af9db-650b-4a47-a3e4-a6c12189f96f": {"doc_hash": "9aeeb791e6913ac83c32ce4ff314359dc611c9785f3dcf47ee4ad105d6fd97f9"}, "bada4d5b-b22e-4d7f-8979-76aae5766bab": {"doc_hash": "32e2093c3df72b17a29844df300534b1c153c65433c8602412f2243e773f8f00"}, "17c7ab22-c0df-4df6-8204-6809e8e29948": {"doc_hash": "7384c12327ebba9a15cb2bb89140672bb2e045a859aad828af30fa87884b64b7"}, "e22a1cec-dbd5-4a2a-847c-a1c50d3c1725": {"doc_hash": "50f015f002345f1c694a1871f94f508313a3ec62ff745d0c2ee8dc46e7f3adcc"}, "8e3bdc00-76b2-45bd-b6eb-a511b520933f": {"doc_hash": "3821dccf45bae19be685430c2a888abf62fcc1796911bb8fb30b5344dc40396a"}, "fa48f675-5675-42c3-a601-bf485b0e0bab": {"doc_hash": "27dc5d0705078010f0cea3c51ddf1c41c52ea10b0145a3752441cf27ce4a2c6a"}, "c166a0a0-9e66-4979-a029-ab5212a07344": {"doc_hash": "31bc77797597376be8cd73bfa37693906b25d400ffb5e9e1bac27567b3d01c81"}, "61dd2869-2bdb-4681-bd02-e1f69942b694": {"doc_hash": "bf10d0105878ffb0884545f98b450a969b4825053e0511be1ff87f3e2882fe82"}, "7b299776-5974-483a-82d1-6e2bb601df8d": {"doc_hash": "f767ba48caffcc27e9ba9869d2e9f7a0945ca7cb7bc5a21f6ca046c45fbd528f"}, "c4e17d66-49ce-48aa-ba73-a4f113e958e4": {"doc_hash": "9f989b0601e3d2957a470b6e07a726fa7b9843719d37d4d53cff76141810d35b"}, "6dca0a7b-c1a2-49cc-9dce-08a60063ad43": {"doc_hash": "9cec2113af7b6d6c511446d52ead347cb7638d2ba4b245728c624e39004f7349"}, "5662666c-6ed1-4d21-bf8b-a03bc949c465": {"doc_hash": "2bcbf4debdcf99c439c08207c84031ac72cae8dd678435d70723f4f4a856e8e4"}, "b1382c47-43b1-486f-8f79-58779993f163": {"doc_hash": "47aa190e01066937ada82543764440a9b65e94f9de8f9ed21154fd3e80883b3a"}, "fecb5b9d-ef87-4655-8aca-00b6ab50e016": {"doc_hash": "fd1c65365065ce2192828246fba0aa698fec6baf723921359892e954407be4b8"}, "0c248a63-bf2f-42ab-8ace-7f0ba7082233": {"doc_hash": "dc35b90eb241973e113ef43fba94fbcdb47901b31a1fd4357e78c1c8c6e3dd08"}, "54bdba4b-44ba-463e-a593-0820957beecd": {"doc_hash": "97c39bd41c59067b03083e2cec7b7cbadbdf702a7eb517ac6730dbf979c4a676"}, "3f68b80f-f5b1-4268-827e-ead61caabce6": {"doc_hash": "4969bb77a3f7c87661f50f956ab30b58cb4facb3ccf36c258b12996540b9b82d"}, "3297c95f-dd53-4b24-8f0c-c00da4e2ab93": {"doc_hash": "33f9ca53804935a6d7bdd9ce42bcd8b5878d14e76bd1d2c06581ea10c94e66b9"}, "ad9e0bd3-20e5-42ff-86a1-7256963b9cdb": {"doc_hash": "05e0f5be3c70fd924b5dfde91be7b20bad3ba3d50eb5f68bae8744a45253ae6a"}, "2d09ec18-2c77-4acc-b7cd-61079b7a9185": {"doc_hash": "42dd4c072310510f4eaabbc158f55fecbf51cb3b79aff026bd90c2bf4bb07972"}, "2def759f-7a43-4c2d-a5f7-1de7241c28c6": {"doc_hash": "53245c56d74dfb8132cb7d8ca70ff7668ac17094a9602bed0991ced9672f3598"}, "401dcaab-930c-4884-a09c-15310af427cb": {"doc_hash": "1e216d515e05858198318843dd0efd2899710d52881611692e07632292cebce7"}, "e7a41ef9-a50d-428e-8ffc-f079a7c4f162": {"doc_hash": "d7bf5230ba7ae5493f08fe9f3e4f0b7393e8bede2fd87dc9a3ecc26ca649777c"}, "450295e0-9905-4c99-b8e7-2288c4f4d90e": {"doc_hash": "7b36c54330e7099cdf722fc8ee19d1a7c53a024c4a15866a4793f9b9ae57942a"}, "d911535d-460b-4129-83bb-6dbebb4ad8fe": {"doc_hash": "f40fa2f98d0581ba6ac740bc107fb791badad13e7ad54eacad14904d35336215"}, "f36c8323-9ce7-4b62-bd89-8dc796fd332c": {"doc_hash": "06c1a76778cac15f2c787f432d9f8a6a1a970c67e6f0c02eff43576bc0277485"}, "22bf24d7-b8ab-4660-a2db-0c80a883f6e0": {"doc_hash": "357f0beb9fc037c16645f3c0ba0ec3e2dda3c21ec2350d0c35189d0538ca3798"}, "1ae750d6-e0ff-45ed-a316-6ad98edb5ed0": {"doc_hash": "7e8a9db4152ac0d25746e86a7b6766d201fbbc59f3c996e4fb764b6e2e376b2a"}, "588205ae-9ffb-43fe-9add-30d034640b97": {"doc_hash": "09498cb70836e1d0f3e5a4a3ac5a4bd28527f4d04dd025ac26e44d049848c9dd"}, "4e1e1247-74bb-4bc8-b245-3d58b479ffa2": {"doc_hash": "b0be14f47646af4776ae80108e72158eadb52f3c1ffcbbc9e8f156ecef362ea0"}, "15956934-3793-48b6-9bc1-a63aa64ce66e": {"doc_hash": "a4323c1e91fe4e7cb0a72b621ab5cd31af2a3e5982f61c122a0e8556f62a5ec7"}, "f2a5d221-9b02-4ea5-8779-124c392f208e": {"doc_hash": "f6c9f1868cbff1dfeb3955cf1d1384c209d34faedb40c34aea349050b15d1471"}, "5ea36e0a-80b8-46ed-b8f5-a722bd40e229": {"doc_hash": "3587959b5a26af606a75545791747be7d0ea9fbb689694a220d4f39ac17227c3"}, "2c82261c-8143-47b5-b083-4e64c589b417": {"doc_hash": "937f4a155b9d75c7e51cfec33e91832009aef39705dcbf5cbdf46d80aa9811c6"}, "055319b2-f77c-4052-a4a9-ea020923e7df": {"doc_hash": "3eaf8355c2196947896d7e5afcffd2c602ad97bb7042522ee2e6091187a059cb"}, "c829bcd7-0bf8-4a06-91db-3daf3a884eba": {"doc_hash": "cfcbe8793801e7e6410e2fb4116cf0cdfab241a1b51c8ed73439552016f9f294"}, "2f25975e-2093-49f4-b680-7adaa169f22b": {"doc_hash": "b6dad135aecacf8d3dd11c45f34ca7c73786eca6133e31621d178ad621623b5f"}, "f2f934a1-ddce-498d-a638-3a20511d33e3": {"doc_hash": "3adc4b2c4ab17a568cfcbdc3528a814ffc3439a8b8c8164aca6d80a119dffa3a"}, "50c21f9d-0dfd-4ac0-b37e-d70838f3ba88": {"doc_hash": "9cd375a77fce68ddfb88f3cdf5d679fd3206747d03641106252bbf4a4c7e1ba3"}, "9c78a1d5-1ba7-40de-850f-6d8cbbc9a9d4": {"doc_hash": "097b7ca6f8d093aef671d4e7138881ec33483cdd763c166c9ddd5035b15866e6"}, "41b3762e-a80c-4dc1-9311-fddd3b4d8a96": {"doc_hash": "e2f996e7877379e8d84e49ca535ef5b169c6d14f23d65adcf3d5e26a45ae1a92"}, "1d426c90-e48e-4c31-ba93-8c34b93863d1": {"doc_hash": "8f656fffbf397aae1567783392249a9bba518b0764c044d8fec03df2b585e16f"}, "a0d5c30f-04dc-4871-a86e-adf4a5fd2a5e": {"doc_hash": "7ae72969991ee9b1771396dd3753f5a7b2714e9c89ba2633c635648d331d10e7"}, "5ef59e24-1d36-44de-9019-9e8fe7f4e06a": {"doc_hash": "e2cc17c8687503084783361023a7e4f2a38995bcafd24408db517132ada26262"}, "63f1a725-0d47-4821-a0c9-096b57c983c2": {"doc_hash": "014adf961d831632797090241c6fb1b8044908dae8eb9ec0507b887523167e54"}, "962fcb5e-e515-4855-acd1-107467ae635a": {"doc_hash": "29084f7da8cbf063b49aa754c2cfbdcdec19eb1e26ecf447e70280935538bde0"}, "4ac7a742-d4fe-425d-9d6d-fbfb2edf007c": {"doc_hash": "f3cf9e9bd2603184bef034b7a4164d3fd329f6b314a936cb454184533e7b93d7"}, "a613607b-8467-4a55-855c-84b9851effe6": {"doc_hash": "6ef6868d092bdccecb93d72d33a71350f9e92c7d1ce0fe114b517da1b79dec03"}, "940b4034-192f-465f-a7e3-430659883273": {"doc_hash": "cd06ef7be616b402a00837f01d113415c224dc7bd1b71ea0111700ed4017aa6d"}, "6ae8203d-5ef5-4484-a0f7-4ce8175077d7": {"doc_hash": "7e669d12ffd5a8d92fefd825c2cf19be193b48f2d901f88888cfc5d25b232399"}, "12f191f2-4cfc-48c8-bb32-3e97a4da2f9e": {"doc_hash": "b43bef0d8204272ef67740f2911c2b9c8fd66aea2dffb701433882248a635683"}, "67490fd8-c040-48c4-b043-d68970ee6550": {"doc_hash": "2015a9c8d65f3070a10f99ab35568d869d59a32bbd4d29f9ca42d2e87f6b436b"}, "98497cbb-9b0f-4cc4-b880-f14045bdae36": {"doc_hash": "495ee9d75e3ac6f18883004882bdebf2c79945f5dade4d87e0f8f9b9afefeae9"}, "f0113cf9-4019-4a21-afa4-41eb2670161c": {"doc_hash": "6aa7b2771440fe2ee659ac92a77c3977e645e1c7c87cc851e26ba6ab15d7cea6"}, "ba780ad5-23bb-4a48-9a5b-b263d64a0a61": {"doc_hash": "1148bc7f41e5487d58880605e50805132c173da1d3a61f25be6a912e36bb2554"}, "571c684e-7859-44fc-aa97-5e111634a40e": {"doc_hash": "54a9ed2e64b39c2e1b947faf3dcb6e7c41e916cb726be21d20b46a99dc79454e"}, "ae63c3f9-ba06-4474-8e6c-eb96b9430ccc": {"doc_hash": "8a39af2e46f1e0506adfec311365e4168a050a8af0462421d79c455252430648"}, "e5013ee2-7dd7-4863-a6cd-cec086fc9c56": {"doc_hash": "94e4ae3c614b72b50f44f9be8d4c7826cf69668fe3a3d612f8f0e41a4ad2a45f"}, "7d3283b0-c096-4ea3-a09c-a5e42b75feb4": {"doc_hash": "8e3c8fd051a5679bb4f760ecee6ee0ea46d83b72a90a4db4fafd8fe0efdfe601"}, "0954ae3d-bb52-4859-8c3e-a6f6512bd2b7": {"doc_hash": "0da26bdbce30cb8203e081ca1218cde7a96e19af08fa51db668c01b38366c8ca"}, "a0bfd182-e935-48c9-9d1d-e212a0d5041e": {"doc_hash": "d9b30d11041a79e35e93cb79661806a3344b2ff5dd8989fb9d1725bd3abdea50"}, "e5e4f878-744f-487f-b8d2-d67c50954d9c": {"doc_hash": "2d7983e53045934faa459761625df7d0a08f1c12d91e1da6bf2e98b740c773aa"}, "d8e968c8-6bb3-4b2c-8ce7-23b0f25c6e1a": {"doc_hash": "d8e1c6695e42fa4d72b5978c5d2cafc26501f0c059fbea03c796944e653e6700"}, "536511dc-f9fd-49f2-9f46-2f5dd3182795": {"doc_hash": "172b6924d3b7a182770831a18f730298ac08a3c679cb1b6e38317ecce12639a8"}, "35b9b383-a4af-40bc-868c-13bd48fdae21": {"doc_hash": "0f0e48a274ea7077bfc4826020cbfaf574632ae66187ab1ac4f30d9fef9dcb38"}, "c8d2e589-9149-4953-b819-102adea6d2c2": {"doc_hash": "5799f75f35737becc11b200f4d1c44d96354690195d1c651dc8368b525f61fea"}, "67eeba84-66b9-4e07-84c1-e698d2a7085b": {"doc_hash": "de1814cecc1398f84d74da9d576f7a0ca87ded25e2be79375b7dfcae50d95006"}, "8195f182-88e0-4b54-9605-5526395e59b3": {"doc_hash": "929f40bc4d9c68a7b13ad703e74a7d303c5611097165504277336bd9f3dd17c8"}, "85194c68-6605-4d16-a1f6-bd81ebaf0940": {"doc_hash": "910fe1dc1fe4d489e3604012c2468211a7c9e9e96f9ee1696e4a951729777a54"}, "77ac52e2-e864-47fe-99c7-06a2185a9ce7": {"doc_hash": "843b46d5e2545486f047b9e1eb00f1afd1200e1940f38261235193fb81899d3d"}, "e7503468-1f90-4dc5-b282-ec0f842c9bed": {"doc_hash": "af90229737f5ab6ef012a9e8b8a55853154562cb381c63dedb081cf3b4c13743"}, "0c719a2c-e902-48d4-a205-2311bcccf33a": {"doc_hash": "5de0abea9192705284117ad73a5af58e0c96c642589f63b62bfccbac01a41ba3"}, "b463cebc-ee15-47a2-b61c-a156191dddd4": {"doc_hash": "ef97451e3a096115067c8cbf65048a626da1b9bec77b591abe0c745116f14859"}, "4e37e7d8-b83b-4221-bbb4-d676c85330d4": {"doc_hash": "272c0ea4bcf1f1878e5959b3cb1442fd2b8c7ab238f535928ef1825644f069e5"}, "0cf36054-4a67-4372-a5b0-dfda28bc7112": {"doc_hash": "22fecebf69b1e39faa76f68d0b7891b2ccea43b85750a19b9e6d74068d1c16f5"}, "10ace7a1-7cd4-419a-86b1-e93a4e4183c1": {"doc_hash": "99bea9a209b0c60786efcf44120731ce08de44f9d6e87aa534d90f936dc9ef2c"}, "1f0d9bb1-1ccd-4023-bd79-389b02a2afe6": {"doc_hash": "3db9640409765d19bfd953e6e9c95ee9652bd77adbd9f7b0386752e2f1e56de7"}, "1a6b3f20-6569-46d1-b328-51618d883000": {"doc_hash": "3eb4a3182b20183339425a16b0b80376b0bf860da74ab440c19273e2a5cc5ce6"}, "2e02c9ae-f2e7-4f94-8b84-1a3283ece41c": {"doc_hash": "3a8b82862994e8696638fa6efa7abe0071122c51ace20a780fc73e4afb43c0ac"}, "74543168-e3d0-45a6-ab32-b1db8373eba9": {"doc_hash": "db1b593079b4de8b3638197c80eab5730cf4fdf00bdca03b08dc5b69176b12a8"}, "bd1e71f0-4068-4970-9bf4-97f3d42c7a3a": {"doc_hash": "20bb22edc86b45dc64cf49bae6617205e55ab43a1919a8b02cb04ecd7cf93b4a"}, "acad7d3c-c64e-497d-b395-137ea9e3a60e": {"doc_hash": "9b6d83bca07794df1b6b25045e1d6d94c572b2bdf482d5cde6a590d0da07fdde"}, "6687e31b-e712-432f-a822-87ca5a9664c4": {"doc_hash": "c95217c976e0bf6da98351e8acaf92acb6e86f2470872b4ba4b70f10604eb9b8"}, "aeaa3def-8894-4f1c-bf9c-e93459d4f8b1": {"doc_hash": "226a8202c29197b195643896da089c153feed82c4c491ea11a622d786fac1f24"}, "81ffbfc7-3c0b-4e30-8d40-3791f63420e9": {"doc_hash": "0829b20362bd5d1c9199a8aaa7841007388f4692d252b1bdb1fc2c2819470bf6"}, "6bfc4933-3cbe-42e9-acaf-50f94033aa06": {"doc_hash": "a8ad10f00f9e2db27c01b16562653a064730fda9878c8f008dc20f27c2c0678c"}, "6c95f041-ea0b-493d-a919-438075a2ec39": {"doc_hash": "3d40d7d3937ac0bb1c0fe9587ec0491700cb01e94f4373f654af20913ade67b9"}, "54a182e8-950e-429d-9878-d5b34b5a4aeb": {"doc_hash": "56499770208cf41a2ec6f3c1a3710e0e6f03d25e787207d54f5d1886a5b44350"}, "96661578-de76-4b54-97a1-944aba26e828": {"doc_hash": "6746367b6e412a66bf5ea2ea9d0130ae6e1b5de9af2556d7c6ab0a0f91a71eea"}, "e872e296-25c4-466a-bcd4-e182d05787d7": {"doc_hash": "a9465d85b03fcd4611dbda7c02ddfc3ad0fe5b7d646676f43173791400f796fe"}, "54906c16-4f34-4c80-bcc4-bbd2adf088c5": {"doc_hash": "818131207c3bb9bd26cb38a29d07e97723274ac0e445344ed7cd6d343156b3c0"}, "5dbf75de-5b89-43df-90d7-d5cfad2b432c": {"doc_hash": "7f85e1a9fb351958547a8feddbd8046e65e03285d24517584bd28651723f4ce5"}, "f66b84bf-d464-4ad6-9767-007443a7810c": {"doc_hash": "2685aa7384db7b989e46f4391fedfcd9603674765921c13c352d0b1506bd647a"}, "ce5d38a9-229d-4925-a638-4616c16b20c6": {"doc_hash": "9d09aae0f34001a8387689bde33fc9d40293f8e12e9c57518e068384f9fa50d8"}, "0600e155-c1fe-4827-a880-13cf16b0f115": {"doc_hash": "74a13ea388d840898c5f2a24ddf9240f8d9ce4b6a1e8db933b9fa56a9fb4d794"}, "94139bdc-c867-4382-a491-fa903685cfd4": {"doc_hash": "15f9c7be7fb0ef998c110c8e422ad07b2ea94f6e450098376111ff2bfc8d42db"}, "3ebc838f-d1e0-49c4-a2f1-b6aa96f14414": {"doc_hash": "740276a072be1499c392e8e46a50b1b015346464557a19cab3a4e4370b9df2c9"}, "b25244bd-4a17-4080-81c7-2a5af73e30da": {"doc_hash": "67bfc9ffaca8cdba8f7c0741c21d8051d0967246a3b619eee5f0276f7bfb4a06"}, "767f7ce0-44b8-4305-9b71-8a32da287ab2": {"doc_hash": "0483391fb31a8e5e0a1190458e31024d5330a57b76404b0efcb9ef05ac396383"}, "b67151d1-d6f4-44e3-8079-f756d45cfb4c": {"doc_hash": "2aad8c1a128aef6c499bb1d7448fd7b481f15498590765743192afe250e779dc"}, "d2ca0c3f-af02-49fa-961b-466e63a3176d": {"doc_hash": "c5651f846c0ee0cc695547176754287c138705a54af369ac9439799d7315f7c6"}, "4ae2cd3c-972e-422b-800d-460e15ced20d": {"doc_hash": "ecc6b008bed7a89e65c6660bd5ac4d86537c2b3f5509071bbbe6ee685b8d0872"}, "a09df19c-f4df-4544-bec4-72aee698731c": {"doc_hash": "3568b4a78e604ae66328f8a284166180ca8712244b03a081304ddb70dd6e02f1"}, "50dca4cc-b14e-47ea-98fe-d1653f6ec074": {"doc_hash": "688717604c1f9de82a84b09a283cc6f8a1f70b394a8e6ec663ac8993b47a99a1"}, "1931494f-d371-4df1-82f0-84d2ea03d919": {"doc_hash": "7950a8d6ed6e8e7bfe3dc20f7b882f972a85fb85e98abd70a8973317503f5aa0"}, "c17bbe33-1200-4721-8520-f876d0adb457": {"doc_hash": "2e54d9ff5c12127831dee9e5c48712e2d2b6f0b4f5f470831018114d672dab26"}, "e0a3e621-2a67-46cc-9fe6-3dfb3a8ff135": {"doc_hash": "9f8357a4f1e210d9a12f9733c308ccfcb3abc78e017be19823ef3f9265a9c662"}, "d431aa1c-8e70-4daa-ae42-91320723f4f5": {"doc_hash": "0eb12c48b2723ceae7d4b89d344adeb28304a0685b0564b02a8f63ac790731c2"}, "c6f211e0-0f9d-4b0a-9b4f-1f2d82c475f4": {"doc_hash": "8634f5c2990b997c811a5d990f0d28cd155b26676752e4d171673a5bb9d760f1"}, "c47a7c2a-3bb4-4494-9e3c-80f72ee87686": {"doc_hash": "c2df9d71f3137fb1cd0b7d9839e1d0487467a12bb1d2a3db567f1b5bf2897349"}, "60ab0e0a-f4a2-4f95-89b2-3a7aacad0db9": {"doc_hash": "57110e0863bfd60459659e5cccc0e99c9615a4295c2e79b2b2590867781fae6e"}, "7544ce3c-7874-457d-9776-144e26e5a513": {"doc_hash": "417cbfe0162710e5f853633b78df261cdca522f286b89f1856ad8a55143faf73"}, "2f50e948-a4fd-43e2-b0c5-e4218ab7250a": {"doc_hash": "ba17a02b0a7d972cfe916e762bcbe6f3f23b97f3f5c7f37e8b56431bf6c6e7d3"}, "9a6532be-06cd-4b9c-83d3-c9650834f70d": {"doc_hash": "492e73bd8baa832dc2ede16c5aac8301681b014412d414dd4c47f9bf3dc297a3"}, "9e1b81a5-1b43-4a8e-817c-ae5eab8ca694": {"doc_hash": "47770e78d81f6bf9b17487ede4de1d3aacb4977d5b9eb510b79109d34f77cc0e"}, "b1a9e740-9397-40a1-9594-f6f0241a1683": {"doc_hash": "065a8a1f98468cd359302f23b8c7462d8f15e84168faf5a818567d29d9dff009"}, "b9733cf5-0ddd-42de-ace3-947310a4fb14": {"doc_hash": "be3746e7cc15204f1e8e82d153d0bd85e3bcb2a0c199a4a5460b36a7868b61bc"}, "af7165b2-2c06-48fd-971f-588eb69ba380": {"doc_hash": "596674fce89237c7d84e9f8298628c7f231a88cf7399bafee95d82d082cf060d"}, "ea730a95-560a-44ef-933a-8e91c37e2a50": {"doc_hash": "874bda50c63d5198646894dc954f936609df831c39bdec75eeb3d64f19dad974"}, "9ab87de2-fbc9-47c8-b455-eda1baf0341a": {"doc_hash": "1c816c3ee7df064d7b2944c575fecf9167d2e4e1cdfb1c6dd500aa882fe81a2e"}, "21d7109b-89b8-49fd-934b-3b055fdbfae3": {"doc_hash": "8b8cf566e40e84cb6cb477a1e230177596fd0a6be39e4a4778b0f3b4abb58e88"}, "029032a8-c7fb-4478-adb1-d46f68484ed4": {"doc_hash": "5e40cb9c2a433372bcc7915a2d19929987b3f4c79585d770d390c72389edd6b0"}, "ee2b1074-0c5a-44e0-a28d-028a5b272fc5": {"doc_hash": "640c712981365e24485529ce3177d37f9384679a18cbcf12fc287ee2fbd761fc"}, "919c220e-7685-48cd-a141-3dc8db69bb8d": {"doc_hash": "a6abac7c8853825f8a8c0537d13e1ca5f4a9efd0709aa62c5c772e40a091178b"}, "5848da35-33bb-4c46-8fd9-3f9954d37f8e": {"doc_hash": "818b622db8cb14d9187d24c08608ce58d219a2071e5a878819213f43a1997ebc"}, "72b6d932-5027-4e91-a335-ef3501da9fa5": {"doc_hash": "711a1d4dfa0fa8f8f4e5360b5d63087ea26d3ec145e3e377e7d717332c177a6f"}, "f4e384c2-f5b0-4c84-93c0-9bbcbfa0f5b0": {"doc_hash": "5fa4e2872d6d1ba40c892b33db7ce5b533bf9679b166fef79db9a48c4e4df24c"}, "51fe871e-6ec2-4837-a652-b35b674a7f51": {"doc_hash": "46265ed3d88f2276cc97c60280929bb3e5bbdf6fe90a477d88826b058803cb9d"}, "f757476d-0bf9-4b51-a42c-47bc6bdaa407": {"doc_hash": "8b4aab40a56998ae3641406fec66fe28b52f02f78aba358bbc7e8db8c9819df8"}, "cb09eeb7-13dc-4f01-ba2b-b7b108428e5e": {"doc_hash": "5456728f10d7c15cb4ebc4a0bee73a6c7028574c078dec52558ea9c254e1dc29"}, "986eef28-a71f-4aed-9c0f-9ef72e76bd0f": {"doc_hash": "820f8d25c9d39970eab9a1256a12c392b632abddfe0eb6b48020be30ce67efe4"}, "737d3138-22c9-40c5-8814-926b5fb812f3": {"doc_hash": "b727672bbc0d77f12b070c6406ba218082f90632e98576568d504155ebda137b"}, "5b8380ab-1b08-4888-b05c-9213208ff1b0": {"doc_hash": "ded629840dacf5792056dd1d4af6e7fdddd5e56ca3a01495b379e411ba98e1db"}, "4093de1b-3cdc-4f18-b83e-669a8af42b6e": {"doc_hash": "01764c90d629d931fa43f92c564578e250f3ffb19405eec60ec89fbbfef12094"}, "602183d4-35dc-420f-90b2-6356eca9890a": {"doc_hash": "d59e7070a7a4fffe763c3480059417b50816efb3383e58a38fe5f98c3a8140c5"}, "990d2433-d43a-4cbe-ab72-b42d985ea07b": {"doc_hash": "5134a931864d4409320b959a92d2b062cff4283e2da22b09d0445739997c0455"}, "f55f5c3e-d03c-4f12-a66b-9a3b152808e1": {"doc_hash": "460e6601d07fe2d0bc7a892eb0b5ef574b3915d09be218e329fe7e6e752bbb90"}, "80fef2b3-ec36-4731-a0f6-99a83f5b59c3": {"doc_hash": "2b479089c459d74160f12084a5bbaa4cfbdbc862b5dc4b6e31e5840ffa23217a"}, "2c996bc3-3aee-426c-aa62-1a1e02782593": {"doc_hash": "ba9cc255f7ade3ccb11c1b4fd1e095b01148efc120dc33a59b8f9f38d0f2f067"}, "2c617a33-69e0-42ce-bfc9-ac0d53dc83dc": {"doc_hash": "f2fc7575135c37099c40c133bcdbed3153ca1388c2ff514f08434e1f4443e7d1"}, "f5d050ad-4e19-4162-a2fc-a0ad1dc3b596": {"doc_hash": "791c387576118f41753eaa073cbef9055ad870a3dc3a681f4ed94ac78b1eb2b2"}, "d0f4c974-e38a-4fd3-b521-55e3c4cb00e3": {"doc_hash": "75046257a2d31018a05c57a5cd1a46d38b2b1f7d4c5be4988251b6ca8efdc6f2"}, "c27eecb4-a924-4dcb-a3f1-bee4ed903bbb": {"doc_hash": "35a4b3ecf5c4f5d7099215434e8ffd7877c01701e3ee10cd5deb907c2d8ca26a"}, "dcb73c98-7e62-42bc-a609-4bc0b94950de": {"doc_hash": "d6cd56a5954c62f972bbca195bd5e3634e011d3e08a4e9a7ffa9d56727db04c4"}, "94f845ae-9ae7-4b21-b610-60d9deb4567f": {"doc_hash": "2e43ed04e3d950fb9ae289351232f41f929efd551b9762208faa30dda20c4136"}, "90fa99b1-bde8-4ece-9547-f04a2e29560d": {"doc_hash": "1f78e8bf9390e1a794815a8a28037834cf21c2ac5ca82352fbccc264a61c106b"}, "05c52de5-c3c1-4ffa-a21d-c65bdb3bf441": {"doc_hash": "46d49d609a684024869aaa647a8558702a958cd9559f4b42f5de1940fafc4b5a"}, "cc652998-77c7-49be-88b1-578a100be085": {"doc_hash": "8b76a6d509a2da5dde2a868f2792f7074fe7e1ae74c3ec6dce6533faec9049d7"}, "53b1ee23-8b0c-4e24-aa72-e5fdf2d02c2d": {"doc_hash": "6a53907b95083b61e21f29c49cfda4f67f204916e8bf7a45e68dead72287229e"}, "10afecce-3625-4507-83a6-d9fee956a9d4": {"doc_hash": "dc436a43dea823280ecac4eb36cb35d529dd978158c095c2f13bd209723ab883"}, "a17f23e2-02f4-4e7e-9fb6-4cb204daf602": {"doc_hash": "025ebcce2b99aeebf3e495a33d63a33ad27dec0185223ae1ad59ffa34eb28492"}, "92983b45-c61c-42d2-97e3-d3a38da5db37": {"doc_hash": "15ecd035441b7230f5067b1c41a88bb4ed24ca21bcb7f30ec3dbf551b862d186"}, "e52ee238-2792-41c3-9e67-e8f02fcba7c7": {"doc_hash": "bf272f72e13f71fcc329141fe0b80eca7375cd802f8f5fc78e2b1c2627343f81"}, "8f57ab49-0a4a-4d46-94cb-c97e8920e702": {"doc_hash": "1d1efa55db1cad324e4b9f53e57974c02016e59956f3951d70fedc3a479cf38e"}, "e75767b7-e639-4500-85f6-cd520f40647a": {"doc_hash": "4ff952b528603304dee7a4a305f6ff19532d1606fd0e464c872fab938d50ff4a"}, "523450c1-510d-40f3-a15c-dd4fc778f9a0": {"doc_hash": "964355b9fa6daa1de8b9f3d9330c2837d18f90db1bfc9df2321fb601ccc83dd5"}, "17ae0aa6-cb85-4a88-ad09-0c3a4bd07b44": {"doc_hash": "b0f4c2521a68f5c9913842878c2da2ee21201d0b37015d690e29e43939f16c63"}, "321e694a-e991-4684-bcfa-24eb8d245c41": {"doc_hash": "fc77f96223f636de5f8abb603a74104be7c881bfe097eb9e7495ea448e921411"}, "0ed317aa-e899-4a1e-8f27-04e3bc41be77": {"doc_hash": "a37700c2cc311409550bd77e8a90b69dbff3f8b3f4811fabf5ddbe293166f41c"}, "e749d402-f0e2-4390-b5eb-67064c15ecfa": {"doc_hash": "40d230df5e0e247d5d0eb523c863cee654d1e4398e92fd59c8c524bac56d2a11"}, "1d7ce415-6604-4995-a43a-4ee24bccf562": {"doc_hash": "b71dd9bec51017608b9930806595e19590766819a6a2c37ada878841d108bbcb"}, "fa17b2e1-0e5b-4b3b-9d9a-b8a22f146159": {"doc_hash": "cd12912fadd0b24a84301e3c33519547c942dd54600f34b2f10317a9448fea14"}, "53dbe7f9-f544-4cc4-a993-0398357ef3c4": {"doc_hash": "fbc059284a63b9a3b6b29887493fde674f77ce73b7127b793ccfbc23d86e3a44"}, "434571bf-0853-4752-8101-b070b6c7f9ae": {"doc_hash": "9a6971c33fe424f8094a70517d6892d28442a88ff5c4ae7072ea85ac5bd7e38f"}, "73388de3-854e-4f2c-b9d6-93c92508e410": {"doc_hash": "4be0688e9f3e584fe5fdbb2190a118176743a1120c2496d350fb84a7bbd9d84b"}, "af4ee144-dd6b-4874-999c-fe160eb12564": {"doc_hash": "eadfa84946e8ecd1a3ba4e8b786d89f41999f53298a3b02e098d891d4eaeffe8"}, "d73c732e-1f8f-46f7-9146-4820bb89278d": {"doc_hash": "3d65f3b1c39fe114d978c493c365c56d91d2ba8f23cde5f6d2243ca681ca40fb"}, "1d95946b-d63d-4cb7-90c7-ba8f420c706d": {"doc_hash": "bc6fcfb576165fb59c34d5665ebc0f93a439663a492c4ecfcb0589e0dac4fecc"}, "7d023df5-c0b1-478b-91d2-4b439b0f1708": {"doc_hash": "1fe5fbfd1ff721d3ab2e062446bccd79ee3bf032c610e278763a133937333121"}, "81aefaea-93ca-4574-8ade-5699321c3199": {"doc_hash": "baff9c04cbafd5555a47182aaa5363dec85e088cd9dcddbb6776cc498d17a812"}, "c1186e2d-3397-4b9f-8dc5-182fb14726bc": {"doc_hash": "83fcbdee61798f0279aa96fec1170c7d3116655c0725a9b8b8a4597130fced5f"}, "287635ec-41d8-436e-93fe-ea984371ca14": {"doc_hash": "4c18a0040383c769da3d0109b93739c3738ea07c1398d86c8c63450cc1334ee6"}, "9c211d74-d1cb-4d2d-9b9a-81fd53693b1a": {"doc_hash": "23a550ee5d56a0ac571da5a032bc9dfb7608ce304413bd5e5ac451b97fc9afca"}, "52260c23-8757-4e42-bb01-b539c48ec814": {"doc_hash": "53be0db43034ea879b2912c6fc3c14822e43d45ff08b3f43bc5a42efa14216c8"}, "92a6310d-e968-475e-b20c-690a862f92ed": {"doc_hash": "37945d919e6286619b5ffcae9a51f484b325165d0473b621b475c5c08a7f8760"}, "c916c85f-ee99-4d77-b8c7-e5410a277ce4": {"doc_hash": "d421dd284760fb45bfee757ffa6460f5120970ecf1da776c178113cc3235223c"}, "3778621a-a86b-4563-966b-13693507d78b": {"doc_hash": "bc2e53e7bf687958a384f018e585778fa9222f2b079a630b9914fa969328504f"}, "0339c43f-4026-4aec-8643-161e64410fe4": {"doc_hash": "596c06d24a81c4735919e80a3acedf0233071af1d9aab6984e0b3b0fc28bdfd8"}, "9b8f441c-5445-43d4-b380-c13b990915d7": {"doc_hash": "c1616ead9e071f0d0fc41e8b653c2ae07a037347aace56f19713c7b763ce687b"}, "0e8d7f23-9740-4191-bba5-3c47ef423529": {"doc_hash": "2beb762fa22bb7f0308b0c311e641029ff4142ae5da45a9abf2981452c71f80c"}, "ac75df57-a701-4ff5-aaa3-60259267ac6d": {"doc_hash": "b919e028d7a74464acafc45bfcb21747853f67f16e2f8e782745fe8d05d385ef"}, "c41120c3-1c0b-4f23-9cc9-f77ffca0c948": {"doc_hash": "cec02f706921e50976e0552f2f46aacf5ddc6c170f39673765b4fa01d638002b"}, "f9c5373e-65a4-4004-b5f4-531f514338c0": {"doc_hash": "0cb98eea7ba74a816c4154ee717fa772b6a4d04dd6adbc1dfb81179f30884c22"}, "40f18496-5090-4d41-a7df-8998b620b53b": {"doc_hash": "8307c2e0d8099c876b6b95c0e257c42304d5364d5d395a23d36b373920419769"}, "d65b417f-6785-49b9-8f57-097ee233edef": {"doc_hash": "a9747a04efb7bd2800bc12e6fe5068e5bcb592c9729049440b3af50a8e485cc7"}, "60244075-a856-4e9f-8c67-d3c4fb4f665c": {"doc_hash": "353e66643c15c690c1aa502b1f7087eae4ee182974c405505f684d23ced77904"}, "6553cad4-099b-44a7-972d-363dc4433020": {"doc_hash": "2eed90965e743a1e4ba234edd49e6f5e3df129e8c27511b4edf25f79cb3d786b"}, "5d4d00b2-7ac7-4ea9-bcc0-9950258f4883": {"doc_hash": "98c0533d46db0de5bb882c2f3365256da27a1630dcd743f7048a3110abb2c8da"}, "13dce4f4-5a0e-4c38-833b-fae01f2f8466": {"doc_hash": "174e98c7362ed91a323af0242dd2c4f9ee1d6b5b71bf61490db642cc463ea34d"}, "459be725-b836-41c4-a46e-4e06e145eafe": {"doc_hash": "f4bbfbd5dd68535a81ec96d57f4ceb6cd3ad9eb794bc2d6beaf81825711c3ba9"}, "e7e98414-23b7-4308-b98b-3a81c2a03dd5": {"doc_hash": "aa6ed856e14cad816b19846de2959e1bf085d30cf4434515c14cbcfc032c8500"}, "5e2393e7-e018-4140-94f0-83b5a468225e": {"doc_hash": "1c76669cda7de48f073d669920cdd45e6d48f6a9038766fc0bdc54cda912bb27"}, "c05fed33-e00f-484b-b565-377ffd5b153f": {"doc_hash": "9a42bc58b2c7bfb8c390d5f14345ba07699652afb887ea62fdab90baaa501163"}, "af61b768-cc92-4f1c-9535-fb5bb3ab3107": {"doc_hash": "4d99ffcab5d599f53b3f86c34e71eb8914734bd4a506a10c550f0f2e5f8d2d1f"}, "56cbb6db-0771-4812-825e-198a63625322": {"doc_hash": "85ea04303313fb6a203ecef08d0ac75e6e50eb8a44f8dd5bf8091772b3565956"}, "25d1d366-8544-4b12-bcc1-adbe9a428023": {"doc_hash": "63368bc3387f13366124cf7f3a1552caaac311bd8747208c67e77dc5599ad151"}, "dc4e40d6-a244-4fe2-9048-aeb4d4feae8b": {"doc_hash": "20e89ffb4fb7768a56eacdb0f27e0accda59c5c2aa44531f71eb142b7f5b5b8e"}, "cb89d966-59ae-4dd8-a35d-f2538499a397": {"doc_hash": "f5c43fd491a747771d228551fb5b278c4e6599e523dd6f908224188e4a88cc05"}, "c8ee4965-07c7-4bdb-8d31-d7630c1399b1": {"doc_hash": "9f92e250453a465c99de2e9758c6a18107fb95a8b498b8d66e3eb53af0d4baed"}, "5a2dfb51-e907-486d-b1ae-7b069f5248ac": {"doc_hash": "21b3b5def1b975d8d32f2ebd8df35d7221ea720126dc8a83669c8e7ec0f69268"}, "0a027264-3433-47e2-9e87-5988d43b6bad": {"doc_hash": "4d8ee08760196b6711b4c9355b666edb681669a74ae185cc3341b375082478ce"}, "60969f08-e885-47d4-87b4-299b5b6eeb88": {"doc_hash": "909c6607e61969b9be9cfe3d5c05f8416a79f555e54bae64461500dd5d2c0a3a"}, "abe9725e-d4cc-426d-9701-f9165afb2385": {"doc_hash": "61c41e4dd1665c43995ecc3ab87a47c85cc3debff2b4b320d58cc2744e45c593"}, "82429bda-c8e0-479a-9f37-22e6fa37882a": {"doc_hash": "76819c8cf4444a263b5c1ac7b88ffaf3b192c55a27e1d4f54874ebd8501c92c8"}, "54e224f0-3c80-4bd2-9084-49271f5e021c": {"doc_hash": "041a9dbb3e5639c9a274956b26361042ab21cd3b71ea57b6b44b61b71455ae14"}, "5285a6c0-d572-4bd3-8d46-267a0266ee7f": {"doc_hash": "723cc9d72dedfaa99146d1a9e99f581f6e558b2aff212f0a321b2a213144c1f6"}, "14c13d83-48df-4eff-8eff-0785b57eda96": {"doc_hash": "aaccafcb26485ab6936ff9c89a17589572be9282d2a4f66c62afdc0a95400db7"}, "dac36450-5f05-4548-af08-418037cab426": {"doc_hash": "3fb915a988af66ffe25908ad233c3622d594e548090d868f13166582b64ab54d"}, "ef1aa146-846d-47e5-90b7-44a2e61cb4db": {"doc_hash": "8392704097a8e575284b7c24555498f1b7c192186df88f9b7bf49b8bd05c019b"}, "c6a26695-af0b-4ee1-8472-02518911b51b": {"doc_hash": "2249ffaa93cdbed8e505c8f3d7ad355ca140cff55bbaad7edf8c8376c0f50c82"}, "4d131bb2-3a7b-46c6-945c-eae54ecf85de": {"doc_hash": "90154e51e31cbed853a2a7b691be4f10e304ca3c703fe53cd86e593363fd8116"}, "7e456279-80be-4544-ba7a-1e4e487bd836": {"doc_hash": "922f24d3eb7f55ab05232f7b089a842bbc17f0b2c4e462712d7e98215f6d6b7d"}, "4bf83302-492d-47a5-aabd-ae033fdadfce": {"doc_hash": "3c950b9189d38e81a40352a6336b7718aec150b8a17c6bf74ee5b68ea1b8b49d"}, "d60d19e5-0d02-4f11-ab43-dfde5aa2ea53": {"doc_hash": "348224ec59511ed0b6578b3b3f02504029e7ebee4086f65c952d4c6aeccfe98b"}, "20108313-1141-4a3a-a5f1-03614ecb7358": {"doc_hash": "46c37d0f2b08ae0537a44e43b385b1aff1b26f224eb56333776da3f16b81ade4"}, "c0b22d21-8a86-47d1-a5bf-ad3c902ab8e3": {"doc_hash": "2042652ebcb4b6d31468341502ad270781978b6de74bd532863822122243e37a"}, "84ea4b0e-914d-4385-9d51-3c1534e2b746": {"doc_hash": "f56674317f69c52391c38cdc59ee7c39512e9aa62f23396d59bc98974329bc76"}, "a331c541-af37-4df5-b11c-ac9c04277608": {"doc_hash": "162dcf33ca42904cf7425c93c3d8b3c9ec5ecd98d15bad882d65c15e3edb2a20"}, "7b608ee9-b540-47b0-a7ed-abdcf4932ab9": {"doc_hash": "c3d9fc947a5d7df39c860b61fb5f441a4e9b7804382c6f8d7bef61336dcfcf4b"}, "eec00015-75a7-467b-8806-f6de9dff3bfd": {"doc_hash": "89b61e22c50a040f1094988b7af7955caeffad1f44241f21ed94541dba3532ba"}, "77a23b09-8130-42b8-8401-2fd16a0e5fdd": {"doc_hash": "6c836d4e138f35848d5bc9be9cc8b7c9b685e5870702018aba272680489e7c62"}, "6b458660-b582-4e63-b461-3bb2f53a5281": {"doc_hash": "b6ff0ede58e1548dc2efe34e6cf7e8d0b3cab71056bc952bf970bf1be8cfdccf"}, "98d8d2b0-f15c-4957-bd3d-a394496b2209": {"doc_hash": "144a4a3e0bbf433235bb624dfc412f05670314aabf8a62a3da1d5895748c8238"}, "214c155e-49f0-4476-a356-f2716d035307": {"doc_hash": "af0f7e046de47bb4a1e7bc025697616feb51be3dd3061589b55fa7973fc8fcd0"}, "68df540e-eabd-44ae-9a65-78dbaeb6eab4": {"doc_hash": "42aa43755e6a0425018dd35995df0cb2597299e20623144b7f5329f064899fa9"}, "2e191071-500e-439d-8d4a-3c439202f9a5": {"doc_hash": "3023961a67a78baa46369c3fef90ad5741214505ffe5eea6216f83bd78ff884a"}, "2d2be69b-4ada-4e90-ab5e-9547bc2e76d2": {"doc_hash": "46793b7c2b3efeb3fc5d4b477856cfa390db546d1ebda5ab589b4578c75ddaeb"}, "8b02826c-3a69-47d5-8d90-7a85312bb61c": {"doc_hash": "3a26e588272f2fe1228903f4f7ad76514e4fca8e3c456347e8e5aa99ad83df46"}, "5d5ea859-3e92-4f0a-ad3d-a74e5567e5b0": {"doc_hash": "94dde7b7c3d3b51eb9fa5c496ac263bc966ce21e15f7231799030f36de11f859"}, "670bbf4a-283b-4dfb-b616-3d078fe1b023": {"doc_hash": "2953a1dbba004a5dcbaac4453804af9ab8e17f0ffd7e9eb21047c1e51608738c"}, "a2bb51a4-ddd1-41b2-872d-ccb10b3dba41": {"doc_hash": "420126cf36d4ee538d402ddfb2e21459a17d698fae9594edc7981ba5c3e7beae"}, "b20967fe-1274-4e27-83b4-d8bbdba6e09a": {"doc_hash": "65493298b0dc396c115ffdd15bff7e5d0c82206adf583f2f9909d7e9d8f43a3c"}, "14e9e442-3ba2-49c1-bf31-b1a0706f952f": {"doc_hash": "8de0e416d1e5b6cc87777bf549625d231b83875897ac4dc6ae676ddf9a717abf"}, "00c6fed7-0a02-4a22-ab06-2a22e2ea32f9": {"doc_hash": "0466f539b144d55517e6327dbfa5ac41e827aadb5f44e95f2c81a3e681ab24a9"}, "8912c0e6-624c-4f43-9652-ac58b0e533bd": {"doc_hash": "7d6bbba3ecb6ac6d277205c4e9bed0e77ce2f75691e9042f42a278b13714ba8f"}, "e653ad23-6bf7-4e88-9fe6-108b90b4c9d3": {"doc_hash": "5b8fcaf286e22fdea60fd5e2da27280aa9c70d463d344c65fa5165d303c7cdbf"}, "0f70974c-08c3-4554-af19-8b870cff9e11": {"doc_hash": "18028883ac425fc7e1ca1fc551b151625e93a6a3d72def7c0da165ebdbee123a"}, "f8faa598-1d19-435c-95e1-ecd15be9f5a4": {"doc_hash": "f9e4d676253deda9c1355f984bbb778227e1fbbf60977777cc3a56c77cc1e666"}, "3d4fec62-7bf7-4026-a564-6476782b2c96": {"doc_hash": "ab3de3bd69b2224a969a5025e42ca7f4538aef0f2921f199896ee7a4ae2fd884"}, "fff21f70-85ff-4b02-8a2f-57045caa7af8": {"doc_hash": "3933b578f0dcb1802d48d5215cc30d53c7dc221203414e299715333cb7c70395"}, "7972099b-d1cb-4c2e-b93d-42237ac77784": {"doc_hash": "b7f37c83e94a67fb61b7ff40e504660474af4f03156665bb4c6d32625b494e77"}, "bd49c06a-9c55-4ebb-ba7f-be96dc08c4c3": {"doc_hash": "bf9cd2d1681951d2f5ad67cb37b26731e2a8793fcc835d6a45dcca35c5500e46"}, "20d2d2aa-0ea4-463e-b729-34a2aad0fe1b": {"doc_hash": "f39bb75d2faa9ac463661096ce3c5bde09e083f18aefb6bdb2d27b3445080019"}, "becec475-812f-4f9f-bc4d-472d13dd6123": {"doc_hash": "52e6030e7fa27408dabb7d5a81914b5beffb9cfe04cb2c3123c54fb417a02429"}, "ecd46053-e3f1-4493-8de3-f6b437a8e188": {"doc_hash": "2755b66b47ae8bb3ff6348735a4351559362b67715bfdee70a7d9b26cfe1e3d1"}, "792994ae-b0fb-4f88-8752-0dc43b03bfe4": {"doc_hash": "388c0d5130a77c51f43ab2904ea1d0101edcfa5777dddb65967f5e4c9cf03308"}, "52821e6a-c922-4d20-9fe4-872de3241e3f": {"doc_hash": "f959489faad4e7016ff10148c8830a6ecba52a61485d02d16c54090d679ee6a3"}, "fecb8cb7-09ce-4d21-b160-465a5536dfdb": {"doc_hash": "54e41fcc2336b03a9aec6c469ffceaa57cbfea1b30a9ebcc68dddfcbc3e7c3ce"}, "a96e638b-6971-4d64-976e-6a44ce20f7ae": {"doc_hash": "98ef7ba0443c1bf8e0411b0c1bc332fb8b8a214c760eccd32eb15e930de78561"}, "6355056a-b513-43c0-933a-a64b07a06d45": {"doc_hash": "1e4945a4815c12cba36ec1046a029f01ba7ac8ef166aa779ef9b517a18b21537"}, "fd2346c0-b51a-4e83-aee8-9a274c889e4e": {"doc_hash": "11bbcf595935f0071aacf171fd47e477b39d9abb5adf1eeac99066f8197912af"}, "7bb2cc3a-d91e-49d1-aeed-30b6ba3946d2": {"doc_hash": "3a8d5c2b87e568055f2b2334547c61462b6e9080da32d9fbfe6294204e6e0c34"}, "12606390-1b87-4fe5-b1a9-03913afaddc2": {"doc_hash": "e5a70885bdf3f86d3857b9878a032cee7e77c87b59ba4a0ad966042b2961db27"}, "da303fc4-2884-46b7-a71b-472eb1a1a710": {"doc_hash": "3ae2e987fccb141714621e694962a900f504ff2c9fe05511fa15617ff9190725"}, "1e12b747-3f0c-4549-aeb2-d5b7c356598d": {"doc_hash": "dcd25f0de5193bc0581a777ad6131940b87995bd786c04565932910856b47b2b"}, "d7abdfca-0b3f-4b5e-af63-f73a7e2d8c69": {"doc_hash": "bdd9ad6f77132f666ac1aec95f0a7316129aa4cc9fe2c1b6c00a91c3a1c66087"}, "07cb817a-97ac-479b-b7cd-f576870db28d": {"doc_hash": "73ef76c5405d765793dd674dc064471d442b5af76a3f2cc2c9d4061c637a4c95"}, "597e862f-37cc-4000-b2df-4b6bd52d4dc0": {"doc_hash": "e00266dfc8f27fd76b30b2b112e7f6ef2336262efcd8fda95708ef78aa7b76eb"}, "bcb58c89-afcd-4da4-a800-1d64bf1dde98": {"doc_hash": "d75487d19d0d9738e7ab060d80a5a1e47021c3f5bb3fd62a57eec593b931fa72"}, "18befa48-e6ca-4ae4-b08a-cc542b05e467": {"doc_hash": "552d68a908dd1f2013051d0fa2a1b6babc54cff8f4cc61a74c37ecdb884cff08"}, "0344de18-80c6-4863-9e49-5fd173711df4": {"doc_hash": "c7136a8ae685f96b159f746866f3d8e17553857ff2d22a6146497d599fafe218"}, "f4a34281-36db-4276-a05d-8e3334e4be2b": {"doc_hash": "e6cd2ee303414f9c290448bab101a3b3591ff377ee81bfaaceadf4589db0623b"}, "1f10c0d4-df56-4482-be45-f706961b42d5": {"doc_hash": "b390c6a5328fe758292d9b5d6c9ae0ffc0bc74c1312a8885de469c07054e3054"}, "493e6a7d-088b-4892-8bab-10a13462b92c": {"doc_hash": "5ed2013c46651945831fa60b5b9c3b4cb0d287c64dca7ef576e72fcb881d8479"}, "b2ef41ec-a7dc-4e17-81f7-6b0a72664ed7": {"doc_hash": "734f589aeb619fb296fba40fa11b89f7458c2d0ed917faa8362aa73122da471b"}, "6b7a1b02-538a-4df2-8207-32d167042ea1": {"doc_hash": "b99ce9b3c1fe7eb0663860b26324f45699c302d9ef081557c51049d29c7890ee"}, "1186a45a-8103-4cea-9d98-6a1fc4c304b9": {"doc_hash": "2a833f300c147485704d78688a34ffe584a6370840e654497f72a8e04e967f54"}, "4c40406a-069f-48db-8ee5-adb03ee42bca": {"doc_hash": "bb483d413598f505a61a5bc469f5d4f4461ac0842535481b84e694ea9202bc2c"}, "aacaf8c6-37c1-4aed-9725-5a09eddee5fd": {"doc_hash": "f876c470cf4f0da68a49ee47d48875e6f9afb9dcb2e9a1d39d9546d7a476d4c9"}, "2daa7317-af33-468f-99a1-dfc61f8f03fb": {"doc_hash": "3aeb6ac7debb325256a195a2c419439fbf8933d0f180096f2e0646fa6a1dfadb"}, "6f8e84c0-c369-4938-ab0c-8d7113633710": {"doc_hash": "b4db8716cc3c631ae262264d10ea431abf78872f49c78fd39b2273d1cc0c335d"}, "f392f1d2-fa9e-4f96-bdf5-95a978d8d461": {"doc_hash": "ef78f98289fe4646f3043747c2f4833908f30f15a3986f0c0504d199fb8f2c9f"}, "71cedad1-8bb6-4eb7-b829-6019b5930533": {"doc_hash": "fc5a762a8d4130ee207ea06fbb4d08afc47a49e27c26504f5489d6b2ea1a20cf"}, "d5097fce-5eb6-476e-a268-d1947633d02e": {"doc_hash": "3f8c005d59a58dc41d5df44bdf1ec32dfe08fd6eebaf8186090283201946a0b7"}, "5fc82b6e-8c20-47c7-ba85-5db4fcd5dc99": {"doc_hash": "8d18ed59292d157cb040e6d09fcc26c1c02aee6dc87a45464dd05349f1a48861"}, "db5a0812-25bf-43e2-b40c-33f557a50f2a": {"doc_hash": "d139239ba3033c42ad1b3b8deaf2e5e5d8d50b58700b6269b4ffcdaf4e990156"}, "1c3b5c0e-b2e6-4d09-9b4a-4ef3bd5af088": {"doc_hash": "0d6896cc2a197f9d01f5ca82caa2eff61ec9898906e1bbfe7f3742dbe2286e66"}, "5d6e5a9c-271c-49ce-ab9a-fddc20ed5e62": {"doc_hash": "b88ac7747ec0dc7178b6adfa4e4f4c8be660bce99222f528f7526e146a5064da", "ref_doc_id": "629f60a1-f37d-45e2-a7c9-d84d66a80152"}, "6fa431a6-8ebd-4f08-827e-2d202a04ff0e": {"doc_hash": "47bc244cf2737d3e577715634c9d05c3788abb59c7b15aa4e4c24a9b33573e01", "ref_doc_id": "0a44df04-7921-4620-b824-69101bc14674"}, "a3eafd15-e127-49d6-89d6-f631c5f78bac": {"doc_hash": "5457a8e3074efb04928bd4e47038a1a2388ad564dfdc05cf36e6a37dbcbcc1fa", "ref_doc_id": "994f125a-7045-404c-821b-dc76ffe0d2ad"}, "278ae817-e588-4a02-8320-81c9c79cf502": {"doc_hash": "475b08c524c4b4fedac47ad8e96f7f70488367155021bc59b67a4dd284300627", "ref_doc_id": "6fd1610d-3ac2-4bbd-98cd-40f1d7b33f19"}, "e4ec6e91-8366-4765-a2b7-3b125ccc4265": {"doc_hash": "0497c095f4a120b7bd74b6b31a6553f0f4165f91be89b9768f7dacceb3f7eb95", "ref_doc_id": "e753f969-540b-4f08-924f-c72d4bca31d2"}, "f07a1b6c-bd82-4485-a0ed-a33dc1fb549e": {"doc_hash": "d29638b2d6a21198223677463fb88e60a3a488aad88ba53727173c32ba517d77", "ref_doc_id": "e79d47b7-78cc-4bb7-b114-605a6bca14e0"}, "9e5261d5-a5b4-4341-adce-b61575266a9d": {"doc_hash": "3d6d5d58ab72202754fded3217a1411f0b18c1a45640a0b1cf0f68b8351d4f81", "ref_doc_id": "f1d7e2a7-a732-4805-ad02-e0ed1173a52d"}, "c119bb47-5d6c-452f-b457-449038172449": {"doc_hash": "905d422aa003604787fa490e4a8f320d93371685725789496368e763af968358", "ref_doc_id": "242809b8-d85d-4fc9-b3c4-0995e1c77fe9"}, "204c3d99-619a-4861-835f-b3f294f92f17": {"doc_hash": "9be9e8c88c57cb84a4e4cdf82e3c0f13cf87c95ab8875622f3c0955817fbb209", "ref_doc_id": "b718dbba-4346-417d-8362-4ab55b0a1d65"}, "60bd1459-baf5-463d-accb-159ed54802d4": {"doc_hash": "7058db9e2e0cd16d4a1cafc783a012406e884312ca9959614f3b6a632bf440fa", "ref_doc_id": "91f8b85c-b71e-4bb5-8a4d-0061d53b1f2c"}, "49190e58-19c7-4abb-afb1-3b3ae330d722": {"doc_hash": "37963d3c535fdc01f019212af69f738fba40b5e61d9597630cdf85c3aabc18d1", "ref_doc_id": "8aed8f3d-2b11-485f-9d76-e7af0668c4eb"}, "9c8e5b78-c728-479b-b17d-79da7138ec06": {"doc_hash": "bcd3c12327cf7ed5c2d7856174ca97903c40243f81557ac231f1da3feeecef0e", "ref_doc_id": "388409aa-f003-4090-8b99-c0dde374275e"}, "e2b761b1-8ed3-4833-9dc0-b5c240b12c92": {"doc_hash": "df1d5e9786be57a4c80de3b1dd0b5eaf0cccef92ea18e55510e8fe280dc92b7b", "ref_doc_id": "e2d923a0-2ae0-40de-901e-d26d417024dd"}, "501ce357-7736-4134-8792-e882cbe518b4": {"doc_hash": "44d5787eaeb3e0496853211c0c7bb608459de9f4cbbf61e08959e8bc02e76051", "ref_doc_id": "b85c2d9e-6d2f-44da-82ac-981da3d7d9b6"}, "2e008efc-dfa6-4d65-ac60-ba50fa003b3d": {"doc_hash": "8f81ae776d6ff50db0e2d7517515660a7d18ce0f146df453a4adc6f76f02ef5e", "ref_doc_id": "ff696c81-945f-4c5d-bce4-0dd189b445c4"}, "23f90950-cd67-4ee9-b3a9-2237c8ff02aa": {"doc_hash": "b7e6dd078733b4f53ab15dd0e6b698dd22fa948b8b79b75c573263977f139ce3", "ref_doc_id": "b01f9da2-c494-4419-8198-5d604e30bb2d"}, "4fb1472d-121c-4190-9a9b-5a6a20e24a16": {"doc_hash": "d660ffa207d90e5a42feb4937bcaa10d44ec0e9e3d2d8a135d04740ba1c4c834", "ref_doc_id": "1a8cfaba-79d6-4b2c-87a1-fd12719ac2a3"}, "cc5012a3-f0e2-47fe-ae41-7c66f8b939e1": {"doc_hash": "7b3811f35247a2e703d7cafc6692df055d73fcb88bf4914fca5b9bad758dc28a", "ref_doc_id": "38a957ac-019f-4fe9-a138-c68f13df5f20"}, "b520e438-0065-4259-acad-57a238341bf5": {"doc_hash": "89c6ffc35cd031da577b2852c43cd66b04f0b468b073867e4f18d96fb24119cd", "ref_doc_id": "6157ea44-8759-4e1f-8f5e-03e7522cf4eb"}, "19700db9-af11-4d80-80bc-d7b26f6f33ef": {"doc_hash": "91be0ae64119018c8c9e1b36c5e09bc63f5b0df760890f92b75c71fc2de1b443", "ref_doc_id": "3495425c-5714-47d8-891a-4bfe10fa6362"}, "0e50a100-825c-47b3-b0c1-1587e58c0981": {"doc_hash": "5254004e9763fed57c216315bb84a82dc17c61d5a7030f8ac6c7f76e9a9b0451", "ref_doc_id": "8762bcf9-9473-4885-96c7-2be3eaf9c967"}, "a8a28c92-984c-4481-b1c6-20abe6fff303": {"doc_hash": "8b189bec3b95799e8b232e4a5b4e4f049642d9818fc619ff8d20cdc7c515cd09", "ref_doc_id": "28d7bb6b-7f9c-492b-a42b-db882f445dae"}, "f21ff536-0a13-44c4-a834-4cf7bf4730ac": {"doc_hash": "fdc1388e805bcfc4c95f9311f38c504551c31af110c6cce4eff939639780d969", "ref_doc_id": "4a5b617e-66c0-481d-861c-66e8af2e915d"}, "f18953fb-eba5-4406-a7cd-3fee361422b9": {"doc_hash": "ac8eff047c3d897aedf99a09c934402594a666988ac9b43200dbcf23d95da3a1", "ref_doc_id": "28d33d61-805c-4010-a3a0-31a7e4ee26ed"}, "fd5991fb-494f-4fc5-968e-b7b4cacf9905": {"doc_hash": "32189965ad0538a64c8728c6c86c6245e75c29c893eb1bbd727e08fd86c2d7b2", "ref_doc_id": "cf52630a-d5c7-4b29-b984-57c36e62076c"}, "11507109-bad0-4d43-be2e-17433d92825d": {"doc_hash": "1538f5111a3242bc7bb77c3463997044646e7d92db6d61d44c799bf72dd67a52", "ref_doc_id": "b6b59816-3770-4d69-a1e4-e5da08e3c866"}, "fa4bba8f-94c0-4935-8712-6757b9dfd1d7": {"doc_hash": "22c30c90aff88ac84caa12e2afcaf4a7d4ff5f878e1c6e885b11f44274ab8576", "ref_doc_id": "1d324d5a-cff7-4cfb-943e-93d4e6a26302"}, "71ab5fd4-359d-45da-80dc-b98a68564616": {"doc_hash": "4128dadcab5128c715c4f7a744923d063e33e20c3a60f8084bc47744ac1afe9a", "ref_doc_id": "ad4ee837-15a5-40e0-b683-3fa32b023f89"}, "f01705c6-83be-4f20-8b90-a321cf98c9d8": {"doc_hash": "faad56b61ba43eca7c412d115f6243e6f81a63b58d4210091b8778192eabe20f", "ref_doc_id": "9738033e-e061-48d5-90f3-709abb0c38ee"}, "2f297048-8dc9-45d0-b699-c611fbd70cf1": {"doc_hash": "5253ae625a8f4b54eac32fb4fbeb8a3467d0ac3da68bda1a9acf89c77d32039a", "ref_doc_id": "5e00bb1b-8aa2-4d70-8526-d96b960536c9"}, "d9d7c3a3-87a3-4619-81a5-d7915b67cafa": {"doc_hash": "081c95fd854285e95f2d24f1ed7099361f21456252bfc6baa2998eeed5f8a8be", "ref_doc_id": "350dad45-2353-44c4-9f00-164cca9b0adf"}, "4d4c3e34-bb4c-4230-ae38-aceb3a1be124": {"doc_hash": "782fdd8ff3bdc0ff839324cd37735479212d970da11b7f0cbfd6672b571d76cf", "ref_doc_id": "89343d67-09db-4f1f-9ae9-d43b48307ea8"}, "a5bfdc05-5e01-44e1-8dd2-74710cf659fa": {"doc_hash": "4b0619ece2fcb7233f967c9482a8abd05d675b89cbd433c69178ca81ca4b0458", "ref_doc_id": "f341a2ef-a1f7-4239-9524-77d0c50b5d6f"}, "01f09f93-c4d9-43a6-a79d-557e13ba95ab": {"doc_hash": "3f6a3e4f9c5314e3debd53c58938d4d6d244914f2877445743e2fa70ea843c49", "ref_doc_id": "a9a6cac3-58b7-4df0-a1de-5fee6cef8053"}, "327b254a-2e38-4396-8cf2-7496721d5f62": {"doc_hash": "763335eb90a068a8336b1d60dd3351700a96fbbece08c3554b9b549472cee505", "ref_doc_id": "e5cbc491-0678-48b8-b5cc-a316ac6334b0"}, "df4c06a9-7255-4bce-90d0-e1b462aaa0d1": {"doc_hash": "e8b254da0a1b9b872e6d3d607ea6637b7ccd74b37149a39c6c8dfe52f31349b3", "ref_doc_id": "378ff420-6be7-47cc-8798-4026aaab998a"}, "e9a25836-82c0-464d-aa8c-9270f2dd7b8d": {"doc_hash": "4ed753384198a504847a473b565c1ae7acfe54c2a0e423542f8333b2e35d37ad", "ref_doc_id": "1643a85e-7463-425e-84c9-96535274e302"}, "17ed6b7f-f8f8-4e2d-98d8-dcc61d2830fa": {"doc_hash": "096aab19a452ff29719a3f48b541ef4c978058d5c04ec1669c5bee61400e4b6f", "ref_doc_id": "62cfd6e9-3382-4e50-bc3d-f199bfc81621"}, "ea60d068-2080-4b88-9375-6fc8e79b1fac": {"doc_hash": "49ef1bee2ea14deb4cbfa45b7b2db0458f41195d1b78441a0a83cc241aaf6ffb", "ref_doc_id": "ab53415b-088d-42a5-82e1-1cca55ce7de8"}, "a35bb5f6-02a6-44ca-907f-999465778383": {"doc_hash": "8a85bcce43c5f2b265863384dcc326e59523a88f64d0f22b52e1cde0f2909b9b", "ref_doc_id": "7550842d-33b0-40c1-8ba7-c3e2ebdb933a"}, "5f7834ab-d273-4596-a673-a4069e721c68": {"doc_hash": "c4f7e5a9dbb1e969546c4957459f91dbe6e6064d8248ebbf188a1dbbf531fe28", "ref_doc_id": "1ee339c3-623c-4513-8dc7-66d228624a00"}, "2c022f5a-d508-4ac5-84d1-452cbef2f54e": {"doc_hash": "44a32b02655aca19f49158b24dc725b5c8fccd7286d19db3830e3734a0348f4e", "ref_doc_id": "5f7d0cb2-972f-4648-9f12-d02878482c4d"}, "2596b1c0-af72-4317-9543-89ff7ef42cd7": {"doc_hash": "898448cfd5401095275e205868ae85a1ec7b5f010a264f1f40f354d13e8907e5", "ref_doc_id": "4aedbd18-9196-4cc0-bdc1-afdd02995c73"}, "bd652199-b589-442b-91bc-a4359b65f707": {"doc_hash": "e1cf8826c284b83249f013a8c1f911af0801db7e2a7bba84fa46d41abe27e2fd", "ref_doc_id": "46ce888b-17d2-464c-8ac7-f0fb720b929a"}, "ab316739-0810-4d9d-8941-8f92930ad56d": {"doc_hash": "e1e61e8240b4062638e2e41db22aeb1a63ee1bc33fbe7e80636558f95f9d0303", "ref_doc_id": "ceaa6c69-4e31-45fd-9610-e8e962d55c4f"}, "48eed796-ecdf-45e0-a4f7-bf8c059ac219": {"doc_hash": "a908f9177ce2462fa234051dd8d6d92d01d6f24c027fe6ba3a7ac8ab6a9ccebf", "ref_doc_id": "e20bb027-906b-4ce8-9e38-6e15e0d83105"}, "44b800f5-1ffa-4fa6-87a4-d8ed50f3d61f": {"doc_hash": "3bcaf83ce3b30ea3dd575d3005459330cd96db0e9ed48ea20ff0f6fd9b65ebe0", "ref_doc_id": "7c06bb48-f661-44c3-85dd-ca1fa62e24a6"}, "5dc4764b-a806-4647-b7d6-48c6ac1a4f34": {"doc_hash": "8f7029cd4c486c1b578c8adcd12bab164d1b2a9a23acf866ee3609a8e59e0fd2", "ref_doc_id": "5ce3f1ba-5adc-49b9-97a3-b024b79ea91a"}, "8a0fb68a-fb31-498d-a6ba-9e58ebd00de1": {"doc_hash": "602337e4f1e3353ef5f98d632ecc81ca2dd4473ba011d3dec3533b8ca6d8658b", "ref_doc_id": "b463850d-22f6-4d94-8448-0509305ef7dc"}, "bd435443-63e3-4c10-8f37-45491f9ccd79": {"doc_hash": "796ca5bfa4cd44d5569f3619eb69462ee902c17684c0828362f01ea082acc3c8", "ref_doc_id": "82a92e26-8841-421e-b27c-b8f9ae666284"}, "af123190-4f37-4fa3-80c2-0f82da44d1ff": {"doc_hash": "49c88b4267bc3aeb83cfff2554c431f0f3df37ce801dbcc4b7d4fce3956bfc58", "ref_doc_id": "f08c4ce9-910a-49a3-be9c-26ef3374fb4a"}, "5c2e04ab-2667-4163-8233-ebd3eb51436d": {"doc_hash": "9edf17da28c8111e8c91608cdda92a49b6037b0d677706fb36320bb9b46ba61d", "ref_doc_id": "4b50bda4-facd-4247-870e-d56cf27c5536"}, "0b381fea-f785-4bba-8354-6f6eb4d37330": {"doc_hash": "22d50b6422876db0e06456a2fefae6def1d1341343f8c194c33847fba22f06b3", "ref_doc_id": "528b80c6-c307-46fb-b541-d277465f5409"}, "f30c2c4a-bb69-4948-a647-f7fc073de20b": {"doc_hash": "5b3b8905eb06bc559e8de8ca555d1d3af0a5f2440dd04e8469047d03678aeacc", "ref_doc_id": "a7345415-6734-43db-93a1-81d9e4acf434"}, "4fd72546-0d79-49ea-b2cb-6857bba9a812": {"doc_hash": "b8ec089d6f10f7527457d8743fa1d3bde7d1f2682a8a57355d8eb9ccc04390a7", "ref_doc_id": "1a53cc2f-980f-4dc5-99d6-8533bb450753"}, "52acc970-4701-46e8-8428-f9bcf250041c": {"doc_hash": "f71bc8fec2de50e5ecaa34852a7d19f8ce967ee94bc124db7e44ac3314686644", "ref_doc_id": "ef8a6ebb-70c4-409c-8479-e327a494e3c7"}, "ca031c89-d67a-43be-b884-cd3285c3a72f": {"doc_hash": "5f1d0642e68d0bcf1cc35ccec9d80100ed6eb59bf18434616933d5d4d6f49e80", "ref_doc_id": "6842edef-b877-4756-8790-9ec5c3b3720a"}, "1ee6a791-61e7-4fef-8e60-4e98f5f3542c": {"doc_hash": "620044d6bd29484496aef3b83e502e402553d0a454d506af92ad72728c1ec10d", "ref_doc_id": "e5471883-542f-4eff-8cb0-1310aecaf2b1"}, "4cacb3c3-99d1-4c3d-bfa9-c85e8f4f0f31": {"doc_hash": "d5eba1ba50cc129cae8ac144b5c920604fc938b7702dd050108d76f827a7c4d4", "ref_doc_id": "dc517f41-dafa-44d7-b82c-17a26d138a11"}, "4b140f54-0357-491e-af13-a030d6c6446c": {"doc_hash": "94b9420c1358b7906511c875b4febc7c2107a59dff2e3fa55e98698905b8bff4", "ref_doc_id": "66328e89-b0fd-4f94-92ad-6c665df528ab"}, "4bb6380c-8b4f-4712-92aa-e3985f67b239": {"doc_hash": "317540c3f3059562750690d89224be9c7c7ec73069e4df1396cd4f991530ef36", "ref_doc_id": "84ecf00c-7e22-4786-9806-62847f1b8d9c"}, "3684d2b2-528b-4593-bbeb-a444d2bae36a": {"doc_hash": "dfeec3256f755484e4d5028ac4d7ed45071cd384a28617717df38f899b210a11", "ref_doc_id": "435b278e-ed20-4580-bb2c-cc745ad35184"}, "fbb19643-b3c3-4673-90b4-468f89b4da6e": {"doc_hash": "dc105050ee2e5b855cedfae31a0338659c430b9148d0fe7cfc2e10a885dc0f6a", "ref_doc_id": "8fb47794-89f0-47ab-83d6-f62107bb0020"}, "c9096daf-5b8e-461b-8a54-0fd21b3ccf56": {"doc_hash": "1eb9715d37c4d24fba60e23c83a07990eac7011d7dbf917d9b2946309fef54a5", "ref_doc_id": "330bab7e-cbd9-4dc2-822d-d12f866cbe37"}, "97e95a14-f9d7-45e2-9eb7-ae4878d072a3": {"doc_hash": "9e59432468c94d767df5894cab832e29cd09666bb19bdf4085f83233c5011c5d", "ref_doc_id": "0aaee9aa-73a1-45fb-85f5-790b29b2db05"}, "1bfa98f8-4bb7-4e56-b348-e96c05ded3b5": {"doc_hash": "5eed06d5838923bf600b1c9b09b16fc2bb3aea138e940574b23f5b167dc0d174", "ref_doc_id": "dae8a37e-8c93-477d-ae75-5bafdef17f17"}, "bf9057a9-810e-40d6-bbd9-5badfe2a3873": {"doc_hash": "04dd35b09af90a430bbba10a136c4a4ff7cf3bbbd166f29f8c16e4cd5e759ef5", "ref_doc_id": "ab1718f4-ea57-42d8-992a-5bc469317a0d"}, "59404b79-d1d1-4752-8545-a6e1a855cdb6": {"doc_hash": "81a48db6f4e458a1ec3b2cd99c224ac09afd5b891dc665c99246991ba820e2f6", "ref_doc_id": "b5c99ce6-84e4-4e9b-b50e-e60429e416c9"}, "9f8dd68e-9e7d-4c3e-94e7-3240a4c00c2b": {"doc_hash": "5ada752925add2b776df7d9f6cebc7dbc1ee6e72a4497803f7561f7426a66a05", "ref_doc_id": "c17643a5-cfb4-4cc3-bc73-0f9092552578"}, "1b345c2e-59bc-4087-8df5-0adb4a429518": {"doc_hash": "d95d6c32c427e65b891a2ad9524db0a041b9d3912a35ea6f4902fb5fe3016cfd", "ref_doc_id": "351d57c5-ff1b-4231-9566-744521573933"}, "5b0d3979-4929-4275-abe8-6caffcad2839": {"doc_hash": "7b651297c27171c0eeeeddf2e1c1b47a0257327ec15fa12ad6dc9ae6c01c1a68", "ref_doc_id": "7863bb32-00c6-40a3-a6fe-12ae2f4f351e"}, "a4046ec7-8a26-43cf-8b1e-dd37838c3cee": {"doc_hash": "07992082abb6e9123c6722e19f4fd19b06d5316254e752ce9e5d580fc21500c2", "ref_doc_id": "fe40bc78-0ead-44ee-9816-2f160a50b9b2"}, "fc028865-6237-4ccf-8cf7-a748e6a2023b": {"doc_hash": "d235878961cf7bc4526f43659c8774dcb1ba05e75e1fd6fa57c615d4ac788e96", "ref_doc_id": "ab7d288d-ecc5-43cc-8dbb-80623a56505c"}, "9e277237-7e59-4da4-a144-296b12424889": {"doc_hash": "f53519dacb3d200d4757be8512edc67c40ead54e74b31cbdd46cfb1b4fc0f51e", "ref_doc_id": "332b4bae-4ee8-4c57-be18-19aa34afd4e2"}, "b5f368ec-1089-4b69-b333-a7f9224f4b52": {"doc_hash": "e74ee332d5e25f491956119559fc044b694b694b4567e7a7b491e3ec0be1b49d", "ref_doc_id": "ae6c4b9f-d5dc-4a94-8f17-377d82863bb0"}, "9e8ed669-25b4-42bb-a1f2-645b3bbecd16": {"doc_hash": "2fd4ac61ad68da8aeda1988b776a53953df02f970288c83bdf9d7d5fad7aac7c", "ref_doc_id": "dcfd519e-5d22-4ce4-8508-c3b9f65a1a86"}, "3f845c34-5a90-43bf-af68-47db7b602726": {"doc_hash": "c204073e540602567b4093eea75208c2a175e93cb1a7874ec79515b7322a300f", "ref_doc_id": "09880d95-5468-4783-9494-6f0ab61b510d"}, "a5ec0108-68d2-435f-9fe8-5559e989197f": {"doc_hash": "c1c592c255aa18764af9e8ed1d24059b3ed4c9ef777fd17c50598aa564f4e72a", "ref_doc_id": "a551cd23-f505-4d1d-9e8f-fb25efa74964"}, "07cef8c7-8037-4e99-b867-e7a6a75f0048": {"doc_hash": "49a53cc788844540df6b013c51f64969904eb949bea8af3b8a80933fde141a2b", "ref_doc_id": "4022ebb5-409c-439f-96dc-9cf38602d3b8"}, "d8b04a2e-91aa-437c-a8dc-1a1db48d981a": {"doc_hash": "39662f282c79610364b656f564acf72f4b558524084c3e8cb0c65235b270d7d0", "ref_doc_id": "ff7fbb4c-c0a1-4009-a3b1-5267e2423882"}, "777747a3-a14a-40dc-8980-56b65fa5be12": {"doc_hash": "b476febab453ff080d216ffc9f3a6098615014fa73d2e57282b0c9ad9e654c92", "ref_doc_id": "23802fd5-9f80-4b27-99a1-5e14cef7e0b8"}, "04652c64-46e3-4497-b9ac-d717129219d8": {"doc_hash": "36a2907a22c2b7c8f88e0ed29e975dad2672034c1b5bba40116cb98f6151c19a", "ref_doc_id": "369e441d-40fd-4a08-8fb0-ec7529b99608"}, "68cf710f-755c-40ea-98b3-1bd0c3ed7172": {"doc_hash": "e16a649e0e044fff54ec6d3777f4489147c0424b12b52d17e024c7afa12a36a9", "ref_doc_id": "50db8e63-e50a-4394-9378-ab9e93882b5a"}, "30cc1e12-6df4-4705-9a4e-6034499e38f1": {"doc_hash": "129acca8ff06652a14bbbf760e79106b29e3ff48280e190cc23964dffaa7f6a5", "ref_doc_id": "b603ea07-9f11-4e53-ab1a-b1b752129b96"}, "cf957e74-7308-4676-a58d-d0cad7c38724": {"doc_hash": "bfd3f59d19893dc3080e94784d0181f4c20319afc8927fa847174e098b242ec8", "ref_doc_id": "97c798e6-3503-4a34-be16-b7bea0112ada"}, "3b094a16-4e4c-432c-b393-d75173ab0a22": {"doc_hash": "addba1db9bbe5a291be5d21b40e58d01824260f47f21ec3a5efa626503ceb155", "ref_doc_id": "bdb3d118-c3e5-470b-b90c-b79de6090700"}, "ab6c115d-7eea-452f-882d-5c60e1f70eeb": {"doc_hash": "0872a87be8feba2638ed61c3ae9a5e125752c173a3e1f4c998ca33227496a221", "ref_doc_id": "ed0aa928-2a23-4ac1-a565-84108dc36ab7"}, "d1359510-8c38-4db6-a819-3a62990ed84b": {"doc_hash": "cc0cd2429e66501619e4028255c9b82e880cbc06418fcf5d79c419fba03ff30f", "ref_doc_id": "4d59de42-2c2b-408a-a0de-5c2fe3af7beb"}, "5829a833-de40-4aa1-bb48-fa6220624f35": {"doc_hash": "439b5c904dd6b508219e58fbc2c5f1283ab46a1d682fd02d55c6fdbc52e0b390", "ref_doc_id": "2314cbb0-f279-4d22-a1a6-5f6d1d1aa1b0"}, "6cacef4e-e7d0-4741-ac60-1e39ba5a4525": {"doc_hash": "8cce80361df5bdf96c93b0c21c3328bf041a7a337881c20fbe4ae2a9c1b9e41f", "ref_doc_id": "eb0ba338-007d-4c5a-bac5-e4502d44b1be"}, "313831b9-38b8-4617-ab66-029f5454533a": {"doc_hash": "c5c9c72377be20e991b852204f326d352452aeb33fc24b175de3a0df7b02f3dc", "ref_doc_id": "c4ba1e8b-3eeb-4f81-8996-b36b1c8b2abb"}, "bc1df260-7248-4d17-b0c0-199aedb080df": {"doc_hash": "8cc1e461255531191df0b17cf66c049fd9d7a01922da81637680a5efc25018aa", "ref_doc_id": "287fc8aa-839a-4a17-84c2-c8177a2b15e0"}, "2656504e-b261-450f-a88e-2fa91d1f01e1": {"doc_hash": "28bed099de6c1c26062a266a2d97eb80dc1344207b3d31382496c201ae2b6de1", "ref_doc_id": "a21a626d-d435-4528-b4c0-20264d82c6fc"}, "ea22db90-0651-44e0-b3f0-3f317eeee65b": {"doc_hash": "26f308ab9c273ee0ef889062df7dfa1bbbe42f87b35f863210ef6d576a1ffb41", "ref_doc_id": "56f6a72f-e0e3-47c9-a9da-4c11978d3e41"}, "ec211bd9-47d6-4e71-a0f0-06e027cbb023": {"doc_hash": "132e38fcea3c45f428426d2d486db60b3a09055dfcccf41d83f1bdd5bcb433d8", "ref_doc_id": "2a180203-d19e-4d3e-bc77-d7d09d2ab466"}, "9ba02970-4214-4f80-87ec-59f4bafdc75c": {"doc_hash": "8ec1e4f99215ea33bf54da04cd22672c7a3c00985a104161b4b003d5e2cd9e4c", "ref_doc_id": "b2dd8d90-9fd6-4f28-9b92-6a143da02960"}, "92618ffb-7a19-4731-a593-98ccaab5d9c0": {"doc_hash": "fc7bde454cf7b9dbc9ae9b5b60a2965c82e0e413ef4f62ba2ff6589694d51189", "ref_doc_id": "5c12f777-c88e-459a-ba8f-5d95f41d6c33"}, "5b8b0096-291c-4fd9-b1c1-e01d98633c35": {"doc_hash": "847bfc5b7a4db30e66159f9044440869765b6f226d292a4213bc7689e3fee742", "ref_doc_id": "34cbdfc8-3b8c-436c-bee7-75e6fc34bcf0"}, "c86ea5b5-d3bb-48c1-bd1b-ef56074e5732": {"doc_hash": "c19d2b55559fda2d29d71971371a7af72e55b48b5e577cc090a374926c23bc87", "ref_doc_id": "03d63983-1162-4749-becb-db8a5e64cffa"}, "e22ed87e-e137-4631-8fcf-adabd5418603": {"doc_hash": "65375796bbd418ce0fb56b27e3fb68551f9b279c89236df2e31a9b61e1c29ad7", "ref_doc_id": "9cab7d73-8f63-4689-b548-6bc241b31d3c"}, "0f1045b9-3755-47f3-b629-e94e49697ecf": {"doc_hash": "f69aeb8b2b59c9c0eca1d578f365239e316c89decd9f7f79fb26c1924ca652d9", "ref_doc_id": "5780f2a4-8056-4d6f-a9f7-a5a85a35e01a"}, "ad3b5be2-3cca-4a5f-9128-91471dece4d2": {"doc_hash": "b102ca29cc9a19ee3597e78f1fafc8ab14db3bbd5610b53b068191de3cfd2a26", "ref_doc_id": "17783aad-177a-481b-836b-3e69ed01b2ce"}, "159a8653-7d7c-49d4-8d15-de017e0a5e13": {"doc_hash": "739276283dddebcb5fe450b37deac253a5b662a8ae9eea1edde86d06d5bd2d31", "ref_doc_id": "759fc5b5-a0d5-4d23-9d7b-25cac1fad2d4"}, "e78f2f7d-0a7f-4d22-80fa-6542e91b8a7c": {"doc_hash": "576ad86685d97ad71b384f0e9f5bb5b48fca07e946498d57748352b4729e74a2", "ref_doc_id": "52d6fbd6-af2b-4e73-844a-3b2eaa1646ab"}, "f855f427-b64a-4e1d-968d-a7f278c15474": {"doc_hash": "2bdaf10097436f654578d22fb001d4a070e91b0c819bcc0b8471a0c6a3ff70b5", "ref_doc_id": "b5a8ff18-37b9-43df-b966-875d76f0aeae"}, "32563394-d758-4b84-9946-ad06865d3c3d": {"doc_hash": "3967fdbda5c82669920c9f77730083e0285523f078b69bd9c9df760be84a703b", "ref_doc_id": "045dd6ae-3c3c-4071-9799-e368813da91c"}, "e6dcb63b-8da1-4631-b0a5-e2bcabbe6264": {"doc_hash": "9d7ae0537eebcc29bd65326219dad4c7e825bc5e12859e66f1bed9bf71114b59", "ref_doc_id": "afe4159b-5fd8-4f1d-9e3d-45ca57f060c7"}, "e157cab0-442f-4fa4-911b-dda14bd86d03": {"doc_hash": "ae15505d01993152de5cd0ab7f5f1492a69d2c4b71b5c13d314409e4dbc4d88e", "ref_doc_id": "686136bb-c390-4921-93b3-bbe9a150c506"}, "fd87f98d-20bd-4157-a846-6cb16e9ca01c": {"doc_hash": "61207f9bde5807ff939ca7ede03d1910602b2df4d6d708cd54f1b0693785493a", "ref_doc_id": "2cae75c1-8a5e-4465-a08b-cc4cb4c7213c"}, "e764014f-e8ec-4bb6-8a3e-fd896555ce40": {"doc_hash": "c1d87ac9f2cfe4c1174e283361c8b6ff8d0ba5a818b7d311b508c328ec873a95", "ref_doc_id": "fdc47546-6751-4150-a470-279ee05dcf12"}, "d167988d-f703-4a86-8d72-622e14983f80": {"doc_hash": "e5b6969294edf35b81ac0c925b58ff0f3a67db8939b06a8707f1a823841f2857", "ref_doc_id": "9f68c38f-4202-44db-9729-9be14a208ea4"}, "be8fddbd-5c8b-471f-95c4-eed40d490a3f": {"doc_hash": "3d1d0dd3df90bdcba57d6f84af8a906d3de94c9662b7981014a24b0ad5ca4c6c", "ref_doc_id": "bf848001-9f7a-4371-b4bb-ad61c06dc90e"}, "bae3af04-3a67-4baf-870e-4838f6c6e73e": {"doc_hash": "9b7f858f6c2edde39b023f50b4ee458d1356a8df1cb30e79e50a3f048676b2be", "ref_doc_id": "3b206bfe-1882-403d-addb-a5b990ff713f"}, "d1dff83e-2a4d-42f8-b96e-8d58b08a9d0d": {"doc_hash": "7da7eddfd01e00d8973a76f3198b5b0b79ab7d71a119dc2aeace9e5317ccdfdc", "ref_doc_id": "19ae4b10-0cc5-468a-8b55-19f8a9adb5bf"}, "731f903c-d5a5-4a85-aec8-d60101149e58": {"doc_hash": "896112d848d3e91ece1185ec0e146043ee23a6c359245d9052896b9cf39bddb5", "ref_doc_id": "47832c1d-c36e-4954-8375-2e61e249ea2a"}, "688fc2af-c370-477c-a81d-c51c8e2fbaff": {"doc_hash": "5c189aa8f0fe27b61f0e02f27836981325ff89bcaaacab40ba020c357ccce3f4", "ref_doc_id": "30fddddb-546a-4516-8174-abd16085bf3f"}, "1fea8d65-85df-454c-b26e-e9af6fc22b11": {"doc_hash": "beb1c6bd7c5556c3fd5ed90d328478e018625d21bce8ed7453e0f0f1d7886b75", "ref_doc_id": "1bfa07d6-dd0b-482f-bc8d-2b71dba2f0d8"}, "8c59134b-78b1-4b46-a718-efa793d1993d": {"doc_hash": "6acaa23db7926021600c0a3029574def6b8e84a549e05dceaba1826e43b867a5", "ref_doc_id": "c09d1ef2-5462-4165-8fef-1ec59f47f01b"}, "a8275729-0e29-4a09-b309-5e0beee7aba6": {"doc_hash": "3d85be9bbe73385dc20a70700ab14684eb0a3385af8a21cb2f38736517226e42", "ref_doc_id": "d3eb8a82-0b76-4e8a-85da-7d06fc38f54c"}, "4f5afdf3-cc05-4e1e-ae0d-ae7fb3478379": {"doc_hash": "0cf5ed29c02bda24d1a78e3e09eec9e4e88bf6c3cd07a6daa31bf7a33517b854", "ref_doc_id": "4be7cab3-7353-40e5-a2b4-14cc819ac52b"}, "40f8c55f-b280-409d-a775-3da0fac3d656": {"doc_hash": "a913b2f4164045534283c425528bbfa502d7bed60e7e77d45e7f3c4903a6732e", "ref_doc_id": "48aec6ef-0a27-40c4-9912-8a8277039c28"}, "f3f5a0c8-03ac-4809-9eb5-1c287d66b1a0": {"doc_hash": "dfff7af6efd83be4d58db22e97a19c76aee784abfe88e118d9515bad05fa38b0", "ref_doc_id": "e7c53777-0974-4a1a-948b-798307ad4772"}, "8b72387b-0b5a-403c-944f-40f1647fa1b0": {"doc_hash": "bf2bee51b3cecab3e145b604256282416e4c8e9b221ab8a76306e5798e22a673", "ref_doc_id": "1747899f-94c5-446a-a482-85f9b3f6489f"}, "ec416e8a-5f94-4e90-9e8c-d32a08ed5b1f": {"doc_hash": "a9e4efe9b69bcc4781c27f00e6b2697f74a49a8fbca3ee4f24a9b4d87114d872", "ref_doc_id": "dee25f30-6c6e-44e1-9d62-bd38cce6aa3d"}, "9a86e6e9-d2e7-4a08-bc99-e7df7d26f0bf": {"doc_hash": "3bb685464b02a4b78e558488180f1269e1c75689d810fe52b3211768a1ede95b", "ref_doc_id": "340374ab-1596-4bbe-b1aa-fdfd288f420e"}, "013aa009-d146-4783-ad7a-ab43d9ead4ed": {"doc_hash": "8d511d331fd0bc75bb863f4c82ed40d1bd19ae4b19cc9b259fe30015c8df0f49", "ref_doc_id": "f6d086e9-246a-43df-8b13-a763d0b05100"}, "2263aa65-6a05-466f-abb7-7181f629b27a": {"doc_hash": "5b146a927464b316140da4a48fe027a36ecad732e03a983ef66dd24ad626d35f", "ref_doc_id": "ceac2b5b-f45c-4246-8ff2-b8eb0acbb58a"}, "13368efd-1394-40eb-aa83-751c63e2ba1c": {"doc_hash": "76389c253573ea56adc2212126df21e3164127a799804bae25ac5c81093181a5", "ref_doc_id": "2e540acb-42fa-4e0a-815c-c7c58027fd6f"}, "98a82720-d1eb-42b3-9f13-c8acb5de115e": {"doc_hash": "431d1bb2c84f0a952ee0bfa9f5cce2850811047474189606514e708db684f516", "ref_doc_id": "9402e49f-dcca-4bd1-970c-28a5934a1b6b"}, "7be6234f-89ed-45ef-8f5a-aad0ad7ea4d5": {"doc_hash": "bb594d7e976c1d61aeb345bbb48e8e252abad65e593f9bd7a199a706f97fa4b7", "ref_doc_id": "290d5a3d-1e2f-42d8-94bc-85c97b0695fa"}, "1b690400-5c34-4051-8682-128f91372b5b": {"doc_hash": "715ee382abdf74ac4e6febb57dbf6ec9baf45ac6b9b9a661a202021370b060d2", "ref_doc_id": "e34e455c-e4be-4bc5-b66d-2bf201702c4d"}, "6392902a-e3ec-492a-8b9a-ec9827b0452c": {"doc_hash": "e6b6e96c6a0d1652cce0a0aef0a18fe271a78741cf8051f03735c4b2a72515af", "ref_doc_id": "76079f0d-a68b-4f0b-aa19-11b86ed74018"}, "0be8c208-ca8e-4de5-9238-2806ac40b952": {"doc_hash": "99d44f980f6107e94eb598e2210f8a8d55af7937faf159e130595d0d1ed1a30c", "ref_doc_id": "5fe12502-54bd-4f60-b451-86d62f1ffc7c"}, "af0a0109-e3a8-4f34-ad27-c564af81e5fc": {"doc_hash": "2c17b894a540bee666631f25d95c7dd362563148ded49a6d2b562fd40d2eb4f5", "ref_doc_id": "5b242b1b-7e9a-45b7-9b98-bd5db3196056"}, "e09895bd-aa63-4e73-838e-8492076ca7ae": {"doc_hash": "bad94e124c47de50942a4a93ea22e38a6c08e1431d632d15e6ebaf9017bc3702", "ref_doc_id": "cc7297bc-102c-4679-b102-d9e36fe328c5"}, "1ee708ce-208f-4d13-8c31-9961a9e20b64": {"doc_hash": "b83238282d6fc15e6ffd1c6c60ede3c5f6bbf380df970d13610293c277a5f6c9", "ref_doc_id": "7a332816-5e5b-46e2-b75f-fe2a23e482f7"}, "49f18970-83b0-4172-8d35-158bf4feb377": {"doc_hash": "647ee28582e719ee87ec409107722f57f476ffe6c89400bd26a0d7df132dcdbb", "ref_doc_id": "ec1d9ee5-af95-4b4e-8e11-c3e55f42ad6a"}, "e0fa0776-7c39-49cd-a3cb-5655fdfbcafa": {"doc_hash": "37600debffd74f474e7a726ca1b60c84df5fa8f5950dd853962730494a96c13c", "ref_doc_id": "78dd2248-d8b7-428d-855b-a3df42581976"}, "7a88c881-cbbb-4635-9258-24a1880cc6a7": {"doc_hash": "35240138e3882f01305b2bf2572fc018fe3f214f3d921636f118f57d1c2f2264", "ref_doc_id": "19e56ebb-d54f-4a02-a573-2fa08c308f9f"}, "bd008a16-5d04-46ec-957f-096dceb00d58": {"doc_hash": "f2b5f0612f7b562998784220240c6695f61f3e3d8ba66c7669eeae8a36b52ddd", "ref_doc_id": "cd33d220-8990-4e23-a726-9a729353e8ab"}, "5f3007cc-8a7e-4476-8388-d9cd2156d18c": {"doc_hash": "c744354ead966a2d5013086a37c9b625c5260308505f7b71e36361726d6c906c", "ref_doc_id": "75d69581-fd1f-4b18-95e6-a34a485c324d"}, "25638a3d-16c6-4a37-9464-7736b18ad2e4": {"doc_hash": "a6020c69b04447ec18d27d5d5be56467767214a6b502e498b80644ea5c12b037", "ref_doc_id": "07ff47c0-ca64-4cc9-9177-a1ff31658502"}, "60d4abd6-72b3-45a9-aef7-a5b3bad7b07c": {"doc_hash": "856c980f8215512ea005d5a8d35e122e0c9f9067eda1743389c0130dfed58176", "ref_doc_id": "c9e66868-9402-4364-9d1c-98f40f2e9d15"}, "0983ad47-1de0-427e-919d-1e3f0c3ac5b6": {"doc_hash": "571c3d3e443f47aa60f4d029de343da35e4e2d782008edabdaf51561cba42aef", "ref_doc_id": "a6bd1cdc-cff3-4f30-80dd-970a280c0e3f"}, "a188a12b-fdd1-4d79-baf5-e9e69cefe66d": {"doc_hash": "3118deadffeaf1bd82932906a8b4813441c7dcd58e555cd2f7db6de5240cea62", "ref_doc_id": "02f871bc-c814-4c99-8b68-ffcce9df6d95"}, "2669f51b-67b3-41d2-81f9-a0f6eccbec60": {"doc_hash": "76ef76de2c3092dcfce8f63629d4fc66e8bcde00c3d5256791c0be72c91133a1", "ref_doc_id": "3b803f40-4017-4bfd-9b75-11c938b9191d"}, "ca0ef209-3c42-49d6-8459-89088e2c9744": {"doc_hash": "ea7580f726ac33089c22f6193b1d4ae1be8b72078c4018a77081a85a22f0dd9f", "ref_doc_id": "6acd6715-8a2e-48dc-88ae-b9d65fb94717"}, "0823cb1a-4d8c-41c6-9391-6aab267218b3": {"doc_hash": "60117e9f0fa4b57d932ea2413bf082df07c60a460c86cf24844e897ff6bc37e3", "ref_doc_id": "9d5a39c0-424a-4e3a-acce-145a182b6b0a"}, "06202570-80ab-4b7c-a10f-94728ea9d470": {"doc_hash": "1d8d9af3adef6b055eeb1b65d3cf073c2675b0ac97673ae7a5b548617015f674", "ref_doc_id": "125b72eb-9ba5-4336-901d-7314c7303e69"}, "290fecf9-c8cd-44a7-b982-305b765f583a": {"doc_hash": "731480ed124164fd80a52e62b43da8c148e78ac0fd899592627c32c1addd1660", "ref_doc_id": "cfe4ecb4-33cf-4c82-b9cc-cffb5dd1f236"}, "566e2680-2891-481a-b89e-b4d09e916b4c": {"doc_hash": "635f38c40fe52eb8ccd9473b2375b93d5a8abf8e106402240a58ba78389d8699", "ref_doc_id": "a6d3da09-0aaa-4a87-ab11-5065326bc133"}, "6999ee21-640a-4401-b6bc-142834c114ba": {"doc_hash": "d0f88b7721a24b1f8cf4196ff5261c34091175f0e42fd50f4d6cdec853187b28", "ref_doc_id": "00107f62-db39-4acf-9e7b-0f2e6265abec"}, "80bc6235-5aee-4e31-81fa-3277f199675c": {"doc_hash": "922c030b8571091d16c0c6d053bf4715d477c5542d7f91882cf76f18757bf96e", "ref_doc_id": "907dd3c7-8ce2-4da9-a02a-37d2f6fb2520"}, "dceeda7f-8ef1-44fb-a234-4c36069da37c": {"doc_hash": "647b231830f05f41fec9e0dcfad098efc43b4ae591d8cfd1082d64abc913cab5", "ref_doc_id": "1d2bc850-742a-49c7-98ae-b828f632a827"}, "72152277-5a7a-4ecf-8e48-83cfcf418fa5": {"doc_hash": "c0c74adf41e36f16a00933a77147538ff091b71d31393d12d619bcfc540a48d4", "ref_doc_id": "d2aa29af-12c6-4b69-a220-9d3f91a257a9"}, "e4800ab9-88ad-4d94-acda-e64859d11709": {"doc_hash": "5cbbfdb33e836fa491c22ea13aa1ae265c3a152453a5688c1b7961cb91b2076e", "ref_doc_id": "2caa2ab1-3d69-4096-89b4-ef86c5deafd1"}, "3c99bd58-5aa5-4b16-80c6-72d4a02351ca": {"doc_hash": "1748b647d5dcee06fa36d779d2f0336e35e5470f73c60671b36e56fa1ce9e862", "ref_doc_id": "3c5acc39-53b1-4034-845e-e452ed1c3922"}, "97e546f2-8415-40e9-b150-515975c80267": {"doc_hash": "2ca2743254216c2da952350e33c6e35adee60f9eb6d3ed45e4181a18a4b8825a", "ref_doc_id": "f35ea2c0-dced-41a9-a8d9-17a2a2a1559d"}, "81e0cd74-96ef-4a4b-9519-0795d712cd78": {"doc_hash": "59f792da48cacdc868b1dfae519f70c92287beba6a4af13911f81c82f925d927", "ref_doc_id": "19dc8560-d51a-4751-9476-7f78574cf25e"}, "25b48708-fbe4-434d-b2c1-9182f56d317b": {"doc_hash": "df69bee08b456f19d3ab8db26ed39ebd272ea79436ab8d56490fe6477b3b504f", "ref_doc_id": "3aca442a-8d58-4649-a1ce-0c3e42ab0a6b"}, "164e2027-4d7c-4392-8701-0542ecafc323": {"doc_hash": "0396b63180509ef0161e9cde7d79b26cfc291adc224ad5722e07a655b8e2a464", "ref_doc_id": "dce2fd1c-e062-4acf-ae2b-4ca50df25179"}, "12615078-855f-40d3-9f2d-03c5cee6ce11": {"doc_hash": "de80df5c6c1726851da342a3af85062df41f9d5adebadaac9dde9349de818aa5", "ref_doc_id": "ec7fa825-0663-4215-a0c1-2a6f924c6f09"}, "70539acc-ae39-4f80-9e0c-94a45a0735cc": {"doc_hash": "e7657400ec0a50b31fbf7a41a0d9199b59299f813e493f4697ba8550c2913256", "ref_doc_id": "fc1f52aa-27b1-418b-95d0-5e37035d4e61"}, "9b5014b1-b831-4c31-b6f5-c5859cc671a9": {"doc_hash": "79bda509c23ce256d2a02dbf0f255362d3bb6b875295b67073542c410bd94c16", "ref_doc_id": "c648b129-7f42-4023-8f01-6f56c821dd1c"}, "181a0ae8-6d62-4e2d-a1e8-c04293458cd0": {"doc_hash": "564ed1122b05201498e6398ae20780bb15c2d694b3494aae0bdcf4a199292466", "ref_doc_id": "ad87f158-1406-4d1f-9683-958b72a2fc03"}, "5ceec94b-b6b1-4377-aea4-6cf444a18dcc": {"doc_hash": "24a54eb3b38307ac19d4ec1c3a0dbe03a5a3295cd5f3c349ab3c82491e534dcc", "ref_doc_id": "9b5e6d32-d4bb-4cc0-af19-ba4c755b87c3"}, "54ac7895-6c4f-4709-b0b2-cf43263b76c1": {"doc_hash": "19c8ca799fd499e8bb720c0f1f7d603b599303ea1edf87865d593bf9f3a7d486", "ref_doc_id": "98e50b48-65ba-4ab7-a00a-7ad91dd3e836"}, "366113c6-a33c-4386-aa06-f31e8eb76452": {"doc_hash": "2f85622125188dc7410dff780206e90275af6b55e7c7c1a01514c76ea0ef1c4f", "ref_doc_id": "5d35d923-ce81-45c9-97c3-7060275b2a50"}, "f1f8b2f1-32c2-47db-8bb5-dbbc29c5ce77": {"doc_hash": "2b302d598ece4dfc3016b6598dd45aa720cc8e9a19399f5105505851690b1f5a", "ref_doc_id": "e5631165-2c53-49c1-b2eb-755288942e87"}, "40392377-c668-46c2-b347-9f6ba38e8b52": {"doc_hash": "d70cbab605ae8393e429200fc477be58e11861c953e0c7ec26b077809730a282", "ref_doc_id": "3495f5f8-a641-432b-877c-4f7a6f4a939b"}, "9686e2be-93ca-41ab-99a2-cc9417fd97e0": {"doc_hash": "ec2c90aefda800bafd68386c43b00a8afe58b102f0d3e6b8e13e66c67b28448a", "ref_doc_id": "a646d20b-dac9-40c9-b9fc-c97e27259412"}, "be638277-c48e-4c0d-a4a4-f505ae864c86": {"doc_hash": "3c1c4a2fc537c5569d05117ae642c9e3f157034dfcae9bdfc823f4e963fb41bf", "ref_doc_id": "70f666bf-51f7-4ae6-acb9-d0e54f8e914f"}, "4ff396c9-cc97-4691-adea-147ba8e35480": {"doc_hash": "bba6d26e393a0138ed407171f50ad4c169e3ae174bd393c7e05f10e1a841a9a2", "ref_doc_id": "bb4fa1c4-3387-49cb-88bf-9ef0492402cb"}, "bad4a5f8-f1a1-4458-bbf9-e29bae8e8ea6": {"doc_hash": "30485aa053ef2aa2a6f8ad932d93f8b231332b0fbbe15acfeb30ba595cf7abd7", "ref_doc_id": "5744cdd2-ffde-40ba-ac96-babcd200b9af"}, "ef3ff959-e082-4010-b00a-301dbed8e9c8": {"doc_hash": "66a3c309194f70668073d6356beca7792a9da95f7896c5ee6ee63705a1b711c8", "ref_doc_id": "d1e49761-2745-4d27-98c9-0184e60183e4"}, "c39cd2bc-1feb-4ef0-ab0e-9b26334d2ba1": {"doc_hash": "2d9a0c01e60db42b6e8205995e6ca2303603920ee5e2c7020fd33df5042cb5b0", "ref_doc_id": "cfe425bb-8b21-4ce8-af54-733e218ea7b4"}, "04088fb4-7f4e-4002-af28-f8e32e985928": {"doc_hash": "a15556c305b4f1f476ec6f20c422e94b3fddc922026109a97f2672ef3b014ef1", "ref_doc_id": "80376e6b-432e-462f-b50d-ae8902dae753"}, "104cf660-3e13-4cae-94b0-3495708352b6": {"doc_hash": "34a2054ddd8e42e1ddd35c64f46a997ce45b4407a9911630ca80513f180ba8e0", "ref_doc_id": "3a2f5e5c-93c4-44a9-addf-b97eb463f419"}, "8e7fbf93-71ba-4157-989c-c6c256f14195": {"doc_hash": "3e11c35adfbc8392688de1a5bf67fc879a5e200de2df7e72fda3e818ff585b81", "ref_doc_id": "5a0fea3b-68d3-4e4b-9dbf-d338912b33d9"}, "8a57afcc-feb7-44e3-b06b-095f00611f46": {"doc_hash": "9b02dd2a5cd6e2399c1a9168537fc0a69048cb23fda8a02bd811e30c0f0f5d7e", "ref_doc_id": "cb6055ca-9bcd-410c-9fe1-3bb4c85638ed"}, "e9e9bb50-de23-46f5-9a94-90bd8014c9a5": {"doc_hash": "96633ecfcc16e302a46184ce7b4134e28ee81f2b77dd89ca94cfdd327b32864b", "ref_doc_id": "5d2d835f-5636-47d4-b07a-60052bbe5e72"}, "334ac82f-606c-49c0-9abe-70026bc0712b": {"doc_hash": "e6f7ae331612f00503a5bf2592212ae1c19ad503017635ed10807db5bfc0f7c6", "ref_doc_id": "06602d2f-2c67-4dc0-a4e4-0ed6fe6a2f63"}, "36322202-9c60-4019-9ca6-36491cb619fc": {"doc_hash": "a8da63f64e9295581a704ca26771892ce33bc6fab7cd2b84fa5bcccf04aa5f43", "ref_doc_id": "223bbd2f-ad96-4b72-bbe5-27cb71f77de5"}, "ef4f3764-b6f4-4da1-8ef1-b17ee5ef545d": {"doc_hash": "79c4f62730a5286d4d35aa5bd442293b49ad91ba57020b9c9821c7978ca3be63", "ref_doc_id": "a13ce0df-2f43-4bb9-b737-fd98dabbc243"}, "970c67e6-c230-412e-b492-314ac20d7f5f": {"doc_hash": "de368055778d728bafe5d84f53bb5684dca484208f797a8e8467c98aeaaf661c", "ref_doc_id": "cbc010d0-b971-4113-aeb7-f771021d97ab"}, "0fd1ff3e-0871-4857-b695-06be97c9fbcb": {"doc_hash": "22e5c42ce1e782fff419970d4ebd3d67ee8af21d8cb145c60de58fdf087edd0f", "ref_doc_id": "baba5cdf-3059-43ce-954a-cdd8337f1dff"}, "432f550c-1c06-4055-977c-3f9c346d457b": {"doc_hash": "faa5c5471f1c0faae5e337fc3375aee9a4773654a5e9e06ff92f87e33f88cbcf", "ref_doc_id": "901430c4-ce2b-4276-8279-4b283ff16e43"}, "b8422ea3-a083-4246-99c4-4421b472bcb9": {"doc_hash": "da586b9ec344407cb9553aa2059afbad87a2bde1bdf0206954a5e03337f851ea", "ref_doc_id": "e9942dff-800a-4856-a8a2-4cfe44757984"}, "73b2aef2-3872-40f8-be2e-70b25d62dad9": {"doc_hash": "30c48f4b1b82151ed2af4ee8b617e52a1ed307036deb4a1f5f6ef341c9ba554b", "ref_doc_id": "8c08935d-7a63-4750-974d-0ffb532fa72c"}, "21827a71-521d-4478-b5ce-cf094fea0829": {"doc_hash": "0297996258eeb7c5fda864d0a9fc6d752502c8fe25bbfa1b56f0c5362260595c", "ref_doc_id": "00adb995-c0bb-4655-9cad-bb24052459c0"}, "d95a7e89-c10e-457b-b9d4-724b798ec5e3": {"doc_hash": "a345218084c285624ea77f5897c38dd0c0005859193f32bd300b538f459bf6dd", "ref_doc_id": "5e826f64-e7e0-46df-8d98-bbadae242f3a"}, "e2756b67-8cea-4dca-9a97-e5b1e24db8aa": {"doc_hash": "c7422c5e1394bb91bce2fd92992f42ce6c3b2a1ddb40749f21abb32dbfe490e4", "ref_doc_id": "8ad7180b-cc9b-4bda-a164-663f7aa7ae9a"}, "f196c075-5f9f-4d91-acbf-3f8ac11f948f": {"doc_hash": "6f4cfc48958379fc3c9da2a407d6abbeefb0b528da1001af2a91dff826cee7ea", "ref_doc_id": "b5956b05-b0f7-4a2f-bfb8-10a25b3080d6"}, "28d12037-8a46-4360-be90-6c24c63a47c7": {"doc_hash": "7cd37620f45ed489672d9483b75e6e54aa12db0a0eec4b4b08a80ee52da6f9b1", "ref_doc_id": "3f12aef3-0361-42bf-861a-5c0c3ac261bc"}, "7bf22f1c-63e3-421a-9b22-2d8fcb7b033a": {"doc_hash": "0f4c802718f56faf68807541ac370ff3e45cabe27c155ea66b45bcdf6759d176", "ref_doc_id": "26cb638c-9469-4d4f-9766-7818b9220ac2"}, "0b8358c8-f8b1-4944-9a58-73c6159e5f3e": {"doc_hash": "91acdbf174a162e84c1f15f405e8851dc020146b3e2375e2297ab438edbc65c7", "ref_doc_id": "bb324287-5422-4490-bbe0-acdafcd87a9b"}, "c7b05aad-3f7d-4e7b-ae42-05e96dff902b": {"doc_hash": "f69be5356c581d765c1e6ac69c13009ad9ba1ef84e129423d6517ce5216423c4", "ref_doc_id": "a2da856e-c1a1-4424-a0ec-356182ee5529"}, "9a112d06-0b27-4c8f-a037-6e12cfe43157": {"doc_hash": "301aadc9afa6adb906054a38b0ea337c33d25207674be5838cbac3a835509149", "ref_doc_id": "954c1f4c-a655-4a34-b79b-cd7a2e470908"}, "1dd07021-a2d0-4ac1-b3f0-42adb2c187e7": {"doc_hash": "e49eb744f693e55658e418759e825616f8d8d776e10497e7fc156d46ef9a5ce5", "ref_doc_id": "c2e62d55-24d3-49fd-9256-ed43992e7492"}, "5a827953-e14e-4833-a2a9-e6ddb3a4f2ae": {"doc_hash": "aa4bb5f4f280e3eebab44b3e32ce2192d53a7b7983ea391dd672963a09b191ba", "ref_doc_id": "d305e2b0-b95d-4221-ac04-e9a632292d3a"}, "380039c4-ca61-49c1-9590-e5ccaf8028cf": {"doc_hash": "b937ef6a02d9bcdab6bb446d3519397bd733163b20540037a75a6032f5e745d3", "ref_doc_id": "11ad9a04-786b-44c3-91a3-475ac8027f4c"}, "cd9ab66e-1554-4808-89a8-bfbd586e842b": {"doc_hash": "82c7b59cbda7750bf8094659085e141a9af86862a06fa6840be33a6c766ba5bc", "ref_doc_id": "3ab12c9d-7a85-4d83-9971-e305ec2ce763"}, "8830ec4c-f4a4-4c76-81dc-a0818740f7a4": {"doc_hash": "106537a16582214d9acc9f306616f629441cff9e15868ac2d81ce3f3e68464e7", "ref_doc_id": "2507823d-ae7a-4f37-adbf-f73a41118d3f"}, "7f49fdc1-9453-4320-8112-1e967c14e687": {"doc_hash": "036d56c50ae6a2c20fb696730273bc849b66bd299f4d4a2ddeee1de2e6a2c392", "ref_doc_id": "15e5a9c0-0fbf-4067-8ec2-5c3ffbd242ca"}, "6c18fd61-b4d8-49d7-9ac9-332bed0ee58e": {"doc_hash": "1df2014400cd825630b2c6d0e3d7457c796e323b122d861776497a3f56eeef07", "ref_doc_id": "9e35cd07-2b1c-4c28-848e-a45b19ce7372"}, "f603714d-0ad8-4faf-a3ad-24d8571aaf9b": {"doc_hash": "a8386b01860f0bca1779dcc63c933f24aad204cc04afae7429412c4951bbfcd0", "ref_doc_id": "cc56ba8e-09df-49fd-9b62-7c7e3f7e8f0b"}, "ed211f3b-5967-4dce-a041-582b2da3967a": {"doc_hash": "c14f8616b385815d9fa9170e0860e3e31456bc208e6e3ceb67d90fc632f6c8bc", "ref_doc_id": "d062b573-7124-48ca-ac8e-4b98ee37c9e1"}, "ad04c347-3b0d-4ae8-a75f-c2354588d93f": {"doc_hash": "8dc15484815e9619e541e6269cc7adeca24d177b668d2977e3e0d26b02b0c693", "ref_doc_id": "c6084c26-3599-4357-9636-d1296e3d13da"}, "8efaaad4-4648-492b-8de7-806180b5d9e6": {"doc_hash": "bf5c9255ba8dcf5b528d1927488a857908b0405c973b1ecb6034a7cf2dffaa62", "ref_doc_id": "ad8f5a53-78aa-449c-ba57-931af1bc6e33"}, "fbcc7b0b-4654-47a1-b717-a55a2ae0a92a": {"doc_hash": "98aa16fac11ed49c33be835267e60441ab3b09385d2a179074ba5bf9374d1cef", "ref_doc_id": "7808aa5c-46d9-4118-b90f-d1a1f9a6850b"}, "e40588ec-fbc7-4a06-ba81-7a422205a73b": {"doc_hash": "a7ed503bca5c1be1dc33f688081fe6588558985c42959fb200732e9c6cfad720", "ref_doc_id": "0d6ab4f3-bfc1-4a86-8dff-e693b8b75dc0"}, "aa82b9dd-e5fc-40b4-8fad-929bdb8798cc": {"doc_hash": "1a76c1c4fa0247d6b0f152f07707b6d211be45af5368dc6817a64b4341cf85c7", "ref_doc_id": "81c41fab-0e69-45a9-9e02-3ae94bfca27b"}, "e6a2e29e-2c3d-4f44-ac49-1894dd6d49ab": {"doc_hash": "ecd36e57eeef92a2bc8c3815e6b5b34f8ca76860cc2d3e433c358e2236e541c8", "ref_doc_id": "b6e37b3d-5510-47f0-9257-befae6fdd152"}, "f4ae878e-b606-47cf-afbe-a45b64d4f494": {"doc_hash": "c59d2c5f17ce33a3ea23884ddb7cef278d7c0b31d303e6c93b3f52f31132393a", "ref_doc_id": "43512e3f-ee2d-4115-8e46-9f211baf2524"}, "5bf8df0d-e7af-43a3-aaff-36daf4546ec2": {"doc_hash": "afb35437e2fd8e2bbf5e659c6bee301422f79a94488d67cfe526d90288858063", "ref_doc_id": "ad3bf511-89bb-4a1c-b70d-1e47eef1920a"}, "e554ea04-2f9e-4a1e-ba36-63f15fe7d305": {"doc_hash": "feb22d6dbbfdb95b2456c2de2802567d566776f1860483289680f4968b1e4129", "ref_doc_id": "7850d479-8582-42e5-acc1-33c9a0af5c39"}, "daa08734-4a3f-404d-bdfd-7a3a76caaecc": {"doc_hash": "6bbc6c0446c93f7fe4636b525ca8955c30bd09c18ae9c22e014d958cce526d92", "ref_doc_id": "5a384a83-08c1-422b-9d75-3d1b6b7e591b"}, "619c6156-6f1a-40cd-ae1c-b786e9a33b2f": {"doc_hash": "449ec0bea063f1939a751679e0513ae9e89cf0e2ff3b97653993d007a9f50639", "ref_doc_id": "046984bf-6a90-4226-86f7-4e12e367e53d"}, "68e9baf0-9678-4b0b-8aa6-0bbc77dc882e": {"doc_hash": "552a5f622be91ee352fb20e9ac00f3e12eda9bcde353ab6c0f3b81507fe0e97e", "ref_doc_id": "98128fd6-a024-4e91-8fbc-7542ab4289f3"}, "d4cb20ad-6595-4d8a-ad6d-ff8acd2ac54d": {"doc_hash": "8503e9324c6d4a3e5ab9f36bfe3c3099f1f217a27cb737e7d8cf66e3a15936ce", "ref_doc_id": "09fc4f38-aa4e-4c1e-a0b9-b7508670e6d6"}, "d6bfd226-5046-4579-ba43-13eefda806ce": {"doc_hash": "7de3acf777fbbf861566d639a9a7e15d4cac26501baa20c206f165eb1dfbfcc4", "ref_doc_id": "6b32c23b-20b8-455b-b826-847763f6cdda"}, "485b2e6a-3876-42a7-a1d5-64a599604cc7": {"doc_hash": "a3ee814efc90d8dccac371f5adf05f01fcd9c7d23c118acc945e1730f96c4515", "ref_doc_id": "5e847c31-e781-4616-9784-ff9421cd0ea2"}, "18fd416d-8574-4e28-827f-ebe7189ae583": {"doc_hash": "ad6786c9961b00ad3ddb1d425519fd747c7814a144dcc415ee6e22c5d3daba06", "ref_doc_id": "5f778788-2aec-4a43-a630-4af88b35266e"}, "f3a9afd5-1443-4ec1-b917-9dab61c30368": {"doc_hash": "21e528656b6655c433d9a62dff3291ea27938634951415f88785afc2c1cdbb95", "ref_doc_id": "50c669d2-2e37-44a9-9583-e41f72ec05c3"}, "fe2570b9-4c5a-4264-9683-89e28751e58e": {"doc_hash": "26e6def32f6512b27d09de0dfce7dcb7248fdb9d5051705392d773862385596a", "ref_doc_id": "3c4293d8-d295-4cd2-a603-07d23b4b9cee"}, "7390479e-73bf-45d4-af24-c1e57c020fb0": {"doc_hash": "7d1441fd7e3209c6a156cf5b4e81f8bbf80c2f46abd2dc14b891f9c564d51e2f", "ref_doc_id": "f62672fe-84ad-4a41-a2ad-bc37ed30e41f"}, "70726ca8-87bc-41da-acf6-689d99370e15": {"doc_hash": "35c7665006708c68dd41d84e86ee9377e73e574a2609049ecb9b21df087dba80", "ref_doc_id": "44d7d43e-d21e-419e-a0b7-dedf6504b8f6"}, "3e441137-b010-41dd-bc74-1a9ceee29fb0": {"doc_hash": "00f19176fed4805d614573dd0bc4458e2e720addc5131548ad9d4e735d2e597f", "ref_doc_id": "bee42ca5-41a6-4904-a90d-f7400d2417a3"}, "b4a5f580-133a-432a-9179-9eb83d28daa0": {"doc_hash": "f6c7bfab2c9fd5acbc5210b74dd767fbca174a52bfc9e92f0b0669b92a6b9b11", "ref_doc_id": "caff4e75-787e-495a-a0c2-89ffbcc2e133"}, "0d1808bb-61c8-4c60-aa38-42c06f438ea1": {"doc_hash": "c146e1c06ff830b1dc55e9bb66249b4551d07c7a6c9ea228e6f2a0efa9194d71", "ref_doc_id": "74a0dacc-77c1-47e1-ba86-fad1602c1442"}, "1781f142-ea7e-458c-8671-28f57054a12b": {"doc_hash": "03058d62ec5efa2740094028eec296f4dfbaf98f6a99d487101e64eaca2d5967", "ref_doc_id": "caefa15f-8957-4152-8aa7-c2c0e7ccb352"}, "9c911061-c280-475e-8e21-dc798b0798c3": {"doc_hash": "d757c4bcc6e2a3af25136cbfbc62f1863422c654c68451f14e06d6f5670319d7", "ref_doc_id": "e712ac33-47d6-4312-ae2d-4d507d239c0d"}, "0a868952-a55e-4ab2-81dc-9ac230f3bf16": {"doc_hash": "8041af3c6e29a2c5a27217d4a8b9f2b3ea14a03ef9e0465216dc614e634e89df", "ref_doc_id": "9cc330af-6b00-4698-8a69-ce78f7e311bb"}, "6ed2ccfd-6e2f-4d98-9484-349e23b38f2e": {"doc_hash": "0694be73348573f55ae60af6a6b2627ff95eb1180b9f0d3fa85558c3022f25a7", "ref_doc_id": "71fef793-0a6c-492e-a03f-880eea16cb18"}, "ef2f381f-7802-4c1b-860e-fc1931fb5ec6": {"doc_hash": "fd5b321e4e6440246220d725f8d771f974bc698bd51461240013287087f6ab2d", "ref_doc_id": "c50c0bb2-7df6-4dc4-91a4-4c5742b6ca81"}, "cb9c2154-364d-42b5-8059-0c3078d71969": {"doc_hash": "37515398ad26e60bd3e2db706e66bdd2d1fe5c85b6d7ffeeb5910a69c9bd8100", "ref_doc_id": "e1d63c2a-80b9-4291-8a67-05641c07fdbc"}, "b192690f-c460-41d0-bf47-933703ce9244": {"doc_hash": "00f5acd65526c3db40ad2b136889495fe51d14e21ef46a84d41973406b66f8b1", "ref_doc_id": "8ff13679-3b43-459d-8e58-996354454863"}, "ff283b25-698e-43b0-a6ff-75f17dada13a": {"doc_hash": "fbdc66c3c8f99cd4e01f136e3825671ca5f52aee68095401072a29339bc80c13", "ref_doc_id": "e6f56514-5dec-4d4a-a9be-d93b6f89bef2"}, "7ca4da36-c6db-440b-83c7-6eb393c3a4bf": {"doc_hash": "3a4d124d04913cc74d89ef6731195a2c471099142b59651f67e4208d1052f3e5", "ref_doc_id": "49c26bcd-1d87-43ce-90a7-2347f567c804"}, "5d303f2b-a9c3-4d0e-92ac-c56319831895": {"doc_hash": "beb61ca0edf2ddfbb378a995ddd4928f6f0e79510125b8a28ad7c0ba5b2c66c7", "ref_doc_id": "ecccc4f3-9d88-4234-98fa-7368117c1c6f"}, "a001dd78-f4bf-4aab-b0a2-053f46843602": {"doc_hash": "f567e6f842e2fd75465c0499690036bf75565cc19f5e5ab7f57e6e9b7cea5a47", "ref_doc_id": "ec3b40e1-d906-4812-adee-ed525404832d"}, "3faf2cc3-9ddd-4254-81c0-91e76b3e268e": {"doc_hash": "d04f56832565c450ac933942d5fcf10369dc0426d70116c4c1c1d6fb86f133bc", "ref_doc_id": "9f7a214f-04a6-486e-916d-a6aae8b1c739"}, "b2b8e6dc-6ad4-46b5-917d-4cd3ce617cb5": {"doc_hash": "0492888664277b0ea3c02971d7f591f4f14e8d169fa2fb3cafd6d093a5431875", "ref_doc_id": "964c5e1c-8778-46b1-8e6d-bdffde3f2bb6"}, "b177c33d-b45d-4f26-9bc8-9ddf63178c24": {"doc_hash": "bb8c0454118e69d2bc39d57782f5f1841479b0498dd0b75017fad5c0cd3b7855", "ref_doc_id": "805bb99a-3473-4756-b914-ab3fe0a51da9"}, "83b0a7f2-daba-4e8c-bb68-cb74b4926cf4": {"doc_hash": "fa956038e71253d17d6ebc713ca1bfbe4f53b36d18c54289a887c55e27f0888a", "ref_doc_id": "a24c9a0a-7cbc-48c3-b3b2-339a2bdd5b1f"}, "b109d6c1-c239-4244-b87c-9b4b277bc138": {"doc_hash": "954b95ac8d9212633524c10e70d24014f98ddaa23a45e0c63aed603b3c824510", "ref_doc_id": "a965a8a9-dd15-4565-bc30-5298c9cba25b"}, "f0a51c21-a2eb-491a-89ed-000a3393d819": {"doc_hash": "d1083a1f34813f100a8b0ab08693bc73877a74ed09e82ebdfda7a4923fcd1cb2", "ref_doc_id": "f377e790-8556-442e-ae67-844d189cdd81"}, "23c686ac-889c-417e-b37b-6ed31b12889e": {"doc_hash": "fff85dd1bd86703231f59ac5f4eae686a19ac8a90dc37a608cd656a9339aab19", "ref_doc_id": "6729378c-c0b5-4f7c-82da-1defe160e62d"}, "9fbfcdf0-49f4-4c09-9c5d-d125eb0a0002": {"doc_hash": "d9706ddd8eb6ed45ece605b0f7cc094c53d6c62feca453f6e63f914c043e7632", "ref_doc_id": "0b091c35-6ea0-41e7-95fd-fb126491912e"}, "51dc8d6d-a6d1-44cc-a345-c876173aea37": {"doc_hash": "9888effea549cdef30d7982e37421e0c760050fcdc0a50654c389787e2225dfd", "ref_doc_id": "bcaec3c1-de55-49d4-9737-5228f2021e55"}, "be38b3a4-76bd-4f14-8071-e1a2e705a695": {"doc_hash": "60435230da62bdda3f31ddc76ae4e6fd2e5a7b58530ec728396a4a86ba6bc7ce", "ref_doc_id": "6da769e2-2f28-49d8-acee-80a617e8b936"}, "a735e59d-4bfe-45d8-8aa8-4602361e8067": {"doc_hash": "2227fd9e95a442be261ec873b309375ceeca35b3e37b3cac08fbd070e82b0d4e", "ref_doc_id": "e48e0742-d4e6-4040-ae24-8b89215a1f2d"}, "3bbcb749-fc46-4445-ac61-d901d45bba7d": {"doc_hash": "8303db4023bc55a7cf5f1d5a750ffa1420065120cb11eacb8a016795953c27f7", "ref_doc_id": "0c04764b-3ee5-4b4b-9e5e-b3bd1743c19c"}, "7576405a-387c-490e-9b2e-25621826b39b": {"doc_hash": "87305f4d6cb0da7971e24d516ae200938be8e718837769840754607ce9bd3caa", "ref_doc_id": "bc9dc249-ad2e-422a-91c6-06d3afc242de"}, "bc3f1f76-0a4e-4a06-8c88-67c04060dbfe": {"doc_hash": "71b2a384b2655e91fadef793025957a95205cf30accb07623acf8cfffd5651e3", "ref_doc_id": "8297c76e-0721-4088-8f30-7730455f5682"}, "226292ba-6725-47ec-98cc-ae40bb312694": {"doc_hash": "16d540bdaeefaac64bc8277fa26e7049e18e0bbe77c4983d94a73e4a54678174", "ref_doc_id": "0c412444-1c0e-4375-9468-3d009f6e959f"}, "ab5c3290-4410-4424-ba77-b5379d73ebeb": {"doc_hash": "40869b6431a6080445651d593325108af528b1149d0ea73460f9133d7cae6efc", "ref_doc_id": "10b9fffa-0d1c-4fa1-812c-36352a8949c5"}, "7d91119a-e518-44ff-b4bb-53c839807903": {"doc_hash": "090f2806a745c58ef9b906db3528dcced58335e14580ed805d01ccb49a65e3e9", "ref_doc_id": "6fb36892-17d0-476c-9e06-f9fc3546b239"}, "f783c9cd-8a7c-4d89-81a1-f76372e38651": {"doc_hash": "9ca71e4548cbcdea389c1d171cc4e8d688a20df2e031580c88d007e609606d8a", "ref_doc_id": "d04b13ce-4bb9-49bf-b37b-ffdb361be193"}, "29cf613e-e1f0-43c4-8768-b8694ff735bb": {"doc_hash": "de65e69656c8b95d3674fa981ac26c019f9dcec66fc3eb3ba19234fd6cebd178", "ref_doc_id": "6b2c2b11-5a35-4fe7-a9c9-cd826e196428"}, "0d280986-9132-4b02-b7c0-1b304f8f8681": {"doc_hash": "e16a62b157eceb266a71c4574a6614634f35a63f0052ff953fd6dc540c541eb0", "ref_doc_id": "d4f229ff-f9a6-454f-8c8f-14223b5381e9"}, "c480a3e3-887b-44a8-acb2-16dabeac9ae9": {"doc_hash": "7db1e026776ef6f2eeb15a68742c80b9f63c27fb7946096c600bfd8d62f82c20", "ref_doc_id": "48fd3d4a-0db8-4ea1-8156-20ca595872e4"}, "d69b14ad-fd83-44c4-8495-7eb5094d4fc7": {"doc_hash": "02baf85c65b3a5d32bbc439c113c24251e924828891c41532ec16687354b2ce0", "ref_doc_id": "5b58311e-9362-4ec9-b065-d1187bae82f1"}, "dc46949b-b172-4b45-b1a8-29a9e09b08b1": {"doc_hash": "f3610fa8eede519d5226d183675dd7c04b9f94802da621b4ec8b4765fe197f9d", "ref_doc_id": "ee3f69be-3e0d-4a78-92f5-cfc16c2aa534"}, "b9d86eab-2eb6-412d-a3b9-356f61109eff": {"doc_hash": "776362aa513f3901bf90a6ece3a8615105dc9d17f69eca0e4f6077d75be58588", "ref_doc_id": "ab971895-e0e9-47b5-a29d-61b63bdca91e"}, "571bdd05-c6d5-42c3-a1b2-87ab05917cab": {"doc_hash": "611dbd422805e4f8ae37fd8515ec77cdba1b702cba61d31ccdc79f1c8048a9c5", "ref_doc_id": "f717f52e-dfbd-4fc2-a24e-245cfecb69de"}, "651cebfe-cf80-42be-bbfb-e6fe78d0050b": {"doc_hash": "1898f7346f265ed76dac794173ee4b9746d6d6ae210c76832c7d7e8561517c65", "ref_doc_id": "f4b8122a-7599-46fb-b398-77181296219e"}, "9e5a8557-5915-4695-a0a4-b3369df155e4": {"doc_hash": "b1f0266e00b55f5ca03baaab1eacf23a1083e8e58ac007c7b40a730a2a0cd420", "ref_doc_id": "1af51978-8ca5-4853-aed2-b80d20c9b100"}, "574b6124-4277-4d2f-9020-a266a0a1de97": {"doc_hash": "0941e9772a3ee84cbefcb4a547c9af85f59a28ceea31ab502a34840e37ee33a3", "ref_doc_id": "e0a109ba-a75c-42bf-bb00-5be1b7a301cf"}, "a69bb3f0-b615-4ad0-95ca-bb3a053a6d5a": {"doc_hash": "4ed112de55850da1bef0eae501bc4492d982a926f9b90ee08b0f0fdf5bf7ecfe", "ref_doc_id": "d85fbf35-0c2c-4ca8-ba7f-1a8d417d154a"}, "51cd9df0-c775-4a5e-a5de-83f650b803b8": {"doc_hash": "d105e330455c45c94dbfdb825d035d9d35d492a2ee07d14b98a48fd894186d96", "ref_doc_id": "1dee9ce2-ca00-44b2-8f48-76c57551b272"}, "e6d335d9-a01e-4261-b00c-537b4b4ab7bc": {"doc_hash": "b3e8394ef4045d178fa3f02b61f9e1eb58a897bb85660a3413e8da1908fecb6e", "ref_doc_id": "dee0be0b-ff5b-47e0-90b6-c9f1e7a0c57b"}, "34e5d780-2ec8-4262-9cf8-af2e29512eb9": {"doc_hash": "75ffb30a26c4c8c1fb8cd3763fbc57b7d1004b185614d8fec4e2826ff3986e9c", "ref_doc_id": "14a821c4-ccc2-4045-8a30-6d59b3f77ddf"}, "ee0ca39a-85ab-4f3e-9454-af1472f18b51": {"doc_hash": "27e290c6f7d44357502e2d95b6ae8275356f1ed5235032b138df20e31d76ebcb", "ref_doc_id": "5a02ea50-5f39-4ae8-9c7c-60309c8c9144"}, "155407cc-9eee-4f2a-8ab1-8c332b2176e5": {"doc_hash": "f93ab2cb2d2cec0455227648d491c7cff35c8a4bbc96cecc5813ba1fab296a0a", "ref_doc_id": "90ba6b19-143b-45f9-bfe4-54c0e4cd7791"}, "41e676e4-c960-4385-b65f-4b7e5dad07db": {"doc_hash": "3e014ceda1da397c992ef2ffe29a3c23cddaa6d54ab0405c066c8d376ea2739a", "ref_doc_id": "3cfeadb2-ba85-4531-a835-742a85aa0442"}, "cb355f64-0441-4fde-866a-4fed5e1331bd": {"doc_hash": "be67a7a8be6da26575ba9a537fa45be95b0ac5c06527a9532092cc2679802a13", "ref_doc_id": "37bc96a4-474f-48e7-b469-32df425f61b1"}, "bcdc2a33-8cca-4e80-b27b-867e6b676cc0": {"doc_hash": "d58e46c3f63b19264f90fece7635694ef5d4dfd2435ea06d6621aa6197047965", "ref_doc_id": "cc376b0f-1e3f-4a0b-9fe8-32d23f927510"}, "be462abc-b34d-4506-9a49-bb4eef0c764c": {"doc_hash": "3a0399a2ae52a6273d3d5249838d12b708aa61e0b311c2229f24253f8d7c436d", "ref_doc_id": "a945daf6-17f2-4dca-89b2-f34e1245275f"}, "7bf402a5-067f-40d0-a5b1-5fb3d6836dc4": {"doc_hash": "7e4a09bfd04f8f431a28d738b61d4650dc505102b5e325a715425b345a866e8b", "ref_doc_id": "c6614abf-0613-4b79-8034-63242b2e96a5"}, "30791011-f32f-49d2-8b5f-05024a8cfa6b": {"doc_hash": "842f7b4a6ad6f4aca640e261fa99be9305309daab83d95032689cbe9252478a2", "ref_doc_id": "8a685682-a834-48b0-9caf-3b70e11a1d6c"}, "b2dded93-21d9-4a1b-b9fe-d4c7594b15af": {"doc_hash": "301e9d6e28611325d3842a47568504fe9707dc203fa085ce9d3c0aaf4d9d7ecd", "ref_doc_id": "eb7b8b5a-e649-4567-8187-45a1c0a1e74e"}, "17972320-67a0-4971-be28-a346c34d4e1e": {"doc_hash": "91713395770da57b8a2a662f9a041e86a3f98eae5d21a62ddad7d54a0b94187e", "ref_doc_id": "894f259d-2a60-4d21-96d5-e1cefac39447"}, "86f33101-1276-4a4a-b8db-97b26f0d6c21": {"doc_hash": "7b02339256824c9f4c852e71ea82d0363467327c7e8b9042b68823a6375109e5", "ref_doc_id": "d34f7ce3-0174-4175-9268-0e628e547653"}, "5129cfea-f2bc-40ea-bed3-8e968abd9ebb": {"doc_hash": "b5ef55c04d3dc0129986b854e663f0960dc1cabcac95bd7fbf4a93c3d990b4d7", "ref_doc_id": "635454cb-a99e-42c7-80bd-d3eb22dc2eea"}, "be3a3de4-c31c-4e55-a857-ac6e8d9e4a8d": {"doc_hash": "c21aa0e76abf3579308052d8a778bb62f386b5aabc16374449c287cb9e044249", "ref_doc_id": "f02d0cc3-9105-4c29-b230-46eab391d9b7"}, "2fcc68de-86ab-4321-8023-b0bfbfa5ede8": {"doc_hash": "b2c6874d67440b3a5c50a9cfef95a4b26cff1dc2b0d7ac3ea3ed8418b272d3c2", "ref_doc_id": "38ddc103-a3fc-4495-a4fa-e027cf952a43"}, "42959e03-64ea-43fc-a0c0-073ec69e77de": {"doc_hash": "6acec1c551f3df4e9136631569a166be0e0cb53c3980212e5a2ed7b77713e98a", "ref_doc_id": "01734ade-d30a-48e2-b2e3-d863903555a3"}, "18fa1e63-afb7-47cd-8671-88dafddb0c31": {"doc_hash": "438e57d5a7a1d5c3384c41467f8e4c87195a71d892d56df024c26d1136775c78", "ref_doc_id": "6a34e83a-e66d-41c5-b92b-fa1eed20ff23"}, "c0a8657b-18c3-4e3d-8177-ce712c6279af": {"doc_hash": "1f5dd0a244eb2f79088fa090aa20b6a374651f60e158fc6748e4189b348594c7", "ref_doc_id": "057ecfc8-761c-4320-a092-0899f4c4d07b"}, "492e200d-bcad-4322-95d4-04f4d0650daf": {"doc_hash": "218d47323bb245cd47aa9295434061d7d6d946449489144af84be56eb52fff0f", "ref_doc_id": "6b45f254-03e0-4433-bcbe-05b71c6926e7"}, "6029199c-c754-449a-93f0-e0dd87c3a785": {"doc_hash": "34c71cb708ad10d1f16d5770b310220b195df1ec515fda3bd21183fee48dde5b", "ref_doc_id": "6dad700b-8a1b-4404-be87-96f3dd3295f5"}, "ca643294-18fc-48e7-8dc6-b783fc07ff81": {"doc_hash": "d832087b0b8879bc088566038ca371faa0175b7b84ecf0e24a9a3120d056366f", "ref_doc_id": "0853a91f-a960-42c1-b0f6-9baa8f8adc13"}, "dcc726d1-870b-4cd5-9974-e2bbf83a463a": {"doc_hash": "b9ad84e4bd67461e4d439b4140e9da5ad9443921c7e6b4c76841b97373b94d16", "ref_doc_id": "9c7c6b04-d790-4cf5-bffc-16ddd95b1b34"}, "fd7430d5-9397-4c56-98ba-dcbfd4ceb13e": {"doc_hash": "aff345d29964409d3b25aa9fc636ab3d55cc64bd223d65e9335afa720cf1faa6", "ref_doc_id": "d4e57f75-132e-482a-bcdf-270f38acbac1"}, "e4e824a5-df30-495a-b7fe-6842524e63b5": {"doc_hash": "64d6b318592fa4d5abcd4f5055f86eac1fa6a7eb5eb5b31d302f3f898643c68a", "ref_doc_id": "37ec63a4-6df6-4ed0-aaa3-e59ff6a2f35c"}, "ec7aed8f-e820-414d-a4c5-9dda249693bd": {"doc_hash": "682e67fd67a9338d3450814bafd3c3eb9de062d5e49b7286ccc89eceb160b10b", "ref_doc_id": "42f50af4-2c73-4f00-a917-911e403c75cd"}, "80747942-9cd9-4900-807f-da6ec5b0d54f": {"doc_hash": "92b7ba67a664fb0a2310890e3af0b1e21fbe740e970730d3907eed8d614d3926", "ref_doc_id": "3fae26c6-a079-4e1f-ace2-d6aaa5dabf65"}, "fac9007f-450a-425a-b40c-e30c75544317": {"doc_hash": "8ee655fbf19f24e2447a7338c13a6127aff87e0ecdd262b76cb5a9e757d16964", "ref_doc_id": "75979810-6419-4098-853f-37f464e898db"}, "0fb72b93-51ec-40c3-9788-13d6aa13cfdb": {"doc_hash": "b0c94bd1afc2959bb162a2f7bd107f444530249d5ea4ecf86e25bdcc5b90a4eb", "ref_doc_id": "f80af379-fd6b-4f95-a291-5b9cfd308078"}, "a4078a39-41d8-43f6-bd1a-48db5ffb5e99": {"doc_hash": "3204afb2065123381ea5eed7f729efcf9d303f3f9082496f907aa5a80bd0669d", "ref_doc_id": "5cc82101-62d5-412b-86e8-11c3f840df54"}, "c9368bbc-79f9-4694-9908-ed69f4c756a3": {"doc_hash": "971e9a9e8ef4eeb5770fc1024b67c69e1f701a553e0db2afe24f398427bcd4e5", "ref_doc_id": "c644b6f3-895d-4c0f-bd06-0f5e06fcee78"}, "6818f3dc-6f1f-4456-9feb-77498ead4dc6": {"doc_hash": "74d58c3bfc61464edc89287ccebcd987b02cfaf34bc42033fb35d25e8bab2e63", "ref_doc_id": "1e262d43-1198-41d8-8d8a-6f7670343339"}, "590e8d16-a76a-4666-9118-58d8ba5aec74": {"doc_hash": "6f554be67ef7b26b9b3eca45d93ae89f14cfcef696af3af789bd76e21de0664d", "ref_doc_id": "e2063691-df5c-4125-b62c-5a263e127ab9"}, "0ea476de-5669-41c2-aa82-25e29a286950": {"doc_hash": "18841f91406de64daea1de41a03d31fefa624103ae0824a8052d57fa8a83c8d7", "ref_doc_id": "ee6ce97d-029c-4490-b4a3-db07aa31b9e6"}, "414d64c9-5f03-4d86-b859-f7036baaccc5": {"doc_hash": "09045fc857cbbc066749e0723a2da2e8b66409648ac812e7d226d449402ec0f7", "ref_doc_id": "797a7b73-f4d3-4923-a360-dbf451551192"}, "d25c174c-b087-47c7-9d65-fbb6356c8962": {"doc_hash": "39a5af31d2fb42571726dd275989fa481c30b411f0079789f83f142449b6ddff", "ref_doc_id": "16a113c1-82a9-479a-88f8-26f94038b6a7"}, "8e348a71-b2a5-4ca7-9be6-5f762eb62ce5": {"doc_hash": "d18fe3897fffd58ed5d90bf409a7d1bafe59657df69842f501fe1b206f9f44e3", "ref_doc_id": "8d7330c2-535f-4501-a8fe-caa62577b0a8"}, "1760c119-df9b-4b4f-b6f6-7789f0030c34": {"doc_hash": "b031e3bfaf00b2862ec51c530782d34ea0377697c9f8a9c083443a60e934b65b", "ref_doc_id": "10bc834e-da68-4933-aa76-9d1fff813a21"}, "37cf2e54-37be-4762-b087-d6152ccd87c6": {"doc_hash": "c50ae64569e174fe18325d71576cb5328e08afbbf428b424cdb71d025f12faec", "ref_doc_id": "de07417a-628e-4f7f-9be7-e7c3f09dc087"}, "8657f37b-79c8-4371-9c8f-3700ae5ddc0a": {"doc_hash": "aeec4c339c310c7f1aac08b50efd68ece94873d8e1d3f55f6ce02b8d88165cef", "ref_doc_id": "a0deb0fc-1fda-40ad-b4bf-be6825d8c749"}, "a2eb9f94-3511-41d6-8c92-1d46678989f3": {"doc_hash": "5e4043f53612d3cbca15cb1244ba9650b972397ad4a0843e64297c0d7ae4729c", "ref_doc_id": "f3bd359d-9f66-4f11-a732-0bcef15f73f9"}, "3ada6a29-8776-4518-9b12-3a60c51313df": {"doc_hash": "f242715a49ebdfe4e729cbdbb7ca68682b7b78236efe9773d96b1db678166a55", "ref_doc_id": "c4aa7098-4014-4f37-b5db-5f94c771e5e7"}, "eb40f08e-c188-4703-87e5-773280852f3b": {"doc_hash": "e48cb9ab661644e38ed997f15a4c5c5364699779373d971bee81ce0cbc99ebef", "ref_doc_id": "f0203cc0-ea7d-4276-b67a-223311739df1"}, "79b30b01-f67b-4062-a4c6-df3a52a58c81": {"doc_hash": "c590e4191449a38c021f66da053bf347bfeba0173de3a341d673a17435854b4e", "ref_doc_id": "7863a71f-7cab-4460-9eeb-9656fe30e401"}, "6cdf2062-0843-4d57-a47d-ed503874053c": {"doc_hash": "f2f714186de6e6e51425e330f04a4fccc94135a3ba57228988c25ebb6e3b634e", "ref_doc_id": "36b3d26b-7471-4804-bad4-2d1f180c7b7d"}, "8d001a58-9dd0-4307-8d5b-8bc0da7ed588": {"doc_hash": "3d6d0ee54b0ada351ba40df49e941267e92a836e0f97c80c307fc0ce882c73eb", "ref_doc_id": "403c9c16-6a0c-4263-bf75-6d71428b1af7"}, "98e2d39c-dc92-4473-8e80-ac345d0790ee": {"doc_hash": "3587183c546d4a2253a839bb201ca49b024db9ba0689238c491cecc60c2434cd", "ref_doc_id": "35cf410d-49ab-416c-a813-bdf7f8837d7f"}, "bfdbaae8-2820-4661-aab3-668aa68e030c": {"doc_hash": "f357431dece7e8e105fe84b1e98ea32cbb4307b1a49062c292a52ac7bfca8c42", "ref_doc_id": "b95be12b-d1bd-4074-93b9-cd814031fba9"}, "7c0275ee-df84-44b7-8759-3d1baefbef45": {"doc_hash": "9af6738de4a3a0b8cf240d29f9ff81b8be2f1840ca1508d35fff0f712cf1faa4", "ref_doc_id": "e475547e-556a-4faa-bf6d-5cf450987bfb"}, "739a9a25-a065-482f-87a8-d0ea57329ef4": {"doc_hash": "67a902e324723983676fb340272daf925d5db2ac2fb78ba154bb71f57e5970b1", "ref_doc_id": "afdf01dc-1776-40ef-9c62-0c15e1d657f2"}, "0392620d-a857-407e-bf04-f97a7dc7eb34": {"doc_hash": "33a9fac39f11cfa13819488bd7f82bee4c912e6c346ce70917b53418e2db8b9f", "ref_doc_id": "c4b46bff-69e0-4058-b1ca-f7baca95ca18"}, "8f5020c5-f04f-4317-a2ef-743d12005452": {"doc_hash": "624715d8ae98701a86cda846872136a7fa62d6f442aca57c45f61afe0caf8a8e", "ref_doc_id": "74c8dc61-5119-4df7-946e-e12ba0a878cf"}, "d3d4c49b-4d71-4db1-82bb-4b859d6fdba4": {"doc_hash": "a478dc537e705924a0f970503e607f0d8531042d4abb85a05ecd359d9f9610c5", "ref_doc_id": "d14ef6dd-a376-4161-98ee-09043710f475"}, "d91cf7cd-10ba-4cc8-9410-a1adf93f775c": {"doc_hash": "e8d30e6c3cdb456144df7cde0f526712f2e7e2cb07a9925c163e0a32d1696b5c", "ref_doc_id": "29a6c8b2-efb7-4c30-b404-82f6daab22af"}, "f281539d-44f8-4333-938c-cd4499bf0045": {"doc_hash": "d7445868eed2daa3f76c1baf6faf79b00b199602b34f411cfd10c4cc70be36c0", "ref_doc_id": "16fd39e4-6d54-47fc-991a-51fc9d8db306"}, "58e6c758-bff7-4f89-87ad-4e8dbd20feb9": {"doc_hash": "f34602b9697241560f33c26e27b4088ccf2beeb287e7405296f2fe7837b68c72", "ref_doc_id": "95f91784-872e-443e-8c5d-9ec857e7f8b4"}, "0dd74447-51c7-4854-82f0-9736c7215f7f": {"doc_hash": "c3300e18fd64b5ef14f141da1704d4d24f6ca68ea0c5e8fe7223d81682154456", "ref_doc_id": "805711ff-fc58-4b1e-b7ba-be9c2a90e81e"}, "41a39dc4-bcd4-4074-9a55-bc886bcfd57f": {"doc_hash": "d1d13c3091087318ee6dab4d16bf77a670464c436b433ce0d2b7ea223a0ad010", "ref_doc_id": "c5d5f2ee-2d24-481b-aa0f-a1e672d8d7c2"}, "ce56d7ac-0806-4743-b1aa-9662f833e7d2": {"doc_hash": "f87e2dce758128913d05e7d09392efec52e943a0a11924403a9b4297770c4841", "ref_doc_id": "b2b147eb-4e8c-4b59-a4c6-5527018386b8"}, "2d650689-0f70-4ac1-b387-70398648c26c": {"doc_hash": "9aac0af1839582c44a3eea081c86f5cd787699135a2b13216d8bb911854f93f3", "ref_doc_id": "d5bcc824-134e-463e-9879-d9689fa4e72a"}, "c1b2da40-9f03-4554-8f64-71ff4c049b8b": {"doc_hash": "d1b5be9518fca748f81fe03d8b32a9e170ec2cc9046afdf30d92545a8770463b", "ref_doc_id": "a94daa11-4bc8-43d2-bb55-bfb4fe3fab49"}, "b4d0cd3d-9280-4fef-a6bb-0c29918869f8": {"doc_hash": "2c6e57e9ba7aa804be9c094af1d4257523fa8edd35cacd0c8bf3c9b923c2a402", "ref_doc_id": "896a0d62-e9cc-409e-ba20-3038a067a5d9"}, "b3ef2eca-6d40-4770-8209-934d82c943c5": {"doc_hash": "aae079490e556e115683b68a3f753b3a697c46241fbfc3775d2ffa42829b207c", "ref_doc_id": "19c0839d-ad3a-45d0-867e-94c5ec4dce19"}, "812d3851-a374-44b2-94df-58540d892a69": {"doc_hash": "59abbe9e1f3264d1889d55daa558d7320c51c9ba7a0b492e10b02f380df11676", "ref_doc_id": "7295b5ed-3551-46b9-8585-d83ca6892395"}, "fb9fe461-854e-4cbb-8722-5620ded0e4b8": {"doc_hash": "eaf23e9ed0d387b2cf8d8753212cd14f4f2a061fbce6e75c955a6685a804081b", "ref_doc_id": "0ba57251-0a16-4042-8760-3ebf2c5f8a7e"}, "bdaa0f2b-5961-4839-834b-bddce0b55741": {"doc_hash": "29df694ca15c316693604eac21836035379723933c9ca2933979c68847ff8e3d", "ref_doc_id": "aa70feb9-2fcc-42b1-b670-634d996a1ffa"}, "e300206d-3ca5-443f-bf2d-419fc84a895b": {"doc_hash": "f0a1f02fc1a0e060f7b26510b1633bf40e980a9a5bee138aab524a6203a2c7c4", "ref_doc_id": "1df352b6-b749-4f92-a09e-88dc00117603"}, "816c1263-f6a2-4f2d-80bd-df4fcc5fca2d": {"doc_hash": "b732b941f15ecd35ddd16bde8cfeec7d900b18b5410fe6e782de43e7496afda8", "ref_doc_id": "2327da6d-0def-41cd-8d06-fc9fc7f37c48"}, "beaca39f-fd55-4935-a093-7bf97a456d95": {"doc_hash": "3807ac8be0218cfa2ce7ec5c5e89867107a04902199cc777b1bd4e0aca97ba79", "ref_doc_id": "13416d19-4476-4a9a-b430-a0fea55ab0a8"}, "d2a77c14-606f-4610-b23f-cab1e642539b": {"doc_hash": "d779ef860e46b6b66d692a5f15ba0599ac4371af8955e1c7afbbe9522234a81e", "ref_doc_id": "905d733b-b320-4f7d-80e6-ec347be1f6e5"}, "e574579d-3c8c-446b-9b9a-f9d2313b9c43": {"doc_hash": "9746aedcc8e2fd5a8181434c6cbfbc21dbb88099ef2e34d8227bc94c97520839", "ref_doc_id": "2dfd9ae9-4c98-4bd8-bfbc-0222226ab9f3"}, "7d30d1ce-2395-45d8-ad27-477d1300cdcd": {"doc_hash": "3cdebb5859dcb8950949e22a3397c6de208bc952d4ef7e9e5167beb97115453b", "ref_doc_id": "a4f3f97d-2692-444f-b286-a4d89a655dc4"}, "853f4537-5804-4440-af1b-d1a9d2636676": {"doc_hash": "f29c32d8c49543684162e85f2b82142f56fc6f3cf1c0fa6432cd97d10ae49f4d", "ref_doc_id": "41cc6a27-4487-47d6-b684-fd5d26f1a835"}, "2392e6b6-907b-4cfe-be46-6eff156bee98": {"doc_hash": "9ee7c8ff06b2ca553a4d888eee86936ad0b9b161aa9cc516d8380344bc0a3cd4", "ref_doc_id": "8a8d01f5-6740-4108-97cd-8ae04ff9e1c4"}, "029704d2-b38e-4046-8f38-435bb0ad0cfa": {"doc_hash": "82b48d1396a28ccd45e7c02945755facad9156e3c2cda748a9dbdcf96f3d1587", "ref_doc_id": "b43723c8-9658-4f9f-9433-bc6872e5f5c7"}, "d1bba514-3bd0-45dd-8bc0-b65d9e1c7f13": {"doc_hash": "22c1120980a5ae42a2b9bc2665489cf13a6eb741dba54a0daee5302d92f1b7d1", "ref_doc_id": "faa39ab5-962e-4a54-a7ee-5e9d1fe4b294"}, "a89614f1-840a-45c9-a643-4d41e1a66157": {"doc_hash": "b4254c5b0a5219ebdf1c5ba187ffafb8c13ceb38aa74e8778d9497087fbf608d", "ref_doc_id": "58b8f63e-4b5d-4c68-8925-4db416b624ef"}, "c917cac0-2364-479a-83d6-f51dfeb7e7f0": {"doc_hash": "b5bdb8b52f5d192fdac87ffb0044441fc5d46a958fbf2111d71b3c97e5219b6b", "ref_doc_id": "faa9b7cd-ec6c-478b-a740-249ed26ec60f"}, "e8fa8d8e-1fed-4d17-a188-a4d2800e3872": {"doc_hash": "a8c0b27c27b8e308ac7c33c5c26c47c0fc87cadc2f1e7f07cf629bd8ff70e9c2", "ref_doc_id": "0881a790-589c-4e7b-9b61-81283ad36e34"}, "3d91e25a-c8db-4659-9d34-aa5ba793684a": {"doc_hash": "4a6f14e079f8971ca762857dec0fd45020364484857d096e1a26e460bea99524", "ref_doc_id": "3fa928d2-45f8-4142-af82-9e149e3f82ee"}, "95abdb68-54a0-44c8-b642-f680fa633a93": {"doc_hash": "a631c60c81c55018f3e658b2d2e3058bb03a2e88ae3aad1d74ab7527d9fa0f60", "ref_doc_id": "e0bce934-aec1-4f8d-a4d1-a58ea3213057"}, "10bde0fd-9fbd-47ee-b599-a3d874d61cc3": {"doc_hash": "f4871a5bf1b1091eaf9492f2a151ffb8cb4e98860414544828924da3bf38b9d8", "ref_doc_id": "00f2a5f1-29b0-4ee5-b6d1-1c310efee388"}, "cb713036-59dd-40ee-abaf-a6fdecd82038": {"doc_hash": "0c82444706155eb6011d9cc21f30a7cc0b4bf3fcd82eefe9d0c1e3221fa414c4", "ref_doc_id": "a7ea9d83-d97b-4d8d-b994-266604edd55c"}, "cb9497f2-e42d-4695-b852-82ca391d35e7": {"doc_hash": "3c59bf926619a51c86228af1b514f15e280e0b0813a0ec5bc14ac3707fd8f487", "ref_doc_id": "927edddb-f50b-4b6c-ade9-0a1d82003e16"}, "67887cfa-8fca-44b8-83ad-ddbfd302b0c0": {"doc_hash": "6bf6a99bb4050fdcb6390297892a66fb50eb1c6b819779ecbb58a794c432ac3c", "ref_doc_id": "db65070d-ecb1-4206-8ebf-fc81d8e3bbe3"}, "dcc7ee51-3e67-4981-8e73-19a08fa02a3b": {"doc_hash": "790d7ed3615ba26071b0b14d873f3fbe16320e7a8a7d37346a4e977fc270b0b3", "ref_doc_id": "a7b6d2bf-2ce8-4505-852d-123a1424fd5d"}, "ae70a06f-eec7-4f3d-95e8-687b5e5ec363": {"doc_hash": "d871525458b10c3f3d326f4129a6df2680d56ee44e2b07d42cb4bf20f08a0ed9", "ref_doc_id": "8db30909-9db2-4429-9f5d-22b4c6a91b08"}, "69fd9cdf-86e6-41d8-ac4a-1946979f557d": {"doc_hash": "8f00263d863b3d8edc3eba7e2f36288c91fca8d2f46e419bf485142780dedeb9", "ref_doc_id": "dd35f9a1-5a21-4e9b-8a74-7c216306b78f"}, "bb6e0f04-0e54-4b28-ade1-e6da52e044ce": {"doc_hash": "23d636bef9f5f91ab710eb1c7d2728c507e1cafe627876b11344fbbdfb83ced1", "ref_doc_id": "60b45658-c9ce-4001-8283-f7206e997e43"}, "0c81ce65-235e-4467-a6a0-88b9c84ec756": {"doc_hash": "14e9d62d9f8d8d02aadcd4b2f88e1070f7f860c595d1a618994a3925b3d7d4e2", "ref_doc_id": "8f4aa600-f146-4a8f-b379-8f0af6bc647e"}, "df2bf765-76c0-47d1-b299-699d2ca2bb57": {"doc_hash": "da8b48146ce0afd45023618b3a140cec82ed804ecffe6d9f48322a7f93437381", "ref_doc_id": "c952c7dc-0543-4dfa-8d6b-5601458c8fc7"}, "ae1b25bc-5bcb-46a9-bb46-4fd990eb1b11": {"doc_hash": "1fbd864e3fef8828207dac522ca75276835b50154bb687be6f50ee63273827f9", "ref_doc_id": "33fae1a3-763a-4980-ae79-0d29c5ae30b9"}, "f3e70fd5-da19-44ab-91eb-4c16ecfca0e3": {"doc_hash": "065ec6a2a7bf3ecd4243525692f1ce31c73d8906f8d2eae1fc75a8993185e9c7", "ref_doc_id": "6b7d7ddc-01a0-437c-9dff-20f3352a1ab2"}, "6d9aeaa1-259c-430c-8306-3beba2275b78": {"doc_hash": "7e16895d5d669e96a47f93abf70fb08e1ed31f8ce04334c1d507bebc721936b0", "ref_doc_id": "868c4946-0500-4f37-9fc2-afbfa857a3ef"}, "e888290c-4fa5-483b-8979-8132dc3e66ee": {"doc_hash": "64d3d691f62088758b29662731c942fd6f8c06b05388010f2a0e93257d0e76b4", "ref_doc_id": "60b39855-be2f-412b-a014-67b2b40b7429"}, "9f4ae8b7-d195-475b-b539-4a0b32494b70": {"doc_hash": "2acf796b18e88729ce83633bf4138985b7943f16684ca8512d6a015ae3d0556e", "ref_doc_id": "fc69de6d-d34f-4492-aa46-e919852178de"}, "3fe3c2de-dabb-4675-acae-5d4f77002e31": {"doc_hash": "ab83b62bcc4eb98cc7f79423d6e59f1cc46e67f57f67478daa7a818257c73629", "ref_doc_id": "391ea42a-2276-4397-aee4-03baacdd2ff2"}, "49e082ac-ee79-4fb0-932b-50f8b7ae92be": {"doc_hash": "5fa97d536affda7c712166a70bda7ecb8ae724e6714df0eb7a0835f8bb81c26a", "ref_doc_id": "3fd0c1a5-90e1-4cbb-b154-fb21b036b43c"}, "174c19cd-820c-41b0-857e-f28bd1b2d9bb": {"doc_hash": "4cf05b9f5ee1238e855445b0b81ac0e253df5439d361b786d7b85dc39bc9dedb", "ref_doc_id": "8af4c9da-6fa7-4f72-81b8-821435c2d851"}, "b5f11f73-adb4-440e-9229-a95f83f5b77d": {"doc_hash": "740e3516d0c7389c46178e9594b0170f071b29d33c27b69e9502ad3441042428", "ref_doc_id": "8da61bb5-1434-4913-a1db-3ed8ff0139ad"}, "54b28003-ab8f-4345-9349-29577a095613": {"doc_hash": "cdee17abe8bf27a0fefa11f2522e628991daefe4347935f7324a13f40ee254de", "ref_doc_id": "255afbd0-a37f-4f4a-8c8d-406b0e32e6bf"}, "120eedf0-73ef-4849-a84e-3f12ff8dd2ab": {"doc_hash": "1c6dd5d9ef27d76a4f20e3b1247aaf4564dcdbbff1fd2450ba4aca87e70be802", "ref_doc_id": "1883e804-6ed5-486c-a939-c0e69afca23f"}, "52b838ed-d16c-4d0b-b7de-571dd46b86f7": {"doc_hash": "729ce1392ebedf5e1807a44cd4391a8d25754612139b2ebf0f6395569bb21043", "ref_doc_id": "c74ea664-c253-4e93-9019-5528bb9d7482"}, "ed747990-d4db-4ab0-8430-3b688efd264b": {"doc_hash": "a7ae7d67746f16e9448abe0ec0a7ce5f677772ed6238e1a40b11d29e01af2a46", "ref_doc_id": "c191cd8a-5a1a-40d4-8359-e4e0b09e688d"}, "83c58c16-faa9-4972-a5d8-4887ade3c927": {"doc_hash": "e875ed60c58241a46b6e94a5dff7b315d13a46225d4e545ad98fe2e54f8c7457", "ref_doc_id": "1d001377-ee0e-45ea-a11b-3c2887f33afd"}, "975ad313-da0f-4695-9f1e-e8acae06f65e": {"doc_hash": "246e7ee502c82b2af2373229d0c6f1865701350cc1a64ec1ec218eab120aeb74", "ref_doc_id": "6c28ad50-1e4c-4fc8-80a2-7e40788c9dd6"}, "52be5629-c655-4af3-adb3-a86a8bb89c37": {"doc_hash": "981e1d90775577c5fb5ff475d9a66009f79b00f4ccb5c25253c3118ce75996d2", "ref_doc_id": "289db677-2391-478e-9b1c-4b1193b751b7"}, "ccdf9cef-54ce-4825-aac3-7d1ef6d24548": {"doc_hash": "fe500ac01c3e8fcd7db53479abc105d8a34e3c4c73ead4d28bc0afa25c6e52b1", "ref_doc_id": "2f149ff6-101d-4d39-acdc-f6e32b0a5f21"}, "7ecb579e-0d2e-424f-aab9-f6772bf605f5": {"doc_hash": "ba7d6d9f2f2da86d91104c5c3cfdf24baa5929c985c6937fda38f7881526a49c", "ref_doc_id": "4a096443-a162-47d9-939a-0fb0946c98ac"}, "a5f54fb4-71b9-4015-abeb-8b396255afea": {"doc_hash": "0be94caaf002f2fa06586425b956cba465ec6db724b7134e0e84faebdd9388f4", "ref_doc_id": "d6dd358b-3b4c-4af0-9d18-49c7ea701347"}, "ec429d08-a05c-4690-a7cd-2dc53a2850b0": {"doc_hash": "0e9ef88a3575d50957c1f1efa28372561b89640b607b7a92055644681c6f83cc", "ref_doc_id": "5ded4edd-68db-4ad0-9da1-7d98cd12debb"}, "d32641aa-22c0-48aa-bf55-ba6c7138fb9d": {"doc_hash": "dba81e1dbda9a2ebc970920cab8ff387dc6d286065881aba0ceb7d3ee8062ed7", "ref_doc_id": "a853aed6-311d-4435-aaae-d20761d89c00"}, "4692d605-7fc1-45bd-9af6-e2ff838aad67": {"doc_hash": "58707156d8af7647d7a083dd2508df91fbcc77b0e32fac08b8cd2efcfd18f940", "ref_doc_id": "c07f65d5-a94b-4b55-8ed4-59879e88eb03"}, "54ce8925-e9f5-474a-9341-b2cae1c36e9a": {"doc_hash": "754128a1c7625308a87755c9487de1d5f8861388a56b6a7ca06967c13e0e823a", "ref_doc_id": "f54364ad-b8a8-4810-bedf-a17c88636320"}, "9126bb45-11e5-4ca9-9fe3-61ff8e66f5f8": {"doc_hash": "3b16b9cb1234f0be2f2308a0d9d1bada164ad1fa92027e5992b16eb043a2fa42", "ref_doc_id": "f219b70f-f4a0-4d97-941d-0104df8369e7"}, "7a63bff0-45ae-48e4-8daf-8212b94844d2": {"doc_hash": "f09d98e1a3c03d73382372b984714aca8f93bd7644c86c59f7f36a8a2d488a3b", "ref_doc_id": "6ba0f0a3-6855-4d5f-a810-8cf32b168acf"}, "0bf0c6d4-9ca4-4c6b-b6f8-9ec2b0a6b85c": {"doc_hash": "c0b6f7906c7638e216452776bf70bf7b7a9c0a8e62156257d47127cada756a72", "ref_doc_id": "e115c218-e8fe-4d89-995e-8d77f6d29329"}, "bf4b51ba-822a-4c82-8bb4-4798d23cf2e5": {"doc_hash": "cab6eff6d9f5a47ed74ab45002226ebf72568e2b26d1c7719ff4dc5bd7eabce6", "ref_doc_id": "829e68b1-b135-4847-a859-d7b204eaa65a"}, "36ab57ad-9a37-46b4-bb6e-61bf1de49e12": {"doc_hash": "9cc09561e6a9f1701e12d605cc5adfbaec1cc3e8738d686288170755a07d43b0", "ref_doc_id": "a61615ef-df3d-4173-a9e2-14a96da682ef"}, "a8dcb576-35ef-414e-8d9e-fc6dfce6291c": {"doc_hash": "b0daa92bf373e81b093f4bece255e7447b10fa478e48a52345bf289bc886d6a5", "ref_doc_id": "8227dd3a-4b7a-49ea-9282-fbc4ad984b99"}, "186ccfc4-e820-4f57-b434-c71dfee7ec89": {"doc_hash": "ea62c2d9afd453ff9e4a4b41ebb0ee6cf32158ac70e2d9b77afab103e7ed384c", "ref_doc_id": "445fd25a-ccf4-4d79-b0cb-547cf5d773fa"}, "6bd674ec-1ff8-4648-99c9-759d1caedae5": {"doc_hash": "1c1bb37e0dc1926ff179883e8ce65a635c71c305b4ffd194ab94b09354a459c3", "ref_doc_id": "1dd15f7f-56ac-4b7a-80bd-35a5cf936497"}, "452ec158-f742-4ce0-8150-4f5040e36a1a": {"doc_hash": "61e6d669196807b4102d9777babd6a332f90d0eb1fb9704d64ce605bea620ea0", "ref_doc_id": "c0e00c40-a006-4394-bb86-7dfe428bc3fd"}, "58788801-2068-4aac-87bb-425efff4305a": {"doc_hash": "05296b6c3302d62d22659ab3931b13dca3f52f4ab0d32bb5ebb4ddb01353893e", "ref_doc_id": "8aefe9e1-3da1-4b0c-a0eb-c88bcfcf5c35"}, "b836ee80-1e16-4a98-ba51-1654b51b289d": {"doc_hash": "c8a64a177f34e8b8b3cf1fd3f9fa0ffe5378afccffc85b69a9e09238c5503e5c", "ref_doc_id": "e61def83-4e90-417e-bd0c-609ad1b2ecab"}, "8fc7757b-c491-4786-aa12-5c82e9bde502": {"doc_hash": "65ddba7c4baabbe2bea7194bcf187bb5f22c716c0ad85af45cced2946a6cf980", "ref_doc_id": "19755f5e-5c1b-45c5-92bf-0a3918ff1d3d"}, "d76678a4-a1f4-4c1e-9784-719966e797eb": {"doc_hash": "30f00e2518d3a0be9296a68afdfcf295c2e6f1e99a81a2850d5e9e5d193e5cbd", "ref_doc_id": "63522a09-9807-415a-bdc8-13ad3f868004"}, "4328d0df-a787-4e3d-a3bd-6ac500dcf8f9": {"doc_hash": "40b39ad552f184c983ca373ef927d4162fe94aaf4b9669708c4695acc01b9376", "ref_doc_id": "d42e1da1-e8d0-4188-8d49-d870a96ae45e"}, "b305704c-1342-4ad0-8f75-4b36186c20bc": {"doc_hash": "9c597446824b8f2f6dddbe2a4f3275d276490771427ecda1da4fb2cd50af620b", "ref_doc_id": "638fd362-9e0f-41a7-b3c3-25a9b6266a99"}, "567cb12e-201f-46fb-9fda-d5d48e6ba7bd": {"doc_hash": "d39ee71523a580c7ae6dcac03e550e3bdf515c3b7cc50c3977c13f9edcc35a4d", "ref_doc_id": "cb506695-c3ed-477b-810b-f158cea54a96"}, "b85a5abf-32d5-46d8-b4e0-1dbcabe7e0c6": {"doc_hash": "e6bab68fc6ef29808878f4c11c1f46efbaadde29b47d95edf6ee28acbbc0262b", "ref_doc_id": "3b619a66-a90d-4611-8b84-f1400c26bb74"}, "01e74903-1749-43b9-aeb4-cab2a0d28c3e": {"doc_hash": "80c7cd3ea44007014bdd12cc708757a8e7807947a2645a12926934cee5871dfe", "ref_doc_id": "8cd8ae84-425c-43b8-8073-642e3fc6a33a"}, "671c270e-54c5-4127-a44d-2c44db901612": {"doc_hash": "3afb3b56fa341ed7fa1cf97e210848946177d5d531e5915224bc758cf9e675bf", "ref_doc_id": "a2cb4083-2ee1-4bab-a7a1-45d1d20d258c"}, "1e641874-453e-4491-9f58-26ecc3386068": {"doc_hash": "d97893a65e61c6e19fad9621de475ea920fc6ca43828101d760c260365714144", "ref_doc_id": "2f039022-0615-4abd-8d02-b418b6f391ff"}, "c61cf845-6ceb-46d8-bac6-7490ddc86007": {"doc_hash": "e61d13b18400a9de23d2add29f957d2522e45deae8c422be90b508405e4a45a2", "ref_doc_id": "bf56cf77-3c0a-4134-8684-108344100996"}, "d68dd9d8-869c-4a42-9479-e3759c3a0cdc": {"doc_hash": "ef85e0746f80ae4921200b7344b3e39362af5af740b26349f193976ab4e6b847", "ref_doc_id": "cb404486-d9fe-42f5-a34e-dd174e0fe925"}, "e36bed3f-0985-4461-95f5-f195ae51802a": {"doc_hash": "32fe581214edac8c2e306161ce905f2359fdb60ba5e093553f2aff699e373a0f", "ref_doc_id": "5843ec08-6a84-4be0-9378-123123f7ce99"}, "6eae4d42-a9de-45d6-99b3-4da7601c0e59": {"doc_hash": "fe693c05be0eaf29c7ea4edb72da46deb52e3ab4294ad67d6559af40ef52bc19", "ref_doc_id": "d113e6e0-ab4c-41f6-8080-53d2d985b2ed"}, "5280a483-e787-4ae5-b428-557f21fe9acf": {"doc_hash": "e41829f5311935093ccab127482f000085c8b5a1611fdef2e34d24c543d5455c", "ref_doc_id": "3572ffc6-e39e-44bb-aef4-21254e195207"}, "a3d62345-756f-447c-9d63-3fe3cfc53d30": {"doc_hash": "f5c665de4a6456766abf03e0b92188d48dcf83a1e6bf24a48f47fdb72599f686", "ref_doc_id": "aadcf74f-b9a7-4744-a0e9-7fe7be15181c"}, "dd2efdbe-7e1c-4c0b-bba1-35a7872904e3": {"doc_hash": "d06623c82d9f4eda9ee53ea28046d760b468368cf71cd0c092c7170b06f8ad9d", "ref_doc_id": "5cedaaaf-5d4c-4256-9078-a0578b3bb162"}, "1a5d47c5-f2dd-4382-9831-1c4de21493eb": {"doc_hash": "96507cba88edd0faa0f6b639b0a2a71161cf0864a557233638a0355a8273930f", "ref_doc_id": "b0096533-6636-46c8-965e-21d6c495476e"}, "71106dca-3b78-4be0-8acd-9244501f1013": {"doc_hash": "efaae084cf0ba13309b9ac8a53119af2402f1e0abd744fe13b27c5afd1b20f3d", "ref_doc_id": "f568caf1-38b6-4259-a243-020e8b9847fc"}, "9901e4ed-9f0c-43dd-83d2-d268bfaed3ee": {"doc_hash": "47e70ec12a8aafe20e7b8c9af9e549afa52ff4ef874e13cd7ded115dbaf94f83", "ref_doc_id": "c0d02e3d-28b5-452f-b631-67a7c910234b"}, "364b04c1-ae38-4d1d-9f95-42c349dd3f7b": {"doc_hash": "862ebad243199a00ee126ad1ae3448f222ddff0e51373d3ddfd08c39dcde5416", "ref_doc_id": "8c4f6acb-375f-4247-a375-86163978a4db"}, "75dd6ecb-d894-4f1b-b256-fd5ac689ee59": {"doc_hash": "55e77b9f0267b9d0261a7d14387a66cd07b26ab4a2b114cca2f1eaef28eb7756", "ref_doc_id": "ca08241d-8020-4baf-a638-9c5dc773408a"}, "e4c48f75-305e-4bcf-afc3-15b6b67256a3": {"doc_hash": "828725c21eb1dce0996622fecfd6f22f0fe3237475fd010af78260b755f4b02c", "ref_doc_id": "59b4fd11-4d2d-4818-8453-ad8c0ac2ee9e"}, "7d2f4331-6c75-4274-adfc-f49275cf6846": {"doc_hash": "a3edac73fd9323a9e6af5c9abf897bbb70d12e757b4f9dfa0947e318d987aea6", "ref_doc_id": "51000967-d717-43e7-8d27-011ab05a377a"}, "d65f0a56-1f14-447f-b67e-92e98a221818": {"doc_hash": "8c32226805542bed1efd9fd8ac111fd048c436d2f1a183745b3b355fe647ad6e", "ref_doc_id": "477d3e3d-6a12-4faf-b0ec-d52ac008b126"}, "51fafe83-e48a-4e75-b6cf-3b075a8e7975": {"doc_hash": "0641894fcf1ef78a4a1b03d842c6c52b008490f1c3682a933293aaecbac28293", "ref_doc_id": "476d10c6-b80c-49d6-9432-53e4d51deb03"}, "22cc2f77-5311-4f7f-956b-8d41b48e2928": {"doc_hash": "9b41fc0929ebe673ca7c63f1fa836e1114d81e138c66407e497a295fdb470cee", "ref_doc_id": "8212dda6-2965-4045-a459-a2f7859ec491"}, "43c42c6a-0f4c-4c50-8fed-22fe6d3d5a15": {"doc_hash": "f30d3f205da365e82520f46317b2ae4b8ebadf304930a21a599bd0f7558c594b", "ref_doc_id": "d9255a00-27af-4637-8714-5c58401a8b1e"}, "a0a65121-93be-4eda-84b4-0e6efd07b0e7": {"doc_hash": "22b6a5d3357e6894576c348ca1e2f872a643d9532a5bb8a619632d2fbfd5cc4c", "ref_doc_id": "3ab23acd-13f1-4289-9cb0-2949ae9e5cae"}, "279d38c8-7b00-4a3e-a707-c79b6bb8f00c": {"doc_hash": "d5b0f1a062d8d2fbabdbc4ea4a884c27a26f7902d41b63bca3002401e07aa9be", "ref_doc_id": "457f1027-efcc-4572-b554-b9cdf2b4b749"}, "370990fa-5905-417b-9a6f-ef7af8eec42d": {"doc_hash": "e5a2ddcadd311418f9294cd24768a709f1102ec71cb1044a8701dd74ff4c0f4b", "ref_doc_id": "4be61f4b-98d2-44f8-94e5-e41919ad1e8a"}, "16407134-7c04-4fa5-a4b8-dacf7ced730e": {"doc_hash": "624681400b7ca118bdcaf2979a22c2a36a630332431cb56a407a6f7794b4b2e2", "ref_doc_id": "b537b42c-cedb-49f8-b089-2b8a2b928182"}, "35128009-e695-45ff-9a69-6c066a0b057a": {"doc_hash": "a59f0030a3133cf7e5c89ac4b5fe159ba44c77b1a719e31afa96dada8a7f18ed", "ref_doc_id": "1e756e56-bb98-40f6-bf40-83043d7e17d9"}, "e5de7c4a-0125-4f65-8e83-bf08ed0c9953": {"doc_hash": "0c83e1f1a1474d220ef68775ed73537be99de06c2ce7d7852df3fa5bd0ed8ab7", "ref_doc_id": "d11c5c0e-aca6-4070-b201-0bc26c16f582"}, "38a438bd-16dd-4d80-81b3-0732c8531dd1": {"doc_hash": "aab23adc7b38a01b0c2e4af1449f5b7ed9f02cf4adc29c20c45162f626f0a6b5", "ref_doc_id": "53003ffe-399a-41f5-bec5-5c20a293c219"}, "506eb36c-8ee7-429f-9978-dbfd3fb4654a": {"doc_hash": "a629732ff10dfe6b9a55092c9b6cc7ec4052aae351312db2320f8d9c85bd7d3a", "ref_doc_id": "e3e49bb7-573e-433e-8009-79a390d40da2"}, "70e475ec-c528-432b-866d-2c3814c1acda": {"doc_hash": "240ebf7232d8bcfad10bcc5a8e8b8565139c28adb0e10e12e0aa940d6af094f5", "ref_doc_id": "8a0648d2-63cd-497b-9e29-0d2a5e650c90"}, "d0dd3ff5-97a4-484c-9a42-1544cf50ba98": {"doc_hash": "bc05379e62110009e8784a80f4bc05111cb69ed8b08c5fb7178d416228f61b2c", "ref_doc_id": "8590d746-d655-47ad-a100-3d21b3be820b"}, "4eadee60-ef8f-419f-a5df-639b22f4d786": {"doc_hash": "9fb262c5423a699b8ca76fdaa127c71dd8b6d07e4d1d6b95ef32c3d987a31ba6", "ref_doc_id": "f55947e5-9e3f-4ed6-a9ee-19f40cef618d"}, "15e55747-9a63-43d3-b03f-9dc3c1cdf465": {"doc_hash": "5a5c780e1136b1517a000d5ad169450e73f18960fc2e5b1a299d8eef2416bfcf", "ref_doc_id": "6911cf87-d9c8-4f6f-869f-00dedd0c8633"}, "0572c031-6828-4456-a5dc-9cb450dec021": {"doc_hash": "cc13b9f6781af3674703ee5d49e70348d9d17821fd1ab1f9388f5ee7899a0e1a", "ref_doc_id": "34b60732-bb92-4e50-901a-42cb4940908a"}, "bac6609d-3fb2-498b-8573-fae3301cb596": {"doc_hash": "7614e0aae689d6c18e358ca221f1b6e5ccfadfa2b0f66e26439ec9044c6f887e", "ref_doc_id": "54d10ea7-1df0-4280-9d72-50364112c6c4"}, "cbaaa184-6efd-43a7-ab38-865c4d209af7": {"doc_hash": "acf75aa74941ecde37182ec8affb4253c15703840c352e8ad1619d5e7561a63d", "ref_doc_id": "3c3b6c4b-3bf0-4e1c-ab45-7abb6b68e50c"}, "67a6ac54-3ddb-4893-8344-1b6373773daa": {"doc_hash": "9655aae0c464e58cfe0ee0c238bc83f9054cb9c1df91a63e480e1ea5a12237f5", "ref_doc_id": "77113889-baf8-480c-855d-79e147f41cc5"}, "db583af1-8d7d-4552-82f0-677ae9b7b52c": {"doc_hash": "277eb5ed9ea1b436621acaa8e3cc42e60f43d1ac88125876df79bee0cdc90457", "ref_doc_id": "876637c5-60c1-4351-8344-5983a67af204"}, "49972ed5-b58a-438b-b03d-3eac0e2d34bc": {"doc_hash": "01ef71ca342381c94c42b5a3ff17154de00596cc2971ad70c1e317efded5eafb", "ref_doc_id": "b381c1ce-09f3-4916-889b-11d43307e5f7"}, "cf59f6cc-a95e-4465-a28c-6a223a2931a7": {"doc_hash": "120d26727615ebdf911f2929c793df87ee7cfb81a5c0f62a2e0c23b0b0fe680b", "ref_doc_id": "a7d8f5fc-2936-4457-be90-436652008428"}, "41aa052a-4385-44f6-a356-86019e47dcdb": {"doc_hash": "7e2f62ef77c36bb5d6edd5331c9d7755a0d6cb4f79d516c3f71f9d56c631c72d", "ref_doc_id": "c6521e71-f6d5-4c16-aefe-0c4cf1dc3c32"}, "9db1119f-9f59-4c77-8ff6-d3b2bba5dc3f": {"doc_hash": "250f3dec9b2b67be445fa906be3956c1848f0036d11d96294bd9fd223b647c08", "ref_doc_id": "73cfcb29-04db-4dcb-a9d5-dd08f4c82c61"}, "72a73888-0fc3-43bf-8ad4-dbd08b8c9b74": {"doc_hash": "c83eaea0d19f7fea735ba666980296e8e5b5a0f352ca6184bd55cafc7123f056", "ref_doc_id": "c47caf3d-9243-44d5-aeb9-5527f91885a4"}, "7442b19e-83e1-4d59-80a8-00f7af0de0df": {"doc_hash": "fc5eec289129e857b0b87bb0d341194591d894d0808744aa3283c8db11644169", "ref_doc_id": "6cc4faff-b692-4a03-9146-49fa6020e04d"}, "1cda061e-9891-4c9e-aff8-5c37d1ffeaba": {"doc_hash": "3846df3487c45f429569ae33baa09def20663ec3b84665832edaacbd93d2ab85", "ref_doc_id": "f883f8be-4211-4221-bd6b-bb053a70967a"}, "6924de96-0525-43ec-8123-25ae4377cf80": {"doc_hash": "f6ffd12b07050346f9799b87a524ba56fddb7f8e76fe009309af0d3e52bc3209", "ref_doc_id": "e99fd6fb-484c-4804-a046-f2f1085e445f"}, "5006a7e7-8fbe-4d6b-a943-e95f09d79b36": {"doc_hash": "2b269a552151707114e120ed621f5ab030a53ef2b02ce24ab4f2fc146d941cca", "ref_doc_id": "ddc19f2c-bad3-4786-a264-55c2dd89b554"}, "605d4dac-b739-4bf8-be5d-d96314fba0ff": {"doc_hash": "405a032d1a7e2a202775974aefd499c4fa592482823a44efd13665e6d8ee3d0f", "ref_doc_id": "9b216d01-1019-437e-8d59-a6c0e7ec8dc9"}, "09f49bf7-0eb4-4016-8bf9-c0cb5d598531": {"doc_hash": "092049bd8989eab4f53d9ad246a501e5fdacb0b05d10b13b719b20399cdc0641", "ref_doc_id": "8db5e1ca-33e8-4a25-95b3-3f15d34b6f60"}, "58894767-3d65-4b70-aeda-8c822727bdd7": {"doc_hash": "468763422711e2a5af119900f5a54bc8afe3cb163fc220c656eab2acb01ff529", "ref_doc_id": "4bfe78b6-f161-4128-b770-63fab47693b7"}, "0c1e2620-ae68-4e3f-84c5-177b134ea99c": {"doc_hash": "1d0907147f0382b64f28bbcc46a694e7b3020669b4f1225bda5f0952c6379bc9", "ref_doc_id": "b0596770-ce42-43c3-96e3-e911138fdaee"}, "2058ba4a-60a1-455e-96e1-1da80e0e1b98": {"doc_hash": "c4641930e365775d8143fbb84448a24a92ea9ee0708cc11fa465d2a9f4355220", "ref_doc_id": "6e01e6c5-3eb1-4824-8a03-44742ec3fb63"}, "f05f7c6e-258f-40e8-8c15-eaefed2c04cd": {"doc_hash": "bae1e63ed19dbd8f253f98361d546e775f63e6516a8da0e6ff587af5bd263fb6", "ref_doc_id": "6f63531a-ad63-4d98-9906-047a5ea1e7c7"}, "8798d083-bd61-406f-95d6-34b1af422c11": {"doc_hash": "db38032b69a619d8d52ba1c96fa9a213914c0a81618f15c3edc2392ab0b1acf6", "ref_doc_id": "18171836-d597-40ba-80d3-ac3abbd45117"}, "586479bf-0dd9-4433-a238-3d5d3353c114": {"doc_hash": "84827c1e47c280b5982c71bb8f54b08fcac73cee77248a2092be518ea3733db1", "ref_doc_id": "99f9bcfb-a2a1-4758-8f83-7b32e281b26c"}, "23a5c9a1-b618-47d4-8cb4-48b9cca305dd": {"doc_hash": "96124f0a1ebb04e4e1a0c9a7af22b97a16eb36d09829248ba5974ebf91b6c5dd", "ref_doc_id": "5ecb3515-d8ed-49c1-bbd0-4c28170f162c"}, "aa7d8766-c9ba-4b99-a081-816d76c64da0": {"doc_hash": "3da7286f715d0f2666659a17c3bf42bade2086069948cba1745bfbd7bfdb72e6", "ref_doc_id": "8651660d-5f66-4ce3-8d46-8395ccb0208a"}, "9d3606d5-2363-4e51-bbbb-f2d49a8278cc": {"doc_hash": "4e1c0a437c43bdf1775c738774951ec50aa194b0a2c5ca9cde33f41cc0d2ab88", "ref_doc_id": "02951735-9752-42df-b6fa-00fb80db7bc4"}, "a7b2c025-a457-4c3c-8541-2f1303066ff8": {"doc_hash": "baec8d852ab90e213761596883104374edb12fdd89a2e759b93aaf189ae33f8f", "ref_doc_id": "51e483d4-fe6f-494b-91cb-a168a952baa3"}, "cd1c1002-6bcd-4a29-8032-e3d58424bc30": {"doc_hash": "63af839e99d5a5e73dc60e4a48eeedc915d2096103377034cf9a34dd348d9864", "ref_doc_id": "3a91f6fd-06e7-4d31-aee6-7a8cbc758a9a"}, "3dd24298-f384-4df1-9dc9-1e2433d9b022": {"doc_hash": "cdc61f1f74577bbc3b5e1bc7035488f5809e284a819b484a68017c729a36f0db", "ref_doc_id": "f88d829b-d4d1-4002-964f-e901c153bf51"}, "7565eb2e-d9a0-4b46-9d3a-7691dc611dab": {"doc_hash": "a66061aac2b5d2134ab4d5463a3a79219436309c1b064206d9f056843707b248", "ref_doc_id": "2f1d47bb-1c96-4a6e-9f36-414ade1c369e"}, "9ef6293e-d6a2-4ef5-b8f4-3bdfdc4ad282": {"doc_hash": "e459bb38acf2b2b07262187da360234953578da851c201ddec60626308482de5", "ref_doc_id": "f58a1067-f3d2-4bce-9037-4f352d3e716e"}, "a026b01d-98e1-46fa-8549-acbc33e3ea55": {"doc_hash": "ea422d2f42cde2d16e18ac9b78d9215d39b02654ddd3cc0cf9dfcf3e8464f033", "ref_doc_id": "ff393923-7299-47d2-a5e7-56c5981d8454"}, "2fa85a0e-f4b9-4bcb-b098-f46aa5d3edb8": {"doc_hash": "5e3e5cfed7e0fe54cceb8485a011bfc0910fbf067c3211b1a2cf700215dd3f00", "ref_doc_id": "2207db1a-f0cf-433b-ba25-8e324887beb8"}, "6033bcce-b187-4def-b2a8-04502d90f5ee": {"doc_hash": "17a23b817a543de109d39a4b8c5c29dc6d38e4132c8de9931d10c7f98e20241c", "ref_doc_id": "2cd99a0f-41ba-49ef-b66e-f1be7a24e7c4"}, "b3cca6bb-3acc-478e-91ea-05bdcac06509": {"doc_hash": "aa708e5348447aae3e79846029199f283c77fdece756deba5cbb4dd6035958f7", "ref_doc_id": "bab13340-ac85-4ad3-a4e9-69ce02d53a22"}, "6f4513fb-1ed3-4241-a9f2-81897b5c44c0": {"doc_hash": "e4a47888c61e91b65b4f5b74fb9d339cf0fc8625b57d5bc2972d77ea87a94925", "ref_doc_id": "2901d76f-ddfb-493e-9aff-0917fb98d9b8"}, "545e7709-837e-4b59-a9e6-139829703f28": {"doc_hash": "7c33d9d459040af8c4b682012f77dd157871909122deba5eea5327a75abd67ce", "ref_doc_id": "8168aa4d-837f-479a-b375-578222b42bd0"}, "fada4697-ad14-4f5a-a882-8578f1ad3d11": {"doc_hash": "0eb8af8c080b45ee977df6c971e040bf1947454fc8c7e673ce9b8f8c1d29fd38", "ref_doc_id": "6a928a86-1137-4139-a6e0-a1e6545a6e0c"}, "c4415407-70c8-48cb-8c32-1c8e0eebfae0": {"doc_hash": "dfb49772401148e1a412695cbc13ca4beb68c045100fae2af33172d2feacdfb5", "ref_doc_id": "423e1ad4-1533-4ac6-93d8-cc2a3d18ec43"}, "1f9838ca-4eac-4278-aaac-a05eaf61dc85": {"doc_hash": "242382d611d8ad105579ed68ff0da5c4c660a9896a5f4be324603b6dd77b363b", "ref_doc_id": "aea1591d-b6bd-437c-b8d2-309d7aabbc42"}, "627cc5b8-ac42-42b2-a61e-be07852220ad": {"doc_hash": "8c27efc31bfacd008ffe89c54e18be7634b46c13269c97d2e13fd8d104aa1915", "ref_doc_id": "d7828f60-d38a-45b5-9bb1-c2cb95111bf7"}, "d37a05fb-b2ab-4e99-8605-8ff628cb724a": {"doc_hash": "4fbd17b033b638e256a4ef83a737da82ce9530db9ac55afc794ab646ccaf4c4f", "ref_doc_id": "f17cb0b0-7402-4b3c-88f0-eab703f511bb"}, "0188cb5c-7008-474e-90e9-75a66ba06272": {"doc_hash": "992d4b85883ecde324f8d58c1399f941dd59e44704e0d0ace364d708f53fbcef", "ref_doc_id": "369c9a57-5b38-4d7f-8eff-7888a9f14c6f"}, "3eff63f7-1679-42ff-b746-07fac5648cbf": {"doc_hash": "abb6ff23a131540bd4b0e80fa360e742df65dd7610ef12a68c7b8921bf55949c", "ref_doc_id": "991a181a-fc94-4561-9218-eeaa28590844"}, "b8096c11-7a9d-43a5-9792-034d20e4579c": {"doc_hash": "33a49c2e845a2a1505b53c374238b8c63984a3cbe46be3768ecfa41f0d1752a3", "ref_doc_id": "fcd26150-6916-40e5-83cb-82af0c2ab6ad"}, "8e3ce7ec-f105-43d9-862f-a4353a17947f": {"doc_hash": "4dd794f81eb58c4dd2b8a1008b52e6eef4502631b9a89250293908348a962046", "ref_doc_id": "8e55505c-1397-4d23-bd25-4a9d56830c6f"}, "9c1c8fb9-2422-42f5-aed3-ebb6dfeab60e": {"doc_hash": "c083449bea43aa0f660effb85d82f28667d68e07aafb9aefc794bdab20fd07fc", "ref_doc_id": "9a6a6d4f-d617-41ae-be02-13fcdff0b31e"}, "e66973f2-ad3b-4787-86c8-bb5bde4ca951": {"doc_hash": "db268bdb2e9c34efa7036e3a0559c4ccd649a8ddf6615036e72c381b4a98427d", "ref_doc_id": "c7a8b548-9bbd-4641-bb40-b395f555a252"}, "c0ea336a-0b24-44fd-9f8f-275e21ddd10f": {"doc_hash": "e5a226ef1ed41e2ef48aabb996b7611cb2888dbc05f052715d58fda884f55cd0", "ref_doc_id": "bc43cce8-c2ec-492a-8b09-2de27968178d"}, "056abce1-ea9e-4977-b12f-30027c4f3154": {"doc_hash": "eece2a7d1c27e7f30d368fd3569419788a6bc33be5b7b9ccda9b2150455d66ba", "ref_doc_id": "4b4643d8-a99b-45b6-9d55-89b9bd53f0b4"}, "35ac07cb-2bd1-47c7-85bf-49de7a6a988f": {"doc_hash": "0340c47ae558243888ca4874b9fc91b0e1f7266ebc5c2835ca58654959686f47", "ref_doc_id": "035ddaae-0770-4fa2-aa78-8cbff94e1822"}, "863116a6-9bb1-4352-979f-fec0fd2c9cec": {"doc_hash": "1474a469dda40be8633ed3e59a5f2c488e436462f0e57ec5c7a052325e859843", "ref_doc_id": "6411c440-2548-486c-8860-a1a673ea6408"}, "92e8c10e-3c3c-416a-9f6f-8abd475d6cdd": {"doc_hash": "6b455add51da9c0e01e84e76c987b4df6d790f3032abcf10f308fa88d33c5476", "ref_doc_id": "efcef797-7eb8-4574-b0e7-e8bc1c4fd321"}, "f3c926fa-742f-48c1-a8de-b865088d2931": {"doc_hash": "9d92eb07fafa6f4efe859cc245beb1b1ecab05ea0fd65658aaefcea41045282c", "ref_doc_id": "1b163fef-8a3d-4398-9b58-41d3bae4e656"}, "a88836dd-8642-4996-9940-6beeeac7ddc1": {"doc_hash": "ee2c243c82f4bd909ba774ba7f6bfbafe4b0214d430aa613ec117e2e9723444d", "ref_doc_id": "93ba3609-f944-449e-8706-3ec5a2be44d5"}, "2b6c1b23-108b-42d8-96ab-9f14654071f3": {"doc_hash": "6832b30cad3f4f5bd8314f8248941ce540983716d577d33be4e0131434a7abeb", "ref_doc_id": "45148a1b-3c36-47d9-8177-a98e37f9a188"}, "ff76df9e-8ec4-4f61-9c81-8a5be4588a84": {"doc_hash": "f157168457758e81c640a3fe2e31c3157a7cb3aaa9fb4901780a673c839c0d87", "ref_doc_id": "66000ee8-8c66-4867-aced-a77715019147"}, "32371bbc-973c-463c-8ee9-f2dfbaec0e23": {"doc_hash": "4da19eebe167138bfd88083a5655595e8393971a5b59fa00601bd51c5dbea843", "ref_doc_id": "84b500fa-5242-492b-8a71-804751986660"}, "e8ca6b5c-ece0-440d-ac19-0f5353ac58fc": {"doc_hash": "dde1fb5844327fd4c8f29c579323c5156c5f8412e16e77b809925a1664c2f8f7", "ref_doc_id": "7149c17e-c002-40c6-a76b-6cd9990a969a"}, "461192ca-f068-475a-b5ff-2e940567c183": {"doc_hash": "34dbe812e970049bc464545446bc646b0bee319d78178037e134d396896a9f0a", "ref_doc_id": "8b9c5aa3-5dad-42d2-bff5-8ceb2b237026"}, "4379236e-a169-4ae2-bcba-0241d1deba65": {"doc_hash": "095ac6fe4765b33ac16d9795bf783c57b1986078f04d10c133b71e3d81c9c909", "ref_doc_id": "1c550740-0641-456a-ba04-019a592cffd7"}, "21f03c25-641a-4bba-8816-2ba018b7e1c6": {"doc_hash": "c547785905d8dfa687e736c67316cdb925dab375f87aa0867e506654afabc63d", "ref_doc_id": "89d81dc7-cd2f-49f9-9e84-67cb5d75ff77"}, "7498755c-9f12-487f-acbe-0ed835edc8df": {"doc_hash": "d45a062da45fdeb6582f0d4972ef14b772367c18c36379617081aab4371251c0", "ref_doc_id": "842a3793-e6f7-4ecf-8bf8-5a0c18eefac7"}, "d9426d67-62ce-4748-9188-03cd1c3a57b9": {"doc_hash": "f89d7e419e6a9bf3936d1d7471b18c848ded51798fd70fcd99380994f28bf24e", "ref_doc_id": "65d10e17-d380-44d4-ac81-bfa62bfb7b23"}, "8fd6c89b-843f-4d4c-8f60-723b499dd58d": {"doc_hash": "7f506367cc1ce29975d1437fab24c41cbe862adba7ae42e52692f528afd0bb7e", "ref_doc_id": "6406d3d2-d9e4-41e6-bf26-4c433a70ab1f"}, "24233e7a-214e-415b-b253-e133e3cbbc10": {"doc_hash": "cc15a484c604133f4ec0105efb939761f406c797d8156bb7ddb95b7c0be6d625", "ref_doc_id": "abf16e74-d0f3-4d72-97bd-8d89ab7da461"}, "5532232b-fb9d-4d44-b830-eeacc868bc9b": {"doc_hash": "3482b35eaa638b4da819918fec108b6ec455a844a5b38ecb648095a50278d158", "ref_doc_id": "100cbee8-e244-4286-a1eb-818a810949ef"}, "d679a408-a5c1-4d39-8f5c-00e8bff2682a": {"doc_hash": "9d4c311703916378671124d1bedc68a13568b818a3387a0f5bb0ee2482ee967c", "ref_doc_id": "670edbce-c53d-43c5-b053-054f9a19acb3"}, "7ae8cc53-18d1-4f12-84a3-05de4e4eb765": {"doc_hash": "2dc860ed2347b18f98f77c8a56035ee7e52875987d86ba176b71653a3d74865c", "ref_doc_id": "736737ac-cf65-4ac1-bffa-05d0b96508ea"}, "7e5c9cfc-fdc4-4641-8114-e46095bc664d": {"doc_hash": "dfbe82da2e9827c1e1ef5f80185edb78373e8e009b32b6c1c486e86599c20c33", "ref_doc_id": "f7da4d14-98f4-40f0-9829-111623ee3192"}, "5e2e438b-41d1-4307-9757-944d1537cf08": {"doc_hash": "5c92c1fbdbd45c8b60cbcd0b5186e6028209fa899d69a10f90e5c15481e973ce", "ref_doc_id": "eb0f707e-ad1e-42f4-8325-a2bfa4f61df0"}, "02ecf6f2-5697-482c-8277-326049b790f1": {"doc_hash": "3fc52c833fd5a102eaffff752676e085331ecf107410956d05747bb9852851e3", "ref_doc_id": "f1c9b2d8-71dd-40d9-87a7-86d6d9732b21"}, "c09093b2-e109-4083-b60b-5f7b1a692872": {"doc_hash": "469f07ff2afb4b3240b7974437572e2705b094670cfda3af2963976dce5a7b43", "ref_doc_id": "666f0c95-b46e-40f2-8ee1-38bd8dac9683"}, "56c2b184-4e3b-4ede-92d1-a620a18d4db9": {"doc_hash": "1bb986f5235f29148f7b2b7268396daeb6acbba8a5fee9a0f64a3329a65c2070", "ref_doc_id": "e4bbd617-a4b4-4b02-9988-912468ed8fa8"}, "c483ceb8-abc5-4f08-8104-aa519ecdf310": {"doc_hash": "493786e68960799eced004a27a3c8872057dac81112ae4a2e9b6ee167b3faa82", "ref_doc_id": "7ca4ae93-a141-48f1-9c40-4a9ae36cf277"}, "94813b11-2a25-45a0-a680-33beac5c0589": {"doc_hash": "cdb15f67d50a83fc05d7f1d6ad967c4a0ef532a464b0c8f38e04f326d969ce7b", "ref_doc_id": "69adc5c1-3549-44d2-94bb-77e5e38305d7"}, "c5b0d7e6-9052-4b44-b559-f04b13dbb6c3": {"doc_hash": "8435bc1300312cb6fd5f15f44ba133a5674f1da8737a80f0d0b2ef55a7dd36b1", "ref_doc_id": "d9b9ff1c-5951-473f-8c82-5dd6106d763e"}, "db85380f-1df5-4ad7-ae36-fb3fe78d123d": {"doc_hash": "39f820eb1db8fdc55b33dc952dc2c7233ced4e3e037f9914548481091dc91b3a", "ref_doc_id": "0c65ab96-cbb7-43b0-aa19-9a77363bae87"}, "4f7e6e3b-3daf-4c23-8e2f-0e7027ddbdf4": {"doc_hash": "e996ad40dbd03ce66050a9adb87155b99037ef9ec68d02b8a6284529243ba686", "ref_doc_id": "0f8b2fe2-08c0-4d3c-a756-3a7feb069186"}, "1615df39-9797-4402-aec9-dcc65526691f": {"doc_hash": "e2352b81fa6004d6dd9e07ef952aa9c037e7b8aa5eebe6f8c9c24d0393891fb2", "ref_doc_id": "0d34336b-26aa-44a0-8e8b-bb9957e8f982"}, "7b8af254-ac8b-4e5c-a07e-5da58354b5d5": {"doc_hash": "10833e51b28232106c6d8f9bf544b4c653bb482a4119cd2a60227251b0647b7d", "ref_doc_id": "e7bff352-15f2-4592-9a94-07b0fcd592c1"}, "8017e25b-1acf-4405-be30-e051965e5a0b": {"doc_hash": "37cddc6aaad8d64c6a95b8f056a827e55255b263302e5712bdd3b8938d3a65d7", "ref_doc_id": "25db3167-9976-4578-85d8-d9c3fa348fe7"}, "2cfe2d10-3391-44aa-bf4e-f1f389649146": {"doc_hash": "1b747e3c8279de33378a681424a135498688393bef1585182bea4692355a9756", "ref_doc_id": "c32bb3b7-6bb2-4aba-9aa6-b08e856a7fdc"}, "385c0983-676c-4905-a241-c5a961a86178": {"doc_hash": "14ec4601da5da869a33d61f8a1ad36cfab71c7fed327caf91ca6a1d14cc132f0", "ref_doc_id": "156554be-74af-486b-ac06-bdeef59d7ee2"}, "b44d221e-978e-487c-969a-74eeca14e585": {"doc_hash": "a338f195a1ee950e2ba9a2c384d92c1cdce2a12d218e39da89775eb1235c4fb7", "ref_doc_id": "de2cd7cb-307d-4c8b-baa6-45cf223d51df"}, "0b8492d4-ecea-46a0-b1eb-8c2b8fedf816": {"doc_hash": "e011c543740f56e7ffe2d81760d0403af60be05fee387e3d34da525df6008f14", "ref_doc_id": "2e91a7fb-ff60-4e67-83bf-b265686eccb8"}, "a61a4895-5d80-427e-8542-e0236e71f4a8": {"doc_hash": "b462b432f9455af6e18484fbbdfc2f167e09b58ca07caedcff7daca950500390", "ref_doc_id": "9a18ad38-e308-464a-93d5-c528abcab29b"}, "3aafee90-d0a1-43d6-a631-c53dd8356493": {"doc_hash": "04cc4f4dd6fa10f3bdf86d42294b874e0caaf178626622ce87b863f508ded6d7", "ref_doc_id": "19cf6f4f-c7cc-49fe-9350-5a1712807e27"}, "2439603d-d4e8-4b4a-a893-54c386e60f99": {"doc_hash": "09503343205514ab4adb3391178fa860ba136fbfbb7bcb5c88a35713a945e9ce", "ref_doc_id": "0fd90f61-f53a-487c-b20d-52ca821bf0d2"}, "6afdfe52-0695-4cd9-881f-5ba7916422b2": {"doc_hash": "70234410fe315dadbff647ed4c802bf905b240f9a1f87b8f024bcd72f21e0234", "ref_doc_id": "b33af683-9391-4dcb-8622-ca9001200c6f"}, "21bc51cd-3465-43d5-8ee2-3226940cd88c": {"doc_hash": "2481d97b31be7d27872dfaf9c6878d34cfcee00a651decd4ce6a654c124dbec3", "ref_doc_id": "3ae7dede-bc1b-4d1d-afe0-c1da08e70dc0"}, "11df4f14-db1c-4a10-a6e9-7505fec69361": {"doc_hash": "a36c4f0dc3e9ad036ca09c4b8014e9c1f87397a8fa290b436867adc476897dd6", "ref_doc_id": "57405947-f0a7-4856-9007-b0da7f4564ea"}, "bad3e458-b8ae-416b-a622-ae35a6b9f9db": {"doc_hash": "2ba02dc4019ea5e858d6acb4851a02d23a13920aaee634deadbe2bf703d00a4d", "ref_doc_id": "71840c48-b07e-40bb-8bce-82b568750df7"}, "6710487f-18b0-4c14-ac11-b08080ab1076": {"doc_hash": "e31e135724142535ba3d79c680e926ee5755ef02bb76d7fec5875e42c46df3fe", "ref_doc_id": "945f44c0-15d0-4061-b5ae-17dc69e978ca"}, "610ca292-f2b3-41c5-a699-81a98d74adcd": {"doc_hash": "6304897633adbd6d13460e025ca7a2365c816c5d46c67129129dd9463674e9a7", "ref_doc_id": "63b8cf5c-7a4b-4de1-bc36-d233578870e9"}, "4823058b-3475-4ef9-8b42-eb6aa834dba6": {"doc_hash": "81823db8eaa06e9e0507c176c0b2a59c18a94767a3e1070c0a34b786f1e36d94", "ref_doc_id": "1cca56ee-b6c6-4988-bf86-c4be660596c0"}, "564e5df2-3d22-4626-bd80-264b8ebe5361": {"doc_hash": "b66464e74fcc0ce0f7fe7a755706df4a47dd8025935f02f1f9d0c2cfc8b75d5b", "ref_doc_id": "f0a17c75-01ed-4d00-8be1-450e1af02ab4"}, "f9386916-9617-4dab-998a-966caaa3b47f": {"doc_hash": "69f1d0b1f258328ca34103152ab5ccbb61534ea96cdef1e7dd55ec43b22b3d08", "ref_doc_id": "1a1fa406-74d1-460f-833b-b99c5971c1c4"}, "64011947-dd46-477c-b5f3-0defc26b68a2": {"doc_hash": "a34364cb8f213a7639740028c7dfe209eab4c2349ab61d18023f7a1cb41e7afc", "ref_doc_id": "1407516d-237d-466c-acfb-04980df71270"}, "c22b4bf5-0843-478a-abdc-b224ae71614e": {"doc_hash": "1c0947a231e29cfbd0d7b34f6cd508d0303e4fd98a2d017d329ff06f1b346683", "ref_doc_id": "c24817e2-c8ed-4e22-aef7-0dab7f7a0f6d"}, "a4b08d12-90d1-4be8-a4dc-30e300bf6ac8": {"doc_hash": "e24a3be29d8e080a410c5a8d289ebc82180d4f1ab87fe62a04db2e69c198811f", "ref_doc_id": "f2a898ea-f146-4897-83e4-70afc781587c"}, "dc4d7294-bff5-44e6-9f51-58826b9c691a": {"doc_hash": "cb6235ace5a42bab3ad04104c083d31d86f477605067eba981da98f71e5b2803", "ref_doc_id": "ce9e5ecf-03e3-4a83-baf4-70b34a051c1f"}, "20b678e7-2421-4200-b2d8-24b53095d9a4": {"doc_hash": "794a9cf29fd380c141c6017f8621845fb46142c7ec67a00227c09de4c30f4f6a", "ref_doc_id": "0fbb9971-95f9-4188-abea-c208c994e6fa"}, "7c5b449b-ae1c-49a7-bad6-4aa3b95976c9": {"doc_hash": "4a457c712c905a48433054a97046249e0dc93bc6189195e101c7bebf521706e1", "ref_doc_id": "916fe532-6486-4cef-83b4-919fffe60fc2"}, "6f69bd6c-f930-42b4-9bd5-04f23ae6c922": {"doc_hash": "b455d8342dc1e6ccbfe559edda353294da614ec3b9ebe853bf50ff9450a4d399", "ref_doc_id": "49896b79-db0f-49b9-8b7c-eaf9691848d6"}, "77290d70-a63f-455e-bcbe-0d09bab23d5d": {"doc_hash": "81cee1f0af9697fa26165416dc09fa8373039e77e2c53508c89d212821a33550", "ref_doc_id": "2d3f0628-dde2-4485-b3b9-1199128e2e49"}, "64121040-8c89-4803-90f1-acd379fcc38f": {"doc_hash": "16914edd496b9706a1bc6be958433ac887e8b05eafea3b6bb79416f60994388a", "ref_doc_id": "ddece4a9-0bf7-4695-ae96-f420ac79d310"}, "a1352bdc-784b-436d-a41c-38577d4ac776": {"doc_hash": "60ab8805b98f74b944e9313dde3697092d6b7ef93ac8aebbb183ed96468234fe", "ref_doc_id": "320a33ac-d9e3-4da1-a7a2-8249cb518f58"}, "53ad5dd7-f435-4607-8d03-bc3069d9554a": {"doc_hash": "db98cf9e66f4180d033320ae482ea6a657b3e18881306fd8695637c91e86d6fa", "ref_doc_id": "b33a3dc7-3f20-4d4e-8352-12f945155105"}, "f2ab7693-ead7-4e4f-8999-4ba212554a01": {"doc_hash": "4294eb691fcf436fd1919009e2de28e194d22ac1331643f0b82e9737c7da14d9", "ref_doc_id": "e488a99a-0ce9-4ed5-aac2-2705841e6c86"}, "0fec8412-8e4d-4a8c-bb63-c5c9a166c74f": {"doc_hash": "d990e4801e470e2a76f7cbd27a5d05ae7f187859a1471082e63bab71c05ca4c2", "ref_doc_id": "8b74abb4-f08b-45f7-8337-08ec26f954c3"}, "b6591875-e708-486e-8816-df5f8940fec6": {"doc_hash": "474679ee77d2959710c7ce3eec9ada7af0a527b417f07dea56cde70ed68a1497", "ref_doc_id": "97988f04-df17-4b95-9e25-857aa86ce61c"}, "6d10261c-a581-441f-a135-9d03b4c6c9f8": {"doc_hash": "5346987f17030ccdb29e1af4b71df405e941254b85e9bfd0e12536f9a17eb323", "ref_doc_id": "1315fe7d-28da-4bea-832f-ab262e1459a1"}, "e622b7a3-bfea-4147-8e2a-5cce5fbdd2c2": {"doc_hash": "33f8bb9d391a2538bf0ad2c074b3302194646c4772824b13d9360d3759bd2790", "ref_doc_id": "705816f0-fcd6-4b23-b2b5-b29e3eee70ab"}, "10de2dea-d32b-4d70-b1b0-b0a534c26248": {"doc_hash": "2a1cb3be34f43d3445bdfdafd33a397b04a97e990fe7cd67e496bd595aed586f", "ref_doc_id": "76c30e17-ae9c-4b60-9567-c1825ec9db78"}, "e304d41f-84d3-4479-a81e-b5e76b3fcfba": {"doc_hash": "4b3409c524d25e73778b7ad95f8df35cc7fcb7f1c4159c2955f5189f92b93bdb", "ref_doc_id": "82edef89-8d0a-4563-896f-4d6c4bb990d2"}, "b3c4aa5c-0c85-4664-963c-120ce7fa4529": {"doc_hash": "969a77c607dfb9d740f0503d055d787fa9efa56e34554281c5b7eaa1e43b7c9b", "ref_doc_id": "bb1a5010-11a0-4661-bc33-678098c178a6"}, "cb7ce942-d179-4734-bc3a-ca5c8340beaf": {"doc_hash": "a0499607131d1c7f27a875e976bfa5313fe8a02538778c29d0343bc9e34c1068", "ref_doc_id": "3e12be2f-9b8c-46d2-a033-33452c432501"}, "ce7edab5-04d9-4518-9e73-9f5e1838ff62": {"doc_hash": "4ae6cbdfae20681b81f68ead24e55076350ff92fc9ee8e06b0542cae87288da6", "ref_doc_id": "dc9c0258-3bad-4846-bbf1-a50297705b5e"}, "3f334e8b-4d41-4fc4-9da4-87cf84620924": {"doc_hash": "9622eb6828b3dda4f1d1746025597d7cd1f96cad6e99088bac7f0541d2a1f8d3", "ref_doc_id": "885419e6-71b8-4db3-8eff-cf9ff319d571"}, "faf74b75-a920-416b-b6ba-76c9e6869f49": {"doc_hash": "dfcce5d136dc540326bb797a2b7dfa119455843b894bf1031a7e069fddfaba7f", "ref_doc_id": "76b785d8-9237-4b49-84b8-a424901da45c"}, "5fb882ba-6dc1-4993-92c8-1d7da5a4426a": {"doc_hash": "2944ccfe445506d9521e2a62779230ee81c999d97a184b523d73fc9b19e10538", "ref_doc_id": "26427d66-bb77-49a5-a0fb-0e7562f29675"}, "66ae7106-7aa4-4730-b9b4-222f555849db": {"doc_hash": "92ceacfa20b55b92b50895e9c5f944c7f7f20430d3a83098bde711c2989a1aa8", "ref_doc_id": "d5849112-bb6a-4bf1-9f92-33f624f2fda0"}, "0d4e2453-cf83-4d6a-88c8-d4d315c2bcb1": {"doc_hash": "b3ec090499d5985d98f77766c8802b9c35e0ed79985fdca2c8d8855fee1cd92e", "ref_doc_id": "70e058ad-160b-4b1c-844a-91825cfee09b"}, "fc8c2022-741a-4542-9447-1fc152e581ae": {"doc_hash": "690a5c95c162e29b5044831d5a7a0e6d0cebf6bfbd4dc1ed0f93643a7dfceb2f", "ref_doc_id": "3bb9769c-a324-4150-b291-328b0f3e25d0"}, "6febec43-c48e-421d-960f-4e3c6a991303": {"doc_hash": "dd44361ee5a97287663c575ba98e2f4bcf9d9c6a0c51697f4e2d9171f5da577a", "ref_doc_id": "7a129958-1750-40f8-be0b-7b4be9c8ddbb"}, "f60830c3-0efb-4e61-bb5b-e803f3456dcd": {"doc_hash": "8fab2c905fe13f6badb016dc756595a13f3ae75c3a47e287145ca949a04fdb82", "ref_doc_id": "3d097433-2c84-4dd2-a5a5-07fc1fab02e3"}, "59060058-95fa-4551-ab10-ce930f71d2f8": {"doc_hash": "e35016382fbe32a97a9864cd58a0d6e177f3da6131816bede90be57f81a884db", "ref_doc_id": "99e8ac6a-77fd-4bfd-9d60-696fc4026ffc"}, "876eb332-7c61-4844-9d3c-ca94bcb7c660": {"doc_hash": "ed100d62917336da161110cd92e6e802154cbca4d4f590d2903203620eaf0f06", "ref_doc_id": "2d0b6c89-6b4d-4096-81fd-96e03686d751"}, "a02d4209-cfc4-4f5b-9c58-b6708889ebee": {"doc_hash": "042566510f340d7702d3d518d1f44959ad007f10458e9b3c7136acdf14578586", "ref_doc_id": "f08dce25-ba5c-4739-b9be-e88e1553ec83"}, "7bd98a1a-362e-49de-9dac-160fdb34c567": {"doc_hash": "a772025f63748fdc63e21756aba8d09741ff08cf316c00c421b569e4b8801719", "ref_doc_id": "b7b3d4ba-c1be-4781-a5f3-ae4707ad8773"}, "287fd056-d2ac-49f6-bbef-7b5a8c4ce18d": {"doc_hash": "d6805b478e267879e754905ac01a5b2a88355237dfa9629c27792de92c0bedea", "ref_doc_id": "68848041-6200-4312-a6c5-25420beb7e87"}, "522dc3b3-2c48-40cd-b166-636fcba7aeba": {"doc_hash": "2363f70f82731a06a6111d66d2e519b6e26c28359fbcfb4feb289658430bac76", "ref_doc_id": "6e955d32-9807-41ca-aa3e-d44c101c8bf3"}, "8e8eed04-2f47-4ed5-9140-56b7a2c619f1": {"doc_hash": "7b64f0cbf9faf85b7af7c2557a46f505c0cedf3effded76d281659226bc436c8", "ref_doc_id": "84304a1c-86a2-4927-8e05-3a8e5b843418"}, "cea71525-f98a-4a61-84ab-e2340b44257b": {"doc_hash": "bfa36f07d59c41dbc85113ba850ee1fd12aea0a5dbabf167b7ab5367e2da277b", "ref_doc_id": "75a0c649-f76a-46e8-82bb-8958c234cdb0"}, "7f84ae3d-673c-492a-8906-00919c09c13a": {"doc_hash": "b1e243a3e82013efe9139d47b82bd9c514c29450d75f3ab34d6ff3f10fc2a2ff", "ref_doc_id": "9613b036-2564-4969-89fc-ac5ad9ed1553"}, "e2534734-09fe-4fe1-9f30-3cc26dc15652": {"doc_hash": "11d0bd49cbb9ec558e42b45d0b7fb466ac9f2e7e98ee9e0f0bacb147bd467a3b", "ref_doc_id": "6b535e2f-4352-4ace-bdca-abfec18b9d72"}, "786be4ca-4d53-4f57-8350-0f9f1c292de7": {"doc_hash": "9e550ab3a719d2b9e0f93aa6d25c467e924dfba527406aa6b71a333781b0a326", "ref_doc_id": "33766326-d603-4172-9216-185e1a3af1a3"}, "677bd193-9f7f-4bf8-ab65-e650c4fabc73": {"doc_hash": "9b9d87a497a3cbbff1fbc5b74e29f2e2a9b24665c5d108c05908c08297019644", "ref_doc_id": "c370eb14-5abf-4fc0-a567-6425e95f02a1"}, "7ba475a9-0dd7-45d3-b11c-50bbd10e2d9f": {"doc_hash": "a7c9d216824b46c58815737e28763d1a8b25b9ad95a9e7f9d35a0ae2348262d0", "ref_doc_id": "4405f22e-4cf9-4990-bf49-716687071719"}, "d828e48c-8a00-4f77-9945-af3902fb84f7": {"doc_hash": "3d04f381c89fcffed8a164aab97f6a6ceb2c3e354bd0dddc614ae12ae5d090bd", "ref_doc_id": "a3f8d2ca-b3eb-4dc4-811c-8f2b693827ce"}, "a9818429-45ca-4873-81aa-015f974842ec": {"doc_hash": "f18bba0d1c3daececeb15d801e9ea60e8e12fa948637aa16ad8a6d081187e271", "ref_doc_id": "bd6bef1a-f34b-4232-87b3-3bb9dc2cab93"}, "fe71d3ab-d181-4514-96ca-e0c450bb7946": {"doc_hash": "70cf03dcef5d4d2f30245a6596193427b992732e04b472fab4a0ba915c9378c0", "ref_doc_id": "f20b4cf3-a044-470d-8164-430f1ee28996"}, "9dd81cc2-0402-4392-9e9d-f9f67e1926f1": {"doc_hash": "49fa381ae6c0cb51e696d65f84a1a03d492eb0ab466e115d940cf99f89907803", "ref_doc_id": "4f59675b-ba35-459a-a913-4af8efb4bfd5"}, "92897c38-0b87-466b-a41b-d4e7c1721fa1": {"doc_hash": "7745ac6b06803244eb9716eca7383955745cef48f9c48496ab8a463f873f4a38", "ref_doc_id": "aee005ce-55ac-4a26-95d6-396f8d14c49d"}, "21f3961d-0dd1-41be-a2ee-1edb5b1f00b3": {"doc_hash": "11547db45a6628162d6d6d4bc878dc0c4d850bc08a488d374b6791dfb0a8a6f6", "ref_doc_id": "659a3f80-45e8-4de6-be6c-c5775355c661"}, "75c47b52-58b5-44f8-a6c7-150d6efa5b74": {"doc_hash": "1b6b357d697cbc1d936bbf9663f499f98af1eeb4144f5e5974f906ce1403a461", "ref_doc_id": "b0bcaf8a-712e-49d9-99e1-05d0f2f77725"}, "061d17d6-f278-4634-84e8-61789dc1aecd": {"doc_hash": "4321534f178218f56f18ae2ff9f82640d8b669cb0dc77880f0fa6b551bb6fa05", "ref_doc_id": "23cd8a10-87fc-489d-ac8c-5768cbd0740b"}, "8517f765-5cf8-4292-b78e-d455fed6b3bf": {"doc_hash": "3aadd60e976a7f292f0fce9cfe9525554c550437257d84e4f167731faf127ebf", "ref_doc_id": "98b61723-8bb4-4570-93b8-8341d438cdcb"}, "6775a72f-4cc8-41f7-bad7-364768ad9d02": {"doc_hash": "c12486bc58c202a6645e6da4facdd8ba182cb8952b515dad4bf871cee432ad99", "ref_doc_id": "91ea60f6-26f9-4363-9bdb-c955e293854d"}, "1f97f3aa-4adc-44a6-b110-57127c75971c": {"doc_hash": "d3968c4bb157a08e82458a0641e7a0af868ec8b70572e0368696eedae30b4466", "ref_doc_id": "dfe497f8-26b8-4e5c-8e5c-6d5fd0d41055"}, "78c7d9b4-6a25-4441-8a76-5e054bfd1370": {"doc_hash": "7c18653b8a2a120d59ab6b75ce688e5879664bb924ff8345bfe95ad141435202", "ref_doc_id": "9a283e18-63b4-42d8-b7e3-f80434d36e7e"}, "81c5ef8f-88c0-4947-bb2a-76364e9467fe": {"doc_hash": "341cc243183952fb18a81f579bbfe6f8d4d3728d7309c9525463a465bfcbfe85", "ref_doc_id": "d00d75a4-a8de-4271-8d56-c53f6cd68773"}, "a3561a9b-a250-49fa-b275-abe2c84f55db": {"doc_hash": "22e91e3c34ad3594a48ae2dcc0f15d633965e7f999023ab328f39a19178fcf94", "ref_doc_id": "5a0d48ab-4fd0-4eef-8497-2d9b40d14a8b"}, "2526420f-0792-4e6f-91e7-c97c2e5f1416": {"doc_hash": "d02db631c90ad39b0d2dbf0a91c8f51ecf984ebcc261fb5ceab8af7770427860", "ref_doc_id": "9e70cb36-8e1f-4dec-bb42-04de56b1fb3e"}, "8dc0b306-a33d-419e-8286-d6850f1726d8": {"doc_hash": "401f391805829fa387615e509318d2f202c2118b00dcb95ee056fee8aa8fe8a5", "ref_doc_id": "18425161-0e20-43d0-b022-b99fe8503b23"}, "a600cedf-4627-4ceb-af17-f20c1a759475": {"doc_hash": "503737731bb7953982a9acc61c0842fa7003e554466850d27c89459d6898bf67", "ref_doc_id": "c2ba2725-e4ae-4a92-888d-25bab2210d98"}, "0baaa147-5430-4e8c-885c-abf3ed156158": {"doc_hash": "4ec17523cf17d8fc7b44db571ab960abd2048f5d654ee5706a4c5090c5466772", "ref_doc_id": "3c1a7493-275f-412f-af05-9ad0a1284987"}, "e2a4c1ff-fc5d-4895-a03f-afbb52efd04c": {"doc_hash": "b7d443100fcbe07984dc4d7b6df8333b6be1426953f181e9a2d982637bdfb211", "ref_doc_id": "eeac4b2c-03b9-41e6-b4f3-0a3516d591a8"}, "c8051173-f18d-43fb-8652-c0cb2de9918f": {"doc_hash": "396ff0642e20ef28fefde4b2015fb599c6a372036c1be3c122ae9b666685bf7d", "ref_doc_id": "f8c5f044-ffe1-4543-9822-f358fa2b0746"}, "a34c5376-742a-43fd-ae82-c58161594746": {"doc_hash": "de95c09990fd05836fd14150385863bfdea2d9c8a85ee37799e5fa474bd7ac63", "ref_doc_id": "8c0a8d1c-4b58-4ade-ab85-4ca953647091"}, "08322b45-ae66-4411-ad7f-22112b4bd09a": {"doc_hash": "56974080d3ad522723c7d2f8b223ccf3b54f75efbd7f993c5e15d940e8ba77b4", "ref_doc_id": "5c303545-8bb9-437a-9cab-af251b99a2c7"}, "c7acfcbd-9738-47fe-8587-425f7c080d14": {"doc_hash": "836459f5474a7e383368bb3219779787a17febc8467705b83493c5fc6f53f3b7", "ref_doc_id": "94c4a39b-2d26-4d29-b6c0-5216ccb27556"}, "b17bf47a-0974-4c56-a6c0-3cf7774c7dc5": {"doc_hash": "cd584a1996f1127f5a132488a76ad1eb396a9410babd81b3165b525e60d80da5", "ref_doc_id": "73784c4d-3691-49ba-9fc7-a8adfe8eab80"}, "24b42c5e-6c29-4bed-84cc-899eb4c53589": {"doc_hash": "7de0bebc32bab90626506e03939c37be5c311ddd9041b506578f49632f0757d8", "ref_doc_id": "a2f14db2-b062-4977-a5c9-f2b5927c74b7"}, "29eac260-7dad-48a6-aa40-c4142e8c878f": {"doc_hash": "acfe9e20e7a1b33dc15b9fccf7f43ed49dc2ab44492018ecdcc1f7c9c98deafc", "ref_doc_id": "74278583-c5b7-4b7d-b822-74bba33af6ba"}, "92f1b77a-0aa3-4dc6-b7c7-23d0acc94328": {"doc_hash": "9aeeb791e6913ac83c32ce4ff314359dc611c9785f3dcf47ee4ad105d6fd97f9", "ref_doc_id": "e67af9db-650b-4a47-a3e4-a6c12189f96f"}, "4a399b1c-bd9c-4568-9c9b-b410c6c9a866": {"doc_hash": "c0212174d911d90d7516f2ef84a530ca1d57b45e15554856ba057705b039f0e7", "ref_doc_id": "bada4d5b-b22e-4d7f-8979-76aae5766bab"}, "26528528-3ca4-43c5-9d82-a9e7a3cce09d": {"doc_hash": "7384c12327ebba9a15cb2bb89140672bb2e045a859aad828af30fa87884b64b7", "ref_doc_id": "17c7ab22-c0df-4df6-8204-6809e8e29948"}, "985324a9-4979-445b-bf38-a225e760714f": {"doc_hash": "50f015f002345f1c694a1871f94f508313a3ec62ff745d0c2ee8dc46e7f3adcc", "ref_doc_id": "e22a1cec-dbd5-4a2a-847c-a1c50d3c1725"}, "24ee6773-bb3d-425b-a9e2-3d64384a234d": {"doc_hash": "3821dccf45bae19be685430c2a888abf62fcc1796911bb8fb30b5344dc40396a", "ref_doc_id": "8e3bdc00-76b2-45bd-b6eb-a511b520933f"}, "e41f4c8a-b74c-495a-b224-50d14a628238": {"doc_hash": "27dc5d0705078010f0cea3c51ddf1c41c52ea10b0145a3752441cf27ce4a2c6a", "ref_doc_id": "fa48f675-5675-42c3-a601-bf485b0e0bab"}, "59db4051-6735-4080-840a-40fafb2f305f": {"doc_hash": "31bc77797597376be8cd73bfa37693906b25d400ffb5e9e1bac27567b3d01c81", "ref_doc_id": "c166a0a0-9e66-4979-a029-ab5212a07344"}, "a52d7ed7-c2cf-423a-83c7-177afe53de81": {"doc_hash": "bf10d0105878ffb0884545f98b450a969b4825053e0511be1ff87f3e2882fe82", "ref_doc_id": "61dd2869-2bdb-4681-bd02-e1f69942b694"}, "2e16f9fb-d05a-41a1-9aaf-1f573f9df918": {"doc_hash": "f767ba48caffcc27e9ba9869d2e9f7a0945ca7cb7bc5a21f6ca046c45fbd528f", "ref_doc_id": "7b299776-5974-483a-82d1-6e2bb601df8d"}, "eb1fbbbf-25d7-4399-b5f5-2414bc720da3": {"doc_hash": "9f989b0601e3d2957a470b6e07a726fa7b9843719d37d4d53cff76141810d35b", "ref_doc_id": "c4e17d66-49ce-48aa-ba73-a4f113e958e4"}, "444e85b1-1385-4429-8998-44263cc3a9ce": {"doc_hash": "9cec2113af7b6d6c511446d52ead347cb7638d2ba4b245728c624e39004f7349", "ref_doc_id": "6dca0a7b-c1a2-49cc-9dce-08a60063ad43"}, "113d6fa4-5d9c-41b0-a036-c8d578170124": {"doc_hash": "2bcbf4debdcf99c439c08207c84031ac72cae8dd678435d70723f4f4a856e8e4", "ref_doc_id": "5662666c-6ed1-4d21-bf8b-a03bc949c465"}, "1932c12c-6421-4434-a382-82e48619946d": {"doc_hash": "47aa190e01066937ada82543764440a9b65e94f9de8f9ed21154fd3e80883b3a", "ref_doc_id": "b1382c47-43b1-486f-8f79-58779993f163"}, "111d76be-c792-4f39-a6d9-07f36b8e92c3": {"doc_hash": "fd1c65365065ce2192828246fba0aa698fec6baf723921359892e954407be4b8", "ref_doc_id": "fecb5b9d-ef87-4655-8aca-00b6ab50e016"}, "ff959260-1c5e-463c-9107-c5b20649b630": {"doc_hash": "dc35b90eb241973e113ef43fba94fbcdb47901b31a1fd4357e78c1c8c6e3dd08", "ref_doc_id": "0c248a63-bf2f-42ab-8ace-7f0ba7082233"}, "f6e84b64-e4c9-4280-aa9b-f6de74e2a7dd": {"doc_hash": "97c39bd41c59067b03083e2cec7b7cbadbdf702a7eb517ac6730dbf979c4a676", "ref_doc_id": "54bdba4b-44ba-463e-a593-0820957beecd"}, "48403e61-3433-4b12-8e59-b3e247c8816f": {"doc_hash": "4969bb77a3f7c87661f50f956ab30b58cb4facb3ccf36c258b12996540b9b82d", "ref_doc_id": "3f68b80f-f5b1-4268-827e-ead61caabce6"}, "4430042c-11ca-4dc5-9da4-23cb09193c3d": {"doc_hash": "33f9ca53804935a6d7bdd9ce42bcd8b5878d14e76bd1d2c06581ea10c94e66b9", "ref_doc_id": "3297c95f-dd53-4b24-8f0c-c00da4e2ab93"}, "6c2080bc-0e2b-4956-8658-52f201d3b885": {"doc_hash": "05e0f5be3c70fd924b5dfde91be7b20bad3ba3d50eb5f68bae8744a45253ae6a", "ref_doc_id": "ad9e0bd3-20e5-42ff-86a1-7256963b9cdb"}, "5537d7f9-6a19-47b1-b361-e8031cb0fa93": {"doc_hash": "42dd4c072310510f4eaabbc158f55fecbf51cb3b79aff026bd90c2bf4bb07972", "ref_doc_id": "2d09ec18-2c77-4acc-b7cd-61079b7a9185"}, "10d91382-60e3-45ce-9f75-7ee6510a8a12": {"doc_hash": "53245c56d74dfb8132cb7d8ca70ff7668ac17094a9602bed0991ced9672f3598", "ref_doc_id": "2def759f-7a43-4c2d-a5f7-1de7241c28c6"}, "7191a264-352b-4042-a71f-81ed889a9759": {"doc_hash": "1e216d515e05858198318843dd0efd2899710d52881611692e07632292cebce7", "ref_doc_id": "401dcaab-930c-4884-a09c-15310af427cb"}, "2db54de0-e99b-46aa-8448-4e05133b610a": {"doc_hash": "d7bf5230ba7ae5493f08fe9f3e4f0b7393e8bede2fd87dc9a3ecc26ca649777c", "ref_doc_id": "e7a41ef9-a50d-428e-8ffc-f079a7c4f162"}, "f89aa799-a5de-41e2-8240-b3465ece5a4e": {"doc_hash": "7b36c54330e7099cdf722fc8ee19d1a7c53a024c4a15866a4793f9b9ae57942a", "ref_doc_id": "450295e0-9905-4c99-b8e7-2288c4f4d90e"}, "dafb7ed2-80e9-4c3e-a2bb-5f84eac6ec22": {"doc_hash": "f40fa2f98d0581ba6ac740bc107fb791badad13e7ad54eacad14904d35336215", "ref_doc_id": "d911535d-460b-4129-83bb-6dbebb4ad8fe"}, "f31bebd2-944f-46cc-8b38-26311caa5a6d": {"doc_hash": "06c1a76778cac15f2c787f432d9f8a6a1a970c67e6f0c02eff43576bc0277485", "ref_doc_id": "f36c8323-9ce7-4b62-bd89-8dc796fd332c"}, "441a75e6-d042-4423-ba49-94fc087ee9b0": {"doc_hash": "357f0beb9fc037c16645f3c0ba0ec3e2dda3c21ec2350d0c35189d0538ca3798", "ref_doc_id": "22bf24d7-b8ab-4660-a2db-0c80a883f6e0"}, "360a489c-e4f5-41f3-9cd7-0efdcbec93f4": {"doc_hash": "7e8a9db4152ac0d25746e86a7b6766d201fbbc59f3c996e4fb764b6e2e376b2a", "ref_doc_id": "1ae750d6-e0ff-45ed-a316-6ad98edb5ed0"}, "c91239bd-8a46-4469-9f75-363d4973c982": {"doc_hash": "09498cb70836e1d0f3e5a4a3ac5a4bd28527f4d04dd025ac26e44d049848c9dd", "ref_doc_id": "588205ae-9ffb-43fe-9add-30d034640b97"}, "43323f28-ea2d-482b-8af2-ac465a90828a": {"doc_hash": "b0be14f47646af4776ae80108e72158eadb52f3c1ffcbbc9e8f156ecef362ea0", "ref_doc_id": "4e1e1247-74bb-4bc8-b245-3d58b479ffa2"}, "a5d60bb0-6328-48fb-873d-a314663d1c9a": {"doc_hash": "a4323c1e91fe4e7cb0a72b621ab5cd31af2a3e5982f61c122a0e8556f62a5ec7", "ref_doc_id": "15956934-3793-48b6-9bc1-a63aa64ce66e"}, "d4b634ad-4fce-41a2-b33c-d0b5782dc502": {"doc_hash": "6426856c8eb2964590ffde81ebf68f3572b819efce2e4b4c110f6e3642d192a8", "ref_doc_id": "f2a5d221-9b02-4ea5-8779-124c392f208e"}, "639a3fd4-8897-48fb-9e54-76f3087d26bc": {"doc_hash": "3587959b5a26af606a75545791747be7d0ea9fbb689694a220d4f39ac17227c3", "ref_doc_id": "5ea36e0a-80b8-46ed-b8f5-a722bd40e229"}, "b000af35-4c8c-4c41-b4fd-fc2c25e13be0": {"doc_hash": "937f4a155b9d75c7e51cfec33e91832009aef39705dcbf5cbdf46d80aa9811c6", "ref_doc_id": "2c82261c-8143-47b5-b083-4e64c589b417"}, "e7e9909c-a677-4557-9b65-820e70adc961": {"doc_hash": "3eaf8355c2196947896d7e5afcffd2c602ad97bb7042522ee2e6091187a059cb", "ref_doc_id": "055319b2-f77c-4052-a4a9-ea020923e7df"}, "c759e932-fdc0-4db4-8281-e73ac57b186b": {"doc_hash": "cfcbe8793801e7e6410e2fb4116cf0cdfab241a1b51c8ed73439552016f9f294", "ref_doc_id": "c829bcd7-0bf8-4a06-91db-3daf3a884eba"}, "91752d62-abf1-4a0a-adda-c150916f2d88": {"doc_hash": "b6dad135aecacf8d3dd11c45f34ca7c73786eca6133e31621d178ad621623b5f", "ref_doc_id": "2f25975e-2093-49f4-b680-7adaa169f22b"}, "9016eb45-5b73-4920-b8a3-c48ef02b42ea": {"doc_hash": "3adc4b2c4ab17a568cfcbdc3528a814ffc3439a8b8c8164aca6d80a119dffa3a", "ref_doc_id": "f2f934a1-ddce-498d-a638-3a20511d33e3"}, "6bc77d9d-7cde-45e1-ac77-5a912aa254b5": {"doc_hash": "9cd375a77fce68ddfb88f3cdf5d679fd3206747d03641106252bbf4a4c7e1ba3", "ref_doc_id": "50c21f9d-0dfd-4ac0-b37e-d70838f3ba88"}, "84f0c089-0781-4f37-a39d-01cb4e63786d": {"doc_hash": "097b7ca6f8d093aef671d4e7138881ec33483cdd763c166c9ddd5035b15866e6", "ref_doc_id": "9c78a1d5-1ba7-40de-850f-6d8cbbc9a9d4"}, "55b2fdce-a1f0-422a-bf41-b89b1858c6bc": {"doc_hash": "e2f996e7877379e8d84e49ca535ef5b169c6d14f23d65adcf3d5e26a45ae1a92", "ref_doc_id": "41b3762e-a80c-4dc1-9311-fddd3b4d8a96"}, "32796e75-0b48-4519-be10-e1a74ec64551": {"doc_hash": "8f656fffbf397aae1567783392249a9bba518b0764c044d8fec03df2b585e16f", "ref_doc_id": "1d426c90-e48e-4c31-ba93-8c34b93863d1"}, "4dea2575-f8af-40d8-bea2-8c16ecb42d3c": {"doc_hash": "74d38b51274ac400f23af8b0e4882f08838e2f8d78d73c97b1e40eb65275677a", "ref_doc_id": "a0d5c30f-04dc-4871-a86e-adf4a5fd2a5e"}, "9e77db68-9631-48df-a5df-439432fcae04": {"doc_hash": "e2cc17c8687503084783361023a7e4f2a38995bcafd24408db517132ada26262", "ref_doc_id": "5ef59e24-1d36-44de-9019-9e8fe7f4e06a"}, "0b18e415-e5ef-467d-a2a8-f6c64199aafe": {"doc_hash": "014adf961d831632797090241c6fb1b8044908dae8eb9ec0507b887523167e54", "ref_doc_id": "63f1a725-0d47-4821-a0c9-096b57c983c2"}, "40ce9d40-d879-4996-be1a-6132894ac5a3": {"doc_hash": "29084f7da8cbf063b49aa754c2cfbdcdec19eb1e26ecf447e70280935538bde0", "ref_doc_id": "962fcb5e-e515-4855-acd1-107467ae635a"}, "a966fa04-5582-41e8-8ffd-ca3587b96ebb": {"doc_hash": "34688a3d470ecfee35c173623933b0938e1f9a16f9e3ec7a74649c61d5baf128", "ref_doc_id": "4ac7a742-d4fe-425d-9d6d-fbfb2edf007c"}, "aac7de60-f385-43f5-b46c-bbee26d0d967": {"doc_hash": "6ef6868d092bdccecb93d72d33a71350f9e92c7d1ce0fe114b517da1b79dec03", "ref_doc_id": "a613607b-8467-4a55-855c-84b9851effe6"}, "22ee009a-754c-4dd1-b6b1-d5fdc12d9593": {"doc_hash": "cd06ef7be616b402a00837f01d113415c224dc7bd1b71ea0111700ed4017aa6d", "ref_doc_id": "940b4034-192f-465f-a7e3-430659883273"}, "cd58286e-3fd3-4649-8fa4-34e11ecfda48": {"doc_hash": "7e669d12ffd5a8d92fefd825c2cf19be193b48f2d901f88888cfc5d25b232399", "ref_doc_id": "6ae8203d-5ef5-4484-a0f7-4ce8175077d7"}, "7d58e881-0fef-43ed-9952-8c86d60928fa": {"doc_hash": "acf340e066d2b75f5eabc0fb5a76b1c0f5a5193ba9566d545203d015131d3113", "ref_doc_id": "12f191f2-4cfc-48c8-bb32-3e97a4da2f9e"}, "b33180d2-e016-41ea-8a58-7107508ef3fd": {"doc_hash": "2015a9c8d65f3070a10f99ab35568d869d59a32bbd4d29f9ca42d2e87f6b436b", "ref_doc_id": "67490fd8-c040-48c4-b043-d68970ee6550"}, "b84aaa2b-45be-42fa-b62e-0a4710d5714e": {"doc_hash": "495ee9d75e3ac6f18883004882bdebf2c79945f5dade4d87e0f8f9b9afefeae9", "ref_doc_id": "98497cbb-9b0f-4cc4-b880-f14045bdae36"}, "8d8dc302-242b-49ac-a2dc-dccae977de3a": {"doc_hash": "6aa7b2771440fe2ee659ac92a77c3977e645e1c7c87cc851e26ba6ab15d7cea6", "ref_doc_id": "f0113cf9-4019-4a21-afa4-41eb2670161c"}, "17e63669-0286-414e-acaa-ed6f1a964379": {"doc_hash": "1148bc7f41e5487d58880605e50805132c173da1d3a61f25be6a912e36bb2554", "ref_doc_id": "ba780ad5-23bb-4a48-9a5b-b263d64a0a61"}, "1bea119c-e6c7-44eb-ad0c-973c347a34b8": {"doc_hash": "54a9ed2e64b39c2e1b947faf3dcb6e7c41e916cb726be21d20b46a99dc79454e", "ref_doc_id": "571c684e-7859-44fc-aa97-5e111634a40e"}, "ac301e55-66e9-4ffb-bc03-ac5380c9104c": {"doc_hash": "8a39af2e46f1e0506adfec311365e4168a050a8af0462421d79c455252430648", "ref_doc_id": "ae63c3f9-ba06-4474-8e6c-eb96b9430ccc"}, "a76315dd-97aa-4215-b021-ccdfab52e71f": {"doc_hash": "94e4ae3c614b72b50f44f9be8d4c7826cf69668fe3a3d612f8f0e41a4ad2a45f", "ref_doc_id": "e5013ee2-7dd7-4863-a6cd-cec086fc9c56"}, "cbf93dda-47a8-4a1a-84d5-83ea58cf5622": {"doc_hash": "8e3c8fd051a5679bb4f760ecee6ee0ea46d83b72a90a4db4fafd8fe0efdfe601", "ref_doc_id": "7d3283b0-c096-4ea3-a09c-a5e42b75feb4"}, "004d6238-9e34-480e-b27c-15a925ad8cff": {"doc_hash": "8c6907498a5d2d7efc1ea4ef8c7af3f4e2e0ec8516c957188fd9726529b773a4", "ref_doc_id": "0954ae3d-bb52-4859-8c3e-a6f6512bd2b7"}, "eb6213b5-7784-43e8-8d01-6f163817497f": {"doc_hash": "d9b30d11041a79e35e93cb79661806a3344b2ff5dd8989fb9d1725bd3abdea50", "ref_doc_id": "a0bfd182-e935-48c9-9d1d-e212a0d5041e"}, "e5155f1e-39d7-40a1-8434-b92e796af74f": {"doc_hash": "2d7983e53045934faa459761625df7d0a08f1c12d91e1da6bf2e98b740c773aa", "ref_doc_id": "e5e4f878-744f-487f-b8d2-d67c50954d9c"}, "f970a831-c9a0-43c3-acb7-32dda11fbbf2": {"doc_hash": "d8e1c6695e42fa4d72b5978c5d2cafc26501f0c059fbea03c796944e653e6700", "ref_doc_id": "d8e968c8-6bb3-4b2c-8ce7-23b0f25c6e1a"}, "66a82abb-3259-4fc6-9f31-792bac87a8b2": {"doc_hash": "172b6924d3b7a182770831a18f730298ac08a3c679cb1b6e38317ecce12639a8", "ref_doc_id": "536511dc-f9fd-49f2-9f46-2f5dd3182795"}, "b02095b9-bf23-42f5-9956-a9150cdb36c9": {"doc_hash": "0f0e48a274ea7077bfc4826020cbfaf574632ae66187ab1ac4f30d9fef9dcb38", "ref_doc_id": "35b9b383-a4af-40bc-868c-13bd48fdae21"}, "38a1c611-8c23-45d8-b1de-35dee042e679": {"doc_hash": "5799f75f35737becc11b200f4d1c44d96354690195d1c651dc8368b525f61fea", "ref_doc_id": "c8d2e589-9149-4953-b819-102adea6d2c2"}, "8e338d10-3d3b-49ff-bdb1-2a1009e8c605": {"doc_hash": "de1814cecc1398f84d74da9d576f7a0ca87ded25e2be79375b7dfcae50d95006", "ref_doc_id": "67eeba84-66b9-4e07-84c1-e698d2a7085b"}, "0ef806ec-84eb-464c-937a-900ea1193522": {"doc_hash": "929f40bc4d9c68a7b13ad703e74a7d303c5611097165504277336bd9f3dd17c8", "ref_doc_id": "8195f182-88e0-4b54-9605-5526395e59b3"}, "3f451ea8-a5b1-4dde-8cc5-a52fda6a3a28": {"doc_hash": "910fe1dc1fe4d489e3604012c2468211a7c9e9e96f9ee1696e4a951729777a54", "ref_doc_id": "85194c68-6605-4d16-a1f6-bd81ebaf0940"}, "415b51d7-48d5-4c17-89b9-ceede8bac490": {"doc_hash": "843b46d5e2545486f047b9e1eb00f1afd1200e1940f38261235193fb81899d3d", "ref_doc_id": "77ac52e2-e864-47fe-99c7-06a2185a9ce7"}, "a83b5352-5cf4-4d7a-b31d-9d967afa1af2": {"doc_hash": "af90229737f5ab6ef012a9e8b8a55853154562cb381c63dedb081cf3b4c13743", "ref_doc_id": "e7503468-1f90-4dc5-b282-ec0f842c9bed"}, "fdb15ce4-838f-487e-9823-720668cf3a12": {"doc_hash": "5de0abea9192705284117ad73a5af58e0c96c642589f63b62bfccbac01a41ba3", "ref_doc_id": "0c719a2c-e902-48d4-a205-2311bcccf33a"}, "549d37f0-6146-4610-8490-b4a21300e4f9": {"doc_hash": "ef97451e3a096115067c8cbf65048a626da1b9bec77b591abe0c745116f14859", "ref_doc_id": "b463cebc-ee15-47a2-b61c-a156191dddd4"}, "971bcef0-fb2d-4ef5-81ea-5d4c1518ca9a": {"doc_hash": "272c0ea4bcf1f1878e5959b3cb1442fd2b8c7ab238f535928ef1825644f069e5", "ref_doc_id": "4e37e7d8-b83b-4221-bbb4-d676c85330d4"}, "24d7eea2-8aa2-4657-953d-5cedac6b80d9": {"doc_hash": "22fecebf69b1e39faa76f68d0b7891b2ccea43b85750a19b9e6d74068d1c16f5", "ref_doc_id": "0cf36054-4a67-4372-a5b0-dfda28bc7112"}, "65bc75da-3766-4fba-aca3-24105abc60de": {"doc_hash": "2bc420e1d2168b23cf1ab0251fc9c4145003e9fc32bcfb150f432900d2b3f93d", "ref_doc_id": "10ace7a1-7cd4-419a-86b1-e93a4e4183c1"}, "94d1d4f1-ff33-4bf3-8a0e-d1768e940ff6": {"doc_hash": "3db9640409765d19bfd953e6e9c95ee9652bd77adbd9f7b0386752e2f1e56de7", "ref_doc_id": "1f0d9bb1-1ccd-4023-bd79-389b02a2afe6"}, "3d17982b-a403-4fcc-b1dc-1dd25d019140": {"doc_hash": "3eb4a3182b20183339425a16b0b80376b0bf860da74ab440c19273e2a5cc5ce6", "ref_doc_id": "1a6b3f20-6569-46d1-b328-51618d883000"}, "bab19f37-9c85-4876-a346-d8724a314b1e": {"doc_hash": "3a8b82862994e8696638fa6efa7abe0071122c51ace20a780fc73e4afb43c0ac", "ref_doc_id": "2e02c9ae-f2e7-4f94-8b84-1a3283ece41c"}, "e9834c17-7d59-478c-be33-a0906ecaeafd": {"doc_hash": "db1b593079b4de8b3638197c80eab5730cf4fdf00bdca03b08dc5b69176b12a8", "ref_doc_id": "74543168-e3d0-45a6-ab32-b1db8373eba9"}, "98316f64-a853-4e39-9df0-abb90f65273c": {"doc_hash": "20bb22edc86b45dc64cf49bae6617205e55ab43a1919a8b02cb04ecd7cf93b4a", "ref_doc_id": "bd1e71f0-4068-4970-9bf4-97f3d42c7a3a"}, "06f69ebc-c851-427b-b89f-54c1b17b1037": {"doc_hash": "9b6d83bca07794df1b6b25045e1d6d94c572b2bdf482d5cde6a590d0da07fdde", "ref_doc_id": "acad7d3c-c64e-497d-b395-137ea9e3a60e"}, "b3a60a60-0396-48b1-a2a5-86a7572340e4": {"doc_hash": "c95217c976e0bf6da98351e8acaf92acb6e86f2470872b4ba4b70f10604eb9b8", "ref_doc_id": "6687e31b-e712-432f-a822-87ca5a9664c4"}, "37a999cc-0482-4a71-9dd0-daa7dc1207ca": {"doc_hash": "226a8202c29197b195643896da089c153feed82c4c491ea11a622d786fac1f24", "ref_doc_id": "aeaa3def-8894-4f1c-bf9c-e93459d4f8b1"}, "1b92fd02-e3dd-4dde-80d2-a045798cc23f": {"doc_hash": "0829b20362bd5d1c9199a8aaa7841007388f4692d252b1bdb1fc2c2819470bf6", "ref_doc_id": "81ffbfc7-3c0b-4e30-8d40-3791f63420e9"}, "96fe7fad-3eac-41bd-8700-0d33a109c03f": {"doc_hash": "a8ad10f00f9e2db27c01b16562653a064730fda9878c8f008dc20f27c2c0678c", "ref_doc_id": "6bfc4933-3cbe-42e9-acaf-50f94033aa06"}, "e86710e3-ca3b-4be3-a038-8d3c4aec89b7": {"doc_hash": "3d40d7d3937ac0bb1c0fe9587ec0491700cb01e94f4373f654af20913ade67b9", "ref_doc_id": "6c95f041-ea0b-493d-a919-438075a2ec39"}, "b358f0b2-365c-4a5d-b4ef-21f2d528cf53": {"doc_hash": "56499770208cf41a2ec6f3c1a3710e0e6f03d25e787207d54f5d1886a5b44350", "ref_doc_id": "54a182e8-950e-429d-9878-d5b34b5a4aeb"}, "9bf83a45-4e10-437e-ab14-1e14ca1291f1": {"doc_hash": "6746367b6e412a66bf5ea2ea9d0130ae6e1b5de9af2556d7c6ab0a0f91a71eea", "ref_doc_id": "96661578-de76-4b54-97a1-944aba26e828"}, "c14ba7b6-dca4-499e-9ba9-c2f0c29dd523": {"doc_hash": "a9465d85b03fcd4611dbda7c02ddfc3ad0fe5b7d646676f43173791400f796fe", "ref_doc_id": "e872e296-25c4-466a-bcd4-e182d05787d7"}, "5c0f51ae-e77e-4962-bcf1-fd3619158777": {"doc_hash": "818131207c3bb9bd26cb38a29d07e97723274ac0e445344ed7cd6d343156b3c0", "ref_doc_id": "54906c16-4f34-4c80-bcc4-bbd2adf088c5"}, "c35ca160-d14c-4c1f-b966-2e4ec6beb940": {"doc_hash": "7c72f688a405e95ba16027d8e2f501b7bc19c2ba6a79812f8217ff052b52fa50", "ref_doc_id": "5dbf75de-5b89-43df-90d7-d5cfad2b432c"}, "0b7d2a6a-b9bb-46c0-920a-999ad2bd9133": {"doc_hash": "2685aa7384db7b989e46f4391fedfcd9603674765921c13c352d0b1506bd647a", "ref_doc_id": "f66b84bf-d464-4ad6-9767-007443a7810c"}, "7f0dd1a3-6ef8-4c68-b8de-2d3d2d50164c": {"doc_hash": "9d09aae0f34001a8387689bde33fc9d40293f8e12e9c57518e068384f9fa50d8", "ref_doc_id": "ce5d38a9-229d-4925-a638-4616c16b20c6"}, "375f229f-0b1d-476b-8d46-fba4f8be8e12": {"doc_hash": "74a13ea388d840898c5f2a24ddf9240f8d9ce4b6a1e8db933b9fa56a9fb4d794", "ref_doc_id": "0600e155-c1fe-4827-a880-13cf16b0f115"}, "7f2ec797-bd00-416f-b087-c5d7ca3b0256": {"doc_hash": "15f9c7be7fb0ef998c110c8e422ad07b2ea94f6e450098376111ff2bfc8d42db", "ref_doc_id": "94139bdc-c867-4382-a491-fa903685cfd4"}, "b121281e-9f9d-4354-b1b8-151e6d2aa856": {"doc_hash": "740276a072be1499c392e8e46a50b1b015346464557a19cab3a4e4370b9df2c9", "ref_doc_id": "3ebc838f-d1e0-49c4-a2f1-b6aa96f14414"}, "7d7a2756-3c77-4d52-9c09-a5549386817b": {"doc_hash": "67bfc9ffaca8cdba8f7c0741c21d8051d0967246a3b619eee5f0276f7bfb4a06", "ref_doc_id": "b25244bd-4a17-4080-81c7-2a5af73e30da"}, "a1d50ce2-baa6-4d6b-a058-1dfa1291f4d5": {"doc_hash": "0483391fb31a8e5e0a1190458e31024d5330a57b76404b0efcb9ef05ac396383", "ref_doc_id": "767f7ce0-44b8-4305-9b71-8a32da287ab2"}, "5af6369e-7bb3-41d6-901b-d3e28ec04dd9": {"doc_hash": "2aad8c1a128aef6c499bb1d7448fd7b481f15498590765743192afe250e779dc", "ref_doc_id": "b67151d1-d6f4-44e3-8079-f756d45cfb4c"}, "e9fd7ecd-ce51-4c4a-93dd-0364d6d2d8e3": {"doc_hash": "c5651f846c0ee0cc695547176754287c138705a54af369ac9439799d7315f7c6", "ref_doc_id": "d2ca0c3f-af02-49fa-961b-466e63a3176d"}, "3867e158-f0c1-4c5a-87c9-208dbe39934c": {"doc_hash": "ecc6b008bed7a89e65c6660bd5ac4d86537c2b3f5509071bbbe6ee685b8d0872", "ref_doc_id": "4ae2cd3c-972e-422b-800d-460e15ced20d"}, "084b0b63-90d4-41c1-8f57-38a285ccf354": {"doc_hash": "3568b4a78e604ae66328f8a284166180ca8712244b03a081304ddb70dd6e02f1", "ref_doc_id": "a09df19c-f4df-4544-bec4-72aee698731c"}, "7ef352ff-c3f2-4d41-9382-72fb755c204d": {"doc_hash": "688717604c1f9de82a84b09a283cc6f8a1f70b394a8e6ec663ac8993b47a99a1", "ref_doc_id": "50dca4cc-b14e-47ea-98fe-d1653f6ec074"}, "4d1368f9-8b18-4e30-b5f1-c9cebe34f13a": {"doc_hash": "7950a8d6ed6e8e7bfe3dc20f7b882f972a85fb85e98abd70a8973317503f5aa0", "ref_doc_id": "1931494f-d371-4df1-82f0-84d2ea03d919"}, "86187864-c3fa-4f20-9cef-e788a340a4c4": {"doc_hash": "2e54d9ff5c12127831dee9e5c48712e2d2b6f0b4f5f470831018114d672dab26", "ref_doc_id": "c17bbe33-1200-4721-8520-f876d0adb457"}, "e4f044c3-3ce7-42b4-8e2e-8c50b203c618": {"doc_hash": "9f8357a4f1e210d9a12f9733c308ccfcb3abc78e017be19823ef3f9265a9c662", "ref_doc_id": "e0a3e621-2a67-46cc-9fe6-3dfb3a8ff135"}, "bf5b7687-7425-4011-9b38-f54ebf528f0d": {"doc_hash": "0eb12c48b2723ceae7d4b89d344adeb28304a0685b0564b02a8f63ac790731c2", "ref_doc_id": "d431aa1c-8e70-4daa-ae42-91320723f4f5"}, "49b688a4-1d26-46ef-84c8-cf184bb79edc": {"doc_hash": "8634f5c2990b997c811a5d990f0d28cd155b26676752e4d171673a5bb9d760f1", "ref_doc_id": "c6f211e0-0f9d-4b0a-9b4f-1f2d82c475f4"}, "f4cde76b-b3c9-4684-aca8-f88c552c5dfb": {"doc_hash": "c2df9d71f3137fb1cd0b7d9839e1d0487467a12bb1d2a3db567f1b5bf2897349", "ref_doc_id": "c47a7c2a-3bb4-4494-9e3c-80f72ee87686"}, "0a8f91aa-5802-4265-a4ca-dabc514043ed": {"doc_hash": "57110e0863bfd60459659e5cccc0e99c9615a4295c2e79b2b2590867781fae6e", "ref_doc_id": "60ab0e0a-f4a2-4f95-89b2-3a7aacad0db9"}, "a0abde9b-3504-429d-82de-6414c852a500": {"doc_hash": "417cbfe0162710e5f853633b78df261cdca522f286b89f1856ad8a55143faf73", "ref_doc_id": "7544ce3c-7874-457d-9776-144e26e5a513"}, "848ab4ef-3b4d-4cc9-a26e-3cdfac742c3b": {"doc_hash": "ba17a02b0a7d972cfe916e762bcbe6f3f23b97f3f5c7f37e8b56431bf6c6e7d3", "ref_doc_id": "2f50e948-a4fd-43e2-b0c5-e4218ab7250a"}, "a9b0b53a-5763-48bb-9e05-b244f982554c": {"doc_hash": "492e73bd8baa832dc2ede16c5aac8301681b014412d414dd4c47f9bf3dc297a3", "ref_doc_id": "9a6532be-06cd-4b9c-83d3-c9650834f70d"}, "b27e9f92-a9f1-44f1-9973-e3ea08fff93d": {"doc_hash": "47770e78d81f6bf9b17487ede4de1d3aacb4977d5b9eb510b79109d34f77cc0e", "ref_doc_id": "9e1b81a5-1b43-4a8e-817c-ae5eab8ca694"}, "24ec82ac-8e02-493f-8465-dd514877425b": {"doc_hash": "065a8a1f98468cd359302f23b8c7462d8f15e84168faf5a818567d29d9dff009", "ref_doc_id": "b1a9e740-9397-40a1-9594-f6f0241a1683"}, "e6b7b754-b1ff-413a-bb8a-09e952a57f11": {"doc_hash": "be3746e7cc15204f1e8e82d153d0bd85e3bcb2a0c199a4a5460b36a7868b61bc", "ref_doc_id": "b9733cf5-0ddd-42de-ace3-947310a4fb14"}, "c5ba2e76-996e-4a3a-aeb3-997b50e84c97": {"doc_hash": "596674fce89237c7d84e9f8298628c7f231a88cf7399bafee95d82d082cf060d", "ref_doc_id": "af7165b2-2c06-48fd-971f-588eb69ba380"}, "69ba29e3-db5f-422e-8c54-26cbf3481c34": {"doc_hash": "874bda50c63d5198646894dc954f936609df831c39bdec75eeb3d64f19dad974", "ref_doc_id": "ea730a95-560a-44ef-933a-8e91c37e2a50"}, "448ebf56-92fe-49ef-b2e5-4ba96bda8c60": {"doc_hash": "1c816c3ee7df064d7b2944c575fecf9167d2e4e1cdfb1c6dd500aa882fe81a2e", "ref_doc_id": "9ab87de2-fbc9-47c8-b455-eda1baf0341a"}, "e39a2a6a-5805-4d0b-987c-9b6fbadaecba": {"doc_hash": "8b8cf566e40e84cb6cb477a1e230177596fd0a6be39e4a4778b0f3b4abb58e88", "ref_doc_id": "21d7109b-89b8-49fd-934b-3b055fdbfae3"}, "4f10a778-98bb-4fdc-8cc9-6a46b5dee8e2": {"doc_hash": "5e40cb9c2a433372bcc7915a2d19929987b3f4c79585d770d390c72389edd6b0", "ref_doc_id": "029032a8-c7fb-4478-adb1-d46f68484ed4"}, "9ed296af-2752-4a87-a338-16b2ad7f8456": {"doc_hash": "640c712981365e24485529ce3177d37f9384679a18cbcf12fc287ee2fbd761fc", "ref_doc_id": "ee2b1074-0c5a-44e0-a28d-028a5b272fc5"}, "4ed1a545-f6a9-401c-b814-cb5de8be93e5": {"doc_hash": "a6abac7c8853825f8a8c0537d13e1ca5f4a9efd0709aa62c5c772e40a091178b", "ref_doc_id": "919c220e-7685-48cd-a141-3dc8db69bb8d"}, "acc08f8c-65f2-444f-9bf8-e6dfe80da91c": {"doc_hash": "818b622db8cb14d9187d24c08608ce58d219a2071e5a878819213f43a1997ebc", "ref_doc_id": "5848da35-33bb-4c46-8fd9-3f9954d37f8e"}, "27eb8b18-c1ef-4326-88b5-a5d64d85fc8d": {"doc_hash": "711a1d4dfa0fa8f8f4e5360b5d63087ea26d3ec145e3e377e7d717332c177a6f", "ref_doc_id": "72b6d932-5027-4e91-a335-ef3501da9fa5"}, "b2524302-4a0c-4aa0-8d8f-25c183b4316c": {"doc_hash": "5fa4e2872d6d1ba40c892b33db7ce5b533bf9679b166fef79db9a48c4e4df24c", "ref_doc_id": "f4e384c2-f5b0-4c84-93c0-9bbcbfa0f5b0"}, "06893ac7-854d-4d75-ada5-af22a4a3bffa": {"doc_hash": "46265ed3d88f2276cc97c60280929bb3e5bbdf6fe90a477d88826b058803cb9d", "ref_doc_id": "51fe871e-6ec2-4837-a652-b35b674a7f51"}, "427a6952-b8e2-40b0-8e44-f1129e37c912": {"doc_hash": "8b4aab40a56998ae3641406fec66fe28b52f02f78aba358bbc7e8db8c9819df8", "ref_doc_id": "f757476d-0bf9-4b51-a42c-47bc6bdaa407"}, "c5d38804-0f61-492c-b26f-531c78f9faa5": {"doc_hash": "5456728f10d7c15cb4ebc4a0bee73a6c7028574c078dec52558ea9c254e1dc29", "ref_doc_id": "cb09eeb7-13dc-4f01-ba2b-b7b108428e5e"}, "09268533-bdd2-4eb2-b2ed-97f0c43f507f": {"doc_hash": "820f8d25c9d39970eab9a1256a12c392b632abddfe0eb6b48020be30ce67efe4", "ref_doc_id": "986eef28-a71f-4aed-9c0f-9ef72e76bd0f"}, "944a4ee7-68f3-4760-9845-4d76610d55e7": {"doc_hash": "b727672bbc0d77f12b070c6406ba218082f90632e98576568d504155ebda137b", "ref_doc_id": "737d3138-22c9-40c5-8814-926b5fb812f3"}, "a3613171-8ac8-4ad8-9a69-2e4fe20b9dfe": {"doc_hash": "ded629840dacf5792056dd1d4af6e7fdddd5e56ca3a01495b379e411ba98e1db", "ref_doc_id": "5b8380ab-1b08-4888-b05c-9213208ff1b0"}, "5e078a40-9fbf-4f7b-89ed-56ca9d20e905": {"doc_hash": "01764c90d629d931fa43f92c564578e250f3ffb19405eec60ec89fbbfef12094", "ref_doc_id": "4093de1b-3cdc-4f18-b83e-669a8af42b6e"}, "54a671ea-3a50-439d-87e7-7879cb2619de": {"doc_hash": "d59e7070a7a4fffe763c3480059417b50816efb3383e58a38fe5f98c3a8140c5", "ref_doc_id": "602183d4-35dc-420f-90b2-6356eca9890a"}, "d9d96d07-6d71-43a0-aee5-5577d1de6946": {"doc_hash": "5134a931864d4409320b959a92d2b062cff4283e2da22b09d0445739997c0455", "ref_doc_id": "990d2433-d43a-4cbe-ab72-b42d985ea07b"}, "e6a08947-9e9f-4597-937a-7f0f15ae30d1": {"doc_hash": "460e6601d07fe2d0bc7a892eb0b5ef574b3915d09be218e329fe7e6e752bbb90", "ref_doc_id": "f55f5c3e-d03c-4f12-a66b-9a3b152808e1"}, "9438799c-6a01-451b-ba86-e8c3900786e2": {"doc_hash": "2b479089c459d74160f12084a5bbaa4cfbdbc862b5dc4b6e31e5840ffa23217a", "ref_doc_id": "80fef2b3-ec36-4731-a0f6-99a83f5b59c3"}, "6e41b1cb-2db2-498f-a9c3-5860c7bb5025": {"doc_hash": "ba9cc255f7ade3ccb11c1b4fd1e095b01148efc120dc33a59b8f9f38d0f2f067", "ref_doc_id": "2c996bc3-3aee-426c-aa62-1a1e02782593"}, "bb8b6e27-ea3b-45be-b08f-72bcffa1e360": {"doc_hash": "f2fc7575135c37099c40c133bcdbed3153ca1388c2ff514f08434e1f4443e7d1", "ref_doc_id": "2c617a33-69e0-42ce-bfc9-ac0d53dc83dc"}, "bcf18004-0b85-4112-9bfc-c6de82b0b7b5": {"doc_hash": "791c387576118f41753eaa073cbef9055ad870a3dc3a681f4ed94ac78b1eb2b2", "ref_doc_id": "f5d050ad-4e19-4162-a2fc-a0ad1dc3b596"}, "a5f94873-3416-43fd-977e-4effa9116288": {"doc_hash": "75046257a2d31018a05c57a5cd1a46d38b2b1f7d4c5be4988251b6ca8efdc6f2", "ref_doc_id": "d0f4c974-e38a-4fd3-b521-55e3c4cb00e3"}, "05778a2a-094a-4fd7-a82d-2d04c87cd688": {"doc_hash": "35a4b3ecf5c4f5d7099215434e8ffd7877c01701e3ee10cd5deb907c2d8ca26a", "ref_doc_id": "c27eecb4-a924-4dcb-a3f1-bee4ed903bbb"}, "606632c2-0837-4acd-a806-81333f8aacba": {"doc_hash": "d6cd56a5954c62f972bbca195bd5e3634e011d3e08a4e9a7ffa9d56727db04c4", "ref_doc_id": "dcb73c98-7e62-42bc-a609-4bc0b94950de"}, "c0877ad4-b3a6-4d36-b67a-eb3cbcdde036": {"doc_hash": "f66075285fd1584ae3803302f849bc77e5023ad62564b628b60ba703f14715b9", "ref_doc_id": "94f845ae-9ae7-4b21-b610-60d9deb4567f"}, "4e141240-b899-4fcc-825a-7aafce0d7fb0": {"doc_hash": "1f78e8bf9390e1a794815a8a28037834cf21c2ac5ca82352fbccc264a61c106b", "ref_doc_id": "90fa99b1-bde8-4ece-9547-f04a2e29560d"}, "9139a574-5210-4581-af17-64611b7c0a97": {"doc_hash": "46d49d609a684024869aaa647a8558702a958cd9559f4b42f5de1940fafc4b5a", "ref_doc_id": "05c52de5-c3c1-4ffa-a21d-c65bdb3bf441"}, "30f262cd-6882-4b6b-918d-1f53a0161c52": {"doc_hash": "8b76a6d509a2da5dde2a868f2792f7074fe7e1ae74c3ec6dce6533faec9049d7", "ref_doc_id": "cc652998-77c7-49be-88b1-578a100be085"}, "28a8c827-bb8b-4e62-b861-76e09018c668": {"doc_hash": "dee6c51c7b6c423207f07374db94d45800ac2c76b2ce8660596ca8a58b807d95", "ref_doc_id": "53b1ee23-8b0c-4e24-aa72-e5fdf2d02c2d"}, "47ad9582-a9fa-4f3a-80b5-2648637073c8": {"doc_hash": "dc436a43dea823280ecac4eb36cb35d529dd978158c095c2f13bd209723ab883", "ref_doc_id": "10afecce-3625-4507-83a6-d9fee956a9d4"}, "fa9f3008-901f-4b5c-b427-70df0c56f0e9": {"doc_hash": "025ebcce2b99aeebf3e495a33d63a33ad27dec0185223ae1ad59ffa34eb28492", "ref_doc_id": "a17f23e2-02f4-4e7e-9fb6-4cb204daf602"}, "09fa47e0-27fb-4328-9998-f9faf79dfd97": {"doc_hash": "15ecd035441b7230f5067b1c41a88bb4ed24ca21bcb7f30ec3dbf551b862d186", "ref_doc_id": "92983b45-c61c-42d2-97e3-d3a38da5db37"}, "64727e0e-9664-478f-a98a-264663566ef6": {"doc_hash": "bf272f72e13f71fcc329141fe0b80eca7375cd802f8f5fc78e2b1c2627343f81", "ref_doc_id": "e52ee238-2792-41c3-9e67-e8f02fcba7c7"}, "523b6e35-dbdb-4e38-9d7d-46c6e3bbc238": {"doc_hash": "1d1efa55db1cad324e4b9f53e57974c02016e59956f3951d70fedc3a479cf38e", "ref_doc_id": "8f57ab49-0a4a-4d46-94cb-c97e8920e702"}, "e86dd8c6-3c05-4e2e-896d-39f2a4af9cad": {"doc_hash": "4ff952b528603304dee7a4a305f6ff19532d1606fd0e464c872fab938d50ff4a", "ref_doc_id": "e75767b7-e639-4500-85f6-cd520f40647a"}, "a4c538ca-2685-43f9-b397-f7f6514751b3": {"doc_hash": "964355b9fa6daa1de8b9f3d9330c2837d18f90db1bfc9df2321fb601ccc83dd5", "ref_doc_id": "523450c1-510d-40f3-a15c-dd4fc778f9a0"}, "311ddd02-1346-4b0c-9a30-1b2794352a53": {"doc_hash": "b0f4c2521a68f5c9913842878c2da2ee21201d0b37015d690e29e43939f16c63", "ref_doc_id": "17ae0aa6-cb85-4a88-ad09-0c3a4bd07b44"}, "c9b53925-1974-4b79-bc8d-6825dc54d187": {"doc_hash": "fc77f96223f636de5f8abb603a74104be7c881bfe097eb9e7495ea448e921411", "ref_doc_id": "321e694a-e991-4684-bcfa-24eb8d245c41"}, "353676b0-3187-4c87-b937-c2c37eb3b809": {"doc_hash": "a37700c2cc311409550bd77e8a90b69dbff3f8b3f4811fabf5ddbe293166f41c", "ref_doc_id": "0ed317aa-e899-4a1e-8f27-04e3bc41be77"}, "e21a50e7-67b8-4ea3-8063-0f9312da8f49": {"doc_hash": "40d230df5e0e247d5d0eb523c863cee654d1e4398e92fd59c8c524bac56d2a11", "ref_doc_id": "e749d402-f0e2-4390-b5eb-67064c15ecfa"}, "092aaf3b-92d1-42f3-beb1-de10a7c4d62d": {"doc_hash": "b71dd9bec51017608b9930806595e19590766819a6a2c37ada878841d108bbcb", "ref_doc_id": "1d7ce415-6604-4995-a43a-4ee24bccf562"}, "7fa9a13d-99e9-4d43-ade8-82e8fd6fb638": {"doc_hash": "cd12912fadd0b24a84301e3c33519547c942dd54600f34b2f10317a9448fea14", "ref_doc_id": "fa17b2e1-0e5b-4b3b-9d9a-b8a22f146159"}, "61d0f5c0-fc5c-4e57-9e3c-9a00075dceed": {"doc_hash": "fbc059284a63b9a3b6b29887493fde674f77ce73b7127b793ccfbc23d86e3a44", "ref_doc_id": "53dbe7f9-f544-4cc4-a993-0398357ef3c4"}, "efd41c02-20c7-43d8-a6bd-e9d8305762ac": {"doc_hash": "9a6971c33fe424f8094a70517d6892d28442a88ff5c4ae7072ea85ac5bd7e38f", "ref_doc_id": "434571bf-0853-4752-8101-b070b6c7f9ae"}, "b5bd5186-429f-4421-b240-7ed922add1d3": {"doc_hash": "4be0688e9f3e584fe5fdbb2190a118176743a1120c2496d350fb84a7bbd9d84b", "ref_doc_id": "73388de3-854e-4f2c-b9d6-93c92508e410"}, "f4703e6b-a42d-46a9-a060-9f75766f7a8a": {"doc_hash": "eadfa84946e8ecd1a3ba4e8b786d89f41999f53298a3b02e098d891d4eaeffe8", "ref_doc_id": "af4ee144-dd6b-4874-999c-fe160eb12564"}, "1897280a-b836-4ff9-904c-c1dc94d11a44": {"doc_hash": "3d65f3b1c39fe114d978c493c365c56d91d2ba8f23cde5f6d2243ca681ca40fb", "ref_doc_id": "d73c732e-1f8f-46f7-9146-4820bb89278d"}, "8104c6fe-eeb9-41e2-8f30-867d180cb20b": {"doc_hash": "bc6fcfb576165fb59c34d5665ebc0f93a439663a492c4ecfcb0589e0dac4fecc", "ref_doc_id": "1d95946b-d63d-4cb7-90c7-ba8f420c706d"}, "789a4a51-3638-4177-afb0-fa10c023525e": {"doc_hash": "1fe5fbfd1ff721d3ab2e062446bccd79ee3bf032c610e278763a133937333121", "ref_doc_id": "7d023df5-c0b1-478b-91d2-4b439b0f1708"}, "65b62ded-4030-422d-8398-38a797e71792": {"doc_hash": "baff9c04cbafd5555a47182aaa5363dec85e088cd9dcddbb6776cc498d17a812", "ref_doc_id": "81aefaea-93ca-4574-8ade-5699321c3199"}, "002f2653-7965-4f66-88c2-d0abc4fe448a": {"doc_hash": "83fcbdee61798f0279aa96fec1170c7d3116655c0725a9b8b8a4597130fced5f", "ref_doc_id": "c1186e2d-3397-4b9f-8dc5-182fb14726bc"}, "c5b00810-2901-4a8b-972a-1f2754e029df": {"doc_hash": "4c18a0040383c769da3d0109b93739c3738ea07c1398d86c8c63450cc1334ee6", "ref_doc_id": "287635ec-41d8-436e-93fe-ea984371ca14"}, "d99d904b-2a04-4a81-aa6d-87d3acdd2b6f": {"doc_hash": "23a550ee5d56a0ac571da5a032bc9dfb7608ce304413bd5e5ac451b97fc9afca", "ref_doc_id": "9c211d74-d1cb-4d2d-9b9a-81fd53693b1a"}, "4d325dbf-28e9-48d0-8167-56d10c0249fc": {"doc_hash": "53be0db43034ea879b2912c6fc3c14822e43d45ff08b3f43bc5a42efa14216c8", "ref_doc_id": "52260c23-8757-4e42-bb01-b539c48ec814"}, "ff08ab2d-1e74-491e-99d6-81a0a7fc3533": {"doc_hash": "37945d919e6286619b5ffcae9a51f484b325165d0473b621b475c5c08a7f8760", "ref_doc_id": "92a6310d-e968-475e-b20c-690a862f92ed"}, "57c9e102-24bd-4b95-9035-a89f872b3321": {"doc_hash": "b06e58d25da8230d4963d8c5ca6e926bd62633541e002bdc863fba855ec39df4", "ref_doc_id": "c916c85f-ee99-4d77-b8c7-e5410a277ce4"}, "9d672dbf-896c-4836-a572-6b25a5cb81eb": {"doc_hash": "15e504b2f21ac36a4a94e0dec7234537170eceb3fc23210cfae155e78e65581a", "ref_doc_id": "3778621a-a86b-4563-966b-13693507d78b"}, "41301b75-9803-4cf6-8dcb-99dc2e22b9df": {"doc_hash": "596c06d24a81c4735919e80a3acedf0233071af1d9aab6984e0b3b0fc28bdfd8", "ref_doc_id": "0339c43f-4026-4aec-8643-161e64410fe4"}, "ab4c367f-e282-4758-a27b-311454fc47d2": {"doc_hash": "e11350fe98eb5e30f1a53b54c038ac2e5fb3cef0498cdf82ec5608aadd4c3ece", "ref_doc_id": "9b8f441c-5445-43d4-b380-c13b990915d7"}, "6106c48c-4aa8-4f61-a990-7ac2846b7032": {"doc_hash": "2beb762fa22bb7f0308b0c311e641029ff4142ae5da45a9abf2981452c71f80c", "ref_doc_id": "0e8d7f23-9740-4191-bba5-3c47ef423529"}, "5255204f-12ed-464f-b321-8f9519ad8f81": {"doc_hash": "b919e028d7a74464acafc45bfcb21747853f67f16e2f8e782745fe8d05d385ef", "ref_doc_id": "ac75df57-a701-4ff5-aaa3-60259267ac6d"}, "79cf62c2-9334-4e1a-addf-1525555cf99c": {"doc_hash": "cec02f706921e50976e0552f2f46aacf5ddc6c170f39673765b4fa01d638002b", "ref_doc_id": "c41120c3-1c0b-4f23-9cc9-f77ffca0c948"}, "148cb244-9b08-4e52-813a-ae0bfd684051": {"doc_hash": "0cb98eea7ba74a816c4154ee717fa772b6a4d04dd6adbc1dfb81179f30884c22", "ref_doc_id": "f9c5373e-65a4-4004-b5f4-531f514338c0"}, "50df09f4-c388-4f22-a571-c39453cdd296": {"doc_hash": "8307c2e0d8099c876b6b95c0e257c42304d5364d5d395a23d36b373920419769", "ref_doc_id": "40f18496-5090-4d41-a7df-8998b620b53b"}, "b128012f-c83f-4cc8-9ecb-a0f802767f9b": {"doc_hash": "a9747a04efb7bd2800bc12e6fe5068e5bcb592c9729049440b3af50a8e485cc7", "ref_doc_id": "d65b417f-6785-49b9-8f57-097ee233edef"}, "cc802f69-14e8-406b-82f5-402baf5219de": {"doc_hash": "353e66643c15c690c1aa502b1f7087eae4ee182974c405505f684d23ced77904", "ref_doc_id": "60244075-a856-4e9f-8c67-d3c4fb4f665c"}, "5842e20c-881f-43e0-9952-a92757f4a647": {"doc_hash": "96c2de666a00b62018079ec5744cc61f15f2eab0c76da29809ffb9146c8775a9", "ref_doc_id": "6553cad4-099b-44a7-972d-363dc4433020"}, "9fe3d8ae-c571-4fa2-9edc-5d24b9e659c8": {"doc_hash": "98c0533d46db0de5bb882c2f3365256da27a1630dcd743f7048a3110abb2c8da", "ref_doc_id": "5d4d00b2-7ac7-4ea9-bcc0-9950258f4883"}, "988a4fa8-0417-490a-b358-06d23f95c4dc": {"doc_hash": "13399280269f677c0e0a06474e612e9923e9e8376f4110eb6438358416df5e8e", "ref_doc_id": "13dce4f4-5a0e-4c38-833b-fae01f2f8466"}, "5e277f85-28c2-4743-a65b-a0e96fb41dc7": {"doc_hash": "f4bbfbd5dd68535a81ec96d57f4ceb6cd3ad9eb794bc2d6beaf81825711c3ba9", "ref_doc_id": "459be725-b836-41c4-a46e-4e06e145eafe"}, "b43c4c85-a7e5-41a2-8cbc-4ace70b5884e": {"doc_hash": "aa6ed856e14cad816b19846de2959e1bf085d30cf4434515c14cbcfc032c8500", "ref_doc_id": "e7e98414-23b7-4308-b98b-3a81c2a03dd5"}, "2a292172-dfa4-4d66-9d7c-68fe23b0b8ba": {"doc_hash": "1c76669cda7de48f073d669920cdd45e6d48f6a9038766fc0bdc54cda912bb27", "ref_doc_id": "5e2393e7-e018-4140-94f0-83b5a468225e"}, "4a013f55-1010-43f8-b1a3-d1ccf30578bc": {"doc_hash": "9a42bc58b2c7bfb8c390d5f14345ba07699652afb887ea62fdab90baaa501163", "ref_doc_id": "c05fed33-e00f-484b-b565-377ffd5b153f"}, "886505a2-1da8-4912-a512-0114d8c3cf0f": {"doc_hash": "0d947d7970f10506fc5a9b63854c0227daaa474a7c58094b0e59372a39cd95c2", "ref_doc_id": "af61b768-cc92-4f1c-9535-fb5bb3ab3107"}, "3a4bcd10-95e2-4541-aa2d-e39d0a226376": {"doc_hash": "5078cdec29a48a35ae1b435e34cd5f5ba97749dc45507b75365b8bbcdfae4a41", "ref_doc_id": "56cbb6db-0771-4812-825e-198a63625322"}, "2ad6efd6-9e6e-4e27-b898-86abb8e79b90": {"doc_hash": "63368bc3387f13366124cf7f3a1552caaac311bd8747208c67e77dc5599ad151", "ref_doc_id": "25d1d366-8544-4b12-bcc1-adbe9a428023"}, "a3fad1c8-a1ab-4125-a73a-94cad965c63b": {"doc_hash": "20e89ffb4fb7768a56eacdb0f27e0accda59c5c2aa44531f71eb142b7f5b5b8e", "ref_doc_id": "dc4e40d6-a244-4fe2-9048-aeb4d4feae8b"}, "2cd1078c-b0d2-4c04-aa26-f6c947622d09": {"doc_hash": "f5c43fd491a747771d228551fb5b278c4e6599e523dd6f908224188e4a88cc05", "ref_doc_id": "cb89d966-59ae-4dd8-a35d-f2538499a397"}, "f6ec15ca-6dda-4f52-a218-b207b74c0c9d": {"doc_hash": "9f92e250453a465c99de2e9758c6a18107fb95a8b498b8d66e3eb53af0d4baed", "ref_doc_id": "c8ee4965-07c7-4bdb-8d31-d7630c1399b1"}, "d8260154-eeff-4e4c-ac1d-1b983bdfec12": {"doc_hash": "21b3b5def1b975d8d32f2ebd8df35d7221ea720126dc8a83669c8e7ec0f69268", "ref_doc_id": "5a2dfb51-e907-486d-b1ae-7b069f5248ac"}, "b56e1f25-69c0-491f-a189-76cc53003d1a": {"doc_hash": "2f1feb326c30b94eb9b4fb9020c940a77da749950650d4eac84799467151c414", "ref_doc_id": "0a027264-3433-47e2-9e87-5988d43b6bad"}, "1d116111-c4b8-4c68-8315-39c4abbbec54": {"doc_hash": "909c6607e61969b9be9cfe3d5c05f8416a79f555e54bae64461500dd5d2c0a3a", "ref_doc_id": "60969f08-e885-47d4-87b4-299b5b6eeb88"}, "567df745-4ee3-4a9f-bb60-f9f577a7ae7b": {"doc_hash": "61c41e4dd1665c43995ecc3ab87a47c85cc3debff2b4b320d58cc2744e45c593", "ref_doc_id": "abe9725e-d4cc-426d-9701-f9165afb2385"}, "efe3a180-4a90-4f48-b178-efb5aa7fb27b": {"doc_hash": "76819c8cf4444a263b5c1ac7b88ffaf3b192c55a27e1d4f54874ebd8501c92c8", "ref_doc_id": "82429bda-c8e0-479a-9f37-22e6fa37882a"}, "6f869875-9856-4a5f-8465-39e1cd9376ee": {"doc_hash": "794435786ed90b2fc9fc6ccf4c28110c924090f1b4b92bd136f4374ac168b8fa", "ref_doc_id": "54e224f0-3c80-4bd2-9084-49271f5e021c"}, "a04858c7-f7cc-4c24-abea-92a264143195": {"doc_hash": "723cc9d72dedfaa99146d1a9e99f581f6e558b2aff212f0a321b2a213144c1f6", "ref_doc_id": "5285a6c0-d572-4bd3-8d46-267a0266ee7f"}, "d2d3917b-9336-462c-869f-c9eb3faf5219": {"doc_hash": "aaccafcb26485ab6936ff9c89a17589572be9282d2a4f66c62afdc0a95400db7", "ref_doc_id": "14c13d83-48df-4eff-8eff-0785b57eda96"}, "23c54143-ba4f-4b2b-b97e-5f0dac0bdca5": {"doc_hash": "3fb915a988af66ffe25908ad233c3622d594e548090d868f13166582b64ab54d", "ref_doc_id": "dac36450-5f05-4548-af08-418037cab426"}, "394923a6-d9e8-4b2e-ac27-205e34f354b1": {"doc_hash": "8392704097a8e575284b7c24555498f1b7c192186df88f9b7bf49b8bd05c019b", "ref_doc_id": "ef1aa146-846d-47e5-90b7-44a2e61cb4db"}, "f9b60c87-0550-4454-a4cd-32043597f46c": {"doc_hash": "2249ffaa93cdbed8e505c8f3d7ad355ca140cff55bbaad7edf8c8376c0f50c82", "ref_doc_id": "c6a26695-af0b-4ee1-8472-02518911b51b"}, "db5fddf4-11e8-4c29-b27c-a74c808b8cb2": {"doc_hash": "90154e51e31cbed853a2a7b691be4f10e304ca3c703fe53cd86e593363fd8116", "ref_doc_id": "4d131bb2-3a7b-46c6-945c-eae54ecf85de"}, "0309724c-475a-4b65-b8bf-a612db274fc0": {"doc_hash": "922f24d3eb7f55ab05232f7b089a842bbc17f0b2c4e462712d7e98215f6d6b7d", "ref_doc_id": "7e456279-80be-4544-ba7a-1e4e487bd836"}, "baf96e59-ac46-42a1-9862-8b1327b07d49": {"doc_hash": "3c950b9189d38e81a40352a6336b7718aec150b8a17c6bf74ee5b68ea1b8b49d", "ref_doc_id": "4bf83302-492d-47a5-aabd-ae033fdadfce"}, "8799645b-9a04-4eb2-8840-3be229a37fd5": {"doc_hash": "336b591abfcb58271c2fa15add60792209d9661e678253cd3f4c328893ef10e6", "ref_doc_id": "d60d19e5-0d02-4f11-ab43-dfde5aa2ea53"}, "ad1650f6-29ea-4f75-b44a-9e8125d8a33f": {"doc_hash": "46c37d0f2b08ae0537a44e43b385b1aff1b26f224eb56333776da3f16b81ade4", "ref_doc_id": "20108313-1141-4a3a-a5f1-03614ecb7358"}, "ecc1f837-61e0-4c66-820c-adc01601992e": {"doc_hash": "2042652ebcb4b6d31468341502ad270781978b6de74bd532863822122243e37a", "ref_doc_id": "c0b22d21-8a86-47d1-a5bf-ad3c902ab8e3"}, "d5648f18-da04-4b61-ad4e-39f011bb6e79": {"doc_hash": "f56674317f69c52391c38cdc59ee7c39512e9aa62f23396d59bc98974329bc76", "ref_doc_id": "84ea4b0e-914d-4385-9d51-3c1534e2b746"}, "722f4187-7cfd-4b93-a8ee-7d78b1093e12": {"doc_hash": "162dcf33ca42904cf7425c93c3d8b3c9ec5ecd98d15bad882d65c15e3edb2a20", "ref_doc_id": "a331c541-af37-4df5-b11c-ac9c04277608"}, "b3a3a3b1-2382-4cf2-b5a8-f99597f63050": {"doc_hash": "c3d9fc947a5d7df39c860b61fb5f441a4e9b7804382c6f8d7bef61336dcfcf4b", "ref_doc_id": "7b608ee9-b540-47b0-a7ed-abdcf4932ab9"}, "a2435507-aca2-4a1c-a1ee-c816fdfada04": {"doc_hash": "89b61e22c50a040f1094988b7af7955caeffad1f44241f21ed94541dba3532ba", "ref_doc_id": "eec00015-75a7-467b-8806-f6de9dff3bfd"}, "11a0eea7-2a1b-4f30-b669-a436176111a9": {"doc_hash": "6c836d4e138f35848d5bc9be9cc8b7c9b685e5870702018aba272680489e7c62", "ref_doc_id": "77a23b09-8130-42b8-8401-2fd16a0e5fdd"}, "161b1984-a9ef-455c-9837-c68ae3b5313c": {"doc_hash": "b4aad90724697e99877f2510c9355033f41da1ddf52eb980a54d1fba66dd8c49", "ref_doc_id": "6b458660-b582-4e63-b461-3bb2f53a5281"}, "4a0b69a2-c4d3-4a4d-99a4-e11f41148e7e": {"doc_hash": "144a4a3e0bbf433235bb624dfc412f05670314aabf8a62a3da1d5895748c8238", "ref_doc_id": "98d8d2b0-f15c-4957-bd3d-a394496b2209"}, "d43128ca-b024-4b39-a57e-5a23cebbd196": {"doc_hash": "af0f7e046de47bb4a1e7bc025697616feb51be3dd3061589b55fa7973fc8fcd0", "ref_doc_id": "214c155e-49f0-4476-a356-f2716d035307"}, "eedd0c22-2488-4ab7-9bfd-753cf76e5a0d": {"doc_hash": "42aa43755e6a0425018dd35995df0cb2597299e20623144b7f5329f064899fa9", "ref_doc_id": "68df540e-eabd-44ae-9a65-78dbaeb6eab4"}, "796d1853-bc68-4207-a319-1d73b0259337": {"doc_hash": "3023961a67a78baa46369c3fef90ad5741214505ffe5eea6216f83bd78ff884a", "ref_doc_id": "2e191071-500e-439d-8d4a-3c439202f9a5"}, "7dd5a0c3-1b31-4c67-8787-6d156169bf27": {"doc_hash": "46793b7c2b3efeb3fc5d4b477856cfa390db546d1ebda5ab589b4578c75ddaeb", "ref_doc_id": "2d2be69b-4ada-4e90-ab5e-9547bc2e76d2"}, "34edbc66-01d6-42b4-8b5f-10117075046f": {"doc_hash": "3a26e588272f2fe1228903f4f7ad76514e4fca8e3c456347e8e5aa99ad83df46", "ref_doc_id": "8b02826c-3a69-47d5-8d90-7a85312bb61c"}, "120b1017-cef1-4f39-bddf-a9f9d4a666ee": {"doc_hash": "94dde7b7c3d3b51eb9fa5c496ac263bc966ce21e15f7231799030f36de11f859", "ref_doc_id": "5d5ea859-3e92-4f0a-ad3d-a74e5567e5b0"}, "bad80498-0aa4-44f8-bf93-23296d6c114b": {"doc_hash": "2953a1dbba004a5dcbaac4453804af9ab8e17f0ffd7e9eb21047c1e51608738c", "ref_doc_id": "670bbf4a-283b-4dfb-b616-3d078fe1b023"}, "758050e3-b96e-46e8-99d4-a48b636f1735": {"doc_hash": "ddbad8e6fc9979a016f9f7aaa2bd5def9b542255e0830eb86205deed280a6bad", "ref_doc_id": "a2bb51a4-ddd1-41b2-872d-ccb10b3dba41"}, "089d6625-d759-4ff0-b352-7e938466e16d": {"doc_hash": "65493298b0dc396c115ffdd15bff7e5d0c82206adf583f2f9909d7e9d8f43a3c", "ref_doc_id": "b20967fe-1274-4e27-83b4-d8bbdba6e09a"}, "37d78203-df04-45eb-b3fd-715a5142d8a0": {"doc_hash": "8de0e416d1e5b6cc87777bf549625d231b83875897ac4dc6ae676ddf9a717abf", "ref_doc_id": "14e9e442-3ba2-49c1-bf31-b1a0706f952f"}, "8c68952a-f25f-4bbf-8f90-212bfa8edb6f": {"doc_hash": "0466f539b144d55517e6327dbfa5ac41e827aadb5f44e95f2c81a3e681ab24a9", "ref_doc_id": "00c6fed7-0a02-4a22-ab06-2a22e2ea32f9"}, "1a9a38ce-0b5a-4daf-906f-b5935157f0be": {"doc_hash": "7d6bbba3ecb6ac6d277205c4e9bed0e77ce2f75691e9042f42a278b13714ba8f", "ref_doc_id": "8912c0e6-624c-4f43-9652-ac58b0e533bd"}, "aaffe3f6-aa55-432a-bb6a-3b0da1f4dfd7": {"doc_hash": "5b8fcaf286e22fdea60fd5e2da27280aa9c70d463d344c65fa5165d303c7cdbf", "ref_doc_id": "e653ad23-6bf7-4e88-9fe6-108b90b4c9d3"}, "400ae7e4-c76c-41da-8539-0b5cba62024a": {"doc_hash": "18028883ac425fc7e1ca1fc551b151625e93a6a3d72def7c0da165ebdbee123a", "ref_doc_id": "0f70974c-08c3-4554-af19-8b870cff9e11"}, "61b8552c-4f53-4c68-96e0-87100e7a9652": {"doc_hash": "f9e4d676253deda9c1355f984bbb778227e1fbbf60977777cc3a56c77cc1e666", "ref_doc_id": "f8faa598-1d19-435c-95e1-ecd15be9f5a4"}, "f179f5e3-94bf-4a95-bbec-4c2eb3a59d5e": {"doc_hash": "c94c174d45ed14171bff62d05db972b447d93a4daf7a2460cf04e396139e4f0c", "ref_doc_id": "3d4fec62-7bf7-4026-a564-6476782b2c96"}, "369b21d4-7686-45c7-ab39-5950218c51c8": {"doc_hash": "3933b578f0dcb1802d48d5215cc30d53c7dc221203414e299715333cb7c70395", "ref_doc_id": "fff21f70-85ff-4b02-8a2f-57045caa7af8"}, "2158a3aa-350a-4c5e-bb32-44b7a70fd294": {"doc_hash": "b7f37c83e94a67fb61b7ff40e504660474af4f03156665bb4c6d32625b494e77", "ref_doc_id": "7972099b-d1cb-4c2e-b93d-42237ac77784"}, "40c19cc3-5de8-4b2e-9153-61ea87e1cb73": {"doc_hash": "bf9cd2d1681951d2f5ad67cb37b26731e2a8793fcc835d6a45dcca35c5500e46", "ref_doc_id": "bd49c06a-9c55-4ebb-ba7f-be96dc08c4c3"}, "6d44d683-8a3e-452a-91f3-60b9f92ef7a1": {"doc_hash": "f39bb75d2faa9ac463661096ce3c5bde09e083f18aefb6bdb2d27b3445080019", "ref_doc_id": "20d2d2aa-0ea4-463e-b729-34a2aad0fe1b"}, "1038dd1e-ab60-4adb-bacb-8216281486c1": {"doc_hash": "52e6030e7fa27408dabb7d5a81914b5beffb9cfe04cb2c3123c54fb417a02429", "ref_doc_id": "becec475-812f-4f9f-bc4d-472d13dd6123"}, "cea14d14-80e4-45c5-88b8-9dfd4a139a20": {"doc_hash": "2755b66b47ae8bb3ff6348735a4351559362b67715bfdee70a7d9b26cfe1e3d1", "ref_doc_id": "ecd46053-e3f1-4493-8de3-f6b437a8e188"}, "4536a512-727a-4c68-9f83-5bc1a77f2ea1": {"doc_hash": "388c0d5130a77c51f43ab2904ea1d0101edcfa5777dddb65967f5e4c9cf03308", "ref_doc_id": "792994ae-b0fb-4f88-8752-0dc43b03bfe4"}, "257564cc-88ef-4540-88f5-5314097b20f7": {"doc_hash": "f959489faad4e7016ff10148c8830a6ecba52a61485d02d16c54090d679ee6a3", "ref_doc_id": "52821e6a-c922-4d20-9fe4-872de3241e3f"}, "472eeb2a-c9b9-4326-919e-257744bc7b05": {"doc_hash": "54e41fcc2336b03a9aec6c469ffceaa57cbfea1b30a9ebcc68dddfcbc3e7c3ce", "ref_doc_id": "fecb8cb7-09ce-4d21-b160-465a5536dfdb"}, "92b5d58e-ebca-481a-895b-6d75f66a06d5": {"doc_hash": "98ef7ba0443c1bf8e0411b0c1bc332fb8b8a214c760eccd32eb15e930de78561", "ref_doc_id": "a96e638b-6971-4d64-976e-6a44ce20f7ae"}, "997672ca-989f-4edc-a14b-c1984f0542fa": {"doc_hash": "1e4945a4815c12cba36ec1046a029f01ba7ac8ef166aa779ef9b517a18b21537", "ref_doc_id": "6355056a-b513-43c0-933a-a64b07a06d45"}, "fabc3e3a-9393-4dbf-ab7d-644fa1658a22": {"doc_hash": "11bbcf595935f0071aacf171fd47e477b39d9abb5adf1eeac99066f8197912af", "ref_doc_id": "fd2346c0-b51a-4e83-aee8-9a274c889e4e"}, "dc529e8a-d3e1-47a5-bc45-853c6614bfd7": {"doc_hash": "3a8d5c2b87e568055f2b2334547c61462b6e9080da32d9fbfe6294204e6e0c34", "ref_doc_id": "7bb2cc3a-d91e-49d1-aeed-30b6ba3946d2"}, "1aae7460-e4fb-4829-82de-4559e870feb8": {"doc_hash": "a44880155ab6c199f62866fcf9557b5d6ada0a4478bca7870f0676aa9056ccc2", "ref_doc_id": "12606390-1b87-4fe5-b1a9-03913afaddc2"}, "f8c5b212-9734-46ef-aa4b-1cf308ea813f": {"doc_hash": "3ae2e987fccb141714621e694962a900f504ff2c9fe05511fa15617ff9190725", "ref_doc_id": "da303fc4-2884-46b7-a71b-472eb1a1a710"}, "fcd6b381-fd40-4066-b397-2297df9fec41": {"doc_hash": "dcd25f0de5193bc0581a777ad6131940b87995bd786c04565932910856b47b2b", "ref_doc_id": "1e12b747-3f0c-4549-aeb2-d5b7c356598d"}, "d88d984c-9438-440d-a9ca-365d229189e8": {"doc_hash": "bdd9ad6f77132f666ac1aec95f0a7316129aa4cc9fe2c1b6c00a91c3a1c66087", "ref_doc_id": "d7abdfca-0b3f-4b5e-af63-f73a7e2d8c69"}, "e72e1aec-b700-4746-bdfc-714123578739": {"doc_hash": "73ef76c5405d765793dd674dc064471d442b5af76a3f2cc2c9d4061c637a4c95", "ref_doc_id": "07cb817a-97ac-479b-b7cd-f576870db28d"}, "390bf8d6-6e49-47f1-943b-70fccd7c1070": {"doc_hash": "bc2900b7f954df252b28647751cc104578ce5df471cd796318b0536634878247", "ref_doc_id": "597e862f-37cc-4000-b2df-4b6bd52d4dc0"}, "46f48424-cd6c-43d9-8ce0-71fba2ba86ee": {"doc_hash": "d75487d19d0d9738e7ab060d80a5a1e47021c3f5bb3fd62a57eec593b931fa72", "ref_doc_id": "bcb58c89-afcd-4da4-a800-1d64bf1dde98"}, "0757a05f-e4b7-48ce-804d-2a8f14520e40": {"doc_hash": "552d68a908dd1f2013051d0fa2a1b6babc54cff8f4cc61a74c37ecdb884cff08", "ref_doc_id": "18befa48-e6ca-4ae4-b08a-cc542b05e467"}, "63343528-87fd-4645-a0e5-e398dda9038e": {"doc_hash": "c7136a8ae685f96b159f746866f3d8e17553857ff2d22a6146497d599fafe218", "ref_doc_id": "0344de18-80c6-4863-9e49-5fd173711df4"}, "217adf4e-81e4-42b3-84ce-53f2c9bf30b8": {"doc_hash": "542cb18df9cadb817da27dce10411eaeb561c5f313dece6fdd71546e19327f10", "ref_doc_id": "f4a34281-36db-4276-a05d-8e3334e4be2b"}, "1d72bc69-0073-4277-9b49-63aa41b44732": {"doc_hash": "b390c6a5328fe758292d9b5d6c9ae0ffc0bc74c1312a8885de469c07054e3054", "ref_doc_id": "1f10c0d4-df56-4482-be45-f706961b42d5"}, "813d1bbb-4c58-4bb4-b699-d3db1bf93829": {"doc_hash": "5ed2013c46651945831fa60b5b9c3b4cb0d287c64dca7ef576e72fcb881d8479", "ref_doc_id": "493e6a7d-088b-4892-8bab-10a13462b92c"}, "ce894004-cb88-4347-a853-95bef5565f35": {"doc_hash": "734f589aeb619fb296fba40fa11b89f7458c2d0ed917faa8362aa73122da471b", "ref_doc_id": "b2ef41ec-a7dc-4e17-81f7-6b0a72664ed7"}, "6719e7ff-c1e4-4e06-9e39-a6f51f86f7d0": {"doc_hash": "b99ce9b3c1fe7eb0663860b26324f45699c302d9ef081557c51049d29c7890ee", "ref_doc_id": "6b7a1b02-538a-4df2-8207-32d167042ea1"}, "201afeb1-ee4c-4d0e-8e6a-ce8e766ee757": {"doc_hash": "2a833f300c147485704d78688a34ffe584a6370840e654497f72a8e04e967f54", "ref_doc_id": "1186a45a-8103-4cea-9d98-6a1fc4c304b9"}, "508af3d3-1ecd-4b74-bfac-25e30ee95d28": {"doc_hash": "bb483d413598f505a61a5bc469f5d4f4461ac0842535481b84e694ea9202bc2c", "ref_doc_id": "4c40406a-069f-48db-8ee5-adb03ee42bca"}, "e0c11d94-56bb-448f-847e-64084c955fec": {"doc_hash": "f876c470cf4f0da68a49ee47d48875e6f9afb9dcb2e9a1d39d9546d7a476d4c9", "ref_doc_id": "aacaf8c6-37c1-4aed-9725-5a09eddee5fd"}, "baa89533-a06a-40ab-84a6-68c1310d4560": {"doc_hash": "3aeb6ac7debb325256a195a2c419439fbf8933d0f180096f2e0646fa6a1dfadb", "ref_doc_id": "2daa7317-af33-468f-99a1-dfc61f8f03fb"}, "abd526ab-6ff8-4ddb-bacc-0c1714e20726": {"doc_hash": "af394d4f2137e5a6f97fb8c350fc0905e48033a29cae12d85e210f273d36df87", "ref_doc_id": "6f8e84c0-c369-4938-ab0c-8d7113633710"}, "e795c7ee-c711-4def-8fd4-6113828beebe": {"doc_hash": "ef78f98289fe4646f3043747c2f4833908f30f15a3986f0c0504d199fb8f2c9f", "ref_doc_id": "f392f1d2-fa9e-4f96-bdf5-95a978d8d461"}, "3a0f953c-658b-42d6-ad53-ea3176d35496": {"doc_hash": "2e03e509ffb618f2da6f1b188397835063cfd0d082a68de0b9eb58b00d89d340", "ref_doc_id": "71cedad1-8bb6-4eb7-b829-6019b5930533"}, "be9c760c-11e6-41fe-8c6e-a6b3e334f7b4": {"doc_hash": "3f8c005d59a58dc41d5df44bdf1ec32dfe08fd6eebaf8186090283201946a0b7", "ref_doc_id": "d5097fce-5eb6-476e-a268-d1947633d02e"}, "ae8ac654-4fd5-4328-8153-c6897ac58924": {"doc_hash": "8d18ed59292d157cb040e6d09fcc26c1c02aee6dc87a45464dd05349f1a48861", "ref_doc_id": "5fc82b6e-8c20-47c7-ba85-5db4fcd5dc99"}, "22798472-40af-4920-8096-e39a927e4ef7": {"doc_hash": "d139239ba3033c42ad1b3b8deaf2e5e5d8d50b58700b6269b4ffcdaf4e990156", "ref_doc_id": "db5a0812-25bf-43e2-b40c-33f557a50f2a"}, "3db4c6fb-c1d6-438b-8246-31d404fbdda6": {"doc_hash": "0d6896cc2a197f9d01f5ca82caa2eff61ec9898906e1bbfe7f3742dbe2286e66", "ref_doc_id": "1c3b5c0e-b2e6-4d09-9b4a-4ef3bd5af088"}}, "docstore/data": {"5d6e5a9c-271c-49ce-ab9a-fddc20ed5e62": {"__data__": {"id_": "5d6e5a9c-271c-49ce-ab9a-fddc20ed5e62", "embedding": null, "metadata": {"page_label": "1", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "629f60a1-f37d-45e2-a7c9-d84d66a80152", "node_type": "4", "metadata": {"page_label": "1", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b88ac7747ec0dc7178b6adfa4e4f4c8be660bce99222f528f7526e146a5064da", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6fa431a6-8ebd-4f08-827e-2d202a04ff0e": {"__data__": {"id_": "6fa431a6-8ebd-4f08-827e-2d202a04ff0e", "embedding": null, "metadata": {"page_label": "2", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0a44df04-7921-4620-b824-69101bc14674", "node_type": "4", "metadata": {"page_label": "2", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "47bc244cf2737d3e577715634c9d05c3788abb59c7b15aa4e4c24a9b33573e01", "class_name": "RelatedNodeInfo"}}, "text": "About the Author\nNikrouz F aroughi  has a BS in computer engineering, MS in\ncomputer science, MS in electrical engineering, and PhD in\nelectrical engineering with a specialization in computer\nengineering from Michigan State University . He has work ed\nas a systems analyst and currently is a professor and\ngraduate coordinator in the Computer Science Department\nand a faculty member in the Computer Engineering Program\nat Califor nia State University, Sacramento . As a consultant,\nhe has work ed and also served as a technical manager at\nIntel Corporation.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 557, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a3eafd15-e127-49d6-89d6-f631c5f78bac": {"__data__": {"id_": "a3eafd15-e127-49d6-89d6-f631c5f78bac", "embedding": null, "metadata": {"page_label": "3", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "994f125a-7045-404c-821b-dc76ffe0d2ad", "node_type": "4", "metadata": {"page_label": "3", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5457a8e3074efb04928bd4e47038a1a2388ad564dfdc05cf36e6a37dbcbcc1fa", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "278ae817-e588-4a02-8320-81c9c79cf502": {"__data__": {"id_": "278ae817-e588-4a02-8320-81c9c79cf502", "embedding": null, "metadata": {"page_label": "4", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6fd1610d-3ac2-4bbd-98cd-40f1d7b33f19", "node_type": "4", "metadata": {"page_label": "4", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "475b08c524c4b4fedac47ad8e96f7f70488367155021bc59b67a4dd284300627", "class_name": "RelatedNodeInfo"}}, "text": "Copyright \u00a9 2015 by McGraw-Hill Education. All rights\nreserved. Except as permitted under the United States\nCopyright Act of 1976, no part of this publication may be\nreproduced or distributed in any form or by any means, or\nstored in a database or retrieval system, without the prior\nwritten per mission of the publisher .\nISBN: 978-0-07-183808-5\nMHID: 0-07-183808-2\nThe material  in this eBook also appears in the print version\nof this title: ISBN: 978-0- 07-183690-6, MHID: 0-07-183690-\nX.\neBook conversion by codeMantra\nVersion 1.0\nAll trademarks are trademarks of their respective owners.\nRather than put a trademark symbol after every occur rence\nof a tradem arked name, we use names in an editorial\nfashion only, and to the bene\ufb01t of the trademark owner,\nwith no intention of infringement of the trademark. Wher e\nsuch designations appear in this book, they have been\nprinted with initial caps.\nMcGraw-Hill Education eBooks are available at special\nquantity discounts to use as pr emiums and sales pr omotions\nor for use in corporate training programs. To contact a\nrepresentative, please visit the Contact Us page at\nwww.mhpr ofessional.com .\nInformation contained in this work has been obtained by\nMcGraw-Hill Education from sources believed to be reliable.\nHowever, neither McGra w-Hill Education nor its authors\nguarantee the accuracy or completeness of any information", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1379, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4ec6e91-8366-4765-a2b7-3b125ccc4265": {"__data__": {"id_": "e4ec6e91-8366-4765-a2b7-3b125ccc4265", "embedding": null, "metadata": {"page_label": "5", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e753f969-540b-4f08-924f-c72d4bca31d2", "node_type": "4", "metadata": {"page_label": "5", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0497c095f4a120b7bd74b6b31a6553f0f4165f91be89b9768f7dacceb3f7eb95", "class_name": "RelatedNodeInfo"}}, "text": "published herein, and neither McGraw-Hill Education nor its\nauthors shall be responsible for any errors, omissions, or\ndamages arising out of use of this information. This work is\npublished with the understanding that McGraw-Hill\nEducation and its authors are supplying information but are\nnot attempting to render engineering or other professional\nservices. If such services are requir ed, the assistance of an\nappropriate pr ofessional should be sought.\nTERMS OF USE\nThis is a copyrighted work and McGraw-Hill Education and\nits licensors reserve all rights in and to the work. Use of this\nwork is subject to these terms. Except as permitted under\nthe Copyrigh t Act of 1976  and the right to store and retrieve\none copy of the work, you may not decompile, disassemble,\nreverse engineer, reproduce, modif y, create derivative\nworks based  upon, transmit, distribute, disseminate, sell,\npublish or sublicense the work or any part of it without\nMcGraw-Hill Education\u2019s prior consent. You may use the\nwork for your own noncommer cial and personal use; any\nother use of the work is strictly prohibited. Your right to use\nthe work may be termina ted if you fail to comply with these\nterms.\nTHE WORK IS PROVIDED \u201cAS IS.\u201d MCGR AW-HILL EDUCATION\nAND ITS LICENSORS MAKE NO GUAR ANTEES OR\nWARRANTIES AS TO THE ACCUR ACY, ADEQUA CY OR\nCOMPLETENESS OF OR RESUL TS TO BE OBTAINED FROM\nUSING THE WORK, INCLUDING ANY INFORMA TION THAT CAN\nBE ACCESSE D THROUGH  THE WORK VIA HYPERLINK OR\nOTHER WISE, AND EXPRESSL Y DISCL AIM ANY WARRANTY,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\nIMPLIED WARRANTIES OF MERCHANT ABILITY OR FITNESS\nFOR A PARTICUL AR PURPOSE. McGraw-Hill Education and its\nlicensors do not warrant or guarantee that the functions", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1736, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f07a1b6c-bd82-4485-a0ed-a33dc1fb549e": {"__data__": {"id_": "f07a1b6c-bd82-4485-a0ed-a33dc1fb549e", "embedding": null, "metadata": {"page_label": "6", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e79d47b7-78cc-4bb7-b114-605a6bca14e0", "node_type": "4", "metadata": {"page_label": "6", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d29638b2d6a21198223677463fb88e60a3a488aad88ba53727173c32ba517d77", "class_name": "RelatedNodeInfo"}}, "text": "contained in the work will meet your requir ements or that\nits operation will be uninter rupted or error free. Neither\nMcGraw-Hill Education nor its licensors shall be liable to you\nor anyone else for any inaccuracy, error or omission,\nregardless of cause, in the work or for any damages\nresulting therefrom. McGraw-Hill Education has no\nresponsibility for the content of any information accessed\nthrough the work. Under no circumstances shall McGraw-Hill\nEducation and/or its licensors be liable for any indirect,\nincidental, special, punitive, consequential or similar\ndamages that result from the use of or inability to use the\nwork, even if any of them has been advised of the possibility\nof such damages. This limitation of liability shall apply to\nany claim or cause whatsoever whether such claim or cause\narises in contract, tort or otherwise.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 850, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9e5261d5-a5b4-4341-adce-b61575266a9d": {"__data__": {"id_": "9e5261d5-a5b4-4341-adce-b61575266a9d", "embedding": null, "metadata": {"page_label": "7", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f1d7e2a7-a732-4805-ad02-e0ed1173a52d", "node_type": "4", "metadata": {"page_label": "7", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "374c58b6f796808ba02000dae4a44a80f5127671510143fffed60875cdeb896f", "class_name": "RelatedNodeInfo"}}, "text": "Contents\nPreface\nAcknowledgment\n1 Introduction\n1.1 Intr oduction\n1.1.1 Data R epresentation\n1.1.2 Data P ath\n1.1.3 Computer Systems\n1.1.4 Embedded Systems\n1.2 L ogic Design\n1.2.1 Cir cuit Minimization\n1.2.2 Implementation\n1.2.3 T ypes of Cir cuits\n1.2.4 Computer -Aided Design T ools\n1.3 Computer Or ganization\n1.4 Computer Ar chitectur e\n1.4.1 P ipelining\n1.4.2 P arallelism\n1.5 Computer Security\nReferences\nExercises", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 420, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c119bb47-5d6c-452f-b457-449038172449": {"__data__": {"id_": "c119bb47-5d6c-452f-b457-449038172449", "embedding": null, "metadata": {"page_label": "8", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "242809b8-d85d-4fc9-b3c4-0995e1c77fe9", "node_type": "4", "metadata": {"page_label": "8", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "905d422aa003604787fa490e4a8f320d93371685725789496368e763af968358", "class_name": "RelatedNodeInfo"}}, "text": "2 Combinational Circuits: Small Designs\n2.1 Intr oduction\n2.1.1 Signal Naming Standar ds\n2.2 L ogic Expr essions\n2.2.1 Sum of P roduct Expr ession\n2.2.2 P roduct of Sum Expr ession\n2.3 Canonical Expr ession\n2.3.1 Min- Terms\n2.3.2 Max- Terms\n2.4 L ogic Minimization\n2.4.1 K arnaugh Map\n2.4.2 K -Map Minimization\n2.5 L ogic Minimization Algorithm\n2.5.1 Minimization Sof tware\n2.6 Cir cuit T iming Diagram\n2.6.1 Signal P ropagation Delay\n2.6.2 F an-In and F an-Out\n2.7 Other Gates\n2.7.1 Bu\ufb00er\n2.7.2 Open Collector Bu\ufb00er\n2.7.3 T ri-State Bu\ufb00er\n2.8 Design Examples\n2.8.1 F ull Adder\n2.8.2 Multiple xer\n2.8.3 Decoder\n2.8.4 Encoder\n2.9 Implementation\n2.9.1 P rogrammable L ogic Devices\n2.9.2 Design Flow\n2.10 Har dwar e Description Languages\n2.10.1 Structural Model", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 758, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "204c3d99-619a-4861-835f-b3f294f92f17": {"__data__": {"id_": "204c3d99-619a-4861-835f-b3f294f92f17", "embedding": null, "metadata": {"page_label": "9", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b718dbba-4346-417d-8362-4ab55b0a1d65", "node_type": "4", "metadata": {"page_label": "9", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9be9e8c88c57cb84a4e4cdf82e3c0f13cf87c95ab8875622f3c0955817fbb209", "class_name": "RelatedNodeInfo"}}, "text": "2.10.2 P ropagation Delay Simulation\n2.10.3 Behavioral Modeling\n2.10.4 Synthesis and Simulation\nReferences\nExercises\n3 Combinational Circuits: Large Designs\n3.1 Intr oduction\n3.1.1 T op-Down Design Methodology\n3.2 Arithmetic F unctions\n3.3 A dder\n3.3.1 Car ry Propagate A dder\n3.3.2 Car ry Look-Ahead A dder\n3.4 Subtractor\n3.5 2\u2019s Complement A dder/Subtractor\n3.6 Arithmetic L ogic Unit\n3.6.1 Design P artitioning: Bit-P arallel\n3.6.2 Design P artitioning: Bit-Serial\n3.7 Design Examples\n3.7.1 Multiplier\n3.7.2 Divider\n3.8 R eal Number Arithmetic\n3.8.1 Floating-P oint Standar ds\n3.8.2 Floating-P oint Data Space\n3.8.3 Floating-P oint Arithmetic\n3.8.4 Floating-P oint Unit\nReferences\nExercises\n4 Sequential Circuits: Core Modules\n4.1 Intr oduction\n4.2 SR Latch", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 760, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "60bd1459-baf5-463d-accb-159ed54802d4": {"__data__": {"id_": "60bd1459-baf5-463d-accb-159ed54802d4", "embedding": null, "metadata": {"page_label": "10", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "91f8b85c-b71e-4bb5-8a4d-0061d53b1f2c", "node_type": "4", "metadata": {"page_label": "10", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7058db9e2e0cd16d4a1cafc783a012406e884312ca9959614f3b6a632bf440fa", "class_name": "RelatedNodeInfo"}}, "text": "4.2.1 Clock ed SR Latch\n4.3 D-Latch\n4.4 Disadvantage of Latches\n4.5 D Flip-Flop\n4.5.1 Alter native Cir cuit\n4.5.2 Operating Conventions\n4.5.3 Setup and Hold T imes\n4.6 Clock F requency Estimation without Clock Sk ew\n4.7 Flip-Flop with Enable\n4.8 Other Flip-Flops\n4.9 Har dwar e Description Language Models\nReferences\nExercises\n5 Sequential Circuits: Small Designs\n5.1 Intr oduction\n5.2 Intr oduction to F SM: R egister Design\n5.2.1 R egister Model\n5.2.2 Multifunction R egisters\n5.3 F inite State Machine Design\n5.3.1 Binary Encoded States\n5.3.2 One-Hot Encoded States\n5.4 Counters\n5.5 F ault-Tolerant F inite State Machine\n5.5.1 Hamming Coding Scheme\n5.6 Sequential Cir cuit T iming\n5.6.1 Clock Frequency Estimation with Clock\nSkew\n5.6.2 Asynchr onous Interface\n5.7 Har dwar e Description Language Models\n5.7.1 Synthesis and Simulation", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 836, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "49190e58-19c7-4abb-afb1-3b3ae330d722": {"__data__": {"id_": "49190e58-19c7-4abb-afb1-3b3ae330d722", "embedding": null, "metadata": {"page_label": "11", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8aed8f3d-2b11-485f-9d76-e7af0668c4eb", "node_type": "4", "metadata": {"page_label": "11", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "37963d3c535fdc01f019212af69f738fba40b5e61d9597630cdf85c3aabc18d1", "class_name": "RelatedNodeInfo"}}, "text": "References\nExercises\n6 Sequential Circuits: Large Designs\n6.1 Intr oduction\n6.1.1 R egister T ransfer Notation\n6.2 Data P ath Design\n6.2.1 Single-Cycle\n6.2.2 Multicycle\n6.2.3 P ipelined\n6.3 Contr ol Unit Design T echniques\n6.3.1 Har dwired Contr ol: FSD\n6.3.2 Micr oprogrammed Contr ol\n6.3.3 Har dwire Contr ol: Pipeline\n6.4 Ener gy and P ower Consumption\n6.5 Design Examples\n6.5.1 Unsigned Sequential Multiplier\n6.5.2 Signed Sequential Multiplier\n6.5.3 Computer Graphics: R otation\nReferences\nExercises\n7 Memory\n7.1 Intr oduction\n7.2 Memory T echnologies\n7.2.1 R ead-Only Memories\n7.2.2 R andom A ccess Memories\n7.2.3 Applications\n7.3 Memory Cell Ar ray\n7.3.1 W ord Access\n7.3.2 Burst A ccess\n7.4 Memory Or ganization", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 718, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9c8e5b78-c728-479b-b17d-79da7138ec06": {"__data__": {"id_": "9c8e5b78-c728-479b-b17d-79da7138ec06", "embedding": null, "metadata": {"page_label": "12", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "388409aa-f003-4090-8b99-c0dde374275e", "node_type": "4", "metadata": {"page_label": "12", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "bcd3c12327cf7ed5c2d7856174ca97903c40243f81557ac231f1da3feeecef0e", "class_name": "RelatedNodeInfo"}}, "text": "7.4.1 Moder n DRAMs\n7.4.2 SR AM Cell Model\n7.4.3 Inter nal Or ganization: SR AM Chip\n7.4.4 Memory Unit Design\n7.5 Memory T iming\n7.5.1 SR AM\n7.5.2 DR AM\n7.5.3 SDR AM\n7.5.4 DDR SDR AM\n7.6 Memory Ar chitectur e\n7.6.1 High- Order Interleaving\n7.6.2 L ow-Order Interleaving\n7.6.3 Multichannel\n7.7 Design Example: Multipr ocessor Memory\nArchitectur e\n7.7.1 UMA versus NUMA\n7.7.2 A NUMA Application\n7.8 HDL Models\nReferences\nExercises\n8 Instruction Set Architecture\n8.1 Intr oduction\n8.1.1 T ype of Instructions\n8.1.2 P rogram T ranslation\n8.1.3 Instruction Cycle\n8.2 Types of Instruction Set Ar chitectur e\n8.2.1 A ddressing Modes\n8.2.2 Instruction F ormat\n8.2.3 Stack-IS A\n8.2.4 A ccumulator -ISA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 692, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2b761b1-8ed3-4833-9dc0-b5c240b12c92": {"__data__": {"id_": "e2b761b1-8ed3-4833-9dc0-b5c240b12c92", "embedding": null, "metadata": {"page_label": "13", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e2d923a0-2ae0-40de-901e-d26d417024dd", "node_type": "4", "metadata": {"page_label": "13", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "df1d5e9786be57a4c80de3b1dd0b5eaf0cccef92ea18e55510e8fe280dc92b7b", "class_name": "RelatedNodeInfo"}}, "text": "8.2.5 CISC-IS A\n8.2.6 RISC-IS A\n8.3 Design Example\n8.3.1 A cc-IS A Instruction Set Design\n8.3.2 A cc-IS A Processor : Single-Cycle\n8.3.3 A cc-IS A Processor : Pipelined\n8.3.4 RISC-IS A Processor\n8.4 A dvanced P rocessor Ar chitectur es\n8.4.1 Deep P ipelining\n8.4.2 Branch P rediction\n8.4.3 Instruction-L evel P arallelism\n8.4.4 Multithr eading\nReferences\nExercises\n9 Computer Architecture: Interconnection\n9.1 Intr oduction\n9.1.2 Inter connection Ar chitectur es\n9.2 Memory Contr oller\n9.2.1 Simple Memory Contr oller\n9.2.2 Moder n Memory Contr oller\n9.3 I/O P eripheral Devices\n9.4 Contr olling and Interfacing I/O Devices\n9.4.1 I/O P orts\n9.5 Data T ransfer Mechanisms\n9.5.1 Inter rupt-Driven T ransfer\n9.5.2 P rogrammed T ransfer\n9.5.3 DMA T ransfer\n9.6 Inter rupts\n9.6.1 Handling Inter ruptions\n9.6.2 Inter rupt Structur es", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 827, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "501ce357-7736-4134-8792-e882cbe518b4": {"__data__": {"id_": "501ce357-7736-4134-8792-e882cbe518b4", "embedding": null, "metadata": {"page_label": "14", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b85c2d9e-6d2f-44da-82ac-981da3d7d9b6", "node_type": "4", "metadata": {"page_label": "14", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "44d5787eaeb3e0496853211c0c7bb608459de9f4cbbf61e08959e8bc02e76051", "class_name": "RelatedNodeInfo"}}, "text": "9.7 Design Example: Inter rupt Handling CPU\n9.8 USB Host Contr oller Interface\n9.8.1 Standar ds\n9.8.2 T ransactions\n9.8.3 T ransfers\n9.8.4 Descriptors\n9.8.5 F rames\n9.8.6 T ransaction Or ganization\n9.8.7 T ransaction Ex ecution\nReferences\nExercises\n10 Memory System\n10.1 Intr oduction\n10.1.1 Memory Hierar chy\n10.2 Cache Mapping\n10.2.1 Dir ect Mapping\n10.2.2 T ypes of Cache Misses\n10.2.3 Set- Associative Mapping\n10.3 Cache Coher ency\n10.3.1 Invalidation versus Update P rotocols\n10.3.2 Snoop Cache Coher ence P rotocol\n10.3.3 W rite-Through P rotocol\n10.3.4 W rite-Back P rotocols\n10.4 V irtual Memory\n10.4.1 V irtual A ddress T ranslation\n10.4.2 T ranslation L ookaside Bu\ufb00er\n10.4.3 P rocessor Or ganization\nReferences\nExercises\n11 Computer Architecture: Security", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 766, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2e008efc-dfa6-4d65-ac60-ba50fa003b3d": {"__data__": {"id_": "2e008efc-dfa6-4d65-ac60-ba50fa003b3d", "embedding": null, "metadata": {"page_label": "15", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ff696c81-945f-4c5d-bce4-0dd189b445c4", "node_type": "4", "metadata": {"page_label": "15", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8f81ae776d6ff50db0e2d7517515660a7d18ce0f146df453a4adc6f76f02ef5e", "class_name": "RelatedNodeInfo"}}, "text": "11.1 Intr oduction\n11.1.1 Security Engineering Methodology\n11.1.2 Thr eat Classes\n11.1.3 A ccess Contr ol and T ypes\n11.1.4 Security P olicy Models\n11.1.5 A ttack Classes\n11.2 Har dwar e Backdoor A ttacks\n11.2.1 Data and Contr ol Attacks\n11.2.2 T imer A ttack\n11.2.3 Security P olicy Mechanisms\n11.3 Sof tware/Physical A ttacks\n11.3.1 Spoo\ufb01ng\n11.3.2 Splicing\n11.3.3 R eplay\n11.3.4 Man-in-the-Middle\n11.4 T rusted Computing Base\n11.5 Cryptography\n11.5.1 Symmetric-K ey Ciphers\n11.5.2 Modes of Operation\n11.5.3 Asymmetric-K ey Ciphers\n11.6 Hashing\n11.7 Cryptography Hash\n11.7.1 Message Authentication Code\n11.7.2 Hash MA C\n11.8 Storing Cryptography K eys thr ough Har dwar e\n11.8.1 K eychain Or ganization\n11.8.2 Storage and A ccess\n11.8.3 Application Example: Keychain as\nAccess Contr ol\n11.9 Hash T ree", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 802, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "23f90950-cd67-4ee9-b3a9-2237c8ff02aa": {"__data__": {"id_": "23f90950-cd67-4ee9-b3a9-2237c8ff02aa", "embedding": null, "metadata": {"page_label": "16", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b01f9da2-c494-4419-8198-5d604e30bb2d", "node_type": "4", "metadata": {"page_label": "16", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b7e6dd078733b4f53ab15dd0e6b698dd22fa948b8b79b75c573263977f139ce3", "class_name": "RelatedNodeInfo"}}, "text": "11.9.1 Application Example: Keychain\nAuthentication\n11.9.2 Application Example: Memory\nAuthentication\n11.10 Secur e Copr ocessor Ar chitectur e\n11.10.1 T rusted Platfor m Module\n11.11 Secur e Processor Ar chitectur e\n11.11.1 P rogram Code Integrity\n11.11.2 Operational Security Mechanisms\n11.11.3 P rogram Code Con\ufb01dentiality\n11.11.4 Program Code Integrity and\nCon\ufb01dentiality\n11.11.5 P rogram Data Integrity\n11.11.6 P rogram Data Con\ufb01dentiality\n11.11.7 Program Data Integrity and\nCon\ufb01dentiality\n11.11.8 Program Code and Data Integrity and\nCon\ufb01dentiality\n11.11.9 Handling Inter ruption\n11.12 Design Example: Secur e Processor\n11.12.1 SP Speci\ufb01cation\n11.12.2 P rocessor Ar chitectur e\n11.12.3 Encryption Decryption Hashing\nEngine\n11.12.4 Hash T ree Engine\n11.13 F urther R eading\nReferences\nExercises\nBibliography\nIndex", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 817, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4fb1472d-121c-4190-9a9b-5a6a20e24a16": {"__data__": {"id_": "4fb1472d-121c-4190-9a9b-5a6a20e24a16", "embedding": null, "metadata": {"page_label": "17", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1a8cfaba-79d6-4b2c-87a1-fd12719ac2a3", "node_type": "4", "metadata": {"page_label": "17", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d660ffa207d90e5a42feb4937bcaa10d44ec0e9e3d2d8a135d04740ba1c4c834", "class_name": "RelatedNodeInfo"}}, "text": "T\u00a0\nPreface\nhis book is designed with the goal of providing a\ncompr ehensive understanding of digital logic design\nand computer organization in a single textbook. In addition,\nthe book contains an entire chapter on computer\narchitectur e for security .\nThe book covers both the fundamentals of digital logic\ndesign and design with the Verilog hardwar e description\nlanguage. Separate chapters are allocated to cover design\nmethodologies of simple and comple x combinational and\nsequential circuits. Moder n tools and methodology for circuit\ndesign are discussed in general, and Verilog examples\nillustrate only the basic and synthesizable featur es of the\nlanguage. If desir ed, instructors may choose to use VHDL\ninstead. However, the book does not requir e using a\nhardwar e description language.\nThe book covers memory organization, processing core\nand processor organization, and computer security through\nhardwar e. As advancements in technologies and demand for\nhigh-speed and low-power designs have changed the\nfundamentals of computer organization, an attempt is made\nto provide not only simple examples to illustrate basic\ndesign concepts, but also provide an understanding of\nmoder n computer design objectives.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1220, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc5012a3-f0e2-47fe-ae41-7c66f8b939e1": {"__data__": {"id_": "cc5012a3-f0e2-47fe-ae41-7c66f8b939e1", "embedding": null, "metadata": {"page_label": "18", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "38a957ac-019f-4fe9-a138-c68f13df5f20", "node_type": "4", "metadata": {"page_label": "18", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7b3811f35247a2e703d7cafc6692df055d73fcb88bf4914fca5b9bad758dc28a", "class_name": "RelatedNodeInfo"}}, "text": "The book also covers computer architectur e concepts\nfrom instruction set architectur e, including the architectur e\nfor secure execution, pipelining and parallelism, and\nmemory hierar chy. An attempt is made to provide numer ous\nexamples that illustrate the applications of pipel ining and\nparallelism to increase concur rency and reduce  or hide\nlatency (two factors that a\ufb00ect perfor mance). Program code\nexamples are also used to illustrate the link between CPU\narchitectur e and a compiler and between programing\nmethodologies and perfor mance.\n\u00a0\nOverview of Chapters\nThere are 11 chapters in this book. An overview of digital\nsystems, innovations in computing, number systems, digital\nlogic design, and computer organization/ar chitectur e and\nsecurity is given in Chap. 1 .\nChapters 2 and 3 cover simple and comple x\ncombinational circuits, including integer and \ufb02oating-point\narithmetic. In Chap. 2, wher e design methodologies for\nsmall circuits are discussed, it is assumed that when it is\nnecessary to minimize truth tables with more than four\ninput variables, students would be using logic minimization\nsoftware, such as Espresso, which is available for free\ndownload from the Internet. The chapter also provides an\nintroduction to design tools, structural and behavioral\ndesign models, and design with programmable logic\ndevices, and includes sample designs in Verilog and\npresents synthesis and simulation results. Chapter 3 covers\nmethodologies used to design large combinational circuits\nand introduces integer and \ufb02oating-point computer\narithmetic and also pr esents design e xamples.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1601, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b520e438-0065-4259-acad-57a238341bf5": {"__data__": {"id_": "b520e438-0065-4259-acad-57a238341bf5", "embedding": null, "metadata": {"page_label": "19", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6157ea44-8759-4e1f-8f5e-03e7522cf4eb", "node_type": "4", "metadata": {"page_label": "19", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "89c6ffc35cd031da577b2852c43cd66b04f0b468b073867e4f18d96fb24119cd", "class_name": "RelatedNodeInfo"}}, "text": "Chapters 4 , 5, and 6 cover simple and comple x sequential\ncircuits from basic modules to comple x data paths and\ncontr ol to timing constraints, design e\ufb03ciency, and power\nusage. Chapter 4 covers latches, \ufb02ip-\ufb02ops, and their timing\nrequir ements. Chapter 5 covers \ufb01nite state mach ine (FSM)\ndesign and timing requir ements and handling of\nasynchr onous inputs. Chapter 6 covers single-cycle,\nmulticycle, and pipelined  data paths and contr ols. Design\nexamples illustrate data path and FSM-based,\nmicroprogrammed, and pipelined contr ol unit organizations.\nSeveral data path design examples, including for unsigned\nand signed multiplication and two-dimensional virtual object\nrotation, ar e also pr esented.\nChapter 7 is dedicated to memory and covers memory\ntechnologies, including SDRAM technologies, and memory\ndesign, including interleaving and multichannel. Memory\ncommunication protocols, perfor mance, and unifor m\nmemory access (UMA) and nonunifor m memory access\n(NUMA) organizations are also presented. Examples of\nprograming methodologie s to take advantage of a NUMA\norganization to impr ove perfor mance ar e also discussed.\nChapter 8 cover s CPU design, from single-cycle and\npipeline, to reduced instruction set computer (RISC), deep\npipelining, and branch prediction, to static and dynamic\ninstruction-level parallelism (ILP), to multithr eading. The\nchapter includes design and simulation of CPU data path\nexamples and presents program code examples to illustrate\ncompiler optimization to improve perfor mance , branch\nprediction, ILP, and multithr eading.\nChapter 9  is dedicated to microcom puter architectur e and\ncovers the history from simple bus-based to integrated to\nmoder n point-to -point ar chitectur es, and topics fr om I/O port\naddressing, to interrupt-driven I/O and direct memory\naccess (DMA), to moder n \u201cplug and play\u201d device contr oller\ninterfaces, such as the USB host contr oller interface.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1929, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "19700db9-af11-4d80-80bc-d7b26f6f33ef": {"__data__": {"id_": "19700db9-af11-4d80-80bc-d7b26f6f33ef", "embedding": null, "metadata": {"page_label": "20", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3495425c-5714-47d8-891a-4bfe10fa6362", "node_type": "4", "metadata": {"page_label": "20", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "91be0ae64119018c8c9e1b36c5e09bc63f5b0df760890f92b75c71fc2de1b443", "class_name": "RelatedNodeInfo"}}, "text": "Interruption and related operating system tasks are also\ndiscussed. A data path and instruction set of an interrupt\nhandling CPU is also used as an example to explain the\narchitectur e and operations of a simple computer .\nChapter 10 cover s the rationale and organization of a\nmemory hierar chy. Cache coher ency in a single processor\nsystem and an introduction to cache coher ency in shared-\nmemory multipr ocessor systems are cover ed. Examples are\nused to illustrate advantages of di\ufb00er ent cache -mapping\ntechniques in terms of miss rate, amount of hardwar e, and\npower usage . The chapter also presents virtua l address\ntranslation, the managem ent of page tables, and alternative\nprocessor or ganizations for translating a virtual addr ess.\nChapter 11  starts by providing a general understanding of\nthe security engineering methodology applied to computer\narchitectur e. It introduces access contr ol, security policy\nmodels, hardwar e security policy mechanism s, and\nsoftware/physical attack mechanisms, and presents an\nintroduction to cryptography techniques. The chapter also\ncovers the architectur e of a trusted computing base (TCB)\neither as a secur e coprocessor\u2014to implement, for example,\nsecur e data storage and communication\u2014or as a secur e\ngeneral purpose processor . The architectur e of a secur e\nprocessor for enfor cing program (instructions and data)\ncon\ufb01dentiality and integrity is also pr esented in detail.\nWhile the topics of Chap. 11 are compiled into one\nchapter for the convenie nce of readers, the topics in this\nchapter can concur rently  be cover ed with other chapters.\nFor instance, students can design simple cryptography\ncircuits when  learning sequential circuit design techniques.\nOther selected topics from this chapter that may be cover ed\nin conjunction with the topics of other chapters are\nhardwar e Trojans and hardwar e security policy mechanisms,\nmemory authentication, secure handling of interrupts, and\nthe architectur e of a secur e co-processor and processor . In", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2017, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0e50a100-825c-47b3-b0c1-1587e58c0981": {"__data__": {"id_": "0e50a100-825c-47b3-b0c1-1587e58c0981", "embedding": null, "metadata": {"page_label": "21", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8762bcf9-9473-4885-96c7-2be3eaf9c967", "node_type": "4", "metadata": {"page_label": "21", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5254004e9763fed57c216315bb84a82dc17c61d5a7030f8ac6c7f76e9a9b0451", "class_name": "RelatedNodeInfo"}}, "text": "order to provide a sample presentation of this chapter\u2019s\ntopics in conjunction with the topics of other chapters, the\nExercise sections in Chaps. 1, 3, and 5 to 10 include a list of\nexercises fr om Chap. 11  under the title \u201cComputer Security .\u201d\nInstructors may choose exercises from this list in these\nchapters.\nKeywor ds are bolded, for easy reference, when it is \ufb01rst\nintroduced. The abbreviated keywor ds are not bolded and\noccasionally spelled out for readers\u2019 convenience.  Also, for\nbetter student understanding, at times brief texts inside two\nsquar e brack ets (\u201c[]\u201d) explain topics that are related (e.g.,\ncertain operating system tasks) but are outside the scope of\nthis book or are out of context. The instructors at academic\ninstitutions who adopt this as the requir ed textbook in their\nclasses will have access to exercise soluti ons and\nPowerP oint pr esentation slides.\n\u00a0\nAudience\nBy most accounts, this textbook intentionally covers both\ndigital desig n and computer organization in more depth\nthan do existing similar textbooks. For the two subject\nareas, the objectives are to provide a more balanc ed depth\nversus br eadth of coverage. In a single semester, instructors\ncan judiciously choose both the topics and the depth versus\nbreadth for each topic they want to emphasize in their\nclasses. The textbook also has enough topics for a two-\nquarter or two-semester course sequence to cover both the\ndigital logic design and computer organization/ar chitectur e\nsubjects in depth and allow more time for students to\nacquir e a good understanding of design practices and\ntradeo\ufb00s. The following is a suggested list of ways the\ntextbook may be used:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1667, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a8a28c92-984c-4481-b1c6-20abe6fff303": {"__data__": {"id_": "a8a28c92-984c-4481-b1c6-20abe6fff303", "embedding": null, "metadata": {"page_label": "22", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "28d7bb6b-7f9c-492b-a42b-db882f445dae", "node_type": "4", "metadata": {"page_label": "22", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8b189bec3b95799e8b232e4a5b4e4f049642d9818fc619ff8d20cdc7c515cd09", "class_name": "RelatedNodeInfo"}}, "text": "1. For under graduate students with no or limited\nbackgr ound in digital logic, the course could cover\nChaps. 1 thr ough 5 and selected topics fr om Chaps. 6\nto 9 and e xposur e to some other topics fr om the\nremaining chapters. Some sections and design\nexamples may be skipped.\n2. For under graduate students in computer science\nand computer engineering who have some digital logic\nknowledge, the course could cover Chap. 1 ,\nreview/cover selective topics fr om Chaps. 2 to 5, and\ncover Chaps. 6 to 10 and topics fr om Chap. 11 .\n3. Academic departments that o\ufb00er degr ee pr ograms\nfor pr ospective graduate students with no or limited\nbackgr ound in digital logic design and computer\norganization, this may be an ideal te xtbook for\ncovering both digital logic design and computer\norganization and ar chitectur e in detail in a single book.\n4. Professionals who wish to r efresh their knowledge\nin digital logic and/or computer or ganization and\narchitectur e and/or to familiarize themselves with\nsecurity -related computer ar chitectur e concepts would\nbene\ufb01t fr om this book.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1080, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f21ff536-0a13-44c4-a834-4cf7bf4730ac": {"__data__": {"id_": "f21ff536-0a13-44c4-a834-4cf7bf4730ac", "embedding": null, "metadata": {"page_label": "23", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4a5b617e-66c0-481d-861c-66e8af2e915d", "node_type": "4", "metadata": {"page_label": "23", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "fdc1388e805bcfc4c95f9311f38c504551c31af110c6cce4eff939639780d969", "class_name": "RelatedNodeInfo"}}, "text": "A\u00a0\nAcknowledgment\nnumber of people have provided valuable inputs to\nthe content of this book. Special thanks go to my\ncolleagues Isaac Ghansah and Thomas Mathews, for their\nvaluable suggestions and contribution to the content of the\nbook; and Martin Nicholes (now at Intel), for his insightful\ncomments on the conten t of Chap. 11. I would also like to\nthank the reviewers for their thoughtful comments. The \ufb01nal\ncopy r e\ufb02ects some of the changes they have suggested.\nMany of my students have also provided useful feedback\non the drafts of this book and have helped identif y some\nbugs in the text. Their detailed analysis of some textbook\nexamples was e\ufb00ective in identif ying some typos and\nmislabeling. I especially would like to thank Kevin Schultz,\nAndrew Larse n, Branden Garner, Chris Dalisay, Thomas Lee,\nRobert Carreras, Ian Reif, and Matt Larsen. I would also\nwelcome any corrections that may have been missed and\nany suggestions to improve the book. I also would like to\nthank spon soring editor Michael McCabe, editorial\nsupervisor Donna Martone, production supervi sor Lynn\nMessina, copy editor Lisa McCoy, and art director Je\ufb00 Weeks\nat McGraw-Hill Publishers and project manager Dheeraj\nChahal and Surendra Shivam with MPS Limited for their\nvaluable support, cover page design and \ufb01nal preparation of\nthe book.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1324, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f18953fb-eba5-4406-a7cd-3fee361422b9": {"__data__": {"id_": "f18953fb-eba5-4406-a7cd-3fee361422b9", "embedding": null, "metadata": {"page_label": "24", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "28d33d61-805c-4010-a3a0-31a7e4ee26ed", "node_type": "4", "metadata": {"page_label": "24", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "ac8eff047c3d897aedf99a09c934402594a666988ac9b43200dbcf23d95da3a1", "class_name": "RelatedNodeInfo"}}, "text": "Last but not least, I would like to thank my wife, Gita, and\nsons Kian and Ryon for their patience and support,\nespecially for accepting the long hours and my occasional\npreoccupation with this pr oject.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 203, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fd5991fb-494f-4fc5-968e-b7b4cacf9905": {"__data__": {"id_": "fd5991fb-494f-4fc5-968e-b7b4cacf9905", "embedding": null, "metadata": {"page_label": "25", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cf52630a-d5c7-4b29-b984-57c36e62076c", "node_type": "4", "metadata": {"page_label": "25", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "32189965ad0538a64c8728c6c86c6245e75c29c893eb1bbd727e08fd86c2d7b2", "class_name": "RelatedNodeInfo"}}, "text": "CHAPTER 1\nIntroduction\n\u00a0\n1.1 Introduction\nComputers, iPads, cell phones, etc. have created a digital\nrevolution that has chan ged many aspects of our lives. All\nforms of data, from numbers and text to audio, image, and\nvideo, are represented in a series of digits as 0\u2019s and 1\u2019s.\nDigital systems have changed the way we communicate, work,\nare entertained, and even shop, and are very much in\neverything we see and use. They are also in cars, in grocery\ncheck out equipment, in utility meters, in set-top boxes, in\nemer gency equipment, in medical devices, in factory contr ol\nsystems, etc. As more people use digital systems, more data is\nalso created, processed, stored, transmitted, and accessed.\nThis has created a demand for more powerful computers,\nwhether personal computers or large systems used in many\nareas such as e-commer ce, banking, search engines, and\nresear ch.\nInnovations in computing, however, are evolutionary and\ndepend on many factors such as integrated chip (IC)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 985, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11507109-bad0-4d43-be2e-17433d92825d": {"__data__": {"id_": "11507109-bad0-4d43-be2e-17433d92825d", "embedding": null, "metadata": {"page_label": "26", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6b59816-3770-4d69-a1e4-e5da08e3c866", "node_type": "4", "metadata": {"page_label": "26", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1538f5111a3242bc7bb77c3463997044646e7d92db6d61d44c799bf72dd67a52", "class_name": "RelatedNodeInfo"}}, "text": "technologies and software development, including operating\nsystems. The innovations in the IC technologies have steadily\npushed the transistor count to billions in a single chip. Feature\nsize, the size of the elements in an IC that deter mines the size\nof a transisto r as an elect ronic switch, has become smaller and\nsmaller over the years. Both the reductions in the featur e size\nand increases in the size of a die (rectangular semiconductor\nmaterial) have incr eased transistor density by about 35 per cent\nevery year. This, in turn, has increased transistor count on a\nsingle chip between 40 and 55 percent every 18 to 24 months\n[1]. This rate of increase in the number of transistors is\ncommonly known as Moor e\u2019s law .\nOver the years, microprocessor designers have used Moor e\u2019s\nlaw as a guide to design futur e processors. They have used the\nincreasing number of available transistors to design high-\nperfor mance pr ocessors, r evolutionizing personal computers.\nInnovations in application developments have also\nrevolutionized the way digital systems are designed. Today,\ninnovations in computer -aided design (CAD) tools for IC have\nenabled chip designers to use a hardwar e description language\n(HDL) to describe the behavior of a digital circuit. The\ndescription can then be simulated, debugged, evaluated, and\neven automatically mapped to hardwar e, creating a circuit.\nCAD tools for circuit design are now commonly used in industry\nas well as in educational settings.\nIn a digital world, there is also the possibility of unauthorized\naccess to data and infor mation. P ersonal infor mation, as well as\nintellectual properties of various organizations, may be stolen,\nmodi\ufb01ed, or erased. Malicious software could gain access to\nprivate computer system s or disrupt computer  operations.\nHowever, because digital systems are made of both hardwar e\nand software and hardwar e is more secur e than software,\nhardwar e can play an important role in keeping digital\ninformation secur e.\nThis chapter provides an introduction and an overv iew of the\ntopics cover ed in the remaining chapters. In this book, we\ndiscuss the hardwar e aspect of digital systems, from basic", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2178, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fa4bba8f-94c0-4935-8712-6757b9dfd1d7": {"__data__": {"id_": "fa4bba8f-94c0-4935-8712-6757b9dfd1d7", "embedding": null, "metadata": {"page_label": "27", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1d324d5a-cff7-4cfb-943e-93d4e6a26302", "node_type": "4", "metadata": {"page_label": "27", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "22c30c90aff88ac84caa12e2afcaf4a7d4ff5f878e1c6e885b11f44274ab8576", "class_name": "RelatedNodeInfo"}}, "text": "circuits to circuit modules that perfor m computations to the\ndesign of a processing element, commonly called a\nprocessing core  or central processing unit (CPU). We also\ndiscuss memory, memory system design, and computer\nsystems that contain multiple cores, either as a multicor e\nprocessor or multipr ocessor system. The book also covers an\nintroduction to computer ar chitectur e for security .\n1.1.1 Data Representation\nDigital system s all contain circuits that input and output logic\nvalues as either true or false. A voltage range de\ufb01nes each\nlogic value. For example, using a 5 V power source, any voltage\nvalue between 2.4 and 5 V is consider ed true, and value\nbetween 0 and 0.8 V is consider ed false. Battery -power ed\nhandheld digital devices typically use a lower voltage source to\nsave power. True and false logic values are interpr eted as 1\u2019s\nand 0\u2019s, for ming binary numbers.\nBinary numbers are used to represent characters to create\ntext, pixels to create an image, digital audio and video data,\nand integer  and real numbers used in computations.\nCharacters are typically represented either in 8-bit American\nStandar d Code for Information Interchange (ASCII) codes or 16-\nbit Unicode. While only 256 (28) di\ufb00erent characters (letters,\ndecimal digits, and symbols) can be represented with ASCII\ncodes, over 65,000 (216) di\ufb00er ent representations are possible\nwith Unicode , thus making Unicode suitable for word-based\nlanguages such as Asian languages.\nImages are made of thousands or millions of pixels as dots\nseen on the screen. Each  pixel on a color monitor is composed\nof three dots (red, green, and blue) that conver ge into a single\ndot on the screen, creatin g a dot with di\ufb00er ent colors or shades\nof gray. For example, a monitor that operates in true color\nmode uses 8 bits to represent each of the red, blue, and green\ncolors, creating a 24-bit color code capable of displaying over", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1914, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "71ab5fd4-359d-45da-80dc-b98a68564616": {"__data__": {"id_": "71ab5fd4-359d-45da-80dc-b98a68564616", "embedding": null, "metadata": {"page_label": "28", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ad4ee837-15a5-40e0-b683-3fa32b023f89", "node_type": "4", "metadata": {"page_label": "28", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4128dadcab5128c715c4f7a744923d063e33e20c3a60f8084bc47744ac1afe9a", "class_name": "RelatedNodeInfo"}}, "text": "16 million (224) colors. There is also deep color, wher e 30 or\nmore bits ar e used to r epresent billions of colors.\nDigital audio  and video data are created by digitizing (i.e.,\nconverting) analog and continuous electrical signals into a\nstream of numbers. For instance, a microphone converts a\ncontinuous sound wave that travels through the air into an\nanalog electrical signal. A digitizer then samples the electrical\nsignal at \ufb01xed intervals to create a stream of integer numbers\nrepresenting the sound. The interval is deter mined from a\nsampling rate. For example, a sampling rate of 44.1\nkilohertz(kHz) will generate 44,100 samples per second,\nproducing a compact disk (CD) quality sound [ 2].\nThe higher the sampling rate, the more closely the sampled\ndata represents the actual sound. Each sample value indicates\nthe signal strength at the sampling time. Using 8 bits to\nrepresent each sampled value implies that signal strength is\ndivided into 256 levels, with 0 being the lowest and 255 the\nhighest. With 16 bits, the signal strength can be divided into\n65,536 (216) di\ufb00er ent levels. Therefore, with more bits, one is\nable to more accurately captur e the sound wave in digital form,\nbut more data is also generated. Stereo sound systems have\ntwo independent audio channels. The sound from each channel\nis sampled, producing a sound \ufb01le that is twice the size of the\n\ufb01le of a single channel (mono) sound. However, which is better,\nmono or stereo, depends on the sampling rate and bits used to\nrepresent each sampled value.\nRepresentation of Integer Numbers\nBinary numbers are eithe r signed or unsigned. The range for a\n3-bit unsigne d binary number is 0 to 7, or in binary (000)2 to\n(111)2, where the subscript 2 is used here to indicate binary .\nFor computer arithmetic, signed numbers are represented as\n2\u2019s complement numbers. A negative binary number is\nconverted to its equivalent 2\u2019s complement representation by\n\ufb02ipping (inverting) each bit and then adding 1 to the inverted", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1995, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f01705c6-83be-4f20-8b90-a321cf98c9d8": {"__data__": {"id_": "f01705c6-83be-4f20-8b90-a321cf98c9d8", "embedding": null, "metadata": {"page_label": "29", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9738033e-e061-48d5-90f3-709abb0c38ee", "node_type": "4", "metadata": {"page_label": "29", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "faad56b61ba43eca7c412d115f6243e6f81a63b58d4210091b8778192eabe20f", "class_name": "RelatedNodeInfo"}}, "text": "result. For example, the 4-bit 2\u2019s complement representation of\n\u20133 = \u2013(11)2 is deter mined as follows:\n1. Write \u2013(11)2 as a 4-bit binary number; that is, \u2013\n(0011)2.\n2. Invert each bit; that is, 1100.\n3. Add 1 to the inverted number to get the 4-bit 2\u2019s\ncomplement r epresentation of \u20133 as (1101)2s, wher e \u201c2s\u201d\nis used her e to indicate a 2\u2019s complement number .\nOne-half of all 2\u2019s complement numbers stored in a\ncomputer are positive, and the other half are negative. The\nrepresentation for a positive 2\u2019s complement number is the\nsame as binary. The 4-bit 2\u2019s complement represen tation of +3\n= (11)2 is (0011)2s. The most signi\ufb01cant bit (MSB) of a 2\u2019s\ncomplement number indicates the sign of the representation; 1\nindicates a negative representation and 0 a positive\nrepresentation. A similar procedur e is used to convert a\nnegative 2\u2019s complement number, such as (1101)2s, to its\nequivalent binary r epresentation \u2013(0011)2, as illustrated ne xt:\n1. Invert the bits of the negative 2\u2019s complement number\n(1101)2s; that is, 0010.\n2. Add 1 to the inverted r esult to get the 4-bit magnitude\nof the 2\u2019s complement number as (0011)2.\n3. Include the negative sign; that is, \u2013(0011)2, or \u2013(11)2 =\n\u20133 in decimal.\nNegative numbers are also represented as signed-m agnitude\n(sm) numbers. For example, (0011)sm = + 3 and (1011)sm = \u20133,\nwher e \u201csm\u201d is used here to indicate a signed-magnitude\nnumber . In this case, the MSB indicates if the number is\nnegative (MSB = 1) or positive (MSB = 0), and the rest of the\nbits r epresent the magnitude of the number as (011)2 = 3.\nTable 1.1  shows decimal numbers that are equivalent to 3-bit\nunsigned, 2\u2019s complement, and signed-magnitude", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1674, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2f297048-8dc9-45d0-b699-c611fbd70cf1": {"__data__": {"id_": "2f297048-8dc9-45d0-b699-c611fbd70cf1", "embedding": null, "metadata": {"page_label": "30", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5e00bb1b-8aa2-4d70-8526-d96b960536c9", "node_type": "4", "metadata": {"page_label": "30", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5253ae625a8f4b54eac32fb4fbeb8a3467d0ac3da68bda1a9acf89c77d32039a", "class_name": "RelatedNodeInfo"}}, "text": "representations. While arithmetic operations, such as addition,\ncan be perfor med on 2\u2019s complement numbers, signed-\nmagnitude numbers are only used in the represent ation of real\nnumbers; no arithmetic operations are directly performed on\nsigned-magnitude numbe rs. Computer arithmetic is cover ed in\nChap. 3 ; multiplication is also cover ed in Chap. 6 .\nTABLE  1.1 Equivalent Decimal Numbers for 3-Bit Unsigned, 2\u2019s Complement, and\nSigned-Magnitude Numbers\nTable 1.2 lists 4- and 8-bit unsigned binary, 2\u2019s complement,\nand signed-magnitude representations of +5 and \u20135. An m-bit\n2\u2019s complement number can be converted to an n-bit 2\u2019s\ncomplement representation, wher e n > m, by simply repeating\nthe sign bit n \u2013 m times. This is called 2\u2019s complement sign\nextension .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 770, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d9d7c3a3-87a3-4619-81a5-d7915b67cafa": {"__data__": {"id_": "d9d7c3a3-87a3-4619-81a5-d7915b67cafa", "embedding": null, "metadata": {"page_label": "31", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "350dad45-2353-44c4-9f00-164cca9b0adf", "node_type": "4", "metadata": {"page_label": "31", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "afab156cfbb01c2695d1623fa891578b6b1bbec5e13e0afd8b4a0e8517149374", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  1.2 Examples of Unsigned, 2\u2019s Complement, and Signed-Magnitude\nRepresentations\nRepresentation of Real Numbers\nComputers also operate on real numbers, such as 2.75. The\nrepresentation of real numbers in computers is called \ufb02oating-\npoint (FP) numbers, wher e each FP number includes three\ninteger parts: sign bit, biased exponent, and unsigned fraction.\nThe combination of the sign bit and the unsigned fraction\ncreates a signed-magnitude number . As we will see in Chap. 3,\nFP arithmetic takes severa l steps and requir es operating on the\nexponent and fraction values, both integer numbers,\nseparately .\nThe exponent of an FP number is an unsigned number and\nrepresents a biased exponent . A \ufb01xed value, called bias, is\nused to convert a biased exponent to a negative or positive\nexponent. Consider an FP number representation that uses 4-\nbit biased exponents with bias = 7. In this case, biased\nexponent values 0, 15, and the range 1 to 14 represent various\nFP numbers. Equation (1.1) shows the relationship between an\nexponent and its equivalent biased e xponent value.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1080, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4d4c3e34-bb4c-4230-ae38-aceb3a1be124": {"__data__": {"id_": "4d4c3e34-bb4c-4230-ae38-aceb3a1be124", "embedding": null, "metadata": {"page_label": "32", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "89343d67-09db-4f1f-9ae9-d43b48307ea8", "node_type": "4", "metadata": {"page_label": "32", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "782fdd8ff3bdc0ff839324cd37735479212d970da11b7f0cbfd6672b571d76cf", "class_name": "RelatedNodeInfo"}}, "text": "Example 1.1.  Representation of real number 2.75 as a 16-bit FP number using a 4-\nbit biased e xponent with bias = 7 and 11-bit fraction.\nThe 16-bit FP representing 2.75 has a sign bit = 0 (positive),\n4-bit biased exponent = (1000)2, and 11-bit unsigned fraction\n= (01100000000)2. The implicit decimal point is to the left of\nthe fraction. While the 1 before the decimal point in (1.011)2 is\na part of the FP number, it is not included in the 16-bit\nrepresentation stored in memory . Likewise, the 16-bit FP\nrepresentation of \u20132.75 is (1, 1000, 01100000000)2, or 0xC300,\nwher e \u201c0x\u201d indicates a he x number .\nUsing a k-bit biased exponent, if biased exponent is 0, the FP\nnumber represents 0.0 if the fraction is also 0. If the biased\nexponent is 0 and the fraction is not 0, the numbe r represents\nan extremely small real number known as a denormal . If the\nbiased expon ent is between 1 and k \u2013 2, it represents very\nsmall to very large real numbers, called normal  FP numbers. If\nthe biased exponent is k \u2013 1, the FP number is consider ed\neither in\ufb01nity  (\u221e) if the fraction is 0, or an invalid number, such\nas \n  if the fraction is not 0.\nThe bias value deter mines which set of real numbers is\nrepresented in the computer . As illustrated in Table 1.3, with 4-\nbit biased exponents, the exponent range for normal FP\nnumbers is between \u20136 and +7 when bias = 7, and between \u20137", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1379, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a5bfdc05-5e01-44e1-8dd2-74710cf659fa": {"__data__": {"id_": "a5bfdc05-5e01-44e1-8dd2-74710cf659fa", "embedding": null, "metadata": {"page_label": "33", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f341a2ef-a1f7-4239-9524-77d0c50b5d6f", "node_type": "4", "metadata": {"page_label": "33", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4b0619ece2fcb7233f967c9482a8abd05d675b89cbd433c69178ca81ca4b0458", "class_name": "RelatedNodeInfo"}}, "text": "and +6 when  bias = 8. This means that with bias = 7, the 16-\nbit format can be used to represent more of the large real\nnumbers: the largest exponent  = 7 and the smallest exponent\n= \u20136. However, with bias = 8, the format can represent more of\nthe small real numbers: the largest exponent  = 6 and the\nsmallest exponent  = \u20137. Moder n computers  implement 32- and\n64-bit Institute of Electrical and Electr onics Engineers (IEEE) FP\nstandar ds, discussed in Chap. 3 .\nTABLE  1.3 4-Bit Biased Exponent versus Exponent\n1.1.2 Data Path\nWhether we are dealing with unsigned, signed, or FP numbers,\nthe inputs and outputs of digital circuits are in binary. A small\ndigital circuit implements a simple function and generates a\nsingle-bit output. A comple x circuit, on the other hand,\ngenerates results that are multiple bits and may implement\none or more functions. A comple x digital circuit is often made\nof a data path and a contr ol unit, as illustrated in Fig. 1.1. For", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 969, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "01f09f93-c4d9-43a6-a79d-557e13ba95ab": {"__data__": {"id_": "01f09f93-c4d9-43a6-a79d-557e13ba95ab", "embedding": null, "metadata": {"page_label": "34", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a9a6cac3-58b7-4df0-a1de-5fee6cef8053", "node_type": "4", "metadata": {"page_label": "34", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3f6a3e4f9c5314e3debd53c58938d4d6d244914f2877445743e2fa70ea843c49", "class_name": "RelatedNodeInfo"}}, "text": "the moment, much of the details in the \ufb01gure are not shown.\nHowever, note that ther e are multiple paths for data to travel.\nFIGURE 1.1 Block diagram of a comple x digital cir cuit with data\npath and contr oller.\nSpeci\ufb01cally, a data path contains various circuits as modules\nand collectively perfor ms one or more functions. A module may\nbe an arithm etic type, such as an adder that generates the\nsum of its two numbers; a selector that output s one of its\nseveral inputs; a register that retains a number, etc. In Fig. 1.1 ,\nthe data path contains a register \ufb01le consisting of several\nregisters, an adder, a multiplier, and a selector . It generates\neither the sum or product  of two register values, labeled value 1\nand value 2, as a r esult and stor es the r esult in a r egister .\nA controller (or contr ol unit) generates a set of signals, each\n1 or 0, that contr ols the functions of a data path. For example,\nin the \ufb01gure, the selector outputs either the sum when its\ncontr ol signa l is 0 or the product when the signal is 1. A\nregister contr ol signal decides the exact timing when the\nregister loads  the value available at its input. In the \ufb01gure, the\ninitial contents of r egisters ar e read fr om some e xternal module\nsuch as memory, and a r esult may also be stor ed in memory .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1294, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "327b254a-2e38-4396-8cf2-7496721d5f62": {"__data__": {"id_": "327b254a-2e38-4396-8cf2-7496721d5f62", "embedding": null, "metadata": {"page_label": "35", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e5cbc491-0678-48b8-b5cc-a316ac6334b0", "node_type": "4", "metadata": {"page_label": "35", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "763335eb90a068a8336b1d60dd3351700a96fbbece08c3554b9b549472cee505", "class_name": "RelatedNodeInfo"}}, "text": "1.1.3 Computer Systems\nFigure 1.2 illustrates the block diagram of a computer system\nknown as the Von Neumann machine , the basic architectur e\nof virtually every computer ever built. The program instructions\nand data are stored in memory, and CPU is responsible for\naccessing instructions and data from memory and executing\nthe instructions. A CPU is a digital circuit with a data path and a\ncontr ol unit similar to the one shown in Fig. 1.1 , except that it is\nmuch more comple x and contains subdata paths that perfor m\nthree main operations, as follows:\nFIGURE 1.2 Block diagram of a computer system known as a\nVon Neumann machine.\nFetch data path : Loads instructions fr om memory\nDecode data path : Deter mines the contr ol signals\nnecessary to e xecute an instruction", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 775, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df4c06a9-7255-4bce-90d0-e1b462aaa0d1": {"__data__": {"id_": "df4c06a9-7255-4bce-90d0-e1b462aaa0d1", "embedding": null, "metadata": {"page_label": "36", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "378ff420-6be7-47cc-8798-4026aaab998a", "node_type": "4", "metadata": {"page_label": "36", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e8b254da0a1b9b872e6d3d607ea6637b7ccd74b37149a39c6c8dfe52f31349b3", "class_name": "RelatedNodeInfo"}}, "text": "Execute data path : Performs the operations requir ed\nby an instruction\nThe work perfor med by the fetch, decode, and execute data\npaths is collectively called instruction execution. While\nadvancements in computer technologies have improved the\nperfor mance of both CPUs and memory over the years,\nperfor mance of CPUs has increased at a faster rate than that of\nmemory . Therefore, the Von Neumann architectur e presents a\ncommunication bottleneck between a faster CPU and a slower\nmemory .\nThe execute data path can execute a set of unique\ninstructions, including data transfer instructions that transfer\ndata between a CPU register and memory or an input/output\n(I/O) device. The set also includes other instructions, such as\narithmetic and instructions needed to execute a for-loop, while-\nloop, subr outine call and r eturn, etc.\nA comp iler translates high-level program statemen ts to their\nequivalent assembly instructions. Consider the high-level\nlanguage program statement \u201cA = B + C;\u201d, wher e A, B, and C\nare variables and represent values stored in memory . Using the\ndata path in Fig. 1.1, a compiler would transla te the statement\nto its equivalent assembly instructions, such as those listed\nhere using an arbitrary syntax:\nThe \u201cLoad,\u201d \u201cAdd,\u201d and \u201cStor e\u201d are operation codes, or op-\ncodes, and each is identi\ufb01ed by a unique binary number . The\nassembly code consists of data transfer instructions\u2014 Load R1,\nB\u201d and \u201cLoad R2,C\u201d\u2014for loading the values of B and C from\nmemory into registers 1 and 2. The code also includes the\narithmetic instruction \u201cAdd R3,R1,R2,\u201d with regist ers 1 and 2 as", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1604, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e9a25836-82c0-464d-aa8c-9270f2dd7b8d": {"__data__": {"id_": "e9a25836-82c0-464d-aa8c-9270f2dd7b8d", "embedding": null, "metadata": {"page_label": "37", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1643a85e-7463-425e-84c9-96535274e302", "node_type": "4", "metadata": {"page_label": "37", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4ed753384198a504847a473b565c1ae7acfe54c2a0e423542f8333b2e35d37ad", "class_name": "RelatedNodeInfo"}}, "text": "input and register 3 as output operands, and the data transfer\ninstruction \u201c Store A ,R3\u201d for transfer ring the content of r egister 3,\nas A, in memory .\nA corresponding assembler would translate each assembly\ninstruction into binary called a machine instruction . In\ngeneral, an assembler also links static library functions, such as\nC language routines \u201cstrcpy() ,\u201d \u201csqrt() ,\u201d etc. (if any), and\ncreates an executable (binary) \ufb01le (e.g., myprogram.e xe).\nProgram execution begins by loading the program into\nmemory, and then the processor fetches each  instruction from\nmemory to decode the op-code and generate the necessary\ncontr ol signals and to e xecute the instruction.\nThe most frequently accessed instructions and data are also\nkept inside cache memories to increase perfor mance. Cache\nmemories minimize the number of times instructions and data\nare accesse d from the slower memory, reducing average\nprocessor wait time to receive instructions and data from the\nmemory .\nA device controller interface  (DCI) contains I/O ports for\nthe processor to commun icate with a device such as keyboar d\nor a disk drive. A DCI may also contain other modules,\nincluding internal memory to temporarily store a device\u2019s data\nbefor e transf erring it to memory, or vice versa, to receive data\nfrom memor y befor e transfer ring it to the device. Finally, an\ninterconnection infrastructur e interconnects processor,\nmemory, various DCIs, and other modules designed to facilitate\ncommunications with memory and improve the overall\nperfor mance of the system.\nA computer system may also include special and dedicated\nprocessors, such as a graphic processing unit (GPU) in personal\ncomputers and the digital signal processor (DSP) used in many\nembedded systems. Both GPUs and DSPs have specialized data\npaths and contr ollers and are designed, respe ctively, for\ncomputer graphic and gaming operations and for e\ufb03cient\nprocessing of digital audio and video data.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1954, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "17ed6b7f-f8f8-4e2d-98d8-dcc61d2830fa": {"__data__": {"id_": "17ed6b7f-f8f8-4e2d-98d8-dcc61d2830fa", "embedding": null, "metadata": {"page_label": "38", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "62cfd6e9-3382-4e50-bc3d-f199bfc81621", "node_type": "4", "metadata": {"page_label": "38", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "096aab19a452ff29719a3f48b541ef4c978058d5c04ec1669c5bee61400e4b6f", "class_name": "RelatedNodeInfo"}}, "text": "1.1.4 Embedded Systems\nAn embedded  system is a complete system with both hardwar e\nand software built as single or multiple ICs. A simple embedded\nsystem is typically called a microcontroller  and is used in the\ndesign of simple device s such as a computer keyboar d. A\ncomple x embedded system designed as a single chip is known\nas a system- on-chip (SoC). Handheld devices such as cell\nphones, digital camcor ders, etc. all use embedd ed systems.\nThese systems are also used in the design of moder n DCIs,\nsuch as a Universal Serial Bus (USB) Host Controller\nInterface  that can interface with multiple di\ufb00er ent devices.\nDepending on the appli cation, an embedded system, in\naddition to one or more processing units, may contain digital\ndata transm itter/r eceiver modules and signal conversion\nmodules, such as analog-to -digital (A/D) and digital-to -analog\n(D/A) convert ers. An A/D converter converts analog signals\u2014for\nexample, from a microphone\u2014to digital data for digital\ncommunication or storage. A D/A converter, on the other hand,\nconverts, for example, digital audio data back to an analog\nsignal befor e it is fed to speak ers.\nAn embedded system may be implemented as a custom\napplication-speci\ufb01c IC (ASIC), or sometimes for fast\nprototyping, as a \ufb01eld programmable gate array (FPGA). An\nFPGA chip contains uncommitted but con\ufb01gurable circuit\nmodules. Modern FPGAs contain CPU, memory, and\ncon\ufb01gurable circuit modules to build an SoC without requiring\nfabrication labs [ 3].\n\u00a0\n1.2 Logic Design\nA digital or logic circuit is the implementation of one or more\nBoolean expressions, wher e each de\ufb01nes a logical relationship\nbetween one or more inputs and a single output. Input and\noutputs are named by Boolean variables and are called signals,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1758, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ea60d068-2080-4b88-9375-6fc8e79b1fac": {"__data__": {"id_": "ea60d068-2080-4b88-9375-6fc8e79b1fac", "embedding": null, "metadata": {"page_label": "39", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ab53415b-088d-42a5-82e1-1cca55ce7de8", "node_type": "4", "metadata": {"page_label": "39", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "49ef1bee2ea14deb4cbfa45b7b2db0458f41195d1b78441a0a83cc241aaf6ffb", "class_name": "RelatedNodeInfo"}}, "text": "each being either true (T) as 1 or false (F) as 0. Equation (1.2)\nde\ufb01nes a Boolean or logic expression for a logic circuit with\nthree input signals a, b, and c and one output signal f. The\ncircuit is illustrated as a block diagram in Fig. 1.3 (a).\nFIGURE 1.3 Logic cir cuit block diagram AND- OR and NAND\ncircuits. vsd.\nThe AND, OR, and NOT in the expression refer to Boolean\nlogic operators. Transistors are used to implement each\nBoolean operator as a logic gate. A moder n IC uses millions of\ngates to implement a comple x logic circuit such as a processor .\nAn AND gate produces 1 (true) if both of its inputs are 1, an OR\nproduces 1 if either or both of its inputs are 1, and a NOT\nproduces a logic value opposite to that of its input; it outputs 1\nif the input is 0 (F) and 0 if the input is 1 (T). For example,\nwhen a = 0, b = 1, and c = 0, the logic value of f is deter mined\nas follows in Eq. (1.3) :\nThe operators, with the exception of the NOT, can be\nextended to more than two Boolean variables, and their", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1017, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a35bb5f6-02a6-44ca-907f-999465778383": {"__data__": {"id_": "a35bb5f6-02a6-44ca-907f-999465778383", "embedding": null, "metadata": {"page_label": "40", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7550842d-33b0-40c1-8ba7-c3e2ebdb933a", "node_type": "4", "metadata": {"page_label": "40", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8a85bcce43c5f2b265863384dcc326e59523a88f64d0f22b52e1cde0f2909b9b", "class_name": "RelatedNodeInfo"}}, "text": "equivalent logic gates would be implemented with two or more\n(up to a maximum number) distinct input connections. There\nare also other gates, such as NAND and NOR, that requir e\nfewer transistors to implement. A NAND is logically equivalent\nto an AND followed by a NOT (AND-NOT logic), and a NOR is\nequivalent to an OR-NOT. In general, a logic circuit is\nimplemented with either NAND or NOR gates. Section 1.2.2\npresents the implementations of NOT, NAND, and NOR gates\nusing trans istors. While Fig. 1.3(b) illustrates the\nimplementation of expression f with NOT, AND, and OR gates\n(called an AND- OR circuit), Fig. 1.3(c) illustrates an equivalen t\ncircuit with NAND gates.\nAs illustrated in Table 1.4, there are eight possible\ncombinations for the input values a, b, and c in Fig. 1.3 . With a,\nb, and c concatenated to form a 3-bit number (abc)2, the \ufb01ve\nnumbers abc = (001)2, (010)2, (011)2, (101)2, and (111)2 for\nwhich f = 1 correspond to \ufb01ve prime numbers 1, 2, 3, 5, and 7,\nrespectively . The remaining three numbers abc = (000)2,\n(100)2, and (110)2 for which f = 0 are not prime numbers.\nTherefore, Eq. (1.2) de\ufb01nes a logic circuit that outputs 1 each\ntime its 3-bit input as abc represents a prime number and 0\notherwise. Table 1.4(a) and Table 1.4(b) are two di\ufb00er ent truth\ntable representations for logic expression f. The equivalent\nexpression g is discussed ne xt.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1379, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5f7834ab-d273-4596-a673-a4069e721c68": {"__data__": {"id_": "5f7834ab-d273-4596-a673-a4069e721c68", "embedding": null, "metadata": {"page_label": "41", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ee339c3-623c-4513-8dc7-66d228624a00", "node_type": "4", "metadata": {"page_label": "41", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c4f7e5a9dbb1e969546c4957459f91dbe6e6064d8248ebbf188a1dbbf531fe28", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  1.4 Input Logic Combinations and Corresponding Output Values of Eqs.\n(1.2) and (1.4)\n1.2.1 Circuit Minimization\nWhile a logical relationship may be represented by many\nequivalent Boolean expressions, the goal is to deter mine a\nminimized expression that (1) requir es less hardwar e (i.e.,\nfewer gates, fewer gate inputs, and shorter and fewer\nconnection wires) to implement the expression, and (2) the\nresultant circuit requir es less time to generate results. Boolean\nalgebra is used to minimize comple x expressions.\nEquation (1.4) describes a logic expression for g, which is\nequivalent to f in Eq. (1.2) . More hardwar e would be requir ed to\nimplement e xpression g than f. However, as shown in Table 1.4,\nthe columns associated with the outputs f and g are identical.\nThis proves Eqs. (1.2) and (1.4) are equivalent; both describe\nthe same function, but Eq. (1.2) is minimized. A circuit that\nimplements Eq. (1.2) would use a lot less hardwar e and would\noperate faster than the cir cuit that implements Eq. (1.4) .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1029, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2c022f5a-d508-4ac5-84d1-452cbef2f54e": {"__data__": {"id_": "2c022f5a-d508-4ac5-84d1-452cbef2f54e", "embedding": null, "metadata": {"page_label": "42", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5f7d0cb2-972f-4648-9f12-d02878482c4d", "node_type": "4", "metadata": {"page_label": "42", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b18e45b0924176a30cc86f785d5763141ecd7dcedddf02af30ae0ee4f113bf56", "class_name": "RelatedNodeInfo"}}, "text": "1.2.2 Implementation\nFigure 1.4 illustra tes the circuit schematic of a NOT gate using\na p-type and an n-type metal- oxide semiconductor \ufb01eld e\ufb00ect\n(MOSFET) transistor . The schematic is called a CMOS (\u201cC\u201d for\ncomplement) circuit because the pMOS and nMOS transistors\ncomplement one another; when one transistor is in the OFF\nposition (not conducting), the other is in the ON position\n(conducting). As illustrated in Fig. 1.4 (a), when input x is logic 0\n(0 V), the pMOS transistor turns ON and the nMOS transistor\nturns OFF. This changes the value of the output signal f, as\nexpected, to logic 1, as indicated in the schematic  by the light\nshowing tur ned on and the voltmeter r eading showing 4.999 V .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 705, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2596b1c0-af72-4317-9543-89ff7ef42cd7": {"__data__": {"id_": "2596b1c0-af72-4317-9543-89ff7ef42cd7", "embedding": null, "metadata": {"page_label": "43", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4aedbd18-9196-4cc0-bdc1-afdd02995c73", "node_type": "4", "metadata": {"page_label": "43", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "898448cfd5401095275e205868ae85a1ec7b5f010a264f1f40f354d13e8907e5", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 1.4 A CMOS NOT gate cir cuit schematic and its multisim\n[4] simulations.\nIn Fig. 1.4(b), when input x is logic 1 (5.0 V), the opposite\nhappens. The pMOS turns OFF, the nMOS turns ON, and the\noutput f becomes logic 0, as indicated by the light showing\nturned o\ufb00 and the voltmeter reading showing 0 V (0.05\nmicrovolts \u2248 0 V).\nCompar ed to old mainframe computers that were built using\nless power -e\ufb03cient gates, moder n chips are designed using\npower -e\ufb03cient CMOS gates. As illustrated in Fig. 1.4, because\none of the transistors is always OFF, the CMOS NOT gate\nprimarily uses power only when one transistor is turning ON\nand the other is turning OFF. This happens each time input x\nswitches from logic 1 to logic 0 or from logic 0 to logic 1\nvoltage. However, if this switching of x values happens\nfrequently, so will the ON and OFF switching of the transistors,\nwhich will cause the NOT gate to consume mor e power .\nAs both the number of transistors on the chip and their ON\nand OFF switching speed increase, more power is requir ed to\noperate the chip, which in turn dissipates more heat that must\nbe removed by cooling the chip. For instance, the Intel 80386\nprocessor used about 2 W, wher eas the 3.3-GHz (gigahertz)\nIntel Cor e i7 pr ocessor consumes about 130 W (65 times mor e).\nAs opposed to mainframe and super computers of yesteryears,\nmoder n computer system s operate with fan-cooli ng systems.\nDesigners must deal with how much sustained power a chip\ncan consume without exceeding its temperatur e barrier that\ncan cause malfunction or permanent damage to the chip.\nPower consumption will be further discussed in Chap. 6 .\nFigure 1.5 illustrates the circuit schematic of a two-input\nCMOS NAND gate. Two parallel pMOS transistors and two nMOS\ntransistors in series are connected to the power source and\nground, as shown in the \ufb01gure. The NAND gate outputs logic 0\nwhen both of its inputs a and b are at logic 1, making both the\nnMOS transistors ON and both the pMOS transi stors OFF. A\ntruth table with four possible logic values of inputs a and b, the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2073, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd652199-b589-442b-91bc-a4359b65f707": {"__data__": {"id_": "bd652199-b589-442b-91bc-a4359b65f707", "embedding": null, "metadata": {"page_label": "44", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "46ce888b-17d2-464c-8ac7-f0fb720b929a", "node_type": "4", "metadata": {"page_label": "44", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e1cf8826c284b83249f013a8c1f911af0801db7e2a7bba84fa46d41abe27e2fd", "class_name": "RelatedNodeInfo"}}, "text": "corresponding logic values of output f, and the transistor\noperating modes is also shown in the \ufb01gur e.\nFIGURE 1.5 The cir cuit schematic of a two -input CMOS NAND\ngate.\nLikewise, Fig. 1.6 illustrates the circuit schematic of a two-\ninput NOR gate. In this case, two pMOS transistors are\nconnected in series and two nMOS transistors in parallel. The\noutput is logic 0 (or 0) when at least one of the nMOS\ntransistors is ON (a = 1, b = 1, or both a = 1 and b = 1). The\noutput is logic 1 (or 1) when both the pMOS transistors are ON\nand both the nMOS transistors ar e OFF ( a = 0 and b = 0).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 589, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab316739-0810-4d9d-8941-8f92930ad56d": {"__data__": {"id_": "ab316739-0810-4d9d-8941-8f92930ad56d", "embedding": null, "metadata": {"page_label": "45", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ceaa6c69-4e31-45fd-9610-e8e962d55c4f", "node_type": "4", "metadata": {"page_label": "45", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e1e61e8240b4062638e2e41db22aeb1a63ee1bc33fbe7e80636558f95f9d0303", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 1.6 The cir cuit schematic of a two -input CMOS NOR\ngate.\n1.2.3 Types of Circuits\nBoolean expressions describe both combinational  and\nsequential  circuits. The outputs of a combinational circuit\ndepend only on its current input values. Equations (1.2) and\n(1.4) both describe a simple combinational circuit. The adder,\nmultiplier, and selector modules in Fig. 1.1, on the other hand,\nare consider ed comple x combinational circuits; each circuit\noutputs multiple bits, which are concur rently gene rated based\non their r espective cur rent input logic values.\nIn contrast, a sequential circuit retains certain state\ninformation based on the previously enter ed logic values. For\nexample, a counter that outputs 0, 1, 2, 3, etc. is a sequential\ncircuit. It uses a current output (e.g., 2) to generate the next\nnumber in the sequence  (i.e., 3). The current count is saved", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 878, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "48eed796-ecdf-45e0-a4f7-bf8c059ac219": {"__data__": {"id_": "48eed796-ecdf-45e0-a4f7-bf8c059ac219", "embedding": null, "metadata": {"page_label": "46", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e20bb027-906b-4ce8-9e38-6e15e0d83105", "node_type": "4", "metadata": {"page_label": "46", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a908f9177ce2462fa234051dd8d6d92d01d6f24c027fe6ba3a7ac8ab6a9ccebf", "class_name": "RelatedNodeInfo"}}, "text": "internally as the state of the counter . Sometimes, a sequential\ncircuit requir es one or more inputs to deter mine its next state.\nAn up/down counter, for instance, requir es a contr ol signal to\ndecide the direction of the count. If the count er\u2019s current\noutput is 2, its next output is either 1 if counting down or 3 if\ncounting up.\nOther examples of sequential circuits are the registers and\ncontr ol unit in Fig. 1.1. Each regist er stores a value internally\nwhen it is signaled by the contr oller and retains its current\ncontent until the next time that it is signaled. The contr oller\nfollows a set of states and generates contr ol signals to operate\nthe data path. One or more contr ol signals may be used to\ncontr ol the functions of each module in the data path. In the\n\ufb01gure, a contr ol signal is used to operate each of the registers\nand the selector. If logic 1 is used for register load and 0 for\nretain, then a register will load the logic values at its input\nwhen its contr ol signal is 1, and will retain its current content if\nthe signal is 0.\nSuppose the contr oller in Fig. 1.1 is a three-state contr oller\nthat perfor ms the following three simple tasks and computes\nthe sum of two numbers enter ed one at a time:\nState 1: L oad a value in r egister 1 fr om memory .\nState 2: L oad a value in r egister 2 fr om memory .\nState 3: Select the sum and stor e it in r egister 3.\nIn gene ral, a circuit that perfor ms, for example, an arithmetic\nfunction could be designed either as a combinational or\nsequential circuit. A combinational arithmetic circuit produces\nits output bits in one step, with the bits generated in parallel,\nas illustrated  in Fig. 1.7. On the other hand, a sequential\narithmetic circuit produce s its \ufb01nal output sequentially, using\nseveral steps. In each step, the circuit uses the results from a\nprevious step to generate  the results of the current step. The\nprocess repeats for a \ufb01xed number of steps until the \ufb01nal\noutput is pr oduced.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1981, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "44b800f5-1ffa-4fa6-87a4-d8ed50f3d61f": {"__data__": {"id_": "44b800f5-1ffa-4fa6-87a4-d8ed50f3d61f", "embedding": null, "metadata": {"page_label": "47", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7c06bb48-f661-44c3-85dd-ca1fa62e24a6", "node_type": "4", "metadata": {"page_label": "47", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3bcaf83ce3b30ea3dd575d3005459330cd96db0e9ed48ea20ff0f6fd9b65ebe0", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 1.7 A combination 8-bit adder .\nFor example, an 8-bit sequential adder could use a single-bit\nadder repeat edly eight times to generate the \ufb01nal 8-bit sum, as\nillustrated in Fig. 1.8, much like how we add two numbers by\nhand, one digit at a time, from right to left. In the \ufb01gure, during\neach step, one bit from number A, one bit from number B, and\nthe carry bit from the previous step are used to generate the\nnext sum bit. The carry bit that is kept internally is used during\nthe next step. The \ufb01gure also shows the display of one at a\ntime, internally held carry bits. The initial carry bit is assumed\nto be 0. The clock signal contr ols the timing of when the next\nbit of each A and B numbers enters the adde r and the next bit\nof S is captur ed. After eight steps, the \ufb01nal 8-bit sum S is\ngenerated.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 811, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5dc4764b-a806-4647-b7d6-48c6ac1a4f34": {"__data__": {"id_": "5dc4764b-a806-4647-b7d6-48c6ac1a4f34", "embedding": null, "metadata": {"page_label": "48", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ce3f1ba-5adc-49b9-97a3-b024b79ea91a", "node_type": "4", "metadata": {"page_label": "48", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8f7029cd4c486c1b578c8adcd12bab164d1b2a9a23acf866ee3609a8e59e0fd2", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 1.8 A sequential 8-bit adder : (a) illustrates multibit\nnumbers A and B are added by hand one bit at a time; ( b) the\nmultibit addition steps (algorithm) ar e shown as a sequential\ncircuit.\nA multiplier could also be designed as a combination or\nsequential circuit. A combinational multiplier would use many\ncombinational adder modules at the same time to generate the\nproduct. In contrast, a sequential multiplier could use either a\ncombinational adder or a sequential adder repeatedly to\ngenerate the product. In comparison, a combinational\narithmetic circuit is always faster than its equivalent sequential\ncircuit, but r equir es mor e har dwar e.\n1.2.4 Computer-Aided Design Tools\nThe rules of Boolean algebra are also implemented in software\nand incorporated into many logic design CAD tools. Designers\ntypically use an HDL, or more speci\ufb01cally, a register transfer\nlanguage (RTL), such as Verilog and VHDL, which stands for\nVery High-Speed Integrated Circuit (VHSIC) HDL, to describe a", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 999, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8a0fb68a-fb31-498d-a6ba-9e58ebd00de1": {"__data__": {"id_": "8a0fb68a-fb31-498d-a6ba-9e58ebd00de1", "embedding": null, "metadata": {"page_label": "49", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b463850d-22f6-4d94-8448-0509305ef7dc", "node_type": "4", "metadata": {"page_label": "49", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "602337e4f1e3353ef5f98d632ecc81ca2dd4473ba011d3dec3533b8ca6d8658b", "class_name": "RelatedNodeInfo"}}, "text": "digital circuit. Although it is possible to enter  a Boolean\nexpression with an RTL, designers often use high-level\nstatements, such as \u201cif-else,\u201d to describe a circuit. For\nexample, the following statement describes the behavior of the\nselector module in Fig. 1.1 , wher e x is used to select the output\nof the adder (\u201csum\u201d) or the multiplier (\u201cpr oduct\u201d) as \u201c result\u201d:\nThe previous \u201cif-else\u201d statement is equivalent  to logic\nexpression in Eq. (1.5), wher e s, p, and r represent 1 bit of\n\u201csum,\u201d 1 bit of \u201cpr oduct,\u201d and 1 bit of \u201c result,\u201d r espectively :\nWhen x = 0, the \u201cresult\u201d become s \u201csum,\u201d as illustrated here\nfor 1-bit r, 1-bit s, and 1-bit p using Eq. (1.5) .\nLikewise, when x = 1, r becomes p, as illustrated her e:\nAssuming that sum, value 1, and value 2 in Fig. 1.1 are each\nan 8-bit value, the + operator in the HDL statement \u201csum =\nvalue1 + value2\u201d would indicate an 8-bit adder similar to the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 910, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd435443-63e3-4c10-8f37-45491f9ccd79": {"__data__": {"id_": "bd435443-63e3-4c10-8f37-45491f9ccd79", "embedding": null, "metadata": {"page_label": "50", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "82a92e26-8841-421e-b27c-b8f9ae666284", "node_type": "4", "metadata": {"page_label": "50", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "796ca5bfa4cd44d5569f3619eb69462ee902c17684c0828362f01ea082acc3c8", "class_name": "RelatedNodeInfo"}}, "text": "one shown in Fig. 1.7, wher e the carry in and out bits are\nignor ed.\nAn RTL description can be simulated to verify if a circuit is\naccurately described. The description can then be synthesized\n(translated) to an equivalent minimized circuit representation\ncalled a net-list  that would be further simulated to verify\ncircuit timing requir ements. Finally, using an FPGA, a net-list\ncan be automatically mapped to har dwar e, creating a cir cuit.\nCombinational and sequential circuits are discussed in\nChaps. 2 and 3 and Chaps. 4 thr ough 6, r espectively .\n\u00a0\n1.3 Computer Organization\nWhile logic design deals  with circuit description , synthesis,\nminimization, and simulation, computer organizat ion refers to\ncircuit components and their physical relationship that\ncomprise a processing core (CPU), a processor, memory, and\nI/O device contr oller and interface; their interconnection makes\nup a computer . For examp le, in Fig. 1.1  a register \ufb01le, an adder,\na multiplier, and a selector are organized into a data path. The\ncontr ol unit and the data path are organized (via a set of\nspeci\ufb01c contr ol signals) to create the desir ed computing unit\nthat generate s either the sum or the product of two numbers.\nTwo CPUs with di\ufb00er ent internal organizations could execute\nthe same set of instructio ns. For example, 32-bit Intel and AMD\nprocessors execute the same set of instructions, but each has a\nvery di\ufb00er ent inter nal or ganization.\nComputer organization is also a\ufb00ected by advancements in\ncomputer technologies. The following lists advan cements in\ncomputer technologies that have changed the organization of a\nmicrocomputer (e.g., Fig. 1.2 ):\n\u2022 Advancements in data path designs have made CPUs\nmore e\ufb03cient; moder n processing cor es (e.g., Intel Cor e i7)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1769, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "af123190-4f37-4fa3-80c2-0f82da44d1ff": {"__data__": {"id_": "af123190-4f37-4fa3-80c2-0f82da44d1ff", "embedding": null, "metadata": {"page_label": "51", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f08c4ce9-910a-49a3-be9c-26ef3374fb4a", "node_type": "4", "metadata": {"page_label": "51", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e28e1d196077650b4ef4f9c62442a62193a9f9ad7abfe8f4f613a1253fe883de", "class_name": "RelatedNodeInfo"}}, "text": "can e xecute multiple instructions in parallel.\n\u2022 Advancements in memory technologies and\norganization, for e xample, cache and synchr onous dynamic\nrandom access memory (SDR AM), have r educed the\naverage memory r ead/write time, allowing a pr ocessor to\nspend its time e xecuting instructions instead of waiting to\nreceive instructions and data fr om memory .\n\u2022 Advancements in the I/O device contr oller interface\n(e.g., USB 1.0, 2.0, etc.) have simpli\ufb01ed personal\ncomputing. Almost all devices ar e now \u201cplug and play\u201d and\ndo not r equir e device installation and system r eboot.\n\u2022 Advancements in system inter connection mechanisms\nhave r esulted in even mor e communication paths among a\nsystem\u2019s components. A hierar chy of communication paths\nis used to better or ganize the inter connection of various\ncomponents. High-speed communication paths ar e used\nbetween memory and the fastest components, such as a\nprocessor and a GPU, and slower communication paths ar e\nused to communicate with slower components, such as I/O\ndevices.\nHowever, the limitation on power usage has restricted how\nfast a processor can operate. For instance, in 2003, the Intel\nPentium 4 Xeon processo r operated at 3.2 GHz, and in 2010,\nnearly seven years later,  with only a slight increase in speed,\nthe Intel Nehalem Xeon processor operates at 3.33 GHz [1].\nTherefore, because of this limitation on power usage, the only\nway for designers to create more powerful computers, from\npersonal computers to servers to very large-sc ale systems\n(e.g., warehouse and cloud computing), is to use multiple\nprocessors.\nThe organization of comple x circuits is discussed in Chap. 6,\nmemory design in Chap. 7, CPU design in Chap. 8, and\ncomputer design in Chap. 9 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1738, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5c2e04ab-2667-4163-8233-ebd3eb51436d": {"__data__": {"id_": "5c2e04ab-2667-4163-8233-ebd3eb51436d", "embedding": null, "metadata": {"page_label": "52", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4b50bda4-facd-4247-870e-d56cf27c5536", "node_type": "4", "metadata": {"page_label": "52", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9edf17da28c8111e8c91608cdda92a49b6037b0d677706fb36320bb9b46ba61d", "class_name": "RelatedNodeInfo"}}, "text": "1.4 Computer Architecture\nWhile compu ter organization deals with how di\ufb00er ent parts of a\ncomputer operate, computer architectur e deals with the design\nof computer arithmetic modules, such as adder and multiplier,\nand instruction set, and deals with perfor mance improvement\nconcepts, including ways to execute more instructions per\nsecond, reduce program\u2019s total execution time, and perfor m\nmore tasks.\n1.4.1 Pipelining\nThe concept of pipelining  is similar to a factory assembly line\nthat assembles parts in stages to produce more products (e.g.,\ncars) in less time. The chart in Fig. 1.9  illustrates the working of\na simp li\ufb01ed car assembly  line with three stages. As shown in\nthe \ufb01gure, once the assembly line is full (one car being work ed\non in each stage), one car can be produced every 10 minutes,\nassuming that a car takes 30 minutes to build: 10 minutes to\ninstall an engine, 10 minutes to install car doors, and 10\nminutes to install car wheels. The more stages and shorter\ndelays per stage there are in the assembly line, the more cars\nthat can be built. For example, suppose the assembly line can\nbe divided into simple stages, each requiring only two minutes\nwork (i.e., 2-minute slots). In this case, in an ideal situation,\nmore than 260,000 cars can be built in 1 year, 1 car every 2\nminutes.\nFIGURE 1.9 A chart showing a simpli\ufb01ed car assembly line.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1371, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b381fea-f785-4bba-8354-6f6eb4d37330": {"__data__": {"id_": "0b381fea-f785-4bba-8354-6f6eb4d37330", "embedding": null, "metadata": {"page_label": "53", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "528b80c6-c307-46fb-b541-d277465f5409", "node_type": "4", "metadata": {"page_label": "53", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "22d50b6422876db0e06456a2fefae6def1d1341343f8c194c33847fba22f06b3", "class_name": "RelatedNodeInfo"}}, "text": "When design ing a CPU, the pipelining concept is used to\norganize a CPU\u2019s data path into stages to execute programs\nfaster . Consi der a program statement \u201cA = B + C;\u201d, and its\nequivalent assembly language pr ogram as shown:\nThe chart in Fig. 1.10 illustrates the execution of the four\ninstructions using a data path consisting of three pipelined\nstages as follows:\nStage F etch: R ead the ne xt instruction fr om memory .\nStage Decode: Generate the data path contr ol signals.\nStage Ex ecute: Ex ecute the instruction.\nFIGURE 1.10  A chart illustrating instruction e xecution in a\npipeline fashion.\nDuring the time step T = 1, instruction \u201cLoad R1, B \u201d is fetched\n(read) from memory; during T = 2, while the load instruction is\nbeing decoded in the Decode stage, \u201cLoad R2, C\u201d is fetched", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 787, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f30c2c4a-bb69-4948-a647-f7fc073de20b": {"__data__": {"id_": "f30c2c4a-bb69-4948-a647-f7fc073de20b", "embedding": null, "metadata": {"page_label": "54", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7345415-6734-43db-93a1-81d9e4acf434", "node_type": "4", "metadata": {"page_label": "54", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5b3b8905eb06bc559e8de8ca555d1d3af0a5f2440dd04e8469047d03678aeacc", "class_name": "RelatedNodeInfo"}}, "text": "from memory . During T = 3, while \u201cLoad R1, B\u201d is being\nexecuted and \u201cLoad R2, C\u201d is being decoded, \u201cAdd R3, R1, R2\u201d is\nfetched. Starting with T = 3, when the pipeline is full and all its\nthree stages  are busy operating, one instructio n executes\nevery time step between steps 3 through 6, as illustrated in the\nchart. Each instruction still requir es three time steps to\ncomplete execution, but Fetch, Decode, and Execute tasks for\ndi\ufb00er ent instructions are overlapped and operate concur rently.\nA three-stage pipelined data path consists of three separate\nand disjointed F etch, Decode, and Ex ecute data paths.\nWhile a pipelined CPU, in general, can execute more\ninstructions than a nonpipelined CPU can per second, branch\ninstructions and time to access memory can delay the\nexecution of some instructions.\nFloating-Point Unit\nThe pipelining concept also applies to comple x arithmetic\nmodules, such as a \ufb02oating-point unit (FPU) that operates on FP\nnumbers. The execution of an FP instruction requir es several\narithmetic and shift operations, and if the operations are\nperfor med in a pipelined fashion, a program will execute faster .\nFor example, consider the following for-loop statement that\noperates on ar rays of FP numbers:\nThe for-loop executes 100 FP add instructions. Using a\npipelined FPU, these 100 add instructions would requir e about\n100 time-steps to execute . This reduces the total time needed\nto execute the for-loop, even though each FP ADD instruction,\nin reality, would requir e multiple time-steps to execute, as will\nbe discussed in Chap. 3. In this case, the Execute stage shown\nin Fig. 1.10  would itself be made of several pipelined stages.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1675, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4fd72546-0d79-49ea-b2cb-6857bba9a812": {"__data__": {"id_": "4fd72546-0d79-49ea-b2cb-6857bba9a812", "embedding": null, "metadata": {"page_label": "55", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1a53cc2f-980f-4dc5-99d6-8533bb450753", "node_type": "4", "metadata": {"page_label": "55", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b8ec089d6f10f7527457d8743fa1d3bde7d1f2682a8a57355d8eb9ccc04390a7", "class_name": "RelatedNodeInfo"}}, "text": "1.4.2 Parallelism\nPipelining is applied when tasks are dependent, such as the\nFetch, Decode, and Execute tasks requir ed to execute an\ninstruction. Parallelism, on the other hand, is applied when\ntasks are independent and can be perfor med in parallel. In\naddition, both pipelinin g and parallelism require high\navailability of inputs and fast handling of outputs. A factory can\nonly produce more products in less time if its assembly line\nruns e\ufb03ciently, necessary parts arrive in time, and \ufb01nal\nproducts are hauled away quickly . This is similar to data and\ninstructions arriving from memory to the processor faster and\ncomputed data quickly stored in memory . This is accomplished\nby using faster (cache) memory to hold most recently used\ninstructions and data for quick access, while slower but larger\nand less expensive memo ry is used to hold di\ufb00er ent programs\nand data.\nThe following sections provide brief descriptions of\nparallelism techniques when applied to the design of CPUs,\nprocessors, and systems.\nSingle Instruction Multiple Data\nAs the number of available transistors increased due to\nadvancements in IC technologies, moder n processors started to\ninclude special instructions that would operate on multiple data\nitems in parallel, thereby increasing perfor mance [5]. An\nexample of these instructions is the streaming single\ninstruction multiple data (SIMD) extension (SSE) instruction set\nused in Intel processors, or 3DNow instructions used in the\nAMD pr ocessors [ 6, 7].\nMany application areas, such as computer gaming, requir e\nmultiple arithmetic operations to generate a single result. A\nvirtual game object typically includes thousands of data points,\neach called a verte x. Moving a virtual game object on a\ncomputer screen requir es each of its vertices to be\nrepositioned on the screen using a technique called verte x\ntransfor mation. Each verte x transfor mation requires several", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1912, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "52acc970-4701-46e8-8428-f9bcf250041c": {"__data__": {"id_": "52acc970-4701-46e8-8428-f9bcf250041c", "embedding": null, "metadata": {"page_label": "56", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ef8a6ebb-70c4-409c-8479-e327a494e3c7", "node_type": "4", "metadata": {"page_label": "56", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f71bc8fec2de50e5ecaa34852a7d19f8ce967ee94bc124db7e44ac3314686644", "class_name": "RelatedNodeInfo"}}, "text": "multiplication and addition operations involving the coor dinates\nof the verte x and the rotation angle of the object, as will be\nillustrated in Chap. 6 using a two-dimensional (2-D) coordinate\nrotation digital compute r (CORDIC) rotation algorithm. The\ndesign and simulation of a 2-D CORDIC rotation pipeline data\npath is also discussed.\nFigure 1.11  illustrates an SIMD data path with four multipliers\nthat generate four product terms in parallel. With SIMD\narchitectur e, a single instruction operates on multiple data\nitems, thus reducing the total time that would be requir ed to\ntransfor m a single verte x. With multiple SIMD execution units,\nwhich are commonly used in a GPU, it is possib le to create\nmore-realistic video games.\nFIGURE 1.11  An SIMD multiply data path.\nTypically, the SIMD capabilities of a genera l-purpose\nprocessor, such as the Pentium IV, are limited to only few data\nitems\u2014not enough for more advanced gaming. GPUs, on the\nother hand, contain simila r and more specialized data paths to\nincrease perfor mance.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1040, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca031c89-d67a-43be-b884-cd3285c3a72f": {"__data__": {"id_": "ca031c89-d67a-43be-b884-cd3285c3a72f", "embedding": null, "metadata": {"page_label": "57", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6842edef-b877-4756-8790-9ec5c3b3720a", "node_type": "4", "metadata": {"page_label": "57", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5f1d0642e68d0bcf1cc35ccec9d80100ed6eb59bf18434616933d5d4d6f49e80", "class_name": "RelatedNodeInfo"}}, "text": "Instruction-Level Parallelism\nWith the increased number of available transistors in an IC,\nfurther increase in perfor mance requir ed executing multiple\ninstructions in parallel (i.e., at the same time). In this case, a\nCPU data path is designe d to fetch multiple instructions from\nmemory, decode multiple instructions, and execute multiple\nindependent instructions simultaneously [ 8].\nThe list of independent instructions is either deter mined\ndynamically by hardwar e inside the processor, such as with the\nIntel Core i7, or statically by a compiler, such as in the Intel\nItanium-based systems. The assembly instruc tions of a\nprogram for an Itanium -based system are organized by\ncompiler into bundles, with a maximum of three independent\ninstructions in each bundle. The processor fetches, decodes,\nand executes each bundle of instructions in parallel. However,\nexisting programs must be recompiled to take advantage of\nItanium\u2019s data path, which many believe was the reason for its\ndemise.\nFigure 1.12 illustrates the instructio n-level parallelism (ILP)\nexecution of a three-instruction, statically organized instruction\nbundle. In each time-step three instructions are fetched,\ndecoded, and executed. First, the three instruction s I0 through\nI2 are fetched, and then while these three instructions are\nbeing decoded, the next three instructions I3 through I5 are\nfetched. Starting with time-step 3, nine instructions are\nprocessed concur rently. However, data dependencies among\ninstructions in a program prevent full utilization of available\nhardwar e.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1563, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ee6a791-61e7-4fef-8e60-4e98f5f3542c": {"__data__": {"id_": "1ee6a791-61e7-4fef-8e60-4e98f5f3542c", "embedding": null, "metadata": {"page_label": "58", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e5471883-542f-4eff-8cb0-1310aecaf2b1", "node_type": "4", "metadata": {"page_label": "58", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "620044d6bd29484496aef3b83e502e402553d0a454d506af92ad72728c1ec10d", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 1.12  Instruction-level parallelism illustrating fetching,\ndecoding, and e xecuting thr ee instructions at a time.\nStudies of various benchmark programs reported indicate\nthat there are a limited number of independent instructions\nthat can be executed at the same time and in parallel [9]. This,\ntherefore, sets a limit on how many transistors can be used to\nexecute a single program e\ufb03ciently, fully utilizing the available\nprocessing hardwar e during the execution of a program. Thus,\nwhile the transistor count was increasing, designers were not\nable to utilize the excess transistors to further increase the\ne\ufb03ciency of a processing core. Sometimes, a core is designed\nto execute multiple (e.g., two) programs concur rently, called\nmultithreading , in order to increase its e\ufb03ciency . In addition,\na common trend has been to utilize the increasing number of\ntransistors and impleme nt multiple identical cores within a\nsingle chip, thus creating a multicor e processor . ILP and\nmultithr eading ar chitectur es ar e further discussed in Chap. 8 .\nMulticore Processors\nFigure 1.13 illustrates a quad-cor e processor . Each of the cores\ncan execute one or a small number of programs, each called a\nthread , thereby allowing a multicor e processor to perfor m\nmultiple tasks at the same time. Because at any given instance\neach processing core potentially executes a di\ufb00er ent\ninstruction and operates on di\ufb00er ent data items, a multicor e\nprocessor is said to use multiple instructions and multiple data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1512, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4cacb3c3-99d1-4c3d-bfa9-c85e8f4f0f31": {"__data__": {"id_": "4cacb3c3-99d1-4c3d-bfa9-c85e8f4f0f31", "embedding": null, "metadata": {"page_label": "59", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dc517f41-dafa-44d7-b82c-17a26d138a11", "node_type": "4", "metadata": {"page_label": "59", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d5eba1ba50cc129cae8ac144b5c920604fc938b7702dd050108d76f827a7c4d4", "class_name": "RelatedNodeInfo"}}, "text": "(MIMD) architectur e [5]. Recall that a single SIMD instruction\noperates on multiple data items at the same time. Likewise,\nsingle instru ction and single data (SISD) de\ufb01nes the\narchitectur e of a single core when it is executing non-SIMD\ninstructions; however, ILP may be used to accelerate SISD\nexecution.\nFIGURE 1.13  A quad-cor e processor with thr ee levels of cache\nmemories.\nThe architectur e in Fig. 1.13 is also a representation of a\nshared memory  syste m. In this case, to achieve faster\nprogram execution, programmers need to create multiple\nprogram threads, known as multithreaded programming , by\npartitioning a program\u2019s data structur es among several\nthreads, which would be executing in parallel and/or\nconcur rently on a multicor e processor or, in general, on a\nshared-memory multipr ocessor system. Each thread would\noperate on subsets of the program data and would need to\nsynchr onize and communicate with other threads. While each\nthread may access its own local variables, all the threads in a\nmultithr eaded program can share and operate on globally", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1074, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4b140f54-0357-491e-af13-a030d6c6446c": {"__data__": {"id_": "4b140f54-0357-491e-af13-a030d6c6446c", "embedding": null, "metadata": {"page_label": "60", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66328e89-b0fd-4f94-92ad-6c665df528ab", "node_type": "4", "metadata": {"page_label": "60", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "80a47a1ae1e0b4b2d5baf39acb7fe73ba8a42a7ea84a5eec32ac4feb07880250", "class_name": "RelatedNodeInfo"}}, "text": "declar ed variables. Further more, the cores may execute\nthreads fr om di\ufb00er ent pr ograms.\nOther types of multicor e processors include heterogeneous\ncores that consist of cores with varying comple xities to support\nthe processing needs of di\ufb00er ent applications [10]. For\ninstance, an ILP core could be used for sequential computation,\nwhile large SIMD cores could be used to operate on many data\nitems in parallel, suitable for applications that also requir e\ndata-parallel computation s. It is expected that applications\nrequiring both sequentia l and data-parallel comp utations will\nexecute faster in a heter ogeneous-cor e processor than in a\nhomogenous-cor e processor . Typically, a processor uses\nmultiple levels of cache memories (e.g., Fig. 1.2) to facilitate\nquick access to instruction s and data inside the chip, as well as\nto shar e data among di\ufb00er ent cor es.\nFigure 1.14 illustrates the anatomy of the fourth-generation\nIntel i7 processor with four processing cores, each with two\nlevels of cache memorie s (not shown), an L3 shared cache\nmemory, and a graphic pr ocessor .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1092, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4bb6380c-8b4f-4712-92aa-e3985f67b239": {"__data__": {"id_": "4bb6380c-8b4f-4712-92aa-e3985f67b239", "embedding": null, "metadata": {"page_label": "61", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "84ecf00c-7e22-4786-9806-62847f1b8d9c", "node_type": "4", "metadata": {"page_label": "61", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "317540c3f3059562750690d89224be9c7c7ec73069e4df1396cd4f991530ef36", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 1.14  The anatomy of the fourth-generation Intel Cor e i7\nprocessor . (Source: With per mission of Intel Corporation.)\nHowever, as the number of transistors and their switching\nspeed increase, the amount of sustained power consumption\nand heat dissipation increase. This creates a limitation on how\nmany cores can be implemented in a single processor . The\npower and cooling requir ements can be formulated into a\nmetric known as thermal design power , wher e several\nmechanisms, such as dynamically reducing the transistor\nswitching speed (i.e., clock frequency), can be used to better\nbalance the power consumption and cooling requirements.\nWhile these mechanisms help to increase the perfor mance of a\nprocessor at times, further increase in perfor mance requir es\nusing multiple processors (each potentially a multicor e) to\ncreate a multipr ocessor system.\nMultiprocessor Systems\nA multipr ocessor system may be designed as either shared\nmemory or message passing . In a shared-memory\nmultipr ocessor system, the operating system may need to be\n\u201cthread awar e\u201d so that each thread is able to quick ly access its\nlocal variables. In a message-passing system, however, threads\nmust communicate by sending and receiving messages; there\nare no shared variables in a message-passing system that\nthreads can access.\nA multipr ocessor system can execute many threads in\nparallel and concur rently. Hence, it increases the system\u2019s\nthroughput , de\ufb01n ed as the number of tasks the system can\nperfor m per unit time. The number of \ufb02oating-point operations\nper second (FLOPS) that is necessary to run a scienti\ufb01c\napplication, such as simu lating ocean waves, or the number of\nGoogle searches the system can handle at the same time\nwithin, say, a couple of seconds, are examples of system\nthroughputs. These systems also use a large amount of\nmemory that may be partitioned among either individual\nprocessors or gr oups of pr ocessors that ar e inter connected.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1961, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3684d2b2-528b-4593-bbeb-a444d2bae36a": {"__data__": {"id_": "3684d2b2-528b-4593-bbeb-a444d2bae36a", "embedding": null, "metadata": {"page_label": "62", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "435b278e-ed20-4580-bb2c-cc745ad35184", "node_type": "4", "metadata": {"page_label": "62", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "dfeec3256f755484e4d5028ac4d7ed45071cd384a28617717df38f899b210a11", "class_name": "RelatedNodeInfo"}}, "text": "Figure 1.15 illustrates a three-node, shared-memory\nmultipr ocessor system. In this case, each node consists of a\ntwo-core processor, memory, and an internode communication\ninterface. Each core can access any of the M0, M1, and M2\nmemories. Shared-memory multipr ocessor systems are used in\nthe design of various servers.\nFIGURE 1.15  The ar chitectur e of a thr ee-node, shar ed-memory\nmultipr ocessor system.\nOn the other hand, network ed systems, each one a single\nprocessor system or server node, create a mess age-passing\nmultipr ocessor system. The nodes form a cluster and\ncommunicate by sending and receiving messa ges via the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 634, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fbb19643-b3c3-4673-90b4-468f89b4da6e": {"__data__": {"id_": "fbb19643-b3c3-4673-90b4-468f89b4da6e", "embedding": null, "metadata": {"page_label": "63", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8fb47794-89f0-47ab-83d6-f62107bb0020", "node_type": "4", "metadata": {"page_label": "63", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "30bb0decfd8f42b296b029c89f4361f8e40f47fd307f28cdf6ba3c76db578b9c", "class_name": "RelatedNodeInfo"}}, "text": "network. Finally, warehou se-scale computers are clusters that\nare designed from thousands of servers. Some warehouse-\nscale computers are designed as moder n super computer\nsystems used for scienti\ufb01c computations, requiring extensive\nFLOPS.\nClusters and warehouse-s cale computers provide availability\n(if one server crashes, others continue to operate), interactive\napplications (e.g., online shopping, Google, Facebook, banking,\netc.), and large-scale storage and computing (e.g., cloud\ncomputing). Power distribution and cooling problems are\namong the challenges facing the designers of very large-scale\ncomputing systems. Multicor e and shared-memory\nmultipr ocessor systems ar e further discussed in Chap. 10 .\n\u00a0\n1.5 Computer Security\nAs compute r and network security have become more\nimportant, new computer architectur e concepts are requir ed to\nbuild computer systems that are able to detect malicious\nsoftware (malwar e) attacks, such as from viruses or spywar e.\nIndividuals, government, and business organizations all have\ndigital assets (programs and data) that need protection from\nattacks, and in many cases, also protection from unauthorized\naccess by employees. Portable devices are additio nally subject\nto physical attacks for the purpose of changing their functions\nor perfor ming r everse-engineering tasks.\nBecause ICs are more secur e than the hard disk and \ufb02ash\ndrives and memory, computer architects have become\ninterested in special and general-purpose processors designed\nand secur ely built for computer security purposes, such as\nperfor ming secure data storage, secur e communication, secur e\ne-commer ce, and secur e program execution. Chapter 11\nintroduces computer ar chitectur e for security .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1729, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c9096daf-5b8e-461b-8a54-0fd21b3ccf56": {"__data__": {"id_": "c9096daf-5b8e-461b-8a54-0fd21b3ccf56", "embedding": null, "metadata": {"page_label": "64", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "330bab7e-cbd9-4dc2-822d-d12f866cbe37", "node_type": "4", "metadata": {"page_label": "64", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1eb9715d37c4d24fba60e23c83a07990eac7011d7dbf917d9b2946309fef54a5", "class_name": "RelatedNodeInfo"}}, "text": "References\n1. J. Hennessy and D. P atterson, Computer Ar chitectur e: A Quantitative\nApproach , 5th edition, Mor gan K aufmann, 2012.\n2. Jennifer Bur g, Jason R omney, and Eric Schwarts, \u201c Digital, Sound, and Music:\nConcepts, Application, and Science,\u201d\nhttp://csweb.cs.wfu.edu/~bur g/CCLI/Documents/Chapter5.pdf .\n3. Xilinx FPGA, http://www .xilinx.com/\n4. NI Multisim, National Instruments, http://www .ni.com/multisim/ .\n5. Michael Flynn, Some computer or ganizations and their e\ufb00ectiveness, IEEE\nTransactions on Computers , Vol., No . 9, Sep. 192, pp. 948-960.\n6. Intel SSE4 P rogramming R eference, white paper\nhttp://home.ustc.edu.cn/~shengjie/REFERENCE/sse4_instruction_set.pdf\n7. AMD 3DNow, https://r efspecs.linuxbase.or g/AMD-3Dnow .pdf\n8. Ramakrishna R au and F isher Josheph, Instruction-level parallel pr ocessing:\nHistory, overview, and perspective, Journal of Super computing , 7, 9-50, 1993.\n9. David Culler, Jaswinder P al Singh, and Anoop Gupta, Parallel Computer\nArchitectur e: Har dwar e/Sof tware Appr oach , Mor gan K aufmann, 1999.\n10. Mark D. Hill, Amdahl\u2019s law in the multicor e era, IEEE Computer , July 2008,\n33-38.\n\u00a0\nExercises\n1.1. R epresent the following numbers as dir ected:\na. 12 as a 4-bit unsigned number\nb. 12 as a 5-bit unsigned number\nc. +1 as a 4-bit 2\u2019s complement number\nd. \u20131 as a 4-bit 2\u2019s complement number\ne. \u20131 as a 5-bit 2\u2019s complement number\nf. +1 as a 4-bit signed-magnitude number\ng. \u20131 as a 4-bit signed-magnitude number\n1.2. Cr eate a table similar to Table 1.1  for 4-bit unsigned, 2\u2019s\ncomplement, and signed-magnitude numbers.\n1.3. What is the 16-bit FP number r epresentation of \u20135.375 in\nhex with 1-bit sign, 4-bit biased e xponent, and 11-bit", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1698, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "97e95a14-f9d7-45e2-9eb7-ae4878d072a3": {"__data__": {"id_": "97e95a14-f9d7-45e2-9eb7-ae4878d072a3", "embedding": null, "metadata": {"page_label": "65", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0aaee9aa-73a1-45fb-85f5-790b29b2db05", "node_type": "4", "metadata": {"page_label": "65", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9e59432468c94d767df5894cab832e29cd09666bb19bdf4085f83233c5011c5d", "class_name": "RelatedNodeInfo"}}, "text": "fraction, wher e bias = 7?\n1.4. What is the r eal number equivalent to FP number 0x3400\nwith 1-bit sign, 4-bit biased e xponent, 11-bit fraction, and\nbias = 7?\n1.5. What is the r eal number equivalent to FP number 0x3400\nwith 1-bit sign, 4-bit biased e xponent, 11-bit fraction, and\nbias = 8?\n1.6. What is the biggest positive FP number that can be\nrepresented in 16-bit for mat using 1-bit sign, 4-bit biased\nexponent, and 11-bit fraction, wher e bias is 7?\n1.7. What is the biggest positive FP number that can be\nrepresented in 16-bit for mat using 1-bit sign, 4-bit biased\nexponent, and 11-bit fraction, wher e bias is 8?\n1.8. Do the following assuming 16-bit FP numbers with 4-bit\nbias e xponent, bias = 7, and 11-bit fraction:\na. What r eal number does an FP number with sign = 0,\nbias e xponent = 1, and fraction = 0 r epresent?\nb. What r eal number does an FP number with sign = 1,\nbias e xponent = 14, and fraction = (11111111111)2\nrepresent?\n1.9. R epresent the following r eal numbers as 16-bit FP numbers\nwith 4-bit biased e xponent, bias = 7, and 11-bit fraction:\na. 1.0\nb. 0.5\nc. 0.25\n1.10. Do the following assuming 16-bit FP numbers with 4-bit\nbias e xponent, bias = 8, and 11-bit fraction:\na. What r eal number does an FP number with sign bit =\n0, bias e xponent = 1, and fraction = 0 r epresent?\nb. What r eal number does an FP number with sign bit =\n1, bias e xponent = 14, and fraction = (11111111111)2\nrepresent?", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1432, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1bfa98f8-4bb7-4e56-b348-e96c05ded3b5": {"__data__": {"id_": "1bfa98f8-4bb7-4e56-b348-e96c05ded3b5", "embedding": null, "metadata": {"page_label": "66", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dae8a37e-8c93-477d-ae75-5bafdef17f17", "node_type": "4", "metadata": {"page_label": "66", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5eed06d5838923bf600b1c9b09b16fc2bb3aea138e940574b23f5b167dc0d174", "class_name": "RelatedNodeInfo"}}, "text": "1.11. R epresent the following r eal numbers as 16-bit FP\nnumbers with 4-bit biased e xponent, bias = 8, and 11-bit\nfraction:\na. 1.0\nb. 0.5\nc. 0.25\n1.12. Draw a data path similar to the one shown in Fig. 1.1  that\nwould be used to generate the r esult for variable A\ndescribed in the high-level language pr ogram statement \u201c A\n= A + B;\u201d , wher e the values of A and B are brought in fr om\nan external memory and ar e stor ed in r egisters befor e use.\nUse only two r egisters. Also, the initial value of A and the\n\ufb01nal r esult A + B shar e the same r egister . Label all the logic\nmodules in the data path and indicate the functions the\ncontr oller would need to perfor m. Keep the \ufb01nal computed\nvalue A + B in the r egister .\n1.13. CPUs can perfor m addition, subtraction, multiplication,\nand division operations. Assuming that a separate module\nis used for each of the four math functions, draw a data\npath that can be used to generate the r esult for variable A\ndescribed in the high-level language statement \u201c A = A + B*\nC;\u201d, or \u201cA = A + B/C;\u201d , wher e the values of variables A, B,\nand C are read fr om an e xternal memory and stor ed in\nregisters befor e use. Use no mor e than thr ee registers. Y our\ndata path should be able to generate the r esult for A + B *\nC or A + B/C. The \ufb01nal value should be k ept in a r egister .\n1.14. What is a V on Neumann ar chitectur e bottleneck?\n1.15. Draw a transistor -level schematic of a thr ee-input CMOS\nNAND gate and deter mine its truth table in ter ms of\ntransistor ON and OFF positions.\n1.16. Draw a transistor -level schematic of a thr ee-input CMOS\nNOR gate and deter mine its truth table in ter ms of\ntransistor ON and OFF positions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1687, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bf9057a9-810e-40d6-bbd9-5badfe2a3873": {"__data__": {"id_": "bf9057a9-810e-40d6-bbd9-5badfe2a3873", "embedding": null, "metadata": {"page_label": "67", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ab1718f4-ea57-42d8-992a-5bc469317a0d", "node_type": "4", "metadata": {"page_label": "67", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "04dd35b09af90a430bbba10a136c4a4ff7cf3bbbd166f29f8c16e4cd5e759ef5", "class_name": "RelatedNodeInfo"}}, "text": "1.17. What does the \u201c C\u201d in CMOS stand for, and why is that\nimportant?\n1.18. What is the di\ufb00er ence between pipelining and parallelism\narchitectur es? Identif y their application ar eas.\n1.19. Explain in which ways the incr eases in transistor count\nhave in\ufb02uenced computer ar chitectur e.\n1.20. What is an e\ufb03cient pr ocessing cor e?\n1.21. Explain why a further incr ease in perfor mance comes\nfrom parallel pr ocessing.\n1.22. Draw an SIMD data path to accelerate the e xecution of\nthe following for -loop statement:\n1.23. Draw an SIMD data path to accelerate the e xecution of\nthe following for -loop statement:\n1.24. Ther e is a limit to ILP . What is the sour ce for this\nlimitation, and how wer e processor designers able to\nincrease perfor mance beyond ILP?\n1.25. Explain the r easons for multipr ocessor systems.\n1.26. Computer security (understanding security): Selective\nproblems fr om Ex ercises 11.1 to 11.11. Also r efer to Sec.\n11.1. Students may be ask ed to r ead this section on their\nown.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1004, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "59404b79-d1d1-4752-8545-a6e1a855cdb6": {"__data__": {"id_": "59404b79-d1d1-4752-8545-a6e1a855cdb6", "embedding": null, "metadata": {"page_label": "68", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b5c99ce6-84e4-4e9b-b50e-e60429e416c9", "node_type": "4", "metadata": {"page_label": "68", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "81a48db6f4e458a1ec3b2cd99c224ac09afd5b891dc665c99246991ba820e2f6", "class_name": "RelatedNodeInfo"}}, "text": "CHAPTER 2\nCombinational Circuits:\nSmall Designs\n\u00a0\n2.1 Introduction\nCombinational circuits and their application in digital systems\nwere brie\ufb02y discussed in Chap. 1. In this chap ter, we will cover\nsmall combinational circuit design techniques that are di\ufb00er ent\nfrom the ones used to design large combinational circuits.\nFurther more, here we will limit the number of the input signals\nto four when minimizi ng by hand, and we will use a\nminimization software to minimize designs that requir e more\nthan four but still a small  number (e.g., \ufb01ve or six) of inputs. In\ncontrast, a large combinational circuit requir es many more\ninputs and is implemented using smaller circuit modules. The\ndesign metho dology of large combinational circuits is discussed\nin Chap. 3 .\nThe relationships between an output and inputs of a small\ncombinational circuit are de\ufb01ned by the truth table constructed\nfrom the description of the design problem. For example,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 945, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f8dd68e-9e7d-4c3e-94e7-3240a4c00c2b": {"__data__": {"id_": "9f8dd68e-9e7d-4c3e-94e7-3240a4c00c2b", "embedding": null, "metadata": {"page_label": "69", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c17643a5-cfb4-4cc3-bc73-0f9092552578", "node_type": "4", "metadata": {"page_label": "69", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5ada752925add2b776df7d9f6cebc7dbc1ee6e72a4497803f7561f7426a66a05", "class_name": "RelatedNodeInfo"}}, "text": "consider the design of a 2-bit unsigned multiplier that multiplies\na 2-bit unsigned multiplicant A = a1a0 by a 2-bit unsigned\nmultiplier B = b1b0 and produces a 4-bit unsigned product P =\np3 p2 p1 p0, as illustrated in Fig. 2.1 using its block diagram. In\nthe \ufb01gure, upper case and lower case letters are used to indicate\ninputs and outputs that are multiple bits and single bit,\nrespectively . In addition, an arrow with the line crossed\nindicates multibit inputs or outputs (Fig. 2.1(a)). Alternatively,\nmultibit inputs or outputs may be shown with arrows that are\nbolded ( Fig. 2.1 (b)).\nFIGURE 2.1 Block diagram for 2-bit unsigned multiplier cir cuit;\ntwo options to show multibit inputs/outputs.\nTable 2.1  shows the truth table of the unsigned multiplier . For\nexample, the product of A = 3 = (11)2 and B = 2 = (10)2 is P =\n6 = (0110)2, as shown in the truth table. Each of the output bits\np3 to p0 identi\ufb01es a logic function in terms of the four inputs a1,\na0, b1, and b0.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 979, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b345c2e-59bc-4087-8df5-0adb4a429518": {"__data__": {"id_": "1b345c2e-59bc-4087-8df5-0adb4a429518", "embedding": null, "metadata": {"page_label": "70", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "351d57c5-ff1b-4231-9566-744521573933", "node_type": "4", "metadata": {"page_label": "70", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d95d6c32c427e65b891a2ad9524db0a041b9d3912a35ea6f4902fb5fe3016cfd", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  2.1 Truth T able for 2- Bit Unsigned Multiplication Module\nA truth table contains all the input logic conditions  for which\nan output bit (e.g., p0) is 0, as well as all the input conditions\nfor which an output bit is 1. If an output bit is always 0 or\nalways 1, then the bit is not a function of the inputs and should\nbe deleted from the table. The number of rows in a truth table\ndepends on the number of inputs to the circuit. With three\ninputs (each 1 or 0), there would be eight possible", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 499, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b0d3979-4929-4275-abe8-6caffcad2839": {"__data__": {"id_": "5b0d3979-4929-4275-abe8-6caffcad2839", "embedding": null, "metadata": {"page_label": "71", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7863bb32-00c6-40a3-a6fe-12ae2f4f351e", "node_type": "4", "metadata": {"page_label": "71", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7b651297c27171c0eeeeddf2e1c1b47a0257327ec15fa12ad6dc9ae6c01c1a68", "class_name": "RelatedNodeInfo"}}, "text": "combinations, or eight rows in the table, and with four inputs,\n16 possible r ows, as in Table 2.1 . In general, with n inputs, ther e\nwould be 2n rows in the truth table. There are two ways a truth\ntable can be implemented in har dwar e:\n\u2022 The entir e truth table can be stor ed as a look-up-table\n(LUT). F or example, Table 2.1  can be stor ed in a 16-entry, 4-\nbit-wide memory .\n\u2022 A minimal logic cir cuit is deter mined for each of the\noutputs in ter ms of the inputs.\nAn LUT has the advanta ge of not requiring further design\nsteps; the truth table is stored as-is in a memory module inside\nan integrated chip (IC). The disadvantage of an L UT, however, is\ntwofold:\n\u2022 Both 0 and 1 output values must be stor ed, which would\nrequir e mor e har dwar e.\n\u2022 An L UT is typically slower, as it r equir es a longer time to\nread its content.\nIn contrast, a minimal logic circuit implements either the\ninput logic conditions for which the output is 1 or the input logic\nconditions for which the output is 0, thus requiring less\nhardwar e in terms of fewer gates, gates with fewer inputs, and\nfewer wir e connections.\nOn the other hand, truth tables stored as LUTs have\napplications in con\ufb01gurable ICs, such as \ufb01eld programmable\ngate arrays (FPGAs). Each of the LUT modules in an FPGA chip\ncan be updated with a di\ufb00er ent truth table to implement a\ndi\ufb00er ent combinational logic.\nIn the rest of the chapter we will cover how to conv ert a truth\ntable to its equivalent logic expressions for NAND or NOR circuit\nimplementation. Manual and algorithmic logic minimization\ntechniques, as well as the use of minimization software, Verilog\nhardwar e description language (HDL) circuit descriptions, and\ncomputer -aided design (CAD) tools for circuit designs, are\ndiscussed with examples. The chapter also presents circuit", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1810, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a4046ec7-8a26-43cf-8b1e-dd37838c3cee": {"__data__": {"id_": "a4046ec7-8a26-43cf-8b1e-dd37838c3cee", "embedding": null, "metadata": {"page_label": "72", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fe40bc78-0ead-44ee-9816-2f160a50b9b2", "node_type": "4", "metadata": {"page_label": "72", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "07992082abb6e9123c6722e19f4fd19b06d5316254e752ce9e5d580fc21500c2", "class_name": "RelatedNodeInfo"}}, "text": "timing and potential timing hazar ds. Other gates, such as\nstandar d and tristate bu\ufb00ers, are also discussed. These have\nmany applications, including design of modules used in the\ninterconnection architectur es. The chapter also includes design\nexamples of some standard small combinational circuit\nmodules.\n2.1.1 Signal Naming Standards\nRecall that a signal refers  to a circuit\u2019s input or output as 1 or 0.\nEach signal name also has a polarity indicator that de\ufb01nes how\na signal value, 0 or 1, is interpr eted by the circuit. Signal\npolarities ar e de\ufb01ned as follows:\n\u2022 Active-high signal polarity\u2014 A signal is called active-\nhigh if logic 1 r epresents the active, asserted, or enabled\nstate of a logic condition and 0 r epresents the inactive, not\nasserted (deasserted), or not enabled (disabled) state of a\nlogic condition. T ypically, a signal name without a pr e\ufb01x or\npost\ufb01x symbol identi\ufb01es an active-high signal (e.g., x).\n\u2022 Active-low signal polarity\u2014 A signal is called active-\nlow if 0 r epresents the active, asserted, or enabled state of\na logic condition and 1 r epresents the inactive, not\nasserted, or disabled state of a logic condition. T ypically, it\nhas a signal name with a pr e\ufb01x or post\ufb01x symbol. F or\nexample, _ x, x\u2032,/x, or x# may be used to name an active-\nlow signal.\nUnless otherw ise stated, we will use an underscor e (_) pre\ufb01x,\nsuch as in _x or _X, to identif y an active-low  signal or multiple\nactive-low signals, r espectively .\nExample 2.1. Draw the block diagram of a 1-bit inverter circuit and appropriate ly\nlabel its input and output signals . The circuit inputs 1-bit data and a contr ol signal\nlabeled active-low as _c. The circuit outputs the 1-bit data input unchanged when _c\nis not active (deasserted, disable d) and inverts and outputs the data bit when the\ncontr ol signal is active (asserted, enabled). Since the input data is not interpr eted by\nthe inverter circuit, both the data and the output, for convenience, are labeled\nactive-high as x and y, respectively .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2015, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fc028865-6237-4ccf-8cf7-a748e6a2023b": {"__data__": {"id_": "fc028865-6237-4ccf-8cf7-a748e6a2023b", "embedding": null, "metadata": {"page_label": "73", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ab7d288d-ecc5-43cc-8dbb-80623a56505c", "node_type": "4", "metadata": {"page_label": "73", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d235878961cf7bc4526f43659c8774dcb1ba05e75e1fd6fa57c615d4ac788e96", "class_name": "RelatedNodeInfo"}}, "text": "Solution:  Figure 2.2 illustrat es the inverter\u2019s block diagram with 1-bit data x, an\noutput y, and an active-low contr ol signal _c. Table 2.2 shows the truth table for the\n1-bit inverter. Since _c is an active-low signal, y = \n when _c = 0 (active), and y = x\nwhen _ c = 1 (not active).\nFIGURE 2.2 Block diagram of a 1-bit inverter cir cuit with an\nactive-low contr ol signal _c.\nTABLE  2.2 Truth T able for 1- Bit Inverter with A ctive-L ow Contr ol Signal _ c\n2.2 Logic Expressions\nFigure 2.3 displays the symbols and the truth tables of gates\nused to implement a logic circuit. The AND, OR, NAND, NOR,\nand NOT gates were discussed in Chap. 1. XOR and XNOR are\ntwo-input gates. An XOR gate outputs 0 whenever its inputs are\nthe same and 1 otherwise. The XNOR (XOR-NOT) gate, on the\nother hand, outputs 1 whenever its inputs are di\ufb00er ent and 0\notherwise. The XOR and XNOR gates may each be viewed as a\n1-bit comparator . The NAND and NOR gates are universal gates\nbecause they can be used to implement any logic e xpression. In", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1031, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9e277237-7e59-4da4-a144-296b12424889": {"__data__": {"id_": "9e277237-7e59-4da4-a144-296b12424889", "embedding": null, "metadata": {"page_label": "74", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "332b4bae-4ee8-4c57-be18-19aa34afd4e2", "node_type": "4", "metadata": {"page_label": "74", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f53519dacb3d200d4757be8512edc67c40ead54e74b31cbdd46cfb1b4fc0f51e", "class_name": "RelatedNodeInfo"}}, "text": "addition, they requir e fewer transistors to build. Internally, all\nICs ar e implemented with NAND or NOR gates.\nFIGURE 2.3 Primitive logic gate symbols and their truth tables.\nTable 2.3 illustr ates a truth table of a two-variable function f\nde\ufb01ned to be 1 when x = 0 AND y = 0 OR when x = 1 AND y =", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 300, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b5f368ec-1089-4b69-b333-a7f9224f4b52": {"__data__": {"id_": "b5f368ec-1089-4b69-b333-a7f9224f4b52", "embedding": null, "metadata": {"page_label": "75", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ae6c4b9f-d5dc-4a94-8f17-377d82863bb0", "node_type": "4", "metadata": {"page_label": "75", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "900e92df430972d28d80db4a36b60f29f3ca8ef717b71c71ba5923bce68d6451", "class_name": "RelatedNodeInfo"}}, "text": "1. The function is 0 for other values of x and y. Equation (2.1) is\none way to express the truth table as a Boolean expression\nwher e the dot (\u201c.\u201d) indicates an AND operator, \u201c+\u201d indicates an\nOR operator, and bar indicates a NOT operator .\nTABLE  2.3 A Two-Variable F unction\nA logic expression is said to be equivalent to its truth table if\nit produces the exact same truth table when evaluated for all\npossible input values. For example, Eq. (2.1) generates the\nsame output values in Table 2.3, as illustrated here for all\nvalues of x and y:\nNote that Eq. (2.1)  contains only the two logic terms \n. \n and\nx. y that correspond to the input logic conditions for which f is\n1. Often, an AND opera tor is implicitly indicate d by a null\noperator (without the \u201c.\u201d), as illustrated in Eq. (2.2) .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 793, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9e8ed669-25b4-42bb-a1f2-645b3bbecd16": {"__data__": {"id_": "9e8ed669-25b4-42bb-a1f2-645b3bbecd16", "embedding": null, "metadata": {"page_label": "76", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dcfd519e-5d22-4ce4-8508-c3b9f65a1a86", "node_type": "4", "metadata": {"page_label": "76", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2fd4ac61ad68da8aeda1988b776a53953df02f970288c83bdf9d7d5fad7aac7c", "class_name": "RelatedNodeInfo"}}, "text": "2.2.1 Sum of Product Expression\nA Boolean expression is called sum of product (SOP) if it de\ufb01nes\nan output signal f in terms of its input conditions for which f is 1\n(e.g., Eq. (2.2)). Each term in the expression is written by\nANDing (product) of each distinct input condition, thus forming\na product term . Output f is 1 if one or more of the product\nterms is 1; thus, f is the result of ORing (summing) the product\nterms. In Eq. (2.2) , f is 1 when both x and y are zero; thus, \n  =\n1, or when both x and y are 1, and thus xy = 1.\nAn SOP expression can be translated into its equivalent logic\ncircuit by using NOT, AND, and OR gates. The circuit for Eq.\n(2.2) is shown as a two-level AND- OR schematic in Fig. 2.4, not\ncounting the NOT gates. The circuit contains seven signals;\ninputs x and y; output f; and \n  and h = xy as\nintermediate signals. The two AND gates generate the\nintermediate signals g and h that are fed as input to the single\nOR gate to pr oduce f.\nFIGURE 2.4 The AND- OR gate-level schematic of function \nUsing NOT, AND, and OR gates to implement an expression is\nmore intuitive than using the universal NAND or NOR gate.\nImplementation of SOP Expressions with NAND Gates\nReplacing all NOT, AND, and OR gates of an AND- OR circuit with\nNAND gates produces an equivalent but NAND- only circuit. This\nis based on the following DeMor gan\u2019s theor ems shown in Eq.\n(2.3). A NAND operator is shown as an AND followed by a NOT", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1440, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f845c34-5a90-43bf-af68-47db7b602726": {"__data__": {"id_": "3f845c34-5a90-43bf-af68-47db7b602726", "embedding": null, "metadata": {"page_label": "77", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "09880d95-5468-4783-9494-6f0ab61b510d", "node_type": "4", "metadata": {"page_label": "77", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4f2ca82e6b32b55e8c6d3a850270f41ec01d49e3d7e04980218eb8c3ee3558ab", "class_name": "RelatedNodeInfo"}}, "text": "(e.g., \n ), and a NOR is shown as an OR followed by a NOT (e.g.,\n):\nThe two expressions \n  and \n  + \n  in Theor em 1 would\nproduce the same truth table and thus are said to be\nequivalent. Likewise, the two expressions \n  and \n  in\nTheor em 2 are equivalent. These theor ems apply to any\nnumber of variables. Theorem 1 states that an OR gate with\ninverted inputs is logically equivalent to a NAND gate without\ninverted inputs. Theor em 2 states that an AND operator with\ninverted inputs is logically equivalent to a NOR operator without\ninverted inputs.\nConsider the AND- OR circuit in Fig. 2.4. The circuit can be\nchanged to all NAND gates using the following pr ocedur e:\n1. Replace each NOT gate (if any) with its equivalent\nNAND gate by connecting the inputs of a two -input NAND\ngate to the single input of the NOT gate, as shown. That is, \n.\n2. Place two NOT gates on each end of the inter mediate\nsignals g and h as shown in Fig. 2.5 . This will not change\nthe cir cuit behavior since the two NOT gates will not alter\nthe value of the original signal (\n ).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1062, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a5ec0108-68d2-435f-9fe8-5559e989197f": {"__data__": {"id_": "a5ec0108-68d2-435f-9fe8-5559e989197f", "embedding": null, "metadata": {"page_label": "78", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a551cd23-f505-4d1d-9e8f-fb25efa74964", "node_type": "4", "metadata": {"page_label": "78", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c1c592c255aa18764af9e8ed1d24059b3ed4c9ef777fd17c50598aa564f4e72a", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.5 An AND- OR cir cuit with two NOT gates added at\nboth ends of the wir es used for inter mediate signals g and h.\n3. Replace each AND-NOT pair with a NAND gate as\nshown in Fig. 2.6 ; a NAND gate is equivalent to an AND\ngate followed by a NOT gate. The inner NOT gates in Fig.\n2.5 are shown with small bubbles.\nFIGURE 2.6 An AND- OR cir cuit with added bubbles.\nThe only gate not yet converted to a NAND gate is\nthe OR gate with inverted inputs. The gate is logically\nequivalent to a NAND gate accor ding to DeMorgan\u2019s\nTheor em 1: \n .\n4. Replace the OR gate with inverted inputs with a NAND\ngate as shown in Fig. 2.7 .\nFIGURE 2.7 NAND- only implementation of the SOP e xpression f\n= \n  + x y .\nThe circuit schematic with all NAND gates in Fig. 2.7 is\nequivalent to the AND- OR circuit of Fig. 2.4. Alternatively, the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 824, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "07cef8c7-8037-4e99-b867-e7a6a75f0048": {"__data__": {"id_": "07cef8c7-8037-4e99-b867-e7a6a75f0048", "embedding": null, "metadata": {"page_label": "79", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4022ebb5-409c-439f-96dc-9cf38602d3b8", "node_type": "4", "metadata": {"page_label": "79", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5962c8834f8b415b58dcf754fbef11b222e7c3fbd176e503baadb3ddf914c592", "class_name": "RelatedNodeInfo"}}, "text": "following Boolean algebra expresses an SOP expression with\nonly NAND operators:\nRecall that \nsubstitute the SOP e xpression \n  xy for f to yield:\napply DeMor gan\u2019s Theor em 2 to e xpress \n  as \n . The\ntwo NAND terms \n  and \n  are again NANDed to de\ufb01ne f as\nfollows, r equiring only NAND operators:\n2.2.2 Product of Sum Expression\nA Boolean expression is called a product of sum (POS) if it\nde\ufb01nes an output signal f in terms of the input conditions for\nwhich f is 0. Recall that an SOP de\ufb01nes an output f in terms of\nits input conditions for which f is 1. Each term in a POS\nexpression is written by ORing (sum) each distinct input\ncondition for which f is 0, thus forming a logic sum term ; signal\nf is 0 if one of the sum terms is 0, thus making f the result of\nANDing (product) its sum terms. Both SOP and POS expressions\nfor an output signal are equivalent, and they would generate\nthe same truth table. Only one expression (SOP  or POS) is\nneeded to describe an output signal. However, POS expressions\nare not as intuitive to understand as ar e SOP e xpressions.\nSOP V ersus POS\nThe following rules hold between the SOP and POS expressions\nof an output signal f:\nRule 1:  POS e xpression of f = Complement of the SOP\nexpression of", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1235, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d8b04a2e-91aa-437c-a8dc-1a1db48d981a": {"__data__": {"id_": "d8b04a2e-91aa-437c-a8dc-1a1db48d981a", "embedding": null, "metadata": {"page_label": "80", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ff7fbb4c-c0a1-4009-a3b1-5267e2423882", "node_type": "4", "metadata": {"page_label": "80", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "abe22c609d96abac42855e8d21d43645a4ab471d2cc149e54b207e08ba929a69", "class_name": "RelatedNodeInfo"}}, "text": "Rule 2:  SOP e xpression of f = Complement of the POS\nexpression of \nUsing R ule 1, the POS e xpression for a function f is derived by\ncomplementing the SOP expression of \n. Everywher e that f is 0\nin its truth table, \n  is 1, and everywher e that f is 1, \n is 0. Since\nthe SOP of \n de\ufb01nes \n  in terms of the input conditions for which  \n is 1, complementing the SOP expression of \n results in a POS\nexpression that de\ufb01nes f in terms of the input conditions for\nwhich f is 0. This is illustrated her e:\nthus,\napplying DeMor gan\u2019s Theor em 2, \n  yields\nor\napplying DeMorgan\u2019s Theorem \n  on each of the logic\nterms yields", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 619, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "777747a3-a14a-40dc-8980-56b65fa5be12": {"__data__": {"id_": "777747a3-a14a-40dc-8980-56b65fa5be12", "embedding": null, "metadata": {"page_label": "81", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "23802fd5-9f80-4b27-99a1-5e14cef7e0b8", "node_type": "4", "metadata": {"page_label": "81", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b476febab453ff080d216ffc9f3a6098615014fa73d2e57282b0c9ad9e654c92", "class_name": "RelatedNodeInfo"}}, "text": "Each of the logic terms \n  and \n  is a sum (i.e., OR)\nterm, and the sum terms are multiplied (ANDed)  to create a\nPOS expression. Rule 2 would be used to deter mine an SOP\nexpression for f from the POS e xpression of \n .\nAlternatively, a POS expression of f can be obtained from the\ndual principle (de\ufb01ned ne xt) applied to an SOP e xpression of \n :\nDual Principle \u2014The dual of an expression \n  is equal to \n where AND and OR operators are interchanged; ANDs are\nconverted to ORs and ORs are converted to ANDs, but the variable names\nremain the same in their complemented or uncomplemented for m.\nIn general, the dual of a Boolean algebraic rule, such as x(y +\nz) = xy + xz, results in x + yz = (x + y)(x + z), which is another\nvalid Boolean  algebraic rule. If an algebraic rule contains a 1 or\n0, such as in x + 0 = x, its dual expression requires that 0 be\nreplaced with a 1 and 1 be replaced with a 0, for example, to\nproduce x. 1 = x (dual of x + 0 = x) as another Boolean\nalgebraic rule.\nA simpler way to obtain the POS expression \nfrom its truth table is to \ufb01rst obtain the dual expression for \n which would be, and then complement each\nvariable in the dual expression to obtain the POS of \n.\nExample 2.2. Find the POS expression of g given that an SOP expression of \nSolution:  First, obtain the dual e xpression of \n  as:\nthen complem ent (NOT) each variable in the dual expression to\nobtain the POS e xpression of g:\nIn summary, two di\ufb00er ent methods to deter mine a POS\nexpression of a function f from an SOP expression of \n were", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1540, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "04652c64-46e3-4497-b9ac-d717129219d8": {"__data__": {"id_": "04652c64-46e3-4497-b9ac-d717129219d8", "embedding": null, "metadata": {"page_label": "82", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "369e441d-40fd-4a08-8fb0-ec7529b99608", "node_type": "4", "metadata": {"page_label": "82", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "36a2907a22c2b7c8f88e0ed29e975dad2672034c1b5bba40116cb98f6151c19a", "class_name": "RelatedNodeInfo"}}, "text": "presented, as follows:\nMethod I:  \n  and then apply DeMor gan\u2019s\ntheor ems.\nMethod II:  Find the dual e xpression for the SOP of \n  and\nthen complement each variable.\nFigure 2.8 presents the OR-AND circuit for the POS in Eq.\n(2.4). An OR-AND circuit, similar to an AND- OR circuit, is a two-\nlevel circuit not counting  the initial NOT gates (if any). The\nintermediate outputs of two concur rently operati ng OR gates\nare then fed to the single AND gate to pr oduce f.\nFIGURE 2.8 The AND- OR gate-level schematic of POS\nexpression.\nImplementation of POS Expressions with NOR Gates\nReplacing all the NOT, OR, and AND gates of an OR-AND circuit\nwith NOR gates produces an equivalent NOR-only circuit. This is\nbased on DeMor gan\u2019s Theor em 2 that states \n  Consider\nthe OR-AND circuit in Fig. 2.8 . The circuit can be designed using\nall NOR gates with the following pr ocedur e:\n1. Replace each NOT gate (if any) with its equivalent NOR\ngate by connecting the inputs of a NOR gate to the single\ninput of the NOT gate as shown. That is, \n2. Place two NOT gates on each end of the inter mediate\nsignals m and n as shown in Fig. 2.9 . This will not change", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1148, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "68cf710f-755c-40ea-98b3-1bd0c3ed7172": {"__data__": {"id_": "68cf710f-755c-40ea-98b3-1bd0c3ed7172", "embedding": null, "metadata": {"page_label": "83", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "50db8e63-e50a-4394-9378-ab9e93882b5a", "node_type": "4", "metadata": {"page_label": "83", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d80417c1f4bb3374322dbacb6eea1aa23e5ddb96dfa5113341b06d2feeae0d5d", "class_name": "RelatedNodeInfo"}}, "text": "the cir cuit behavior since the two NOT gates will not alter\nthe output of the original signal (e.g., \n  = m).\nFIGURE 2.9 An OR -AND cir cuit with two NOT gates added at both\nends of the wir es used for inter mediate signals m and n.\n3. Replace each OR -NOT pair with a NOR gate as shown\nin Fig. 2.10 ; a NOR gate is equivalent to an OR gate\nfollowed by a NOT gate.\nFIGURE 2.10  POS cir cuit with added bubbles.\nThe only gate symbol not yet converted to a NOR gate is the\nAND gate with inverted inputs (shown with bubble s). The gate\nsymbol is logically equivalent to NOR accor ding to DeMor gan\u2019s\nTheor em 2, \n4. Replace the AND gate with inverted inputs with a NOR\ngate as shown in Fig. 2.11 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 695, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "30cc1e12-6df4-4705-9a4e-6034499e38f1": {"__data__": {"id_": "30cc1e12-6df4-4705-9a4e-6034499e38f1", "embedding": null, "metadata": {"page_label": "84", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b603ea07-9f11-4e53-ab1a-b1b752129b96", "node_type": "4", "metadata": {"page_label": "84", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "129acca8ff06652a14bbbf760e79106b29e3ff48280e190cc23964dffaa7f6a5", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.11  NOR -only implementation of the POS e xpression.\nThe following Boolean algebra alternatively expresses a POS\nexpression with NOR -only operators:\nThe logic ter ms \n  and \n  represent NOR terms, which\nare NORed to produce f. In summary, the SOP and POS\nexpressions of a function are equivalent, and each would\nproduce the same truth table. Therefore, use SOP expressions\nfor NAND- only and POS e xpressions for NOR -only cir cuits.\n\u00a0\n2.3 Canonical Expression\nAn expression is called canonical if each logic term contains all\nof the input variables either in their complemented or\nuncomplemented forms. For example, a two-variable f = \n  +\nxy is a canonical SOP expression. Both of the product terms in\nthe expressio n include both variables x and y either in their\ncomplemented or uncomplemented forms. Simil arly, a two-\nvariable f = (x + \n) (\n + y) is an example of a canonical POS\nexpression. A noncanonical expression contains one or more\nlogic terms that do not include all the variables. For example, a\nthree-variable SOP e xpression\nis a noncanonical expression since the logic term x\n is missing\nvariables z and \n  and \n z is missing variables y and \n . A given\nnoncanonical SOP or POS expression may or may not be", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1234, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cf957e74-7308-4676-a58d-d0cad7c38724": {"__data__": {"id_": "cf957e74-7308-4676-a58d-d0cad7c38724", "embedding": null, "metadata": {"page_label": "85", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "97c798e6-3503-4a34-be16-b7bea0112ada", "node_type": "4", "metadata": {"page_label": "85", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "bfd3f59d19893dc3080e94784d0181f4c20319afc8927fa847174e098b242ec8", "class_name": "RelatedNodeInfo"}}, "text": "minimal; however, it can be \ufb01rst converted to its equivalent\ncanonical expression and then minimized using the\nminimization techniques pr esented below .\n2.3.1 Min-Terms\nThe input values corresponding to product terms are called the\nmin-ter ms. For example, consider the canonical SOP expression\nf = \n  + xy with two product terms \n  and x y. The two product\nterms of f correspond to input values x = 0 and y = 0 or (00)2 =\n0 if x and y are concatenated, and x = 1 and y = 1 or (11)2 = 3.\nThe 2 and 3 are called the min-ter ms of f and are written as\nfollows using  the Greek symbol \u03a3 (sigma) for sum to indicate an\nSOP:\nf(x, y) = \u03a3(2, 3)\nUsing min-ter ms, it is a straightforwar d process to write the\ncanonical SOP expression  for an output. If the min-ter ms are\ngiven in decimal number s, they are \ufb01rst converted to binary\nand then the product terms are deter mined from the binary\nnumbers, as illustrated her e for an arbitrary function g:\nNote that for an output variable, its truth table, its list of min-\nterms, and its canonical SOP expression are three equivalent\nrepresentations.\n2.3.2 Max-Terms\nLikewise, the input values corresponding to sum-ter ms are\ncalled max- terms. Max-ter ms are also written as integer\nnumbers and identi\ufb01ed by the Greek symbol (pi) for product to", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1285, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3b094a16-4e4c-432c-b393-d75173ab0a22": {"__data__": {"id_": "3b094a16-4e4c-432c-b393-d75173ab0a22", "embedding": null, "metadata": {"page_label": "86", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bdb3d118-c3e5-470b-b90c-b79de6090700", "node_type": "4", "metadata": {"page_label": "86", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "addba1db9bbe5a291be5d21b40e58d01824260f47f21ec3a5efa626503ceb155", "class_name": "RelatedNodeInfo"}}, "text": "indicate a POS. Each max-ter m corresponds to a sum-ter m in\nthe canonical POS e xpression. F or example, the e xpression\ndescribes f in terms of its max-ter ms; f is 0 when its two inputs\nx and y concatenated equal (00)2 = 0 or (01)2 = 1.\nThe max-ter ms of a function f are the min-ter ms of its\ncomplement function \n  and vice versa. The following steps 1 to\n3 illustrate how to deter mine the canonical POS expression of\nan arbitrary function h from its list of max-ter ms. Steps i and ii\nare listed for convenience , and they are used to deter mine the\nSOP e xpression of \n  from its min-ter ms.\n1.\n2.\n3.\ni.\nii.\nSteps 2 and 3, however, may be replaced using the dual\nprinciple (i.e., Method II), as follows:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 711, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab6c115d-7eea-452f-882d-5c60e1f70eeb": {"__data__": {"id_": "ab6c115d-7eea-452f-882d-5c60e1f70eeb", "embedding": null, "metadata": {"page_label": "87", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ed0aa928-2a23-4ac1-a565-84108dc36ab7", "node_type": "4", "metadata": {"page_label": "87", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0872a87be8feba2638ed61c3ae9a5e125752c173a3e1f4c998ca33227496a221", "class_name": "RelatedNodeInfo"}}, "text": "Apply the principle of duality to the SOP e xpression of \n  to\ndeter mine its dual e xpression \n then complement each\nof the variables in the dual e xpression to obtain the POS\nexpression of h.\nAgain, note that for an output variable, its truth table, its list\nof max-ter ms, and its canonical POS expression are three\nequivalent r epresentations.\n\u00a0\n2.4 Logic Minimization\nAs was discussed in Chap. 1, it is important that a minimum\nnumber of gates and each gate with a minimum number of\ninputs are used to generate an output signal. A minimal SOP or\nPOS expression contains the least number of terms, and each\nterm has the least minimum number of variables. Figure 2.12\nillustrates the advantage of logic minimization. In both cases,\ncircuit imple mentations of the canonical expressions requir e\nmore gates and, ther efore, mor e transistors and wir es.\nFIGURE 2.12  SOP and POS minimal vs. canonical e xpressions.\nIn Fig. 2.12, the circuit for the SOP canonical expression\nwould requir e four 3-input AND gates, three NOT gates, and one", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1039, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1359510-8c38-4db6-a819-3a62990ed84b": {"__data__": {"id_": "d1359510-8c38-4db6-a819-3a62990ed84b", "embedding": null, "metadata": {"page_label": "88", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4d59de42-2c2b-408a-a0de-5c2fe3af7beb", "node_type": "4", "metadata": {"page_label": "88", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3b2f343b4ef45e90efbdbac6d05a63f43a68db069316364a793daf6909041942", "class_name": "RelatedNodeInfo"}}, "text": "4-input OR gate, or a total of eight NAND gates, including the\nNOTs, each with 4 or fewer inputs. On the other hand, its\nequivalent minimal SOP expression would requir e only two 2-\ninput AND gates, one NOT gate, and one 2-input OR gate, or a\ntotal of four NAND gates, each with fewer inputs. Likewise, the\ncircuit for the canonical POS expression of f would requir e a\ntotal of eight NOR gates versus \ufb01ve NOR gates, each with fewer\ninputs.\nAs was discussed earlier, canonical SOP or POS expressions\nare easily derived from min-ter ms or max-ter ms, respectively .\nThe min-/max-ter ms are read directly from truth tables. It is\nalso equally straightforwa rd to create a truth table from a given\ncanonical SOP or POS expression; however, this is not\nrecommended and not necessary .\nDeter mining min-ter ms or max-ter ms from a given\nnoncanonical expression is not a straightforwar d process. One\noption, which is not recommended, is to evaluate the\nexpression for every input signal condition. For example, to\nconstruct the truth table for f = y(\n + xz), one has to evaluate\nthe function for all the possible 3-bit values that make up the\nbit values of inputs x, y, and z. For example, x = 0, y = 1, and z\n= 0 yields f = 1; x = 1, y = 1, and z = 0 yields f = 0; and so on\nto construct the entire truth table. The list of min-ter ms or max-\nterms of f is then r ead fr om the table.\nAn alternative option, which is recommended, is to use\nBoolean algebra and convert a noncanonical expression to its\ncanonical expression and then directly convert the canonical\nexpression to its list of min-ter ms, if the expression is an SOP,\nor its list of max-ter ms, if the expression is a POS. This is done\nby reversing the minimization steps, as illustrated her e.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1751, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5829a833-de40-4aa1-bb48-fa6220624f35": {"__data__": {"id_": "5829a833-de40-4aa1-bb48-fa6220624f35", "embedding": null, "metadata": {"page_label": "89", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2314cbb0-f279-4d22-a1a6-5f6d1d1aa1b0", "node_type": "4", "metadata": {"page_label": "89", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "439b5c904dd6b508219e58fbc2c5f1283ab46a1d682fd02d55c6fdbc52e0b390", "class_name": "RelatedNodeInfo"}}, "text": "Use the following steps to convert a noncanonica l POS of a\nfunction f to its cor responding canonical e xpression:\n1. Convert the noncanonical POS of f to its noncanonical\nSOP of \n  using \n2. Deter mine the canonical SOP of \n  from its\nnoncanonical e xpression.\n3. Convert the canonical SOP of \n  to its cor responding\ncanonical POS of f using \n2.4.1 Karnaugh Map\nA Karnaugh map (K-map) is a graphical technique used to\nidentif y and eliminate redundancies in canonical expressions\nand obtain one or more equivalent minimal expressions. Two\nmin-ter ms or max-ter ms with binary representatio ns that di\ufb00er\nin only one bit can be simpli\ufb01ed to one less variable. For\nexample, with three variables x, y, and z, two min-ter ms 2 =\n(010)2 and 3 = (011)2 di\ufb00er in the bit correspon ding to variable\nz. The ter ms minimizes to \n y as illustrated her e:\nLikewise, two max-ter ms with binary representa tions that\ndi\ufb00er in only one bit simplif y to a logic term with one less\nvariable. Consider the following canonical POS expression\nconsisting of two max-ter ms 2 = (010)2 and 3 = (011)2 that\ndi\ufb00er in only one bit:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1108, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6cacef4e-e7d0-4741-ac60-1e39ba5a4525": {"__data__": {"id_": "6cacef4e-e7d0-4741-ac60-1e39ba5a4525", "embedding": null, "metadata": {"page_label": "90", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eb0ba338-007d-4c5a-bac5-e4502d44b1be", "node_type": "4", "metadata": {"page_label": "90", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f9f859c9995050432d3b8480329eac7d5de8254c3fdb3fa4dcad5755981bac6b", "class_name": "RelatedNodeInfo"}}, "text": "A K-map organizes the min-/max-ter ms in such a way that\nany two terms with binary representations that di\ufb00er in only\none bit become physically  adjacent in the map, making it easier\nto identify such terms. For example, with three variables x, y,\nand z, the eight possible min-/max-ter ms are organized as\neither a 2 \u00d7 4 or 4 \u00d7 2 map, as shown in Fig. 2.13(a) and Fig.\n2.13(b), respectively . Each cell in a K-map represents a\nmin-/max-ter m, and is identi\ufb01ed from the row and column\nlabels in binary . For example, row 0 and column 00 identif y the\ncell for the min-/max-ter m 0; row 0 and column 01 identif y the\nmin-/max-ter m 1; etc.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 637, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "313831b9-38b8-4617-ab66-029f5454533a": {"__data__": {"id_": "313831b9-38b8-4617-ab66-029f5454533a", "embedding": null, "metadata": {"page_label": "91", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c4ba1e8b-3eeb-4f81-8996-b36b1c8b2abb", "node_type": "4", "metadata": {"page_label": "91", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "158286367583cfb7cbb3de9095a16e3976f83c7e6507eb516983034f6f07b4a7", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.13  A thr ee-variable K -map or ganization; each cell\nrepresents a min- or max-ter m; choose either or ganization ( a)\nor (b).\nNote that in the \ufb01gure, the adjacent rows and columns are\nlabeled with binary numbers that di\ufb00er in only one bit. The two\ncolumns with binary labels 00 and 10 in Fig. 2.13(a) are also\nconsider ed adjacent; so are rows with labels 00 and 10 in Fig.\n2.13(b). This makes it easier to visually identif y two min-/max-\nterms with binary representations that di\ufb00er in only one bit.\nEach term is adjacent to its physically east, west, north, or\nsouth term. For example , in Fig. 2.13(a), term 0 = (000)2 is\nadjacent to its west term 2 = (010)2, to its east term 1 =\n(001)2, and to its south term 4 = (100)2. Term (000)2 has 1-bit\ndi\ufb00er ence with (001)2, (010)2, and (100)2. Figure 2.14  illustrates\na four-variabl e K-map. Term 0, for example, is adjacent to terms\n1 (east), 2 (west), 4 (south), and 8 (north).\nFIGURE 2.14  A four -variable K -map; cells ar e number ed by their\ncorresponding min-/max-ter ms.\nThe K-map for function g(x, y, z) = \u03a3(2, 6, 7) is shown here\nwith 1 in each corresponding min-ter m cell. The remaining cells\ncorrespond to max-ter ms and ar e left blank.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1210, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc1df260-7248-4d17-b0c0-199aedb080df": {"__data__": {"id_": "bc1df260-7248-4d17-b0c0-199aedb080df", "embedding": null, "metadata": {"page_label": "92", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "287fc8aa-839a-4a17-84c2-c8177a2b15e0", "node_type": "4", "metadata": {"page_label": "92", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8cc1e461255531191df0b17cf66c049fd9d7a01922da81637680a5efc25018aa", "class_name": "RelatedNodeInfo"}}, "text": "In the K-map, min-ter m 2 = (010)2 is adjacent to min-ter m 6\n= (110)2 and min-ter m 6 is adjacent to min-ter m 7 = (111)2.\nMin-ter m 2, however, is not adjacent to min-ter m 7 since binary\n(010)2 and (111)2 di\ufb00er in two bits. A K-map for POS g(x, y, z) =\nII(0, 1, 3, 4, 5) is shown her e:\n2.4.2 K-Map Minimization\nA K-map always produces  a minimal expression. A function may\nhave more than one minimal expression, yet they are\nequivalent. Since any pair of adjacent terms reduces to a\nsimpli\ufb01ed expression with one less variable, multiple adjacent\nterms can result in an even simpler logic term with fewer\nvariables. This is illustrated in Fig. 2.15 using a K-map with four\nmin-ter ms: 2, 3, 6, and 7.\nFIGURE 2.15  A K-map with four min-ter ms: 2, 3, 6, and 7.\nThe min-ter m (010)2 is adjacent  to min-ter m (011)2 and\n(110)2, the term (011)2 is adjacent to (010)2 and (111)2, and\nthe min-ter m (110)2 is adjacent to (010)2 and (111)2. Using\nBoolean algebra, these min-ter ms simplif y to y as follows:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1004, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2656504e-b261-450f-a88e-2fa91d1f01e1": {"__data__": {"id_": "2656504e-b261-450f-a88e-2fa91d1f01e1", "embedding": null, "metadata": {"page_label": "93", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a21a626d-d435-4528-b4c0-20264d82c6fc", "node_type": "4", "metadata": {"page_label": "93", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "28bed099de6c1c26062a266a2d97eb80dc1344207b3d31382496c201ae2b6de1", "class_name": "RelatedNodeInfo"}}, "text": "The following steps use Eq. (2.6)  and Fig. 2.15  as an example\nto illustrate the K -map minimization technique:\n1. Compar e the two column labels 11 and 10 that ar e\nassociated with the gr oup of min-ter ms (010)2, (011)2,\n(110)2, and (111)2. The bit label associated with variable z\nchanges, while the bit label associated with variable y\nremains unchanged; thus, z should be eliminated.\n(Algebraically, two smaller ter ms \ny and xy are factor ed out\nto eliminate z.)\n2. Compar e the two r ow labels. Signal x changes, while\nthe bit label associated with y (the r emaining variable)\nremains unchanged; thus, x should be eliminated.\n(Algebraically, y is factor ed out to eliminate x.)\n3. Write only the signals that wer e not deleted (only y in\nthis case) as the r esult of the simpli\ufb01cation in steps 1 and\n2, but write the signal either as y if its bit label is 1, or as\ncomplement \n  if its bit label is 0. This pr oduces y as the\nminimal e xpression for this gr oup of min-ter ms, which was\nalso illustrated in Eq. (2.6)  using Boolean algebra.\nUsing K-maps eliminates the need to apply Boolean algebra\nto reduce a canonical to its equivalent minimal expression.\nConsider the following K-map with \ufb01ve min-ter ms: 1, 2, 3, 6,\nand 7.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1235, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ea22db90-0651-44e0-b3f0-3f317eeee65b": {"__data__": {"id_": "ea22db90-0651-44e0-b3f0-3f317eeee65b", "embedding": null, "metadata": {"page_label": "94", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "56f6a72f-e0e3-47c9-a9da-4c11978d3e41", "node_type": "4", "metadata": {"page_label": "94", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "26f308ab9c273ee0ef889062df7dfa1bbbe42f87b35f863210ef6d576a1ffb41", "class_name": "RelatedNodeInfo"}}, "text": "It was just illustrated that the group of adjacent min-ter ms 2,\n3, 6, and 7 reduces to y. For the min-term 1 = (001)2, the only\nadjacent min-ter m is 3 = (011)2. By comparing the colum ns 01\nand 11, y changes and thus is eliminated from the resultant\nlogic term \ny, which corresponds to x = 0 and z = 1. Therefore,\nthe \ufb01nal minimal e xpression for min-ter ms 1, 2, 3, 6, and 7 is\nNote that min-term 3 was used twice, once in the grouping of\nmin-ter ms 2, 3, 6, and 7, and again in the grouping of min-\nterms 1 and 3. This redun dant use of a term in the grouping of\nmin-ter ms is based on the Boolean algebra rule x = x + x (or\nx.x = x  for max-ter ms). The rules  state that repeated terms in a\nlogic expression do not change its truth table, but they do help\ncreate larger groups of adjacent terms that eliminate more\nvariables in the \ufb01nal simpli\ufb01ed expression. The following\nBoolean algebra illustrates this point:\nGiven a canonical SOP e xpression \nrepeat the logic term \nyz associated with min-ter m 3 once to\nyield\nregroup the ter ms using the adjacency pr operty :\nminimize each group to yield the \ufb01nal minimal SOP\nexpression y + \nz.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1141, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ec211bd9-47d6-4e71-a0f0-06e027cbb023": {"__data__": {"id_": "ec211bd9-47d6-4e71-a0f0-06e027cbb023", "embedding": null, "metadata": {"page_label": "95", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a180203-d19e-4d3e-bc77-d7d09d2ab466", "node_type": "4", "metadata": {"page_label": "95", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "132e38fcea3c45f428426d2d486db60b3a09055dfcccf41d83f1bdd5bcb433d8", "class_name": "RelatedNodeInfo"}}, "text": "Without a K-map, it is di\ufb03cult to know which terms must be\nrepeated and how many times. A minimal expression is derived\nby making sure that each grouping of the terms in the K-map\ncontains a maximum number of adjacent terms. The K-map\nminimization rules ar e summarized in the following section.\nK-Map Minimization Rules\n1. Min-/max-ter ms that di\ufb00er in only one bit ar e\nadjacent, and they ar e said to for m an implicant . A K-\nmap is assumed to wrap ar ound on both sides; for\nexample, column 00 is also adjacent to column 10.\n2. A set of implicants may be combined to for m a lar ge\ngroup called a prime implicant . The number of ter ms in\neach gr oup must be powers of 2; that is, a gr oup with\none ter m, two ter ms, four ter ms, or eight ter ms.\n3. Each prime implicant must contain at least a single\nterm that doesn\u2019t belong to any other prime implicant\n(i.e., no r edundant gr oups). A prime implicant that\nsatis\ufb01es this rule is called an essential prime\nimplicant  (EPI). The \ufb01nal minimal e xpression must\ninclude the logic ter m for all the EPIs.\n4. All ter ms must be gr ouped.\nExample 2.2.  Minimize f (x, y, z ) = \u03a3(1, 3, 6, 7).\nSolution : A K-map of f:\nThe four min-ter ms 1, 3, 6, and 7 form not one but three prime implicants as shown\nin the K-map. This is because min-term 1 = (001) 2 and 6 = (110) 2 are adjacent to\nonly one other term in the K-map. The prime implicant associated with min-ter ms 3 =\n(011) 2 and 7 = (111) 2 is not an EPI. For the prime implicant associated with min-\nterms 1 and 3 = (011) 2, the column labels for variable y changes, resulting in logic", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1589, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9ba02970-4214-4f80-87ec-59f4bafdc75c": {"__data__": {"id_": "9ba02970-4214-4f80-87ec-59f4bafdc75c", "embedding": null, "metadata": {"page_label": "96", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b2dd8d90-9fd6-4f28-9b92-6a143da02960", "node_type": "4", "metadata": {"page_label": "96", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8e4507853b98cbabde9db484dd1cc5b46ad6ea3fef972abbaafb283d8e77eeb4", "class_name": "RelatedNodeInfo"}}, "text": "term \ny. For the prime implicant associated with min-ter ms 6 and 7, the column\nlabels change for variable z, thus resulting in logic term xy. The \ufb01nal minimal SOP\nexpression is:\nExample 2.3.  Minimize f (x, y, z ) = \u03a3 (0, 2, 3, 4, 5, 6,).\nSolution:\nBoth the four corner min-ter ms 0, 2, 4, and 6 and the four min-ter ms 0, 1, 2, and 3\non the \ufb01rst row form two EPIs. For the prime implicant associated with the min-ter ms\n0, 1, 2, and 3, labels of both variables y and z change; thus, the term reduces to \n.\nLikewise, for the prime implicant associated with the four corner min-ter ms, labels of\nvariables x and y change, r esulting in \n . The \ufb01nal minimal SOP is:\nExample 2.4.  Minimize f (w, x, y, z ) = \u03a3 (0, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13).\nSolution:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 755, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92618ffb-7a19-4731-a593-98ccaab5d9c0": {"__data__": {"id_": "92618ffb-7a19-4731-a593-98ccaab5d9c0", "embedding": null, "metadata": {"page_label": "97", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5c12f777-c88e-459a-ba8f-5d95f41d6c33", "node_type": "4", "metadata": {"page_label": "97", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "fc7bde454cf7b9dbc9ae9b5b60a2965c82e0e413ef4f62ba2ff6589694d51189", "class_name": "RelatedNodeInfo"}}, "text": "There are \ufb01ve prime implicants listed here with their corresponding list of min-ter ms.\nOnly the prime implicants labeled a, d, and e are EPIs. This is because the prime\nimplicants a, d, and e include the min-terms that are part of prime implicants b, c,\nand f.\nFor prime implicant a, the labels for variables x and z change, resulting in the\nminimal term \ny. For prime implicant d, the labels for variables w and z change,\nresulting in x\n, and for e, the labels for variables w and y change, resulting in \n .\nThe \ufb01nal minimal SOP e xpression is:\nExample 2.5.  Minimize f (w, x, y, z ) = \u03a3 (1, 9, 11, 14, 15).\nSolution:\nThe list of prime implicants is:\n\u00a0\na:\u03a3(1, 9)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 664, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b8b0096-291c-4fd9-b1c1-e01d98633c35": {"__data__": {"id_": "5b8b0096-291c-4fd9-b1c1-e01d98633c35", "embedding": null, "metadata": {"page_label": "98", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "34cbdfc8-3b8c-436c-bee7-75e6fc34bcf0", "node_type": "4", "metadata": {"page_label": "98", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "847bfc5b7a4db30e66159f9044440869765b6f226d292a4213bc7689e3fee742", "class_name": "RelatedNodeInfo"}}, "text": "b:\u03a3(14, 15)\nc:\u03a3(9, 11)\nd\u03a3(11, 15).\n\u00a0\nThe prime implicants a and b and either c or d are EPIs. The EPIs a, b, and c yield the\nfollowing minimal SOP e xpression:\nLikewise, we may instead write an equivalent minimal SOP expression using the EPIs\na, b, and d as follows:\nTwo minimal expressions are equiv alent if they produce the same truth table; that is,\nthe same list of min-/max-ter ms.\nExample 2.6.  Minimize g (w, x, y, z ) = II (1, 9, 11, 14, 15).\nSolution:\nThe prime implicants of a POS expression are deter mined exactly the same way as\nthe prime implicants of an SOP e xpression. However, in this case, 0\u2019s of g in the map,\nwhich are equiva lent to the 1\u2019s of \n, are grouped to deter mine the POS expression of\ng using the technique (\n ) discussed earlier . In this example, similar to\nExample 2.5, the list of SOP prime implicants of \n are \u03a3(1,9) = \n z, \u03a3(14, 15) = wxy,\n\u03a3(9, 11) = w\n z, and \u03a3(11, 15) = wyx. Thus, the list of POS prime implicants of g are:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 965, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c86ea5b5-d3bb-48c1-bd1b-ef56074e5732": {"__data__": {"id_": "c86ea5b5-d3bb-48c1-bd1b-ef56074e5732", "embedding": null, "metadata": {"page_label": "99", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03d63983-1162-4749-becb-db8a5e64cffa", "node_type": "4", "metadata": {"page_label": "99", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c19d2b55559fda2d29d71971371a7af72e55b48b5e577cc090a374926c23bc87", "class_name": "RelatedNodeInfo"}}, "text": "Again, there exist two minimal POS expressions for g: (1) using the EPIs a, b, and c;\nor (2) using the EPIs a, b, and d. Option 2 yields the following POS e xpression:\nExample 2.7.  Minimize f (w, x, y, z) = \u220f (0, 1, 2, 5, 8, 9, 14).\nSolution:\nThe prime implicants ar e:\n\u00a0\na: \u220f (0, 1, 8, 9)\nb: \u220f (0, 2)\nc: \u220f (1, 5)\nd: \u220f (14).\n\u00a0\nThese prime implicants are all essential, and the corresponding minimal POS\nexpression is deter mined as follows:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 441, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e22ed87e-e137-4631-8fcf-adabd5418603": {"__data__": {"id_": "e22ed87e-e137-4631-8fcf-adabd5418603", "embedding": null, "metadata": {"page_label": "100", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9cab7d73-8f63-4689-b548-6bc241b31d3c", "node_type": "4", "metadata": {"page_label": "100", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1c1fdad60c22a5604af82d73c1dde7574dcd518694e47a18ba2aa27c288272c9", "class_name": "RelatedNodeInfo"}}, "text": "a: Labels for variables w and z change, r esulting in ( x +\nz).\nb: Labels for variable y change, r esulting in ( w + x + z).\nc: Labels for variable x change, r esulting in ( w + y + \n).\nd: The implicant consists of only one ter m, resulting in (\n + \n + \n + z).\n\u00a0\nThe \ufb01nal minimal e xpression is:\nDon\u2019t-Cares\nOccasionally, an output may be de\ufb01ned only for a subset of\ninput conditions, and for the remaining input conditions, the\ninput is unde\ufb01ned. For example, consider a 7-segment display\nunit (7SDU) and its converter module in Fig. 2.16. Suppose the\nconverter is designed to display binary coded decimal (BCD)\nnumbers 0 to 9. Given a 4-bit input between 0 = (0000)2 and 9\n= (1001)2, the converter generates seven signals fa through fg:\none signal to turn on each of the seven segments a to g and\ndisplay a cor responding decimal digits 0 to 9.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 848, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f1045b9-3755-47f3-b629-e94e49697ecf": {"__data__": {"id_": "0f1045b9-3755-47f3-b629-e94e49697ecf", "embedding": null, "metadata": {"page_label": "101", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5780f2a4-8056-4d6f-a9f7-a5a85a35e01a", "node_type": "4", "metadata": {"page_label": "101", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "34c4c1c7cb9b9bddabda64ef92dd79d3956ef5fd62f0306aa8d565ca9ed4800a", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.16  A 7-segment display unit and converter .\nFor example,  to display 0, all seven segments except g must\nbe turned on; thus, all signals except fg need to be 1 (assuming\nactive-high outputs). To display 9, all segments but \ufb00 must be\nturned on; thus, all but \ufb00 must be 1. A BCD-to -7SD U converter\nis expected to generate correct values for signals fa to fg when\nits 4-bit input is between 0 and 9. For inputs 10 to 15, the\noutputs are unde\ufb01ned and can be consider ed don\u2019t-car es,\nwhich would be mark ed as \u201cd\u201d in the truth table.\nA don\u2019t-car e min-/max-ter m is interpr eted as a \u201cwild card\u201d\u2014\neither as 0 or 1 in the K-map as needed. Thus, it helps eliminate\nvariables and simplif y the \ufb01nal expression. Consider an\nexpression f (w, x, y, z) = \u03a3 (1, 9, 14) + \u220fd (3, 7, 11) wher e d is\nused to indicate the list of min-ter ms for which f is don\u2019t-car e.\nLikewise, symbol IId is used to indicate a list of max-ter ms for\nwhich a function is don\u2019t-car e. As illustrated next, one of the\nEPIs includes two don\u2019t-car es. Only the don\u2019t-car es that help\nreduce the expression are used. The min-ter ms 3 and 11 as\ndon\u2019t-car es ar e used with min-ter ms 1 and 9 to generate the EPI\nz. Min-t erm 7, also a don\u2019t-care, is not needed and therefore\nnot used. The \ufb01nal minimal SOP expression reduces to \n.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1303, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad3b5be2-3cca-4a5f-9128-91471dece4d2": {"__data__": {"id_": "ad3b5be2-3cca-4a5f-9128-91471dece4d2", "embedding": null, "metadata": {"page_label": "102", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "17783aad-177a-481b-836b-3e69ed01b2ce", "node_type": "4", "metadata": {"page_label": "102", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b102ca29cc9a19ee3597e78f1fafc8ab14db3bbd5610b53b068191de3cfd2a26", "class_name": "RelatedNodeInfo"}}, "text": "2.5 Logic Minimization Algorithm\nA K-map, being a graphical method, is only suitable for a small\nnumber of variables, such as four. For more than four variables,\nan algorithmic method that was developed in the mid-1950s\nand known as the Quine-McClusk ey algorith m is more\nappropriate. The algorithm \ufb01nds a minimal logic expression\nusing steps similar to those used with K-maps. The min-ter ms\nare grouped into di\ufb00er ent sets, wher e each set contains only\nthe min-ter ms that have a speci\ufb01c number of 1\u2019s in their binary\nrepresentation. Consider the expression f (w, x, y, z) = \u03a3 (0, 2,\n3, 4, 5, 6, 7, 8, 10, 12, 13) from Example 2.4. In binary, the min-\nterms are 0000, 0010, 0011, 0100, 0101, 0110, 0111, 1000,\n1010, 1100, and 1101. They can be grouped into four sets as\nfollows:\nOne pair at a time, one min-ter m from Set 1 with one term\nfrom Set 2, are compar ed. The single bit change in any pair\nindicates an implicant. The changing bit is replaced by a dash\n(\u2013) indicating the omission of the cor responding variable.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1025, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "159a8653-7d7c-49d4-8d15-de017e0a5e13": {"__data__": {"id_": "159a8653-7d7c-49d4-8d15-de017e0a5e13", "embedding": null, "metadata": {"page_label": "103", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "759fc5b5-a0d5-4d23-9d7b-25cac1fad2d4", "node_type": "4", "metadata": {"page_label": "103", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "739276283dddebcb5fe450b37deac253a5b662a8ae9eea1edde86d06d5bd2d31", "class_name": "RelatedNodeInfo"}}, "text": "For example, min-ter m 0000 from Set 1 is compar ed with\n0010 from Set 2 to gene rate the implicant 00\u20130 with signal y\nomitted. Min-ter m 0000 is again compar ed with min-ter m 0100\nto generate the implicant 0\u201300 with variable x omitted, and so\non. The same process (one pair at a time) is applied to the min-\nterms from Set 2 with those of Set 3 and Set 3 with those of Set\n4 to generate the \ufb01rst set of implicants for the output. The\ninitial Sets 1 to 4 are shown as Sets I.1 to I.4 under column I in\nTable 2.4 .\nThe list of implicants gene rated using the terms in Sets I.1 to\nI.4 is shown as Sets II.1 to II.3 under column II in Table 2.4 . Next\nto each min-ter m in Sets I.1 to I.4, an \u201cx\u201d is place d if the min-\nterm contrib utes to an implicant in column II; otherwise, the\nterm is mark ed by an asterisk (*), identif ying a prime implicant\n(none exists in this case) . Once the implicants of column II are\ngenerated, the process repeats; one pair at a time, one\nimplicant from Set II.1 with one implicant from Set II.2 is\ncompar ed. In this case, any dashes between each pair of the\nimplicants must line up.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1115, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e78f2f7d-0a7f-4d22-80fa-6542e91b8a7c": {"__data__": {"id_": "e78f2f7d-0a7f-4d22-80fa-6542e91b8a7c", "embedding": null, "metadata": {"page_label": "104", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "52d6fbd6-af2b-4e73-844a-3b2eaa1646ab", "node_type": "4", "metadata": {"page_label": "104", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "576ad86685d97ad71b384f0e9f5bb5b48fca07e946498d57748352b4729e74a2", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  2.4 List of All Prime Implicants (Mark ed *) Generated from Min-ter ms 0, 2,\n3, 4, 5, 6, 7, 8, 10, 12, and 13\nFor example, implicant 00\u20130 from Set II.1 is comp ared with\nimplicant 10\u20130 from Set II.2 to generate the implicant \u20130\u20130. The\ngenerated implicants are shown in the table as Sets III.1 and\nIII.2 in colum n III. Again, an implicant pair is mark ed by an \u201cx\u201d\nin column II if it contribut es to the list of implicants for the next", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 442, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f855f427-b64a-4e1d-968d-a7f278c15474": {"__data__": {"id_": "f855f427-b64a-4e1d-968d-a7f278c15474", "embedding": null, "metadata": {"page_label": "105", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b5a8ff18-37b9-43df-b966-875d76f0aeae", "node_type": "4", "metadata": {"page_label": "105", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2bdaf10097436f654578d22fb001d4a070e91b0c819bcc0b8471a0c6a3ff70b5", "class_name": "RelatedNodeInfo"}}, "text": "cycle (column III); otherw ise, it is mark ed by an asterisk (*)\u2014\nagain, none exist in this case. The process repea ts using the\nimplicants listed in column III, but this time,  no further\nprocessing is possible because none of the implicants from Set\nIII.1 when compar ed with those of Set III.2 generates new\nimplicants; thus, all the implicants in Sets III.2 and III.3 are\nmark ed with asterisks and are listed in Fig. 2.17  along with their\ncorresponding logic ter ms.\nFIGURE 2.17  The list of prime implicants obtained fr om Table\n2.4.\nThe next step in the process is to use a minimum-set\nalgorithm to select EPIs from the list of prime implicants a\nthrough f. Figure 2.17  is an organiz ation of the prime implicants\nand their corresponding min-ter ms. An \u201cx\u201d is placed in each cell\nin the table when a prime implicant covers a min-ter m. For\nexample, the prime implicant 0\u2013\u20130 with two dashes covers min-\nterms 0 = (0000)2, 2 = (0010)2, 4 = (0100)2, and 6 = (0110)2,\nand thus these cells are mark ed with an \u201cx\u201d in row 1, as\nillustrated in the table.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1056, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "32563394-d758-4b84-9946-ad06865d3c3d": {"__data__": {"id_": "32563394-d758-4b84-9946-ad06865d3c3d", "embedding": null, "metadata": {"page_label": "106", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "045dd6ae-3c3c-4071-9799-e368813da91c", "node_type": "4", "metadata": {"page_label": "106", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3967fdbda5c82669920c9f77730083e0285523f078b69bd9c9df760be84a703b", "class_name": "RelatedNodeInfo"}}, "text": "The minimum-set algorithm is also an iterative process and\nstarts by \ufb01rst selecting a prime implicant with only a single \u201cx\u201d\nin any one column, which  always identi\ufb01es an EPI. In this case,\nthe columns  associated with min-ter ms 3, 10, and 13 each\ncontain only a single \u201cx\u201d; these are bolded and underlined in\nthe table.\nSuppose the min-ter ms are processed from left to right in\nTable 2.5. During iteration 1, the column associated with min-\nterm 3 contains only a single \u201cx,\u201d and thus the corresponding\nprime implicant 0\u20131\u2013 is selected as an EPI because it is the only\none covering min-ter m 3. It also covers min-ter ms 2, 3, 6, and\n7, and therefore, the associated columns and the row are\nmark ed deleted (D), as illustrated in the table. This e\ufb00ectively\nreduces the size of the table for the next iteration . In iteration\n2, the prime implicant \u20130\u20130 that corresponds to a single \u201cx\u201d in\nthe column associated with min-ter m 10 is selected as the next\nEPI. Thus, the columns 0, 8, and 10 and row 2 are mark ed D.\nFinally, in iteration 3, the prime implicant \u201310\u2013 associated with\nmin-ter m 13 is selected  as the next EPI, which results in\ndeleting all of the remaini ng columns in the table, as well as the\nrow cor responding to EPI = \u201310\u2013.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1244, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6dcb63b-8da1-4631-b0a5-e2bcabbe6264": {"__data__": {"id_": "e6dcb63b-8da1-4631-b0a5-e2bcabbe6264", "embedding": null, "metadata": {"page_label": "107", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "afe4159b-5fd8-4f1d-9e3d-45ca57f060c7", "node_type": "4", "metadata": {"page_label": "107", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9d7ae0537eebcc29bd65326219dad4c7e825bc5e12859e66f1bed9bf71114b59", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  2.5 Illustrating the Minimum-Set Algorithms Using the Prime Implicants\nObtained fr om Table 2.4\nThe algorithm ends when  all the columns associated with the\nmin-ter ms are deleted. In this case, the algorithm stops after\nthree iterations and produces three EPIs, \u20130\u20130, 0\u20131\u2013, and \u201310\u2013\nassociated with the three rows mark ed D under the heading\n\u201cIteration \u201d. The EPIs generate the minimal SOP expression \n  + \ny + x\n, which was also deter mined earlier in Example 2.5\nusing a K -map.\nIf the minimum-set algorithm deter mines that there are no\ncolumns with a single \u201cx\u201d in the table, the follow ing rules are\nused to select the ne xt prime implicant candidate:\n1. Identif y the columns with the least number of \u201cx\u201d\nmarkings and then select the cor responding prime\nimplicants as candidates.\n2. From the list of prime implicants in step 1, select those\nprime implicants that cover the lar gest number of the\nremaining min-ter ms (e xcluding columns that ar e mark ed\nD).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 973, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e157cab0-442f-4fa4-911b-dda14bd86d03": {"__data__": {"id_": "e157cab0-442f-4fa4-911b-dda14bd86d03", "embedding": null, "metadata": {"page_label": "108", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "686136bb-c390-4921-93b3-bbe9a150c506", "node_type": "4", "metadata": {"page_label": "108", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "ae15505d01993152de5cd0ab7f5f1492a69d2c4b71b5c13d314409e4dbc4d88e", "class_name": "RelatedNodeInfo"}}, "text": "3. If multiple prime implicants ar e obtained in step 2,\nchoose the one that has the lar gest number of dashes; the\ncorresponding logic ter m would have fewer variables.\n4. If ther e is mor e than one prime implicant satisf ying\nstep 3, then ther e are two or mor e equivalent minimal\nexpressions.\nThe algorithm for obtaining a minimum POS expression is\nsimilar, except that max-ter ms are used in Table 2.4 and Table\n2.5 instead of min-ter ms.\nTypically, if a circuit has multiple outputs, a minimal\nexpression for each output is not deter mined independently .\nInstead, the minimization  goal would be to select those prime\nimplicants that are common among the di\ufb00er ent expressions in\norder to minimize the total number of gates  needed to\nimplement all the expressions as a single circuit. Output signal\nfrom some gates may be shared and connected as inputs to\nmore than one gate. Espresso  minimization software [1] does\nexactly that when there are two or more expressions to\nminimize at the same time. CAD tools for logic design typically\ninclude this and other minimization sof tware.\n2.5.1 Minimization Software\nExample 2.9 illustrates the format of Espresso\u2019s input and\noutput \ufb01les using the min-terms of f (w, x, y, z) = \u03a3 (0, 2, 3, 4,\n5, 6, 7, 8, 10, 12, 13). A dot (.) in the \ufb01rst column indicates a\nparameter . For example, \u201c.i 4\u201d indicates the number of inputs\u2014\nfour in this case\u2014and \u201c.o 1\u201d indicates the number of output bits\n\u20141 in this case. The label \u201c.ilb w x y z\u201d lists input variables\u2014\nfour in this case; \u201c.ob f\u201d lists output variables\u2014one in this case;\nand \u201c.e\u201d indicates the end of the input \ufb01le. The symbol\n\u201c#\u201dindicates a comment line. In the output \ufb01le, \u201c.p\u201d indicates\nthe number of EPIs.\nExample 2.8.  Use Espresso to minimize the function f(w, x, y, z ) = \u03a3 (0, 2, 3, 4, 5, 6,\n7, 8, 10, 12, 13).\nSolution:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1831, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fd87f98d-20bd-4157-a846-6cb16e9ca01c": {"__data__": {"id_": "fd87f98d-20bd-4157-a846-6cb16e9ca01c", "embedding": null, "metadata": {"page_label": "109", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2cae75c1-8a5e-4465-a08b-cc4cb4c7213c", "node_type": "4", "metadata": {"page_label": "109", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "61207f9bde5807ff939ca7ede03d1910602b2df4d6d708cd54f1b0693785493a", "class_name": "RelatedNodeInfo"}}, "text": "(a) Input \ufb01le\n(b) Output \ufb01le; all comment lines ar e printed \ufb01rst", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 65, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e764014f-e8ec-4bb6-8a3e-fd896555ce40": {"__data__": {"id_": "e764014f-e8ec-4bb6-8a3e-fd896555ce40", "embedding": null, "metadata": {"page_label": "110", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdc47546-6751-4150-a470-279ee05dcf12", "node_type": "4", "metadata": {"page_label": "110", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2a2242327c43886e10efe563ee2f1aef952288e2a74f062be80bbc984b981532", "class_name": "RelatedNodeInfo"}}, "text": "The output \ufb01le lists three EPIs: \u201310\u2013, \u20130\u20130, and 0\u20131\u2013. These EPIs are the same as\nthose obtained earlier manually, as illustrated using Table 2.4  and Table 2.5 .\nThe following Espresso output displays the EPIs for two\noutput signals f and g. The \u201c11,\u201d \u201c11,\u201d and \u201c10\u201d printed next to\nthe EPIs indicate that all the three EPIs belong to f, and the \ufb01rst\ntwo (\u201310\u2013 and \u20130\u20130) ar e shar ed and also belong to g.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 408, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d167988d-f703-4a86-8d72-622e14983f80": {"__data__": {"id_": "d167988d-f703-4a86-8d72-622e14983f80", "embedding": null, "metadata": {"page_label": "111", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9f68c38f-4202-44db-9729-9be14a208ea4", "node_type": "4", "metadata": {"page_label": "111", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e5b6969294edf35b81ac0c925b58ff0f3a67db8939b06a8707f1a823841f2857", "class_name": "RelatedNodeInfo"}}, "text": "Table 2.6 shows the results of the minimization algorithm\napplied to expression f (w, x, y, z) = \u03a3 (1, 9, 14) + \u03a3d (3, 7, 11),\nwhich was also minimized earlier in Sec. 2.4.2 . In column I,\neach of the don\u2019t-car e terms is mark ed with \u201cd.\u201d The\nminimization algorithm discussed earlier is the same, except\nthat only one min-ter m in each pair can be a don\u2019t-car e; two\ndon\u2019t-car e terms are never compar ed. For example, min-ter m\n(0011)2 in Set I.2 and min-ter m (0111)2 in Set I.3, both don\u2019t-\ncares, are never paired to generate the unnecessary prime\nimplicant 0\u201311.\nTABLE  2.6 Prime Implicants of f (w, x, y, z) = \u03a3 (1, 9, 14) + \u03a3 d (3, 7, 11)\nThe algorithm produces three prime implicants (marked with\nasterisks), one in each column. Table 2.7 is the organization of\nthe prime implicants obtained in Table 2.6 for the minim um-set\nalgorithm. The prime implicant (1110)2 in Set I.3 is an EPI. From\nthe two remaining prime  implicants \u20130\u20131 and \u2013001 that cover\nboth min-ter ms 1 and 9, \u20130\u20131 is selected because it has more\ndashes than \u2013001. These EPIs were also produced using", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1077, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be8fddbd-5c8b-471f-95c4-eed40d490a3f": {"__data__": {"id_": "be8fddbd-5c8b-471f-95c4-eed40d490a3f", "embedding": null, "metadata": {"page_label": "112", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bf848001-9f7a-4371-b4bb-ad61c06dc90e", "node_type": "4", "metadata": {"page_label": "112", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3d1d0dd3df90bdcba57d6f84af8a906d3de94c9662b7981014a24b0ad5ca4c6c", "class_name": "RelatedNodeInfo"}}, "text": "Espresso in Example 2.9, wher e a dash (\u2013) in the input \ufb01le\nindicates a don\u2019t-car e.\nTABLE  2.7 Illustrating the Minimum-Set Algorithms Using the Prime Implicants\nObtained fr om Table 2.6\nExample 2.9.  Use Espr esso to minimize f (w, x, y, z ) = \u03a3 (1, 9, 14) + \u220f d(3, 7, 11).\n(a) Input \ufb01le\n(b) Output \ufb01le", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 304, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bae3af04-3a67-4baf-870e-4838f6c6e73e": {"__data__": {"id_": "bae3af04-3a67-4baf-870e-4838f6c6e73e", "embedding": null, "metadata": {"page_label": "113", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3b206bfe-1882-403d-addb-a5b990ff713f", "node_type": "4", "metadata": {"page_label": "113", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "6cd4ea054fc4db078fb54fcedf87184a91807003e14de14f86a93f705707fb63", "class_name": "RelatedNodeInfo"}}, "text": "2.6 Circuit Timing Diagram\nWe will start with the timing diagram of a NOT gate befor e we\ndiscuss a circuit\u2019s timing diagram. There is a delay associated\nwith each gate. It is the time requir ed for the gate output to\nchange from logic 0 to logic 1 or vice versa from the time that\none or more of its inputs change. Figure 2.18 illustrates the\ntiming of a NOT gate with 0.1 ns gate delay . As shown in Fig.\n2.18(a), the output  z transitions from 1 to 0 in 0.1 ns from the\ntime that input x transitions from 0 to 1. Likewise, z transitions\nfrom 0 to 1 in 0.1 ns from the time x transitions from 1 to 0. In\nFig. 2.18(a), the signal transitions  are shown to happen\ninstantly . However, in r eality, signals do not change instantly .", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 733, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1dff83e-2a4d-42f8-b96e-8d58b08a9d0d": {"__data__": {"id_": "d1dff83e-2a4d-42f8-b96e-8d58b08a9d0d", "embedding": null, "metadata": {"page_label": "114", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "19ae4b10-0cc5-468a-8b55-19f8a9adb5bf", "node_type": "4", "metadata": {"page_label": "114", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7da7eddfd01e00d8973a76f3198b5b0b79ab7d71a119dc2aeace9e5317ccdfdc", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.18  A NOT gate timing diagram with 0.1-ns delay : (a) a\nsimpli\ufb01ed timing diagram; ( b) a mor e realistic timing diagram.\nA signal\u2019s rise time  is the amount of time that the output\nvoltage associated with logic 0 rises (increases) to that\nassociated with logic 1. Similarly, a signal\u2019s fall time  is the\namount of time requir ed for the output voltage associated with\nlogic 1 to fall (decr ease) to that associated with logic 0. The rise\nand fall times of a gate may not be the same. Figure 2.18(b)\nillustrates a more realisti c timing diagram of a NOT gate with\nthe signal rise and fall times. The midpoints of the rise and fall\ntimes are often used to indicate instant signal transition as\nshown in the \ufb01gur e.\nWith a +5.0 voltage source, any value between 0 and 0.8 V\nat the input is interpr eted as logic 0, and between 2.0 and 5.0 V\nas logic 1. An input voltag e greater than 0.8 and less than 2.0 V\nis consider ed unde\ufb01ned. For logic 1 output, the voltage range is\nbetween 2.4 and 5.0 V, and for logic 0, it is between 0 and 0.4\nV. A lower voltage source (e.g., 1.8 or 1.2 V) is typically used in\nbattery -power ed systems.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1138, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "731f903c-d5a5-4a85-aec8-d60101149e58": {"__data__": {"id_": "731f903c-d5a5-4a85-aec8-d60101149e58", "embedding": null, "metadata": {"page_label": "115", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "47832c1d-c36e-4954-8375-2e61e249ea2a", "node_type": "4", "metadata": {"page_label": "115", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "896112d848d3e91ece1185ec0e146043ee23a6c359245d9052896b9cf39bddb5", "class_name": "RelatedNodeInfo"}}, "text": "Recall that a minimal Boolean expression de\ufb01nes the logic\nrelationship between a circuit\u2019s inputs and its output without\nconsidering gate or wire delays. A circuit\u2019s timing diagram is an\nillustration of the actual changes that happen at the output of\neach gate in the circuit due to gate and wire delays. A timing\ndiagram provides a more realistic view of a circuit behavior\nwhen changes take place  at its inputs. For example, consider\nthe expression f (a, b, c, d) = \u03a3(1, 3, 5, 7, 10, 11, 14, 15) that\nhas the minimal SOP expression f = \n d + ac; note that f does\nnot depend on b. Figure 2.19 shows its equivalent NAND- only\ncircuit with the intermedia te signal, x, and y; the gates are also\nlabeled G1 thr ough G4 for r eference.\nFIGURE 2.19  Circuit for \n d + ac with inter mediate signal names;\nf does not depend on b.\nFigure 2.20 illustrates the timing diagram of the circuit when\nits input changes from concatenated acd = 111 to acd = 011;\nthat is, a changes from 1 to 0. The delay for all the gates is\nassumed to be 0.1 ns, and wire delays are ignor ed. (Wire delays\nare outside the scope of this book.) Note that f = \nd + ac\nproduces f = 1 when input is acd = 111 or acd = 011. Howe ver,\ndue to gate delays, f does not remain at logic 1, as illustrated in\nthe timing diagram, between time = 0.2 ns and 0.3 ns.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1319, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "688fc2af-c370-477c-a81d-c51c8e2fbaff": {"__data__": {"id_": "688fc2af-c370-477c-a81d-c51c8e2fbaff", "embedding": null, "metadata": {"page_label": "116", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "30fddddb-546a-4516-8174-abd16085bf3f", "node_type": "4", "metadata": {"page_label": "116", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5c189aa8f0fe27b61f0e02f27836981325ff89bcaaacab40ba020c357ccce3f4", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.20  A timing diagram for the cir cuit in Fig. 2.19  when\ninput a changes fr om 1 to 0.\nThe change in signal a causes \n  to change to 1 after a 0.1 ns\ndelay at gate G1 from its initial value of 0 to 1 at time-step 1.\nThis change  is shown by an arrow from the time signal a\nchanges to 0 to the time when signal \n  changes to 1. An arrow\nindicates signal dependency . At the same time, signal y also\nchanges from 0 to 1 at time-step 1 after a 0.1 ns delay at gate\nG3. The change in \n at time = 0.1 ns causes signal x to change\nfrom its initial value of 1 to 0 at time-step 2 after a 0.1 ns delay\nat gate G2. This change  is also shown by an arrow from the\ntime \n  changes to 1 and x changes to 0.\nAt time = 0.1 ns when both x and y are at logic 1, f changes\nfrom 1 to 0 af ter a 0.1 ns delay at gate G4. And when x changes", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 829, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1fea8d65-85df-454c-b26e-e9af6fc22b11": {"__data__": {"id_": "1fea8d65-85df-454c-b26e-e9af6fc22b11", "embedding": null, "metadata": {"page_label": "117", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1bfa07d6-dd0b-482f-bc8d-2b71dba2f0d8", "node_type": "4", "metadata": {"page_label": "117", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "beb1c6bd7c5556c3fd5ed90d328478e018625d21bce8ed7453e0f0f1d7886b75", "class_name": "RelatedNodeInfo"}}, "text": "to 0 at time = 0.2 ns, f changes back to 1 af ter a 0.1 ns delay at\ntime = 0.3 ns. Signal f then r emains at 1 ther eafter.\nThe unexpected change in f from 1 to 0 and back to 1 is\ncalled a hazard  or glitch , and is due to gate and wire delays in\nthe circuit (wire delays are ignor ed here). In this case, function f\n= \nd + ac is said to have a 1-hazar d when its input changes\nfrom acd = 111 to acd = 011. An OR-AND (or NOR-only) circuit\nhas a 0-hazar d when its timing diagram shows an unexpected\nchange fr om 0 to 1 and back to 0 when its input changes.\nHazar ds violate the expected behavior of a combinational\ncircuit and must be prevented from a\ufb00ecting the state (i.e.,\nregister contents) of a digital system. In Chap. 4, we will\nintroduce a clock, an alternating 1 0 1 0 1 0 1 0..., signal with a\n\ufb01xed period to contr ol the loading time of a register . In Fig.\n2.20, output f is valid only after 0.3 ns from the time that there\nis a change at the circuit\u2019s input. The clock period is deter mined\nfrom the signal propaga tion delay as well as other delays\ndiscussed in Chaps. 4 and 5.\n2.6.1 Signal Propagation Delay\nTypically, there are sever al signal paths from the inputs to one\nor more outputs of a circuit. For example, output signal f in Fig.\n2.19 is deter mined by signal  paths G1-G2-G4 or G3-G4. The\ntime requir ed for each path to propagate a signal change at its\ninput all the way to the output signal depends on the number\nand size of the gates on the path and wire delay . The delay of\nthe longest path is know n as the circuit\u2019s propagation delay .\nIgnoring wire delay, a circuit\u2019s propagation delay is proportional\nto the number of gates in its longest path. The path G1-G2-G4\nin Fig. 2.19 is the longest path. Thus, the circuit\u2019s propagation\ndelay is pr oportional to thr ee gate delays, or 0.3 ns, as shown in\nFig. 2.20; for simplicity, assume a 0.1 ns gate delay . The 0.3 ns\ndelay is also the minimum time requir ed for the 1-hazar d at\noutput f to disappear and for the circuit to output f = 1, as\nde\ufb01ned by its logic expression when the input to the circuit\nchanges fr om concatenated acd = 111 to acd = 011.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2136, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8c59134b-78b1-4b46-a718-efa793d1993d": {"__data__": {"id_": "8c59134b-78b1-4b46-a718-efa793d1993d", "embedding": null, "metadata": {"page_label": "118", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c09d1ef2-5462-4165-8fef-1ec59f47f01b", "node_type": "4", "metadata": {"page_label": "118", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "6acaa23db7926021600c0a3029574def6b8e84a549e05dceaba1826e43b867a5", "class_name": "RelatedNodeInfo"}}, "text": "In general, the propagation delay of a circuit module with\nmultiple outputs is deter mined by the longest path from its\ninputs to its many output s. In this case, some of the individual\noutputs may have shorter pr opagation delays; however, at least\none of the output signals would have the longe st path that\nwould deter mine the pr opagation delay for the entir e module.\nThe circuits that implement SOP and POS expressions always\nhave signal paths consis ting of either two levels of gates or\nthree levels of gates, including the initial NOT gate. This results\nin a propagation delay proportional to only two or three gate\ndelays. Thus,  the SOP or POS expressions are always preferred\nto speed up outputs and thus incr ease perfor mance.\nHowever, an expression that contains logic terms with many\nvariables may not be implemented as a two- or three-level\ncircuit due to fan-in limita tions of the gates (discussed next). In\nthis case, an expression must be partitioned into smaller\nexpressions, each implemented with a smaller circuit requiring\ngates with fewer fan-in. The smaller circuits are then connected\nto create the \ufb01nal multilevel circuit with more than two levels,\nnot counting the initial NOT gates. For instance, FPGAs, being a\nprogrammable chip, typically have restrictive resour ces and\ntherefore cannot implement any arbitrarily sized SOP or POS\nexpression. FPGAs are typically slower than the custom chips\nbuilt for high perfor mance.\n2.6.2 Fan-In and Fan-Out\nFan-in is the number of inputs a gate can have, and the fan-out\nis the number of conne ctions to which a gate\u2019s output can\nconnect. For example, a NAND gate with a fan-in of 3 and a fan-\nout of 5 is shown in Fig. 2.21 . The fan-in of a NOT gate is always\n1. The fan-in of an XOR and XNOR gate is typically 2. The fan-in\nof AND, OR, NAND, and NOR gates could vary; however, each\ngate has a maximum fan-in and fan- out limit (e.g., 8) in or der to\noperate nor mally .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1945, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a8275729-0e29-4a09-b309-5e0beee7aba6": {"__data__": {"id_": "a8275729-0e29-4a09-b309-5e0beee7aba6", "embedding": null, "metadata": {"page_label": "119", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d3eb8a82-0b76-4e8a-85da-7d06fc38f54c", "node_type": "4", "metadata": {"page_label": "119", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3d85be9bbe73385dc20a70700ab14684eb0a3385af8a21cb2f38736517226e42", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.21  A NAND gate with fan-in of 3 and fan- out of 5.\n2.7 Other Gates\nIn addition to the standar d gates discussed earlier, there are\nother useful gates necessary to design a digital system. These\ngates are known as a bu\ufb00er, an open collector (OC) bu\ufb00er, and\na tri-state bu\ufb00er .\n2.7.1 Bu\ufb00er\nThe symbol and truth table of a bu\ufb00er are shown in Fig. 2.22 (a).\nA bu\ufb00e r does not alter its input signal; it simply  ampli\ufb01es it.\nAssuming that the fan-out of an AND gate is 5, a bu\ufb00er can\nincrease the fan-out of the AND gate from 5 to, for example, 9,\nas illustrated in Fig. 2.22 (b).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 585, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4f5afdf3-cc05-4e1e-ae0d-ae7fb3478379": {"__data__": {"id_": "4f5afdf3-cc05-4e1e-ae0d-ae7fb3478379", "embedding": null, "metadata": {"page_label": "120", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4be7cab3-7353-40e5-a2b4-14cc819ac52b", "node_type": "4", "metadata": {"page_label": "120", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0cf5ed29c02bda24d1a78e3e09eec9e4e88bf6c3cd07a6daa31bf7a33517b854", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.22  A bu\ufb00er gate: ( a) bu\ufb00er symbol and truth table; ( b)\nbu\ufb00er used to incr ease the fan- out.\n2.7.2 Open Collector Bu\ufb00er\nAn OC bu\ufb00er  is similar to a bu\ufb00er gate, except that when its\ninput is logic 1, its output becomes high impedance, shown as Z\n(Fig. 2.23 (a)). A high-impedance signal is neither driven to logic\n0 nor logic 1, and is show n electrically isolated, as if the wire is\n\u201c\ufb02oating\u201d and not connected. Figure 2.23(b) illustrates a circuit\nwith two OC bu\ufb00e rs. The output of each gate is either  0 or Z,\nand thus the outputs can be connected together to generate a\nsingle output f. A Z-output can be changed to logic 1 or logic 0\nusing a \u201cpull- up\u201d or \u201cpull-down \u201d resistor connected to either the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 719, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "40f8c55f-b280-409d-a775-3da0fac3d656": {"__data__": {"id_": "40f8c55f-b280-409d-a775-3da0fac3d656", "embedding": null, "metadata": {"page_label": "121", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "48aec6ef-0a27-40c4-9912-8a8277039c28", "node_type": "4", "metadata": {"page_label": "121", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a913b2f4164045534283c425528bbfa502d7bed60e7e77d45e7f3c4903a6732e", "class_name": "RelatedNodeInfo"}}, "text": "power sour ce (e.g., 5.0 V) or gr ound (0.0 V), r espectively . The Z -\noutput in Fig. 2.23 (b) is pulled up.\nFIGURE 2.23  Open collector bu\ufb00er and application: ( a) symbol\nand truth table; ( b) a two -input wir ed-AND logic and truth table;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 241, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f3f5a0c8-03ac-4809-9eb5-1c287d66b1a0": {"__data__": {"id_": "f3f5a0c8-03ac-4809-9eb5-1c287d66b1a0", "embedding": null, "metadata": {"page_label": "122", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7c53777-0974-4a1a-948b-798307ad4772", "node_type": "4", "metadata": {"page_label": "122", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "dfff7af6efd83be4d58db22e97a19c76aee784abfe88e118d9515bad05fa38b0", "class_name": "RelatedNodeInfo"}}, "text": "(c) the design of e xpansion slots.\nFigure 2.24 illustrates the behavior of a high-impedance\noutput using the circuit in Fig. 2.23(b) with two inputs a and b.\nWhen a = 0 and b = 0, the OC bu\ufb00ers B1 and B2 output 0, thus\nconnecting f to ground, logic 0 (Fig. 2.24 (a)). When a = 1 and b\n= 1, the outputs of both OC bu\ufb00ers B1 and B2 become Z\n(\ufb02oating); this leaves f conn ected to power, logic 1 (Fig.\n2.24(d)). When a = 0 and b = 1 or a = 1 and b = 0, one of the\nbu\ufb00ers outputs 0 while the output of the other becomes Z, thus\nconnecting f to logic 0, as illustrated in Fig. 2.24 (b) and (c). The\nfour cases are summarize d as a truth table in Fig. 2.23(b). The\ntruth table illustrates an AND logic, and the circuit in this case\nis called a wired-AND logic . A wired-log ic circuit can have a\nlarge fan-in.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 804, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b72387b-0b5a-403c-944f-40f1647fa1b0": {"__data__": {"id_": "8b72387b-0b5a-403c-944f-40f1647fa1b0", "embedding": null, "metadata": {"page_label": "123", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1747899f-94c5-446a-a482-85f9b3f6489f", "node_type": "4", "metadata": {"page_label": "123", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "bf2bee51b3cecab3e145b604256282416e4c8e9b221ab8a76306e5798e22a673", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.24  A two -input wir ed-AND logic with four di\ufb00er ent\ninput scenarios.\nWired-AND and wired-OR are two commonly used wired-logic\ncircuits. For example, a wired-logic circuit is used in the design\nof computer systems with expansion slots. In this case, one can\nadd a new functionality to a computer system by inserting an\nexpansion card, a device contr oller interface (DCI), in one of the\ncomputer\u2019s expansion slots. An n-input wired-OR circuit, for\nexample, can be used to OR n signal s, one from each device,\nand generate an output to inform the CPU when a device needs", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 579, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ec416e8a-5f94-4e90-9e8c-d32a08ed5b1f": {"__data__": {"id_": "ec416e8a-5f94-4e90-9e8c-d32a08ed5b1f", "embedding": null, "metadata": {"page_label": "124", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dee25f30-6c6e-44e1-9d62-bd38cce6aa3d", "node_type": "4", "metadata": {"page_label": "124", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a9e4efe9b69bcc4781c27f00e6b2697f74a49a8fbca3ee4f24a9b4d87114d872", "class_name": "RelatedNodeInfo"}}, "text": "service, as illustrated in Fig. 2.23(c). The device interfacing will\nbe discussed in mor e details in Chap. 9 .\n2.7.3 Tri-State Bu\ufb00er\nFigure 2.25 shows  a tri-state bu\ufb00er and its truth table. It is a\ncombination of a bu\ufb00er and an OC bu\ufb00er . It operates like a\nbu\ufb00er when enabled (e = 1), but its output becomes Z when\ndisabled (e = 0). Tri-state bu\ufb00ers are useful when two or more\nsignals need to share a common wire known as a bus line (or\nsimply a bus). Typically,  a bus has many lines. Figure 2.26\nillustrates the connection of three tri-state bu\ufb00ers to a 1-bit\nbus. One at a time, one of the enabling signals e1, e2, or e3\nmay be asserted to place the corresponding signal a, b, or c on\nthe bus. The other disable d tri-state bu\ufb00ers make their outputs\nZ (\u201c\ufb02oating\u201d), and thus become isolated fr om the bus.\nFIGURE 2.25  A tri-state bu\ufb00er and its truth table.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 863, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9a86e6e9-d2e7-4a08-bc99-e7df7d26f0bf": {"__data__": {"id_": "9a86e6e9-d2e7-4a08-bc99-e7df7d26f0bf", "embedding": null, "metadata": {"page_label": "125", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "340374ab-1596-4bbe-b1aa-fdfd288f420e", "node_type": "4", "metadata": {"page_label": "125", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3bb685464b02a4b78e558488180f1269e1c75689d810fe52b3211768a1ede95b", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.26  Three tri-state bu\ufb00ers sharing a 1-bit bus: ( a)\nactual connections; ( b) connections typically ar e shown with\narrows.\nA bus connec tion can be bidirectional if a module outputs to\nthe bus and inputs from the bus. Figure 2.27(a) illustrates an\nexample of bidirectional bus connections, using a bu\ufb00er to\ninput from the bus and a tri-state bu\ufb00er to output to the bus. A\ndata item that is transm itted over a bidirectiona l bus has a\nsource module and a destination module. The source module\nplaces a data item using  a tri-state bu\ufb00er on the bus, and a\ndestination module input s the data using a bu\ufb00er. A bu\ufb00er\nprotects a system from fan-out violation at the source module if\nthe bus fan- out at the destination module is gr eater than 1; that\nis, a bus signal is connected to two or more gates inside a\ndestination module, as illustrated in Fig. 2.27(a) for destination\nmodule C.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 893, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "013aa009-d146-4783-ad7a-ab43d9ead4ed": {"__data__": {"id_": "013aa009-d146-4783-ad7a-ab43d9ead4ed", "embedding": null, "metadata": {"page_label": "126", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f6d086e9-246a-43df-8b13-a763d0b05100", "node_type": "4", "metadata": {"page_label": "126", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8d511d331fd0bc75bb863f4c82ed40d1bd19ae4b19cc9b259fe30015c8df0f49", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.27  Module inter connection: ( a) three modules\ninterconnected using a bus; ( b) three modules with one-to -one\nconnections.\nA bus reduces interconnection overhead. It can replace many\none-to -one connections among several modules (Fig. 2.27(b))\nas long as the rate (how often) at which data (number of bits) is\ntransmitted over the bus is su\ufb03ciently large enough to handle\nthe load. The data rate of a bus is called bandwidth . For\nexample, in Fig. 2.27(a), 1-bit data can be transm itted over the\n1-bit bus every 10 ns if the enabling signals e1, e2, and e3 are\nasserted one at a time every 10 ns, or if one of the enable\nsignals remains asserted for multiples of 10 ns durations. A 1-\nbit bus that is capable of transfer ring a 1-bit data every 10 ns\nhas the same bandwidth as a 10-bit bus capable of transfer ring", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 826, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2263aa65-6a05-466f-abb7-7181f629b27a": {"__data__": {"id_": "2263aa65-6a05-466f-abb7-7181f629b27a", "embedding": null, "metadata": {"page_label": "127", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ceac2b5b-f45c-4246-8ff2-b8eb0acbb58a", "node_type": "4", "metadata": {"page_label": "127", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5b146a927464b316140da4a48fe027a36ecad732e03a983ef66dd24ad626d35f", "class_name": "RelatedNodeInfo"}}, "text": "a 10-bit data every 100 ns; in 100 ns both buses would transfer\n10 bits. Therefore, the width of a bus (number of lines) and the\nspeed of the bus (how often) deter mine the band width of the\nbus.\nTwo tri-state bu\ufb00ers may be used as a transceiver\n(transmitter/r eceiver) circuit that connects, for example, two\nseparate buses as illustrated in Fig. 2.28. Each transceiver\ncircuit creates a bidirectional connection between two bus lines.\nThe direction (dir) signal decides the data direction either from\nbus A to bus B or from bus B to bus A. The enab le (e) signal,\nwhen asserted, connects the two bus lines, keeping them\nconnected while active.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 645, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "13368efd-1394-40eb-aa83-751c63e2ba1c": {"__data__": {"id_": "13368efd-1394-40eb-aa83-751c63e2ba1c", "embedding": null, "metadata": {"page_label": "128", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e540acb-42fa-4e0a-815c-c7c58027fd6f", "node_type": "4", "metadata": {"page_label": "128", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "76389c253573ea56adc2212126df21e3164127a799804bae25ac5c81093181a5", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.28  A transceiver module [ 2] shown for two bus lines;\nsignal dir indicates data dir ection and e connects the two bus\nlines.\n2.8 Design Examples", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 154, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "98a82720-d1eb-42b3-9f13-c8acb5de115e": {"__data__": {"id_": "98a82720-d1eb-42b3-9f13-c8acb5de115e", "embedding": null, "metadata": {"page_label": "129", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9402e49f-dcca-4bd1-970c-28a5934a1b6b", "node_type": "4", "metadata": {"page_label": "129", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "431d1bb2c84f0a952ee0bfa9f5cce2850811047474189606514e708db684f516", "class_name": "RelatedNodeInfo"}}, "text": "As discussed in Chap. 1, a data path includes many circuit\nmodules. This section covers a few commonly used but small\ncombinational circuit modules. The \u201cselector \u201d modu le in Fig. 1.1\n(Chap. 1) is known as a multiple xer. Other examples discussed\nhere are a simple adder, decoder, and encoder modules.\nA 1-bit adder, known as a full adder (FA), generates the sum\nof two 1-bit inputs plus an incoming carry-in bit as 0 or 1. A\ndecoder module converts a number A (0, 1, 2, etc.) to a\ncorresponding output signal (e.g., f0, f1, f2, etc.). Only one of the\noutputs f0, f1, etc. can be active at any time. An encoder, on the\nother hand, perfor ms the reverse operation and generates a\nnumber associated with an active input signal. Speci\ufb01cally, the\nfollowing e xamples ar e discussed:\n\u2022 The design of an F A with active-high signals\n\u2022 The design of a 1-bit, 2-to -1 multiple xer and 1-bit, 4-to -1\nmultiple xer\n\u2022 The design of a 1-to -2 decoder with active-low output\nsignals\n\u2022 The design of a 3-to -2 encoder with active-low input\nsignals\n2.8.1 Full Adder\nAn FA has three 1-bit inputs, one of which is the carry-in (cin)\nand outputs a 1-bit sum (s) and a 1-bit carry-out (cout), as\nillustrated in Fig. 2.29. Table 2.8 shows  its truth table. In each\ncase in the table, s and cout are deter mined as the sum of\nthree-bits a, b, and cin. Multiple FA modules, as will be\nillustrated in the next chapter, can be used to design a large\nadder .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1434, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7be6234f-89ed-45ef-8f5a-aad0ad7ea4d5": {"__data__": {"id_": "7be6234f-89ed-45ef-8f5a-aad0ad7ea4d5", "embedding": null, "metadata": {"page_label": "130", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "290d5a3d-1e2f-42d8-94bc-85c97b0695fa", "node_type": "4", "metadata": {"page_label": "130", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "bb594d7e976c1d61aeb345bbb48e8e252abad65e593f9bd7a199a706f97fa4b7", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.29  The block diagram of an F A.\nTABLE  2.8 FA Truth T able\nMinimal SOP expressions for s and cout are deter mines as\nfollows:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 135, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b690400-5c34-4051-8682-128f91372b5b": {"__data__": {"id_": "1b690400-5c34-4051-8682-128f91372b5b", "embedding": null, "metadata": {"page_label": "131", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e34e455c-e4be-4bc5-b66d-2bf201702c4d", "node_type": "4", "metadata": {"page_label": "131", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "756b9c02e27578c5d1ec324ea66f5afe6c30b9cd9fa600fe69edcd99ad781bf4", "class_name": "RelatedNodeInfo"}}, "text": "Alternatively, the expressions of s and cout can be written as\nillustrated in Eq. (2.9)  also using X OR gates, thus simplif ying the\ngate-level schematic of the circuit, as shown in Fig. 2.30.\nHowever, this solution would result in a longer propagation\ndelay as compar ed to the circuit designed from the SOP\nexpressions in Eq. (2.8) .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 336, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6392902a-e3ec-492a-8b9a-ec9827b0452c": {"__data__": {"id_": "6392902a-e3ec-492a-8b9a-ec9827b0452c", "embedding": null, "metadata": {"page_label": "132", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76079f0d-a68b-4f0b-aa19-11b86ed74018", "node_type": "4", "metadata": {"page_label": "132", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "844a8d6425af3a007088e65c0fa523f0e2f336e5d37c727fdd3741445f6e55eb", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.30  An alter native cir cuit for an F A.\nPropagation Delay Estimation\nAssuming that a NAND gate has 0.1 ns delay, Eq. (2.10)  shows\nthe estimated propagation delay, denoted by symbol \u220f, for\nsignals s and cout in Eq. (2.8). The SOP expressions for s and\ncout have three and two levels of gates, respectively . Wire\ndelays are ignor ed in the calculation of the estimated delays for\ns and cout.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 401, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0be8c208-ca8e-4de5-9238-2806ac40b952": {"__data__": {"id_": "0be8c208-ca8e-4de5-9238-2806ac40b952", "embedding": null, "metadata": {"page_label": "133", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5fe12502-54bd-4f60-b451-86d62f1ffc7c", "node_type": "4", "metadata": {"page_label": "133", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d5b2ec776eaa5595077e8f20e67de19e0a33da3ee7961482c51749ecd9037d74", "class_name": "RelatedNodeInfo"}}, "text": "Equation (2.11)  shows the estimated delays for signals s and\ncout in Eq. (2.9)  wher e an XOR designed from its SOP expression\nhas 0.3 ns delay :\n2.8.2 Multiplexer\nA 1-bit, 2-to-1 multiple xer, or MUX for short, is a simple\ncombinational circuit as shown in Fig. 2.31. The inputs x and y\nare each 1-bit data, and s (a selector signal) causes  the MUX to\noutput either x or y. As illustrated in the block diagram, labels 1\nand 0 are arbitrarily assigned to inputs x and y, respectively,\nand are re\ufb02ected in the MUX\u2019s truth table (Table 2.9). The MUX\noutputs y when s = 0 or x when s = 1. Its minimal SOP\nexpression is deter mined as follows:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 641, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "af0a0109-e3a8-4f34-ad27-c564af81e5fc": {"__data__": {"id_": "af0a0109-e3a8-4f34-ad27-c564af81e5fc", "embedding": null, "metadata": {"page_label": "134", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5b242b1b-7e9a-45b7-9b98-bd5db3196056", "node_type": "4", "metadata": {"page_label": "134", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2c17b894a540bee666631f25d95c7dd362563148ded49a6d2b562fd40d2eb4f5", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.31  The block diagram and cir cuit of a 1-bit, 2-to -1\nMUX.\nTABLE  2.9 Truth T able of the 1-bit, 2-to -1 MUX", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 118, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e09895bd-aa63-4e73-838e-8492076ca7ae": {"__data__": {"id_": "e09895bd-aa63-4e73-838e-8492076ca7ae", "embedding": null, "metadata": {"page_label": "135", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cc7297bc-102c-4679-b102-d9e36fe328c5", "node_type": "4", "metadata": {"page_label": "135", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4c2bdc0afd4a4416c6eb95e58cca767b8f814ed3d7aef55eb8c3bd78e811804c", "class_name": "RelatedNodeInfo"}}, "text": "For example, when s = 0, Eq. (2.12)  evalua tes, as expected,\nto r = y, as illustrated her e:\nLikewise, when s = 1, the MUX outputs (i.e., selects) input x.\nFigure 2.32  shows the block diagram of a 1-bit, 4-to-1 MUX with\nfour data bits, w, x, y, and z, which are labeled as input\nnumbers 3 to 0, respectively . The MUX requir es two select\nsignals, labeled s1 and s0. Table 2.10 shows its simpli\ufb01ed truth\ntable. Its expanded truth table would have six inputs, larger\nthan the limit of four we have assumed for using K-maps. There\nare two ways to deter mine the minimal SOP expression of the\n4-to-1 MUX without using a K-map: (1) use Espresso software,\nor (2) extrapolate Eq. (2.12)  to four inputs and two selection\nsignals. That is, when s1s0 = 0 = (00)2, the MUX should output\nz, and for s1s0 = 1 = (01)2, it outputs y; for s1s0 = 2 = (10)2, it\noutputs x, and for s1s0 = 3 = (11)2, it outputs w. Its minimal\nSOP e xpression, ther efore, is:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 943, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ee708ce-208f-4d13-8c31-9961a9e20b64": {"__data__": {"id_": "1ee708ce-208f-4d13-8c31-9961a9e20b64", "embedding": null, "metadata": {"page_label": "136", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7a332816-5e5b-46e2-b75f-fe2a23e482f7", "node_type": "4", "metadata": {"page_label": "136", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b83238282d6fc15e6ffd1c6c60ede3c5f6bbf380df970d13610293c277a5f6c9", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.32  The block diagram of a 1-bit, 4-to -1 MUX.\nTABLE  2.10  Simpli\ufb01ed T ruth T able of the 1-bit, 4-to -1 MUX\nFor example, when s1s0 = 2 = (10)2, Eq. (2.13)  evaluates, as\nexpected, to r = x, illustrated her e:\nThe circuit for the 4-to-1 MUX is given in Fig. 2.33 . As the size\nof an MUX increases, so do its fan-in and fan-out requir ements.\nConsider the circuits for the aforementioned 2-to-1 and 4-to-1\nMUXs. Their respectiv e maximum fan-in and fan-out\nrequir ements are 2 and 2 and 4 and 3. Large MUXs, if designed\nusing the methods discus sed here, will lead to fan-in and fan-\nout problems. In Chap. 3, we will discuss design methodologies\nfor large combinational circuits by \ufb01rst partitioning a problem\ninto smaller design problems, and then for each smaller\nproblem, a circuit is designed using the techniques learned in\nthis chapter . The smaller circuits are then assembled to create\na large combinational circuit that would be free of any fan-in\nand fan- out pr oblems.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 990, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "49f18970-83b0-4172-8d35-158bf4feb377": {"__data__": {"id_": "49f18970-83b0-4172-8d35-158bf4feb377", "embedding": null, "metadata": {"page_label": "137", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ec1d9ee5-af95-4b4e-8e11-c3e55f42ad6a", "node_type": "4", "metadata": {"page_label": "137", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "647ee28582e719ee87ec409107722f57f476ffe6c89400bd26a0d7df132dcdbb", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.33  Circuit of a 1-bit, 4-to -1 MUX; maximum fan-in = 4;\nmaximum fan- out = 2.\n2.8.3 Decoder\nThe block diagram and the circuit of a 1-to-2 decoder circuit\nwith active-low outputs are shown in Fig. 2.34. Active-low\nlabeled pins are typically shown with bubbles at the base of\neach pin, as illustrated in Fig. 2.34(b). However, the bubbles in\nFig. 2.34(b) do not necessarily imply that they are NOT gates.\nTable 2.11 shows the truth table of the decoder . Only one or\nnone of the outputs _f1 and _f0 is asserted, depending on the\nvalues of signals v and e. When e = 1 and v = 0, _f0 = 0\n(asserted). When e = 1 and v = 1, _f1 = 0 (asserted).\nOtherwise, when e = 0 (not active), both _f1 and _f0 are 1\n(deasserted).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 720, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e0fa0776-7c39-49cd-a3cb-5655fdfbcafa": {"__data__": {"id_": "e0fa0776-7c39-49cd-a3cb-5655fdfbcafa", "embedding": null, "metadata": {"page_label": "138", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78dd2248-d8b7-428d-855b-a3df42581976", "node_type": "4", "metadata": {"page_label": "138", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "37600debffd74f474e7a726ca1b60c84df5fa8f5950dd853962730494a96c13c", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.34  Block diagram and cir cuit of a 1-to -2 decoder : (a)\nblock diagram with signal names; ( b) block diagram with pin\nlabels; ( c) decoder cir cuit.\nTABLE  2.11  A 1-to -2 Decoder T ruth T able with A ctive-L ow Outputs\nThe expressions of signals _f1 and _f0 may be expressed as\nSOP or POS. However, in this case, both SOP and POS\nexpressions for these signals are the same as deter mined here.\nThe NAND-only decoder circuit has one gate delay,  not counting\nthe NOT gate ( Fig. 2.34 (c)).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 499, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7a88c881-cbbb-4635-9258-24a1880cc6a7": {"__data__": {"id_": "7a88c881-cbbb-4635-9258-24a1880cc6a7", "embedding": null, "metadata": {"page_label": "139", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "19e56ebb-d54f-4a02-a573-2fa08c308f9f", "node_type": "4", "metadata": {"page_label": "139", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "35240138e3882f01305b2bf2572fc018fe3f214f3d921636f118f57d1c2f2264", "class_name": "RelatedNodeInfo"}}, "text": "Large decoders are also designed using a di\ufb00er ent\nmethodology to avoid fan-in and fan-out problems. Decoders\nhave many applications and are used in the design of, for\nexample, memory and CPU data paths. Decoders are used to\ndecode a memory address so that the content of the address\ncan be read or written. Decoders are also used to decode a\nregister number when writing a r egister \ufb01le ( Chap. 1 ).\n2.8.4 Encoder\nThe block diagram and circuit of a 3-to-2 encoder with active-\nlow inputs are given in Fig. 2.35(a), and the active-low labeled\npins are show n with bubbles in Fig. 2.35 (b). Table 2.12  shows its\ntruth table. The input signals are arbitrarily number ed 0\nthrough 2 as illustrated in the \ufb01gure. An encoder circuit outputs\nthe number assigned to an active input signal. For example,\nwhen _z = 0 (active), _ y = 1 (not active), and _ x = 1 (not\nactive), the encoder outputs r1r0 = (00)2 = 0, correctly\nidentif ying the asserted signal _z as the input number 0.\nHowever, when none of the encoder\u2019s inputs ar e active, another\noutput signal named a (input-active) is necessary . When a = 1\n(asserted), it indicates that one or more of the signals _ x, _ y,\nand _ z are active, and thus the 2-bit result r1r0 identi\ufb01es the\nactive signal.  On the other hand, when a = 0 (not asserted), the\noutput r1r0 = (00)2 is ignor ed.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1331, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd008a16-5d04-46ec-957f-096dceb00d58": {"__data__": {"id_": "bd008a16-5d04-46ec-957f-096dceb00d58", "embedding": null, "metadata": {"page_label": "140", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cd33d220-8990-4e23-a726-9a729353e8ab", "node_type": "4", "metadata": {"page_label": "140", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f2b5f0612f7b562998784220240c6695f61f3e3d8ba66c7669eeae8a36b52ddd", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.35  Block diagram and cir cuit of a 3-to -2 encoder : (a)\nblock diagram with signal names; ( b) block diagram with pin\nlabels; ( c) encoder cir cuit.\nTABLE  2.12  Truth T able of a 3-to -2 Encoder with A ctive-L ow Inputs\nIt is also possible that two or more of the encoder inputs\nbecome active at the same time. For example, when _ x = 0, _\ny = 0, and _ z = 1, the encoder must output either the number", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 412, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5f3007cc-8a7e-4476-8388-d9cd2156d18c": {"__data__": {"id_": "5f3007cc-8a7e-4476-8388-d9cd2156d18c", "embedding": null, "metadata": {"page_label": "141", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "75d69581-fd1f-4b18-95e6-a34a485c324d", "node_type": "4", "metadata": {"page_label": "141", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c744354ead966a2d5013086a37c9b625c5260308505f7b71e36361726d6c906c", "class_name": "RelatedNodeInfo"}}, "text": "assigned to active signal _ x or active signal _ y based on some\nsignal priority . Such an encoder is called a priority encoder .\nTable 2.12 presents the truth table of the 3-to-2 priority\nencoder ( Fig. 2.35 ) with _ x as the highest-priority input and _ z\nthe lowest. Therefore, when _ x = 0 (active), _y = 0 (active),\nand _z = 1 (not active), the encoder outputs a = 1 and r1r0 =\n(10)2, identif ying _ x as the higher -priority input signal.\nThe POS expressions for output signals a, r1, and r0 are\ndeter mined as follows:\nEncoders are also designed without the output signal a, such\nas the one shown in Fig. 2.36 . It is designe d as a 4-to-2 encoder\nwithout the signal a, but the input number 0 is not used and is\ntied to power (or ground for active-high inputs), and thus\ne\ufb00ectively changes the circuit to a 3-to-2 encoder . When none\nof the inputs _ x, _ y, and _ z are asserted, the encoder outputs\nr1r0 = (00)2, indicating that inputs are not active. When one or\nmore of the input signals become active, the encoder outputs 3,\n2, or 1, and respectively identi\ufb01es input _ x, _ y, or _ z as an\nactive signal . This eliminates the logic requir ed to generate a,\nand reduces one less signal when compar ed to the design\nshown in Fig. 2.35. The input that is tied to power can be\nimplemented internally. Again, a di\ufb00er ent methodology is used", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1346, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "25638a3d-16c6-4a37-9464-7736b18ad2e4": {"__data__": {"id_": "25638a3d-16c6-4a37-9464-7736b18ad2e4", "embedding": null, "metadata": {"page_label": "142", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "07ff47c0-ca64-4cc9-9177-a1ff31658502", "node_type": "4", "metadata": {"page_label": "142", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a6020c69b04447ec18d27d5d5be56467767214a6b502e498b80644ea5c12b037", "class_name": "RelatedNodeInfo"}}, "text": "to avoid fan-in and fan-out problems when desig ning a large\nencoder .\nFIGURE 2.36  A 3-to -2 encoder block diagram without an input-\nactive output signal.\nEncoders also have many applications, especia lly in the\ndesign of a motherboar d. An encoder, for example, can be used\nto quickly inform the CPU when an external signal becomes\nactive. The active external signal may be generated by an\ninput/output (I/O) device or by a module on the board\nrequesting a service fr om the CPU.\n\u00a0\n2.9 Implementation\nModer n digital circuit designers rely on CAD tools to translate a\ndesign into implementation data. A digital design CAD tool\nsynthesizes (translates) a description of a digital circuit into an\noptimized and technology -dependent gate-level description\ncalled a netlist. The application-speci\ufb01c integrated  chip (ASIC)\nand FPGA are examples of noncustom IC technologies. A\nprocessor chip would typically be a custom IC. A circuit may be\ndescribed schematically or using an HDL or a combination of\nboth. However, moder n CAD tools requir e circuits described in\nHDL.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1068, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "60d4abd6-72b3-45a9-aef7-a5b3bad7b07c": {"__data__": {"id_": "60d4abd6-72b3-45a9-aef7-a5b3bad7b07c", "embedding": null, "metadata": {"page_label": "143", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c9e66868-9402-4364-9d1c-98f40f2e9d15", "node_type": "4", "metadata": {"page_label": "143", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "856c980f8215512ea005d5a8d35e122e0c9f9067eda1743389c0130dfed58176", "class_name": "RelatedNodeInfo"}}, "text": "2.9.1 Programmable Logic Devices\nProgrammable logic devices (PLDs) are prefabricated, o\ufb00-the-\nshelf devices that contain  no manufacturing faults. They can be\nprogrammed (i.e., con\ufb01gur ed) to implement a netlist, instantly,\nand sometimes dynamically on demand. Simple PLDs (SPLDs)\nare the simplest among all PLDs. An SPLD uses wired-logic to\nimplement logic expressions, and is suitable for implementing\nsmall digital circuits. Comple x PLDs (CPLDs) are the next\ngeneration of PLDs that contain con\ufb01gurable wiring channels\nwithin the chip to implement a mor e comple x digital cir cuit.\nFPGAs, which brie\ufb02y were discussed in Chap. 1, are the\nmoder n version of PLDs that contain many con\ufb01gurable logic\nblocks (CLBs), con\ufb01gurable wiring channels, and con\ufb01gurable IO\nblocks that interface with the chip\u2019s (I/O) pins. An FPGA may be\nviewed as the moder n-day  equivalent of both the TTL 7400 chip\nseries and circuit boards. The 7400 series were the \ufb01rst family\nof ICs that were designed for general use. The series included\nthe standard logic gates,  as well as larger combin ational logic\nmodules, such as MUX, decoder, and adder, and modules used\nto design sequential circuits. They were used to build the mini\nand mainframe computers during the 1960s and 1970s. Today,\nthe 7400 series chips are sometimes used in education,\nespecially in some intr oductory logic design courses.\nAn FPGA requir es programming data to con\ufb01gur e and\ninterconnect CLBs and I/O blocks as indicated by a netlist. Some\nI/O blocks are con\ufb01gur ed as input pins and some as output pins.\nFigure 2.37  illustrates the inter nal or ganization of a simple FPGA\nwith nine CLBs, each capable of implementing one or two\nsimple logic functions. The wiring channels and the switch\nblocks are used to interconnect the inputs and outputs of each\nCLB to other CLBs and via the I/O blocks to I/O pins.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1862, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0983ad47-1de0-427e-919d-1e3f0c3ac5b6": {"__data__": {"id_": "0983ad47-1de0-427e-919d-1e3f0c3ac5b6", "embedding": null, "metadata": {"page_label": "144", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6bd1cdc-cff3-4f30-80dd-970a280c0e3f", "node_type": "4", "metadata": {"page_label": "144", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "571c3d3e443f47aa60f4d029de343da35e4e2d782008edabdaf51561cba42aef", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.37  A simple FPGA block diagram.\nSome FPGA s contain a con\ufb01guration memory for\nimplementing a di\ufb00er ent netlist on demand. Modern FPGAs\ntypically contain thousan ds of CLBs, and some also contain\nmemory blocks. There are system- on-chip (SoC) FPGA chips [3\u2013\n4] that also contain comple x modules such as CPU and digital\nsignal processor (DSP). With these chips, it is easier to design\ncustom and comple x digital circuits without requiring\nfabrication. Both Altera and Xilinx provide FPGA design kits with\na universal serial bus (USB) interface [ 3\u20135].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 561, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a188a12b-fdd1-4d79-baf5-e9e69cefe66d": {"__data__": {"id_": "a188a12b-fdd1-4d79-baf5-e9e69cefe66d", "embedding": null, "metadata": {"page_label": "145", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "02f871bc-c814-4c99-8b68-ffcce9df6d95", "node_type": "4", "metadata": {"page_label": "145", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9372dc09fabb2189622f435fba163bd21f97b9947cf79a0043616e9f3d67e1b4", "class_name": "RelatedNodeInfo"}}, "text": "2.9.2 Design Flow\nFigure 2.38 illustrates a typical digital circuit design \ufb02ow. It\nincludes design entry, synthesis, and implementation phases.\nEach step in the design \ufb02ow produces a di\ufb00er ent description of\na target circuit, wher e each description is veri\ufb01ed for design\nerrors.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 279, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2669f51b-67b3-41d2-81f9-a0f6eccbec60": {"__data__": {"id_": "2669f51b-67b3-41d2-81f9-a0f6eccbec60", "embedding": null, "metadata": {"page_label": "146", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3b803f40-4017-4bfd-9b75-11c938b9191d", "node_type": "4", "metadata": {"page_label": "146", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "76ef76de2c3092dcfce8f63629d4fc66e8bcde00c3d5256791c0be72c91133a1", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.38  Digital cir cuit design \ufb02ow [ 6].\nDesign Entry\nDuring this phase of the design, a target digital circuit is\ndescribed manually using a schematic design tool, an HDL, or a\ncombination of both. The strict uses of schematic design tools\nin the industr y have diminished over the years in favor of HDLs.\nThe Verilog HDL is discussed in Sec. 2.10 . Figure 2.39  shows the\ndesign of an FA using a schematic design and simulation tool\ncalled LogicW orks [7]. No synthesis  tools are available in\nLogicW orks. A schematic design tool typically includes a library\nof logic gates and some commonly used combinational and\nsequential circuit modules. It may also include a library of the\n7400 chip series. In addition, an schematic design tool may\ninclude hybrid design entry featur es to enter a data path\nschematically, wher e the individual modules in the data path\nare selected fr om a library or designed using an HDL.\nFIGURE 2.39  A cir cuit schematic of a full-adder (F A) in\nLogicW orks, a schematic design tool.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1021, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca0ef209-3c42-49d6-8459-89088e2c9744": {"__data__": {"id_": "ca0ef209-3c42-49d6-8459-89088e2c9744", "embedding": null, "metadata": {"page_label": "147", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6acd6715-8a2e-48dc-88ae-b9d65fb94717", "node_type": "4", "metadata": {"page_label": "147", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "ea7580f726ac33089c22f6193b1d4ae1be8b72078c4018a77081a85a22f0dd9f", "class_name": "RelatedNodeInfo"}}, "text": "Functional Simulation\nA schematica lly and/or HDL designed circuit must be veri\ufb01ed to\nmake sure it operates as expected. For example, for a given\ninput, does the FA shown in Fig. 2.39  output the same results as\nindicated in its truth table? Because this veri\ufb01cation process\ncan take a long time, especially for large circuits, the process is\ntypically divided into functional, post-synthesis,  and timing\nsimulations. A functional simulation is used only to verify the\ncorrectness of a design without concer n for its implementation\nissues. It is the \ufb01rst step to make sure a design is correct. If the\nfunctional simulation of a circuit is error free, then synthesis is\nstarted as the \ufb01rst phase of implementation; however, the\ndesign may still have synthesis and timing er rors.\nPost-Synthesis Simulation\nDuring the synthesis phase, a design is translated into its\ncorresponding netlist based on the available resour ces in a\ngiven technology, such as the logic resour ces available in each\nCLB in a speci\ufb01c FPGA chip. Each CLB can only implement a few\nand simple logic expressions\u2014for example, two 4-variable logic\nexpressions. A design\u2019s logic expressions may need to be\ndivided into simpler expressions\u2014for example, no more than\nfour variables. The simpler expressions are saved as the\ncircuit\u2019s netlist.\nA post-synthesis simulation phase may be necessary to make\nsure a design has been translated correctly and that the\ngenerated netlist accurately describes the target circuit. A post-\nsynthesis simulation requir es less processing time than does a\ntiming simulation. In addition, some delay information\u2014for\nexample, the CLB\u2019s signal propagation delay\u2014may  be available\nfor post-synthesis simulation.\nTiming Simulation\nA timing simulation is perfor med af ter a netlist is mapped to the\navailable resour ces of a target device that is virtually modeled\nin the computer . For example, using the virtual model of an\nFPGA chip, a netlist is used to con\ufb01gur e the CLBs, the I/O", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1981, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0823cb1a-4d8c-41c6-9391-6aab267218b3": {"__data__": {"id_": "0823cb1a-4d8c-41c6-9391-6aab267218b3", "embedding": null, "metadata": {"page_label": "148", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9d5a39c0-424a-4e3a-acce-145a182b6b0a", "node_type": "4", "metadata": {"page_label": "148", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "60117e9f0fa4b57d932ea2413bf082df07c60a460c86cf24844e897ff6bc37e3", "class_name": "RelatedNodeInfo"}}, "text": "blocks, and the wiring channels through a process called\nplacement-and-route .\nDuring the placement phase, the minimized expressions in\nthe netlist are assigned to the CLBs and the circuit\u2019s primary\ninput and output signals are assigned to the I/O pins via the I/O\nblocks. Some designs may also requir e comple x modules\u2014for\nexample, CPU, DSP, and memory, that already exist inside the\nchip.\nDuring the routing phase,  the signal dependency information\nin the netlist is used to wire (inter connect) the signals among\nthe di\ufb00er ent CLBs and the I/O blocks using the available on-chip\nwiring channels and switch blocks. However, the placement and\nthe routing tasks are not typically done independently; the\nassignments of logic expressions to the CLBs and the primary\nI/O signals to I/O block s may be changed in order to (1)\nmaximize the use of the available resour ces in the chip or (2)\nminimize propagation delays. A timing simulation is used to\nmake sur e the timing r equir ement of a design is met.\n\u00a0\n2.10 Hardware Description Languages\nVerilog and VHDL (VHSIC, or very-high-speed integrated circuit)\nare two industry -standar d HDLs used to describe digital circuits.\nAn HDL is used to formally describe a digital circuit and a test-\nbench  is used to generate tests (i.e., test vectors) for the\ncircuit.\nAn HDL description is called structural if a circuit is described\nin terms of a set of interconnected modules. The modules can\nbe small, like AND, OR, NAND, etc., logic gates, or large circuits,\nlike a decoder, multiple xer, adder, etc. Some commonly used\nlarge modules, such as an adder, may be prede\ufb01ned and used\nduring synthesis.\nAn HDL description is called behavior if the HDL code\ndescribes the relationships between a module\u2019s inputs and its", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1760, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "06202570-80ab-4b7c-a10f-94728ea9d470": {"__data__": {"id_": "06202570-80ab-4b7c-a10f-94728ea9d470", "embedding": null, "metadata": {"page_label": "149", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "125b72eb-9ba5-4336-901d-7314c7303e69", "node_type": "4", "metadata": {"page_label": "149", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5f21a060819c323ddc9d7580be81ed106fde5ee576a4b4a0213ed0d064b8a44d", "class_name": "RelatedNodeInfo"}}, "text": "outputs using  high-level language statements such as \u201cif-else\u201d\nor \u201ccase\u201d (i.e., switch).\n2.10.1 Structural Model\nIn this section, we brie\ufb02 y introduce the Verilog HDL. Other\nexamples are included elsewher e in the book. However, the\ndescription is not complete and additional references may be\nnecessary . Example 2.11 illustrates a structural model of an FA\nwith two XOR gates and three NAND gates, as shown\nschematically in Fig. 2.39. A Verilog model starts with the\nkeywor d \u201cmodule\u201d and includes a name (e.g., full_adder) and a\nlist of input and output ports (e.g., a, b, cin, s, and cout). A\nmodule description ends with the keywor d \u201cendm odule.\u201d The\nport listing can appear in any order, but must be speci\ufb01cally\ndeclar ed as \u201cinput\u201d or \u201coutput.\u201d Signal names that are not\ndeclar ed as input and output ports are consider ed local and\nshould be declar ed as a wire when the design is structural. For\ninstance, the three signals out 1, out 2, and out 3 in the\nexample ar e all local.\nExample 2.11.  A Verilog structural model for the F A shown in Fig. 2.39 :", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1064, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "290fecf9-c8cd-44a7-b982-305b765f583a": {"__data__": {"id_": "290fecf9-c8cd-44a7-b982-305b765f583a", "embedding": null, "metadata": {"page_label": "150", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cfe4ecb4-33cf-4c82-b9cc-cffb5dd1f236", "node_type": "4", "metadata": {"page_label": "150", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "731480ed124164fd80a52e62b43da8c148e78ac0fd899592627c32c1addd1660", "class_name": "RelatedNodeInfo"}}, "text": "endmodule\nThe standar d gates are called primitive gates  and are\nknown to the Verilog complier and need not be described. The\nx1, x2, n1, n2, and n3 in the example are optional and are\nnames given to two instantiated XOR and three NAND primitive\ngates. The leftmost argument in each instantiat ed primitive\ngate is output, and the others are inputs. For instance, the\nsignals out 1, s, out 2, out 3, and cout are all outputs and thus\nare listed as the leftmos t argument. A primitive gate can be\ninstantiated with one or more input arguments, depending on\nits type. For example, a three-input primitive NAND gate would\nhave one output (the lef tmost) and thr ee input ar guments.\nThe modules can be instantiated in any order, similar to the\nway they are instantiated on the screen when using a\nschematic design tool (e.g., Fig. 2.39). The interconnections of\nthe modules are deter mined from the list of their ports. For\ninstance, the \ufb01rst instantiated primitive XOR gate has out 1 as\nits output port, and the second XOR uses out 1  as an input port.\nThis implies that there is a wire that connects the two out 1\nports. Likewise, the out 2 and out 3 signals are each connected\nby a wir e. These signals ar e declar ed as \u201c wire.\u201d\nA test-bench module, such as the one given in Example 2.12,\nis also described in HDL and is used to test a circuit model,\nsuch as the FA model in Example 2.11. A test-bench  module has\nno input or output ports. The \u2018include directive may be needed\n(depending on the design tool) to import a nonprimitive but\nalready created HDL model in another model\u2014for example, a\ntest-bench. In general, each imported modu le may be\ninstantiated one or more times as needed to create the target\ncircuit model befor e testing. In Example 2.12, the \u201cfull_adder \u201d\nHDL model is imported and is instantiated once for testing.\nAn initial block is used to list the test vectors in the\n\u201cfull_adder \u201d module. All the statements inside an initial block\nare processe d in sequence. All the variables to the left of an\nassignment operator (e.g., =) within an initial block or an\nalways block  (discussed later) must be declar ed as type reg.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2146, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "566e2680-2891-481a-b89e-b4d09e916b4c": {"__data__": {"id_": "566e2680-2891-481a-b89e-b4d09e916b4c", "embedding": null, "metadata": {"page_label": "151", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6d3da09-0aaa-4a87-ab11-5065326bc133", "node_type": "4", "metadata": {"page_label": "151", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "635f38c40fe52eb8ccd9473b2375b93d5a8abf8e106402240a58ba78389d8699", "class_name": "RelatedNodeInfo"}}, "text": "When describing a combinational circuit, the type reg has no\nspeci\ufb01c signi\ufb01cance. The type reg, however, becomes important\nwhen designing sequential cir cuits.\nExample 2.12.  A test-bench for testing the F A structural model in Example 2.10:\nWhen using a design tool without a debugger, a $display\nstatement is used to output the value of one or more input\nsignals. A $monitor  statement, on the other hand, is enter ed only\nonce to track the values of one or mor e signals (input or output)\nduring a simulation run. Each time that there is a change in the\nvalue of one or more signals listed in the $monitor  statement,\nthe statement is executed to output the signal values. The\nsyntax for both the $display  and $monitor  are the same and are\nsimilar to that of a \u201cprintf \u201d statement in the C programming", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 806, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6999ee21-640a-4401-b6bc-142834c114ba": {"__data__": {"id_": "6999ee21-640a-4401-b6bc-142834c114ba", "embedding": null, "metadata": {"page_label": "152", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "00107f62-db39-4acf-9e7b-0f2e6265abec", "node_type": "4", "metadata": {"page_label": "152", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d0f88b7721a24b1f8cf4196ff5261c34091175f0e42fd50f4d6cdec853187b28", "class_name": "RelatedNodeInfo"}}, "text": "language. The output format \u201c%d\u201d, \u201c%h\u201d, \u201c%o\u201d and \u201c%b\u201d can be\nused to display values in decimal, hexadecimal, octal, and\nbinary, respectively . Additional display formats, such as \u201c%s\u201d\nand \u201c%f\u201d are used to display string and \ufb02oating-point numbers.\nA simulation time-step is speci\ufb01ed using the symbol \u201c#\u201d\nfollowed by the length of simulation time as an integer number .\nIf no delays are assigned to modules, a functional simulation\nwill assume each module has zero propagation delay and one\nsimulation time (#1) is su\ufb03cient to generate outputs.\nUsing the Synopsys design tool, the simulation output to test\nthe F A model in Example 2.12 is shown her e. It can be seen that\nwhen, for example, a = 1, b = 1, cin = 1, the $monitor  outputs s\n= 1 and cout = 1 at simulation time = 2.\nThe \u201c=\u201d symbol is called a blocking assignment. All the\nblocking assignment statements within an initial or an always\nblock are evaluated sequ entially one at a time, much like in a\nprogramming language. On the other hand, a nonblocking", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1014, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "80bc6235-5aee-4e31-81fa-3277f199675c": {"__data__": {"id_": "80bc6235-5aee-4e31-81fa-3277f199675c", "embedding": null, "metadata": {"page_label": "153", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "907dd3c7-8ce2-4da9-a02a-37d2f6fb2520", "node_type": "4", "metadata": {"page_label": "153", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "922c030b8571091d16c0c6d053bf4715d477c5542d7f91882cf76f18757bf96e", "class_name": "RelatedNodeInfo"}}, "text": "assignment (discussed later) is indicated by the symbols \u201c<=\u201d\nand is evaluated simulta neously with the other nonblocking\nstatements in an initial or an always block. The HDL statements\nwithin an initial block ar e evaluated only once, wher eas those of\nan always block are evaluated as long as the circuit is being\nsimulated, much like a real circuit that operates as long as it is\npower ed.\nVerilog also supports \u201cfor-loop,\u201d \u201ccase\u201d (switch), \u201cforever,\u201d\nand other contr ol statements. However, not all Verilog\nstatements are synthesizable. A test-bench, such as the one\nshown in Example 2.13, uses a for-loop to fully test the FA\nmodel. In the example, signals a, b, and cin are declar ed as a 1-\nbit reg, and variable k, used in the for -loop, is declar ed as a 4-bit\nreg in Little Endian bit or der. The \u201creg [0:3] k; \u201d would de\ufb01ne k in\nBig Endian bit order. A multibit variable can be referenced as a\ngroup or individually bit by bit. For example, in the example,\nk[2] refers to the third bit of the multibit variable k, and k[0]\nrefers to the least signi\ufb01cant bit (LSB) in k.\nExample 2.13.  A test-be nch model to fully test the FA structur e model given in\nExample 2.10:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1176, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dceeda7f-8ef1-44fb-a234-4c36069da37c": {"__data__": {"id_": "dceeda7f-8ef1-44fb-a234-4c36069da37c", "embedding": null, "metadata": {"page_label": "154", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1d2bc850-742a-49c7-98ae-b828f632a827", "node_type": "4", "metadata": {"page_label": "154", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "647b231830f05f41fec9e0dcfad098efc43b4ae591d8cfd1082d64abc913cab5", "class_name": "RelatedNodeInfo"}}, "text": "In the test-be nch in Example 2.13, a new value is assigned to\neach of the inputs a, b, and cin during each simulation step.\nThe inputs are also displayed befor e each simulatio n step. After\neach simulation step, the $monitor  statement automatically\ndisplays the values of the output signals, provided that one or\nmore signal values chang e. The output of the simulation run is\nshown next. Note that the $monitor  does not display outputs\nwhen signals s and cout do not chang e between the test vector\na = 0, b = 0, and cin = 1 and the test vector a = 0, b = 1, and\ncin = 0, and again between the test vector a = 1, b = 0, and cin\n= 1 and the test vector a = 1, b = 1, and cin = 0.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 683, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "72152277-5a7a-4ecf-8e48-83cfcf418fa5": {"__data__": {"id_": "72152277-5a7a-4ecf-8e48-83cfcf418fa5", "embedding": null, "metadata": {"page_label": "155", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d2aa29af-12c6-4b69-a220-9d3f91a257a9", "node_type": "4", "metadata": {"page_label": "155", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c0c74adf41e36f16a00933a77147538ff091b71d31393d12d619bcfc540a48d4", "class_name": "RelatedNodeInfo"}}, "text": "2.10.2 Propagation Delay Simulation\nIt is also possible to include an optional propagation delay for\neach of the primitive gates at the time of their instantiations.\nThis provides a more realistic functional simulation. Example\n2.14 is a description of the FA with a 1 ns delay assigned to\neach of the primitive NAND gates and a 3 ns delay to each of\nthe primitive X OR gates. Ther efore, \u0394s = 6 ns and \u0394 cout = 5 ns.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 417, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4800ab9-88ad-4d94-acda-e64859d11709": {"__data__": {"id_": "e4800ab9-88ad-4d94-acda-e64859d11709", "embedding": null, "metadata": {"page_label": "156", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2caa2ab1-3d69-4096-89b4-ef86c5deafd1", "node_type": "4", "metadata": {"page_label": "156", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5cbbfdb33e836fa491c22ea13aa1ae265c3a152453a5688c1b7961cb91b2076e", "class_name": "RelatedNodeInfo"}}, "text": "Example 2.14.  Structural modeling of an F A using primitive gates with delays:\nThe compiler  directive \u2018timescale  indicates the timing scale\napplied during the simulation. The \u2018timescale  in Example 2.14\nde\ufb01nes the scale as 1 ns with 100 ps (picoseconds) increments.\nHowever, the timing scale is an estimation and the simulation\nresults do not pr ovide any r eal timing data.\nThe test-bench in Example 2.15 contains two test vectors\nenter ed at simulation times 0 and 10. As illustrated in the\nfollowing simulation output, initially, the values of both signals\ncout and s are unknown (\u201cx\u201d). For the test vector a = 0, b = 0,\nand cin = 1, which is applied at simulation time 0, the $monitor\noutputs, as expected, cout = 0 at time = 5 and s = 1 at time =\n6. For the test vector a = 0, b = 1, and cin = 1 at time = 10, the\noutputs, as expected, are cout = 1 at time = 15 and s = 0 at\ntime = 16. The two test vectors were selected to expose the\nworst-case delay scenarios.\nExample 2.15.  A test-bench for the F A model with delays:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1029, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3c99bd58-5aa5-4b16-80c6-72d4a02351ca": {"__data__": {"id_": "3c99bd58-5aa5-4b16-80c6-72d4a02351ca", "embedding": null, "metadata": {"page_label": "157", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3c5acc39-53b1-4034-845e-e452ed1c3922", "node_type": "4", "metadata": {"page_label": "157", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1748b647d5dcee06fa36d779d2f0336e35e5470f73c60671b36e56fa1ce9e862", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "97e546f2-8415-40e9-b150-515975c80267": {"__data__": {"id_": "97e546f2-8415-40e9-b150-515975c80267", "embedding": null, "metadata": {"page_label": "158", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f35ea2c0-dced-41a9-a8d9-17a2a2a1559d", "node_type": "4", "metadata": {"page_label": "158", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2ca2743254216c2da952350e33c6e35adee60f9eb6d3ed45e4181a18a4b8825a", "class_name": "RelatedNodeInfo"}}, "text": "Nonprimitive modules cannot be instantiated with delay\ninformation. For these modules, the delay information is\ndeter mined from the delay values speci\ufb01ed within the module.\nHowever, it is possible to use a parameteriz ed delay to\noverwrite the delay information of any module during\ninstantiation.\n2.10.3 Behavioral Modeling\nThe basic behavioral description in Verilog is the assign\nstatement. It is used to directly enter a Boolean expression\nusing the symbols \u201c~\u201d, \u201c&\u201d, \u201c|\u201d, and \u201c\u2227\u201d to express bit-wise\nNOT, AND, OR, and XOR operators, respectively . The NAND,\nNOR, and XNOR operators are also expressed using combined\nsymbols \u201c&~\u201d, \u201c|~\u201d, and \u201c~\u2227\u201d or \u201c\u2227~\u201d, respectively . Table 2.13\nis a summary of the opera tors used in the Verilog HDL. Example\n2.16 illustrates a behavi or description of a 1-bit 2-to-1 MUX\nusing an assign  statement.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 840, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "81e0cd74-96ef-4a4b-9519-0795d712cd78": {"__data__": {"id_": "81e0cd74-96ef-4a4b-9519-0795d712cd78", "embedding": null, "metadata": {"page_label": "159", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "19dc8560-d51a-4751-9476-7f78574cf25e", "node_type": "4", "metadata": {"page_label": "159", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "59f792da48cacdc868b1dfae519f70c92287beba6a4af13911f81c82f925d927", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  2.13  A Summary of the V erilog HDL Operators\nExample 2.16.  A behavior model of a 1-bit 2-to -1 MUX using an assign  statement:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 135, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "25b48708-fbe4-434d-b2c1-9182f56d317b": {"__data__": {"id_": "25b48708-fbe4-434d-b2c1-9182f56d317b", "embedding": null, "metadata": {"page_label": "160", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aca442a-8d58-4649-a1ce-0c3e42ab0a6b", "node_type": "4", "metadata": {"page_label": "160", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "bb653dab1f570135bf7a2ed046540a79ff91de2ec014536284ed0207a7f76987", "class_name": "RelatedNodeInfo"}}, "text": "The most commonly used statement to describe the behavior\nof a circuit is an always  block. It is declar ed using the keywor d\n\u201calways\u201d followed by the symbol @ and a set of signal names\nas its sensitivity list, and like an initial  block, contains a\nbegin-end  block. Example 2.17 illustrates an alternative beha vior\nmodel of a 1-bit 2-to-1 MUX using an \u201cif-else\u201d statement.\nBecause the r signal depends on signals s, x, and y, these\nsignals ar e included in the sensitivity list of the always  block.\nExample 2.17.  A behavior modeling of a 1-bit, 2-to-1 MUX using an \u201cif-else\u201d\nstatement:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 591, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "164e2027-4d7c-4392-8701-0542ecafc323": {"__data__": {"id_": "164e2027-4d7c-4392-8701-0542ecafc323", "embedding": null, "metadata": {"page_label": "161", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dce2fd1c-e062-4acf-ae2b-4ca50df25179", "node_type": "4", "metadata": {"page_label": "161", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0396b63180509ef0161e9cde7d79b26cfc291adc224ad5722e07a655b8e2a464", "class_name": "RelatedNodeInfo"}}, "text": "Like an initial  block, all the variables to left of an\nassignment (=) symbol within an always  block must additionally\nbe declar ed as type reg. A proper way to decla re an output\nvariable both as type output  and type reg is the combined\nsyntax output reg , as illustrated in Example 2.17.\nThe syntax 1\u2019b0 is used to enter a 1-bit binary number . Other\nexamples to enter numb ers are 5\u2019b11111 , 8\u2019hFF , and 9\u2019o777  to\nenter a 5-bit binary number (11111)2, an 8-bit hex number\n0xFF, and a 9-bit octal number (777)8, respe ctively, wher e \u201c8\u201d\nis used her e to indicate an octal number .\nIn addition, depending on the compiler version, alternative\nsyntax es are available to describe a sensitivity list. For\nexample, \u201calways@(s or x or y)\u201d, \u201calways@(s, x, y)\u201d, \u201calways@(*) \u201d,\nor \u201calways@* \u201d are all acceptable syntax es to enter a sensitivity\nlist for a combinational circuit model. Further more, using a * as\nthe sensitivity list in a combinational always  block is the most\npreferred syntax, allowing  the compiler to deter mine the list of\nsensitivity variables. A missing variable in a sensitivity list can\nresult in an incor rect combinational cir cuit behavior .\nExample 2.18 illustrates the behavior model of an FA using a\ncase statement to enter  its truth table. In the example, the\ncurly brackets ({}) indica te concatenation. A \u201cdefault \u201d case is\nalso normally requir ed to handle missing cases. The acceptable\nsignal values are 0, 1, x (unknown), and z (high-impedance, Z).\nAlternatively, \u201ccasex \u201d ignores the x and z signal values and\ntreats them as don\u2019t-car es.\nExample 2.18.  A behavior model of a F A using a \u201c case\u201d statement:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1643, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "12615078-855f-40d3-9f2d-03c5cee6ce11": {"__data__": {"id_": "12615078-855f-40d3-9f2d-03c5cee6ce11", "embedding": null, "metadata": {"page_label": "162", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ec7fa825-0663-4215-a0c1-2a6f924c6f09", "node_type": "4", "metadata": {"page_label": "162", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "de80df5c6c1726851da342a3af85062df41f9d5adebadaac9dde9349de818aa5", "class_name": "RelatedNodeInfo"}}, "text": "Example 2.19 illustrates a behavior description of a 4-bit tri-\nstate bu\ufb00er with an active-low enable signal, wher e 4\u2019bz\nindicates a 4-bit high-impedance Z value.\nExample 2.19.  A behavior model of a 4-bit tri-state bu\ufb00er :", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 224, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "70539acc-ae39-4f80-9e0c-94a45a0735cc": {"__data__": {"id_": "70539acc-ae39-4f80-9e0c-94a45a0735cc", "embedding": null, "metadata": {"page_label": "163", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fc1f52aa-27b1-418b-95d0-5e37035d4e61", "node_type": "4", "metadata": {"page_label": "163", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e7657400ec0a50b31fbf7a41a0d9199b59299f813e493f4697ba8550c2913256", "class_name": "RelatedNodeInfo"}}, "text": "2.10.4 Synthesis and Simulation\nThe FA HDL model in Example 2.18 was synthesized using the\nAltera Quartu s II design and synthesis tool [4]. For synthesis,\nEP4CGX15BF14A7 1.2V, one of the Altera Cyclone IV GX family\nof programmable chips, was used. The synthesized circuit was\nthen simulated with the Altera ModelSim simulation tool. Figure\n2.40 illustr ates the synthesized circuit with two CLBs used to\nimplement the expressions for the sum and carry-out bits. In\nthis case, the inputs a, b, and cin and the outputs s and cout\nare also bu\ufb00er ed to prevent possible fan-out violations. The\nsimulation of the synthesized circuit with eight test vectors\nusing a wavefor m is shown in Fig. 2.41 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 694, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9b5014b1-b831-4c31-b6f5-c5859cc671a9": {"__data__": {"id_": "9b5014b1-b831-4c31-b6f5-c5859cc671a9", "embedding": null, "metadata": {"page_label": "164", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c648b129-7f42-4023-8f01-6f56c821dd1c", "node_type": "4", "metadata": {"page_label": "164", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "79bda509c23ce256d2a02dbf0f255362d3bb6b875295b67073542c410bd94c16", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.40  The synthesized cir cuit of the F A behavioral model\ngiven in Example 2.18.\nFIGURE 2.41  A gate-level simulation of the synthesized F A in Fig.\n2.40.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 162, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "181a0ae8-6d62-4e2d-a1e8-c04293458cd0": {"__data__": {"id_": "181a0ae8-6d62-4e2d-a1e8-c04293458cd0", "embedding": null, "metadata": {"page_label": "165", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ad87f158-1406-4d1f-9683-958b72a2fc03", "node_type": "4", "metadata": {"page_label": "165", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "564ed1122b05201498e6398ae20780bb15c2d694b3494aae0bdcf4a199292466", "class_name": "RelatedNodeInfo"}}, "text": "Likewise, the 4-bit tri-stat e bu\ufb00er model in Example 2.19 was\nsynthesized and simulated using the Altera desig n, synthesis,\nand simulation tools. The synthesized circuit is shown in Fig.\n2.42. Because the enable signal _e is active-low, an extra NOT\ngate is not requir ed to operate the active-low enabled tri-state\nbu\ufb00ers. The simulation of the synthesized circuit with two test\nvectors is shown in Fig. 2.43 .\nFIGURE 2.42  A synthesized 4-bit tri-state bu\ufb00er using the Altera\nQuartus II design tool.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 503, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5ceec94b-b6b1-4377-aea4-6cf444a18dcc": {"__data__": {"id_": "5ceec94b-b6b1-4377-aea4-6cf444a18dcc", "embedding": null, "metadata": {"page_label": "166", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9b5e6d32-d4bb-4cc0-af19-ba4c755b87c3", "node_type": "4", "metadata": {"page_label": "166", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "24a54eb3b38307ac19d4ec1c3a0dbe03a5a3295cd5f3c349ab3c82491e534dcc", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 2.43  The simulation output of the 4-bit tri-state bu\ufb00er in\nFig. 2.42 .\nReferences\n1. Espr esso,\nhttp://diamond.gem.valpo .edu/~dhart/ece110/espr esso/tuto\nrial.html .\n2. SN54/74LS245 Octal Bus T ransmitter/R eceiver fr om 7400\nchip series.\n3. Xilinx FPGAs, http://www .xilinx.com/ .\n4. Altera, http://www .altera.com .\n5. EasyFPGA, http://www .easyfpga.com/ .\n6. Ducan Buel, T arek El- Ghazawi, Kris Gaj, and V oldymyr\nKindratenk o, \u201cHigh-perfor mace r econ\ufb01gurable computing,\u201d", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 485, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "54ac7895-6c4f-4709-b0b2-cf43263b76c1": {"__data__": {"id_": "54ac7895-6c4f-4709-b0b2-cf43263b76c1", "embedding": null, "metadata": {"page_label": "167", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "98e50b48-65ba-4ab7-a00a-7ad91dd3e836", "node_type": "4", "metadata": {"page_label": "167", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "19c8ca799fd499e8bb720c0f1f7d603b599303ea1edf87865d593bf9f3a7d486", "class_name": "RelatedNodeInfo"}}, "text": "IEEE Computer , Mar ch 2007, pp. 23\u201327.\n7. LogicW orks, Digital design schematic tool, P earson\nPublishing, http://www .pearsonhigher ed.com/ .\n\u00a0\nExercises\n2.1 Evaluate f = x\n + yz for x = 1, y = 0, and z = 1 and for x =\n1, y = 1, and z = 0.\n2.2 Evaluate \n  and x = 1 and for _ c = 1 and x =\n1 wher e _c is an active-low signal.\n2.3 P roof Demor gan\u2019s theor em \n  by cr eating truth tables\nfor \n  and g = \n + \n. Are the two truth tables identical?\n2.4 P roof Demor gan\u2019s theor em \n  by cr eating truth tables\nfor \n  and g = \n . Are the two truth tables identical?\n2.5 Draw the cir cuit schematic for f = x\n + yz and then convert\nthe schematic to NAND gates using the steps illustrated in\nthe te xtbook.\n2.6 Evaluate f = (x + y)(\n + z) for x = 1, y = 0, and z = 1 and\nfor x = 1, y = 1, and z = 0.\n2.7 Draw the cir cuit schematic for f = (x + y)(\n + z) and then\nconvert the schematic to NOR gates using the steps\nillustrated in the te xtbook.\n2.8 Given f = x\n + yz (an SOP e xpression) deter mine its\nequivalent POS e xpression. Hint: F irst \ufb01nd the SOP of \n  and\nthen use the rule \u201c POS e xpression of f = Complement of the\nSOP e xpression of \n \u201d.\n2.9 Obtain the POS e xpression of f by applying the Dual\nPrinciple to the SOP of \n  wher e f = x\n + yz.\n2.10 Suppose we would lik e to build function Y = 2X + 3 wher e\nX denotes a 3-bit unsigned value ( x2x1x0)2 and Y = y4..y0\nis a 5-bit value in har dwar e. Construct its truth table wher e", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1438, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "366113c6-a33c-4386-aa06-f31e8eb76452": {"__data__": {"id_": "366113c6-a33c-4386-aa06-f31e8eb76452", "embedding": null, "metadata": {"page_label": "168", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5d35d923-ce81-45c9-97c3-7060275b2a50", "node_type": "4", "metadata": {"page_label": "168", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2f85622125188dc7410dff780206e90275af6b55e7c7c1a01514c76ea0ef1c4f", "class_name": "RelatedNodeInfo"}}, "text": "input bits ar e x2, x1, and x0 and output bits ar e y4 through\ny0. Then do the following for output y2 (you may r epeat\nthis for the other outputs):\na. Deter mine the canonical SOP e xpression for output\nbit y2.\nb. Write the min-ter ms for y2.\nc. Use K -map and \ufb01nd a minimal SOP e xpression for y2.\nd. Draw a minimal NAND cir cuit for y2.\ne. Compar e the number of transistors r equir ed to\nimplement the canonical and the minimal SOP\nexpressions.\n2.11 R epeat P roblem 2.10 but this time use POS e xpressions for\ny2.\n2.12 R epeat P roblem 2.10 b through d but this time use 3-bit\n2\u2019s complement values for X and output y4.\n2.13 R epeat P roblem 2.12 b through d but this time use POS\nexpressions for y4.\n2.14 F ind a minimal SOP e xpression for each of the following\nfunctions using K -maps:\na. f(w, x, y, z) = \u03a3(0, 2, 8, 10) + \u03a3d(12, 14)\nb. g(a, b, c, d) = \u03a3(5, 7, 13, 15) + \u03a3d(6, 14)\nc. h(w, x, y, z) = II(0, 2, 8, 10) + IId(12, 14)\nd. t(a, b, c, d) = II(5, 7, 13, 15) + IId(6, 14)\n2.15 F ind minimal POS e xpressions for each of the functions\ngiven in P roblem 2.14.\n2.16 Use Espr esso sof tware to generate the minimal SOP\nexpressions for all the output bits of function Y = 2X + 3\nwher e X is a 4-bit unsigned value less than 10. The X values\n10 to 15 ar e ignor ed and ar e treated as don\u2019t car es.\n2.17 R epeat Ex ercise 2.16 but use 4-bit 2\u2019s complement values\nfor \u20135 \u2264 X \u2264 5 and don\u2019t car e for X \u2264 \u20135 and X \u2265 5.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1423, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f1f8b2f1-32c2-47db-8bb5-dbbc29c5ce77": {"__data__": {"id_": "f1f8b2f1-32c2-47db-8bb5-dbbc29c5ce77", "embedding": null, "metadata": {"page_label": "169", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e5631165-2c53-49c1-b2eb-755288942e87", "node_type": "4", "metadata": {"page_label": "169", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2b302d598ece4dfc3016b6598dd45aa720cc8e9a19399f5105505851690b1f5a", "class_name": "RelatedNodeInfo"}}, "text": "2.18 Given the function Y = X mod 7 wher e X = x3x2x1x0 is a\n4-bit unsigned input and Y = y2y1y0 is a 3-bit unsigned\nresult, cr eate a truth table for Y and deter mine SOP and\nPOS e xpressions for y2, y1, and y0.\n2.19 Use the logic minimization algorithm to deter mine a\nminimal SOP e xpression for the output bit y0 of function Y\n= X \u2013 3 wher e X = x3..x0 and Y = y3..y0 are 4-bit 2\u2019s\ncomplement numbers.\n2.20 Use the logic minimization algorithm to deter mine a\nminimal SOP e xpression for y = \u03a3(2, 3, 6, 9, 10, 13).\n2.21 The prime implicants for f(a, b, c, d) = \u03a3(1, 3, 5, 7, 10, 11,\n14, 15) ar e \nd + ac and cd. The timing diagram for its\nminimal e xpression f = \nd + ac is shown in Fig. 2.25 . Draw\nthe cir cuit for the non-minimal f = \nd + ac + cd which\nincludes all its prime implicants, and label its inter nal\nsignals. Draw a timing diagram for the new cir cuit when its\ninput change fr om acd = 111 to acd = 011. Does the cir cuit\nproduce a glitch?\n2.22 The minimal POS e xpression for f(a, b, c, d) = (0, 2, 4, 6, 8,\n9, 12, 13) has two essential prime implicants ( a + d) and (\n+ c) and a non-essential prime implicant ( c + d).\na. Draw a timing for minimal f = (a + d)(\n + c) when its\ninputs change fr om acd = 000 to acd = 100. Does the\ncircuit pr oduce a glitch?\nb. Draw a timing for the non-minimal f = (a + d)(\n + c)(c\n+ d) when its inputs change fr om acd = 000 to acd =\n100. Note f includes all its prime implicants. Is ther e a 1-\nhazar d?\n2.23 Design a two -input wir ed-OR gate (Hint: Use Demor gan\u2019s\ntheor ems.).\n2.24 Deter mine a POS e xpression for the 2-to -1 MUX in Fig.\n2.31.\n2.25 Design an arbitrary function f(w, x) = \u03a3(0, 2) using a 4-to -1\nMUX.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1675, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "40392377-c668-46c2-b347-9f6ba38e8b52": {"__data__": {"id_": "40392377-c668-46c2-b347-9f6ba38e8b52", "embedding": null, "metadata": {"page_label": "170", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3495f5f8-a641-432b-877c-4f7a6f4a939b", "node_type": "4", "metadata": {"page_label": "170", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d70cbab605ae8393e429200fc477be58e11861c953e0c7ec26b077809730a282", "class_name": "RelatedNodeInfo"}}, "text": "2.26 Use a 2-to -4 decoder to connect four modules each\noutputting one bit to a one-bit bus. Only one module at a\ntime can place data on the bus. A t times no module may be\nallowed to place data on the bus. Show details.\n2.27 Design a cir cuit for the 3-to -2 encoder in Fig. 2.35  using\nNAND gates.\n2.28 Suppose, the decoder in P roblem 26 is able to activate\neach output signal every 10 ns in a r ound-r obin fashion and\nallow each module to output 1 bit once every 10 ns. What is\nthe peak rate of transfer for each module in bytes? Also,\nwhat is the peak bus bandwidth? Hint: R ate of transfer and\nbandwidth ar e measur ed in bytes per second. P eak rate of\ntransfers is the maximum number of bytes (in KB, MB, etc.)\na module can send per second. P eak bus bandwidth is the\nmaximum number of bytes a bus can transfer per second.\n2.29 Cr eate and simulate for all values of x, y, and z a Verilog\nmodel for f = x\n + yz using:\na. A structural description with NOT, AND, and OR gates\nb. A structural description with NOT and NAND gates\nc. A structural description with delays using 1 ns delay\nfor NOT and NAND and 2 ns delay for AND and OR gates\nd. A behavioral description using an \u201cassign \u201d statement\ne. A behavioral description using an \u201calways\u201d statement\n2.30 Cr eate and simulate for all values of x, y, and z a Verilog\nmodel for f = (x + y)(\n + z) using:\na. A structural description with NOT, AND, and OR gates\nb. A structural description with NOT and NOR gates\nc. A structural description with delays using 1 ns delay\nfor NOT and NOR and 2ns delay for AND and OR gates\nd. A behavioral description using an \u201cassign \u201d statement\ne. A behavioral description using an \u201calways\u201d statement\n2.31 F or the cases below cr eate and simulate a V erilog\nbehavioral description for a 1-to -4 MUX.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1787, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9686e2be-93ca-41ab-99a2-cc9417fd97e0": {"__data__": {"id_": "9686e2be-93ca-41ab-99a2-cc9417fd97e0", "embedding": null, "metadata": {"page_label": "171", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a646d20b-dac9-40c9-b9fc-c97e27259412", "node_type": "4", "metadata": {"page_label": "171", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "ec2c90aefda800bafd68386c43b00a8afe58b102f0d3e6b8e13e66c67b28448a", "class_name": "RelatedNodeInfo"}}, "text": "a. Use \u201cif -else\u201d statements\nb. Use a \u201ccase\u201d statement\n2.32 F or the cases below cr eate and simulate a V erilog\nbehavioral description for a 2-to -4 decoder . Label signal\nnames with cor rect polarity (e.g., _ x can be used to indicate\nan active-low signal and x an active-high signal).\na. Active-high inputs and active-high outputs using an\n\u201calways\u201d statement\nb. Active-high inputs and active-low outputs using an\n\u201calways\u201d statement\n2.33 F or the cases below cr eate and simulate a V erilog\nbehavioral description for a 3-to -2 decoder . Label signal\nnames with cor rect polarity (e.g., _ x would indicate an\nactive-low signal and x an active-high signal).\na. Active-high inputs and active-high outputs using an\n\u201calways\u201d statement\nb. Active-low inputs and active-high outputs using an\n\u201calways\u201d statement", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 805, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be638277-c48e-4c0d-a4a4-f505ae864c86": {"__data__": {"id_": "be638277-c48e-4c0d-a4a4-f505ae864c86", "embedding": null, "metadata": {"page_label": "172", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "70f666bf-51f7-4ae6-acb9-d0e54f8e914f", "node_type": "4", "metadata": {"page_label": "172", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3c1c4a2fc537c5569d05117ae642c9e3f157034dfcae9bdfc823f4e963fb41bf", "class_name": "RelatedNodeInfo"}}, "text": "CHAPTER 3\nCombinational Circuits: Large\nDesigns\n\u00a0\n3.1 Introduction\nThe design techniques that were presented in the previous chapter\napply only to combinational circuits with a small number of inputs.\nCombinational circuits that have many inputs must be designed\ndi\ufb00er ently. For example, consider a combinational circuit with n =\n32 inputs. Its truth table would have more than four billion rows\u2014\ntoo large to be designed using the technique s of Chap. 2.\nMoreover, large circuits must meet design fan-in and fan-out\nrequir ements. This requir es a top-down methodolog y to repeatedly\npartition a large combinational circuit design problem into smaller\nproblems until the \ufb01nal set of design problems is small enough to\nuse the techniques learned in Chap. 2. The larger circuit is then\ncreated by assembling the smaller cir cuit modules.\nCircuits that perfor m four elementary arithmetic operations\u2014\naddition, subtraction, multiplication, and division\u2014ar e examples of\nlarge combi national circuits used in moder n processors. Like\nsoftware solutions that may implement alternative  algorithms with\neach requiring di\ufb00er ent processing time and memory usage, large", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1163, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ff396c9-cc97-4691-adea-147ba8e35480": {"__data__": {"id_": "4ff396c9-cc97-4691-adea-147ba8e35480", "embedding": null, "metadata": {"page_label": "173", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bb4fa1c4-3387-49cb-88bf-9ef0492402cb", "node_type": "4", "metadata": {"page_label": "173", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "bba6d26e393a0138ed407171f50ad4c169e3ae174bd393c7e05f10e1a841a9a2", "class_name": "RelatedNodeInfo"}}, "text": "combinational circuits may be implemented using a di\ufb00er ent\namount of hardwar e (e.g., transistor count). A circuit solution with\nmore transistors implies a higher number of logic operations will be\nperfor med in parallel, which typically means smaller circuit\npropagation delay, but also mor e power consumption.\nIn general, more hardwar e implies less processing time. A CPU\nthat contains fast arithmetic modules is expected to execute\nprograms faster; a multicor e processor is expected to perfor m\ntasks faster than a single-cor e processor, etc.\nIn this chapter, we provide design examples of arithmetic\ncircuits. In particular, we discuss the design of a commonly known\nfast adder and also present the design of a subtractor, a 2\u2019s\ncomplement adder, an arithmetic logic unit (ALU), a multiplier, and\na divider . The chapter also pr esents IEEE \ufb02oating point (FP) number\nstandar ds and arithmetic.\n3.1.1 Top-Down Design Methodology\nA top-d own methodology, also known as hierar chical, refers to a\ndesign \ufb02ow, such as a tree, that consists of parent and leaf nodes.\nA large design problem at the root node is successively partitioned\ninto a set of smaller design problems at the leaf nodes. The\nproblem at the root is \ufb01rst partitioned into smaller design problems\nas childr en nodes. The design problem at each child node (now a\nparent node)  is again divided into yet smaller design problems, if\nnecessary . The pr ocess continues until each of the design pr oblems\nat the leaf nodes is small and has fewer inputs.\nFor each design problem  at the leaf nodes, the techniques of\nChap. 2 are applied to design a circuit. These circuits are then\nsuccessively combined to build the target large combinational\ncircuit. A design may require one or more copies of each smaller\ncircuit. A \ufb01nal circuit must be free from any fan-in and fan-out\nproblems.\nAt each  step in the design  \ufb02ow, various methods and algorithms\nare examined, design tradeo\ufb00s such as circuit delay and gate\ncounts are analyzed, and the best solutions that meet the overall\ndesign requir ements are selected. In general, a bit-parallel or bit-", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2111, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bad4a5f8-f1a1-4458-bbf9-e29bae8e8ea6": {"__data__": {"id_": "bad4a5f8-f1a1-4458-bbf9-e29bae8e8ea6", "embedding": null, "metadata": {"page_label": "174", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5744cdd2-ffde-40ba-ac96-babcd200b9af", "node_type": "4", "metadata": {"page_label": "174", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "30485aa053ef2aa2a6f8ad932d93f8b231332b0fbbe15acfeb30ba595cf7abd7", "class_name": "RelatedNodeInfo"}}, "text": "serial design partitioning technique (de\ufb01ned next) is applied at\neach par ent node, starting at the r oot node.\nA partitioning is called bit-parallel  when a design problem is\npartitioned into smaller design problems, each a single function.\nFor example,  the design of the combined AND/ADD circuit module\nthat generate s the result of either an n-bit bitwise AND or an n-bit\naddition can be viewed as thr ee separate design pr oblems: an n-bit\nbitwise AND,  an n-bit adder, and an n-bit 2-to-1 multiple xer (MUX),\nas illustrated  for n = 8 in Fig. 3.1 . The MUX would select either the\nresult genera ted by the bitwise AND module or the sum generated\nby the adder . Even though the bitwise AND, the adder, and the\nMUX are now associated with only a single function, they are still\ntoo big to design using the techniques of Chap. 2. Each of these\nmodules must be further partitioned into yet smaller design\nproblems.\nFIGURE 3.1 A top-down, bit-parallel and bit-serial design\npartitioning e xample.\nThe bit-serial  methodolog y is used to partition a design\nproblem into smaller problems, each requiring fewer inputs. For", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1120, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ef3ff959-e082-4010-b00a-301dbed8e9c8": {"__data__": {"id_": "ef3ff959-e082-4010-b00a-301dbed8e9c8", "embedding": null, "metadata": {"page_label": "175", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d1e49761-2745-4d27-98c9-0184e60183e4", "node_type": "4", "metadata": {"page_label": "175", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "66a3c309194f70668073d6356beca7792a9da95f7896c5ee6ee63705a1b711c8", "class_name": "RelatedNodeInfo"}}, "text": "example, the design of a large circuit with n-bit inputs can be\npartitioned into a k-bit input design problem called a slice, with k\n(preferably) evenly dividin g n. Each slice may perfor m one or more\nfunctions, but only operates on fewer bits. For instance, an 8-bit\nadder can be designed using 8 copies of a full-adde r (FA), or the 8-\nbit, 2-to-1 MUX can be designed using eight copies  of a 1-bit, 2-to-\n1 MUX. In the \ufb01gure, the number next to each node indicates the\nnumber of copies. The constant k is selected in such a way that a\nk-bit slice would not violate  the fan-in and fan-out limitations of the\ngates used.\nIt is also possible to use the bit-serial methodology  to design an\n8-bit AND/ADD module using eight copies of a 1-bit AND/ADD slice,\nfour copies of a 2-bit AND/ADD slice, etc., as illustrated in Fig. 3.2\nfor 1-bit and 2-bit AND/AD D slices. In general, an n-bit module may\nbe designed using n 1-bit, n/2 2-bit, n/4 4-bit slices, etc. Each slice\nmay also need to output additional signals\u2014for example, a\ncarryout bit that would be used by an adjacent slice when the ADD\nfunction is selected. For a minimum propagation delay, a bit-serial\nslice is modeled with a truth table and either designed as a\nminimized sum of pr oduct (SOP) or pr oduct of sum (POS) cir cuit.\nFIGURE 3.2 A top-down, bit-serial design partitioning e xample: ( a)\neight 1-bit slices; ( b) four 2-bit slices.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1402, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c39cd2bc-1feb-4ef0-ab0e-9b26334d2ba1": {"__data__": {"id_": "c39cd2bc-1feb-4ef0-ab0e-9b26334d2ba1", "embedding": null, "metadata": {"page_label": "176", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cfe425bb-8b21-4ce8-af54-733e218ea7b4", "node_type": "4", "metadata": {"page_label": "176", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2d9a0c01e60db42b6e8205995e6ca2303603920ee5e2c7020fd33df5042cb5b0", "class_name": "RelatedNodeInfo"}}, "text": "Which design methodology, bit-parallel or bit-serial, to use in\neach step of the design process will have an impact on the\nmaximum propagation delay of the resultant circuit and the total\nnumber of requir ed gates. This chapter presents the design of\nsome commonly used lar ge combinational cir cuits.\n\u00a0\n3.2 Arithmetic Functions\nAdding, subtracting, multiplying, and dividing are four basic\narithmetic functions. More comple x functions such as squar e root,\nexponential, sine, etc., that operate on \ufb02oating-point (FP) numbers\nuse the basic four functions to produce outputs. As the number of\ntransistors in an integrate d chip (IC) has increased over the years,\nmore and more of the arithmetic functions have been implemented\nin hardwar e. For example, the earlier microprocessors only\nimplemented addition and subtraction funct ions, and the\nremaining functions were implemented in software. Many\ncalculators are still designed this way, wher e a small number of\nfunctions are implemented in hardwar e and the rest in software.\nModer n microprocessors typically include integer arithmetic\ncircuits called an integer unit (IU) and \ufb02oating-point unit (FPU).\nOften, a moder n microprocessor includes multiple IUs and FPUs as\nwell as integer and \ufb02oating-point single instruction multiple data\n(SIMD) units, discussed in Chap. 1 .\n\u00a0\n3.3 Adder\nAn n-bit integer adder inputs two n-bit numbers and an optional\ncarry-in bit (cin) to generate an n-bit sum and a \ufb01nal carryout bit\n(cout). As illustrated in Fig. 3.3, starting from the right (i.e., the\nleast signi\ufb01cant bits \ufb01rst), two bits and the previous carry-bit are\nadded to generate a sum-bit and a carry-bit (0 or 1) to be used\nwith the next two bits. In the \ufb01gure, the initial cin is assumed to be", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1746, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "04088fb4-7f4e-4002-af28-f8e32e985928": {"__data__": {"id_": "04088fb4-7f4e-4002-af28-f8e32e985928", "embedding": null, "metadata": {"page_label": "177", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "80376e6b-432e-462f-b50d-ae8902dae753", "node_type": "4", "metadata": {"page_label": "177", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a15556c305b4f1f476ec6f20c422e94b3fddc922026109a97f2672ef3b014ef1", "class_name": "RelatedNodeInfo"}}, "text": "0. The algori thm repeats until the last two bits are added and the\n\ufb01nal sum bit and the \ufb01nal car ryout bit, cout, are generated.\nFIGURE 3.3 The illustration of a 4-bit binary addition.\nIn the \ufb01gure, the \ufb01rst two bits (both 1) and cin = 0 are added to\ngenerate 0 as the sum bit and 1 as the carry bit. The next two bits,\nagain both 1, and the previous carry-bit (1) are added to generate\n1 for both the next sum-bit and the next carry-bit. Other bits are\nsimilarly added. This simple addition algorithm can be viewed as\nmultiple 1-bit addition steps, each an FA, as illustrated in Fig. 3.4\nfor the ith step. During each step of the algorithm, two 1-bit inputs\nai and bi and the previous carry-bit ci\u20131 are added to generate the\nsum-bit si and the next carry-bit ci. For n bits, the steps can be\nrepeated n times for i = 0, 1, \u2026, n \u2013 1 with c\u20131 = cin and cout = cn\u20131.\nFIGURE 3.4 Viewing each binary addition step as an F A.\n3.3.1 Carry Propagate Adder\nAn n-bit adder that implements the simple addition  algorithm\nillustrated in Fig. 3.4 is designed by connect ing n FA slices in\nseries, as shown in Fig. 3.5. The carry-bits c0 through cn\u20131 are\ngenerated one at a time, starting from the least signi\ufb01cant carry-\nbit, similar to the way addition is perfor med by hand. The adder is\ncalled a carry propagate adder (CPA) because the carry-bits\npropagate from one FA slice to the next. The adde r is also called a", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1408, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "104cf660-3e13-4cae-94b0-3495708352b6": {"__data__": {"id_": "104cf660-3e13-4cae-94b0-3495708352b6", "embedding": null, "metadata": {"page_label": "178", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3a2f5e5c-93c4-44a9-addf-b97eb463f419", "node_type": "4", "metadata": {"page_label": "178", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "34a2054ddd8e42e1ddd35c64f46a997ce45b4407a9911630ca80513f180ba8e0", "class_name": "RelatedNodeInfo"}}, "text": "ripple carry adder (RCA) because the carry-bits ripple through the\ncircuit as one car ry-bit is fed to the ne xt FA slice in a chain.\nFIGURE 3.5 An n-bit adder : (a) block diagram; ( b) an n-bit CP A.\nThe CPA is the simplest circuit for an adder and has the longest\npropagation delay that is proportional to the numb er of the carry-\nbits. Each carry signal depends on the preceding carry signal; c0\ndepends on c1, c1 depends on c0, c2 depends on c1, etc. Equation\n(3.1) is used to estimate the propagation delay of an n-bit CPA,\nwher e \u0394CPA(n) represents the propagation delay of an n-bit CPA\nand the \u0394FAc and \u0394FAs, respectively, stand for the carry and sum\nsignal pr opagation delays of an F A.\nEquation (3.2) presents the propagation  delay calculation for an\nn-bit CPA using \u0394NAND = 0.1 ns and for an FA, \u0394FAc = 0.2 ns and", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 826, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e7fbf93-71ba-4157-989c-c6c256f14195": {"__data__": {"id_": "8e7fbf93-71ba-4157-989c-c6c256f14195", "embedding": null, "metadata": {"page_label": "179", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5a0fea3b-68d3-4e4b-9dbf-d338912b33d9", "node_type": "4", "metadata": {"page_label": "179", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3e11c35adfbc8392688de1a5bf67fc879a5e200de2df7e72fda3e818ff585b81", "class_name": "RelatedNodeInfo"}}, "text": "\u0394FAs = 0.3 ns, as given in Eq. (2.8)  in Chap. 2 as SOP expressions.\nFor n = 8, \u0394CP A(8) = 1.7 ns.\n3.3.2 Carry Look-Ahead Adder\nFor large values of n, the propagation delay of a CPA would be\nprohibitively long. The circuit would consist of a long carry-\ngenerate chain. However, it is possible to use more gates and\ngenerate the carry-bits independently and concur rently in less\ntime. To illustrate this, two signals, named propagate  (p) and\ngenerate  (g), are de\ufb01ned as follows for the bit position i, for i = 0,\n1, 2, \u2026, n \u2013 1.\nNote that all the p and g bits can be generated at the same time\nand in parallel using n XOR and n AND gates, respectively . Recall\nfrom Eq. (2.9)  (Chap. 2 ),\nThe substitution of Eq. (3.3)  into Eq. (3.4)  yields:\nEquation (3.6)  lists the logic expressions  for the \ufb01rst three carry-\nbits in terms of the p, g, and precedi ng carry-bits. The expressions\nclearly illustrate the r ecursive dependency of the car ry-bits.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 952, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8a57afcc-feb7-44e3-b06b-095f00611f46": {"__data__": {"id_": "8a57afcc-feb7-44e3-b06b-095f00611f46", "embedding": null, "metadata": {"page_label": "180", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cb6055ca-9bcd-410c-9fe1-3bb4c85638ed", "node_type": "4", "metadata": {"page_label": "180", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9b02dd2a5cd6e2399c1a9168537fc0a69048cb23fda8a02bd811e30c0f0f5d7e", "class_name": "RelatedNodeInfo"}}, "text": "It is possible to generate the carry-bits c1, c2, etc. in parallel if\nthe expression of each successive carry-bit is substituted in the\nexpression of the next carry-bit. This is illustrated next for carry-\nbits c1 and c2.\nBoth of the \ufb01nal expressions of c1 and c2 now depend on c\u20131 and\nthus can be generated in parallel. Each expanded expression,\nhowever, will requir e more hardwar e, including gates, with larger\nfan-in and fan-out requir ements, as compar ed to those requir ed for\nimplementing Eq. (3.6) .\nThe p and g bits are used  to identif y certain bit patter ns that can\nbe used to quickly deter mine a carry-bit for a block of inputs. The\nexamples in Fig. 3.6 illustrate this point using 3-bit inputs A =\na2a1a0 and B = b2b1b0. In example  (a), p2, p1, and p0 are all 1;\ntherefore, 1 as the carry in (c\u20131 = 1) will propagate out as c2 = 1\nbecause p2 p1 p0c\u20131 = 1 in Eq. (3.7) . In e xample ( b), p2 = 1, p1 = 1,\nand g0 = 1; therefore, a carry-bit generated at bit position 0 (i.e.,\na0 = 1 and b0 = 1, and thus g0 = 1) will propagate out as c2 = 1\nbecause p2p1g0 = 1. The remaining examples illustrate other bit", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1121, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e9e9bb50-de23-46f5-9a94-90bd8014c9a5": {"__data__": {"id_": "e9e9bb50-de23-46f5-9a94-90bd8014c9a5", "embedding": null, "metadata": {"page_label": "181", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5d2d835f-5636-47d4-b07a-60052bbe5e72", "node_type": "4", "metadata": {"page_label": "181", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "96633ecfcc16e302a46184ce7b4134e28ee81f2b77dd89ca94cfdd327b32864b", "class_name": "RelatedNodeInfo"}}, "text": "patter ns that cause c2 to become 1. In example (c), p2g1 = 1, thus\nc2 = 1, and in e xample ( d), g2 = 1, thus c2 = 1.\nFIGURE 3.6 Examples illustrating the concept of car ry look-ahead\nadder .\nThe sum-bits s0, s1, and s2 are also generated in parallel, as\ndeter mined by their respective equations shown next, once the\ncarry-bits become available.\nFigure 3.7 illustrates the circuit of a 3-bit carry look-ahead (CLA)\nadder . The p and g bits are generated in parallel using three XOR\nand three AND gates within 0.3 ns, the maximum of \u0394XOR = 0.3 ns\nand \u0394AND = 0.2 ns, assuming 0.1 ns delay for a NAND gate. The\ncircuit is called a PG-unit (PGU). The p and g bits and the initial\ncarry-in c\u20131 are fed into a carry generate unit (CGU). The three", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 742, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "334ac82f-606c-49c0-9abe-70026bc0712b": {"__data__": {"id_": "334ac82f-606c-49c0-9abe-70026bc0712b", "embedding": null, "metadata": {"page_label": "182", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "06602d2f-2c67-4dc0-a4e4-0ed6fe6a2f63", "node_type": "4", "metadata": {"page_label": "182", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e6f7ae331612f00503a5bf2592212ae1c19ad503017635ed10807db5bfc0f7c6", "class_name": "RelatedNodeInfo"}}, "text": "carry circuits in the CGU are independent and would in parallel\ngenerate all the carry-bits c0, c1, and c2 within 0.2 ns, assuming\nthe circuits are implemen ted with NAND gates. Using another set\nof XOR gates, the \ufb01nal sum-bits ar e also generated in parallel using\nthe p and the carry-bits as inputs. These XOR gates are combined\ninto a module called a sum-unit (SU).\nFIGURE 3.7 A 3-bit CL A with car ry-bits c0, c1, and c2 generated in\nparallel.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 447, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "36322202-9c60-4019-9ca6-36491cb619fc": {"__data__": {"id_": "36322202-9c60-4019-9ca6-36491cb619fc", "embedding": null, "metadata": {"page_label": "183", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "223bbd2f-ad96-4b72-bbe5-27cb71f77de5", "node_type": "4", "metadata": {"page_label": "183", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a8da63f64e9295581a704ca26771892ce33bc6fab7cd2b84fa5bcccf04aa5f43", "class_name": "RelatedNodeInfo"}}, "text": "An 8-bit CL A with car ry-bit c0 through c7 is still small enough that\nthe design will not violate  the fan-in and fan-out limitations of the\ngates. In this case, the circuit that implements the carry-bit ci uses\ngates with fan-in \u2264i + 2. The delay of the CLA(8) would be 0.8 ns,\nas deter mined by Eq. (3.8), using 0.1 ns delay for a NAND gate.\nThe CLA(8) is more than two times faster than the CPA(8);\nhowever, its implementation would r equir e mor e har dwar e.\nAn alternative CLA circuit uses AND gates for g bits, OR gates for\np bits, and F As for the sum bits [ 1].\nLarge CLA Adder\nFor large values of n (e.g., n > 8), the successive substitution of\nthe carry expressions, as it was illustrated in Eq. (3.7)  for the carry-\nbits c1 and c2, would eventually result  in long carry expressions,\nand thus the correspondin g circuits would requir e gates with large\nfan-in numbers. In additi on, some of the gates, such as the XOR\ngates that generate the p signals, requir e large fan-out values, as\nthe p\u2019s are the inputs to multiple carry-generate circuits in the\nCGU, as well as the sum circuits in the SU. Therefore, when n is a\nlarge number (e.g., 32 or 64 bits), a di\ufb00er ent meth od is used that\nlimits the fan-in and fan- out requir ements of each cir cuit module.\nIn this case, the carry expressions are grouped into di\ufb00er ent sets\nso that the maximum fan-in and fan-out of the gates in the\ncorresponding circuits are within an acceptable range. For\nsimplicity, this is illustrated for n = 8. The carry expressio ns of a\nCLA(8) are grouped into three sets, as illustrated in Eq. (3.9). An\nexpression in each of the sets has fewer than three logic terms and\nfewer than three variables. The corresponding circuits would have\nfan-in \u22643 and fan-out \u22642. For example, for c1 in set 1, the circuit\nwould have a maximum fan-in = 3 and a maximum fan-out = 2\ndue to signal p0. The carry expressions in each set are data\nindependent; thus, the carry-bits can be generated in parallel as\nsoon as the inputs, including the carry-in signals, are available. For", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2055, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ef4f3764-b6f4-4da1-8ef1-b17ee5ef545d": {"__data__": {"id_": "ef4f3764-b6f4-4da1-8ef1-b17ee5ef545d", "embedding": null, "metadata": {"page_label": "184", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a13ce0df-2f43-4bb9-b737-fd98dabbc243", "node_type": "4", "metadata": {"page_label": "184", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "79c4f62730a5286d4d35aa5bd442293b49ad91ba57020b9c9821c7978ca3be63", "class_name": "RelatedNodeInfo"}}, "text": "the expressio ns in set 1, c\u20131 is the carry-in bit; in set 2, carry in is\nc2; and in set 3, car ry in is c5.\nAmong the carry-in signals c\u20131, c2, and c5, the carry-in bit c\u20131 is a\nprimary input, while the other two must be generated. They are\nde\ufb01ned in Eq. (3.10)  and gr ouped as set 4.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 286, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "970c67e6-c230-412e-b492-314ac20d7f5f": {"__data__": {"id_": "970c67e6-c230-412e-b492-314ac20d7f5f", "embedding": null, "metadata": {"page_label": "185", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cbc010d0-b971-4113-aeb7-f771021d97ab", "node_type": "4", "metadata": {"page_label": "185", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "de368055778d728bafe5d84f53bb5684dca484208f797a8e8467c98aeaaf661c", "class_name": "RelatedNodeInfo"}}, "text": "Note that the expressions of c2 and c5 are data independent\nwhen they are written in terms of the p* and g* signals. The p* and\ng* signals are also data independent and are de\ufb01ned in terms of p\nand g signals. Also, the \ufb01nal expressions of c2 and c5 are similar to\nthose in sets 1 to 3, except that these expressions requir e p* and\ng* signals as inputs. The * in a p* implies a carry propagation\nwithin a block of bits. Likewise, the * in a g* implies a carry\ngeneration and propagation within a block of bits. When a p* = 1,\nit implies that a 1 as the carry bit entering the block will be\npropagated as 1 for the carryout. Likewise, when a g* = 1, it\nimplies a carry of 1 generated within the block will be propagated\nout as the car ryout.\nThe carry bits of set 1 depend on the carry bit c\u20131 and the p and\ng signals; thus, they can all be generated in parallel as soon as the\np and g bits are available. The carry-bits of set 4 also depend on c\u2013\n1 and can be generated in parallel as soon as the p* and g* bits ar e\navailable. Note that since all the p* and g* bits can be generated", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1083, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0fd1ff3e-0871-4857-b695-06be97c9fbcb": {"__data__": {"id_": "0fd1ff3e-0871-4857-b695-06be97c9fbcb", "embedding": null, "metadata": {"page_label": "186", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "baba5cdf-3059-43ce-954a-cdd8337f1dff", "node_type": "4", "metadata": {"page_label": "186", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "22e5c42ce1e782fff419970d4ebd3d67ee8af21d8cb145c60de58fdf087edd0f", "class_name": "RelatedNodeInfo"}}, "text": "at the same time and when c0 and c1 are generated, they are\nmoved into sets 1 to 3, as shown in Eq. (3.11) .\nA detailed block diagram of the 8-bit CLA is illustrat ed in Fig. 3.8 .\nAll the eight carry-bits c0 through c7 are generated in three steps,\nas follows:\n1. The car ry-bits c0 and c1 in set 1 and all the p* and g* bits\nin sets 1, 2, and 3 ar e generated \ufb01rst.\n2. Ne xt, the car ry-bits c2 and c5 of set 4 ar e generated.\n3. Finally, the car ry-bits c3, c4, c6, and c7 of sets 2 and 3 ar e\ngenerated.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 507, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "432f550c-1c06-4055-977c-3f9c346d457b": {"__data__": {"id_": "432f550c-1c06-4055-977c-3f9c346d457b", "embedding": null, "metadata": {"page_label": "187", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "901430c4-ce2b-4276-8279-4b283ff16e43", "node_type": "4", "metadata": {"page_label": "187", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "faa5c5471f1c0faae5e337fc3375aee9a4773654a5e9e06ff92f87e33f88cbcf", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 3.8 An 8-bit CL A using B CGUs. Signals p8 and g8 are set to\n0.\nThe circuit that implements the expressions in each of the sets 1\nto 3 is called a block carry generate unit (BCGU).  The circuit that\nimplements the expressions in set 4 is still a CGU. Once all the\ncarry-bits are generated, c\u20131 to c6 and p0 to p7 are fed to the SU to\ngenerate all the sum-bits s0 to s7 in parallel.\nFor a large n (e.g., n = 32 or 64), the circuit for a CLA(n) is the\nsame as the one shown in Fig. 3.8  for CL A(8). Ex cept that when n is\na large number, the carry-bits must be sliced into multiple sets\nsuch that there are no BCGU or CGU fan-in and fan-out violations.\nBased on the design shown in Fig. 3.8, Eq. (3.12)  estimates the\npropagation delay of a CLA(n), assuming 0.1 ns delay for a NAND\ngate.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 793, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b8422ea3-a083-4246-99c4-4421b472bcb9": {"__data__": {"id_": "b8422ea3-a083-4246-99c4-4421b472bcb9", "embedding": null, "metadata": {"page_label": "188", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e9942dff-800a-4856-a8a2-4cfe44757984", "node_type": "4", "metadata": {"page_label": "188", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "da586b9ec344407cb9553aa2059afbad87a2bde1bdf0206954a5e03337f851ea", "class_name": "RelatedNodeInfo"}}, "text": "A large CLA adder is a lot faster than an equivalent CPA, but\nrequir es more hardwar e. Alternatively, one may design a hybrid\nadder that is partly a CLA adder and partly a CPA. A hybrid adder\nwould be faster than a CPA but slower than a CLA adder . For\nexample, a 16-bit hybrid adder may be designed using two CLA(8)\nslices, wher e the carry-bit c7 from the \ufb01rst slice is fed as carry-in to\nthe second slice. The resultant 16-bit adder would be faster than a\nCPA(16) but slower than a CLA(16) and would requir e fewer\nhardwar e to implement than a CL A(16).\nHDL Model\nExamples 3.1 to 3.6 present a Verilog description  of an 8-bit CLA\nusing a PGU,  three BCGUs, a CGU, and an SU. Both the behavioral\nand structural models ar e used to design the adder .\nExample 3.1.  A structural description of an 8-bit CL A adder :", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 818, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73b2aef2-3872-40f8-be2e-70b25d62dad9": {"__data__": {"id_": "73b2aef2-3872-40f8-be2e-70b25d62dad9", "embedding": null, "metadata": {"page_label": "189", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8c08935d-7a63-4750-974d-0ffb532fa72c", "node_type": "4", "metadata": {"page_label": "189", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "30c48f4b1b82151ed2af4ee8b617e52a1ed307036deb4a1f5f6ef341c9ba554b", "class_name": "RelatedNodeInfo"}}, "text": "Example 3.2. A structur e model of an 8-bit carry-generate module using BCGUs and a\nCGU:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 88, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "21827a71-521d-4478-b5ce-cf094fea0829": {"__data__": {"id_": "21827a71-521d-4478-b5ce-cf094fea0829", "embedding": null, "metadata": {"page_label": "190", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "00adb995-c0bb-4655-9cad-bb24052459c0", "node_type": "4", "metadata": {"page_label": "190", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0297996258eeb7c5fda864d0a9fc6d752502c8fe25bbfa1b56f0c5362260595c", "class_name": "RelatedNodeInfo"}}, "text": "Example 3.3.  A behavior description of a 3-bit B CGU:\nExample 3.4.  A behavior description of a 2-bit CGU:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 107, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d95a7e89-c10e-457b-b9d4-724b798ec5e3": {"__data__": {"id_": "d95a7e89-c10e-457b-b9d4-724b798ec5e3", "embedding": null, "metadata": {"page_label": "191", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5e826f64-e7e0-46df-8d98-bbadae242f3a", "node_type": "4", "metadata": {"page_label": "191", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a345218084c285624ea77f5897c38dd0c0005859193f32bd300b538f459bf6dd", "class_name": "RelatedNodeInfo"}}, "text": "Example 3.5.  A behavior description of an 8-bit PGU:\nExample 3.6.  A behavior description of an n-bit SU:\n\u00a0\n3.4 Subtractor\nA subtractor generates the di\ufb00er ence D of its two inputs X and Y\nusing one of the two methods illustrated in Fig. 3.9  for 4-bits [2]. In\nmethod (a), each time that xi < yi, a 1 as a borrow is subtracted\nfrom xi+1 (the next higher bit) if xi+1 > 0 and a 2 is added to xi. If\nxi+1 = 0, a borrow comes from the next higher bit xi+2 if xi+2 > 0", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 466, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2756b67-8cea-4dca-9a97-e5b1e24db8aa": {"__data__": {"id_": "e2756b67-8cea-4dca-9a97-e5b1e24db8aa", "embedding": null, "metadata": {"page_label": "192", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8ad7180b-cc9b-4bda-a164-663f7aa7ae9a", "node_type": "4", "metadata": {"page_label": "192", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c7422c5e1394bb91bce2fd92992f42ce6c3b2a1ddb40749f21abb32dbfe490e4", "class_name": "RelatedNodeInfo"}}, "text": "and a 2 is added to xi+1. Again, if xi+2 = 0, the borrow comes from\nxi+3 and a 2 is added to xi+2, and so on. This process recursively\ncontinues until xi \u2265 yi, and di = xi \u2013 yi result in a 0 or 1. In the\n\ufb01gure, x0 = 0 is less than y0 = 1; thus, a borrow from x1 is needed.\nHowever, since x1 = 0, a 1 is borrowed from x2. The remaining bits\nare handled in the same way. This example does not produce a 1\nas borrow out since X = 12 = (1100)2 is greater than Y = 3 =\n(0011)2 and thus D = 12 \u2013 3 = 9 = (1001)2.\nFIGURE 3.9 Illustrating unsigned subtraction: ( a) borrow method;\n(b) credit method.\nIn method (b), each time that xi < yi, a 1 as a credit is added to\nyi+1 (the next higher bit) and a 2 is added to xi to produce di = xi \u2013\nyi as a 0 or 1. In the example, x0 = 0 is less than y0 = 1; thus, a 1\nas a credit is added to y1, making y1 = 2, and a 2 is added to x0,\nalso making it 2. At this point, d0 = x0 \u2013y0 is 1 (2 \u2013 1 = 1). Next, x1\n= 0 is less than y1 = 2; thus, again, a 1 as credit is added to y2,\nmaking it 1, and a 2 is added to x1, also making it 2. This results in\nd1 = 2 \u2013 2 = 0. The remaining bits are handled in the same way to\nproduce the \ufb01nal D = 9 = (1001)2.\nAn n-bit borrow propagate subtractor (BPS), similar to an n-bit\nCPA, is designed using n copies of a 1-bit subtractor slice. Each of\nthe slices inputs one bit from X, one bit from Y, and a borrow/credit\nbit (0 or 1) and outputs one bit di\ufb00er ence and the next\nborrow/cr edit bit, as illustrated for the ith bit. An n-bit BSP is\nillustrated in Fig. 3.10 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1532, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f196c075-5f9f-4d91-acbf-3f8ac11f948f": {"__data__": {"id_": "f196c075-5f9f-4d91-acbf-3f8ac11f948f", "embedding": null, "metadata": {"page_label": "193", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b5956b05-b0f7-4a2f-bfb8-10a25b3080d6", "node_type": "4", "metadata": {"page_label": "193", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "6f4cfc48958379fc3c9da2a407d6abbeefb0b528da1001af2a91dff826cee7ea", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 3.10  An n-bit BPS: ( a) its block diagram; ( b) its detailed\nblock diagram.\nBorrow and credit subtraction algorithms are described next for\nthe ith bit. Note that the equation for di\ufb00er ence bit d[i] is the same\nin both algorithms, except that parentheses are used to enfor ce\nprecedence and thus illustrate the concept of borrow in method (a)\nand cr edit in method ( b).\nSubtraction Algorithms\nMethod ( a): Bor row (parentheses illustrate how bor row is used)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 468, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "28d12037-8a46-4360-be90-6c24c63a47c7": {"__data__": {"id_": "28d12037-8a46-4360-be90-6c24c63a47c7", "embedding": null, "metadata": {"page_label": "194", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3f12aef3-0361-42bf-861a-5c0c3ac261bc", "node_type": "4", "metadata": {"page_label": "194", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7cd37620f45ed489672d9483b75e6e54aa12db0a0eec4b4b08a80ee52da6f9b1", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7bf22f1c-63e3-421a-9b22-2d8fcb7b033a": {"__data__": {"id_": "7bf22f1c-63e3-421a-9b22-2d8fcb7b033a", "embedding": null, "metadata": {"page_label": "195", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "26cb638c-9469-4d4f-9766-7818b9220ac2", "node_type": "4", "metadata": {"page_label": "195", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0f4c802718f56faf68807541ac370ff3e45cabe27c155ea66b45bcdf6759d176", "class_name": "RelatedNodeInfo"}}, "text": "Table 3.1 and Eq. (3.13)  show the truth table and logic\nexpressions for a 1-bit subtractor slice. The truth table is easily\ndeter mined using one of the two subtraction algorithms discussed\nearlier . Note that the di\ufb00er ence and borrow (credit) expressions are\nsimilar to the sum- and carry-bit expressions of an FA.\nAlternatively, a borrow-look-ahead (BLA) subtractor  can be created\nusing the techniques to design a CL A.\nTABLE  3.1 The T ruth T able for a 1- Bit Subtrator (Sub)\n\u00a0\n3.5 2\u2019s Complement Adder/Subtractor\nFor signed arithmetic, the values are either positive or negative 2\u2019s\ncomplement numbers. The subtraction of two n-bit numbers (A)2s\nand (B)2s can be interpr eted as the sum of (A)2s and (\u2013B)2s, as\nillustrated next, wher e (B)1s is used here to indica te the 1\u2019s\ncomplement of B obtained by simply inverting each bit.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 838, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b8358c8-f8b1-4944-9a58-73c6159e5f3e": {"__data__": {"id_": "0b8358c8-f8b1-4944-9a58-73c6159e5f3e", "embedding": null, "metadata": {"page_label": "196", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bb324287-5422-4490-bbe0-acdafcd87a9b", "node_type": "4", "metadata": {"page_label": "196", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "91acdbf174a162e84c1f15f405e8851dc020146b3e2375e2297ab438edbc65c7", "class_name": "RelatedNodeInfo"}}, "text": "2\u2019s complement subtraction algorithm:\n2: Discar d the car ryout bit.\nFigure 3.11  illustrates the 2\u2019s comple ment subtraction algorithm.\nThe \u201c+ 1\u201d is implemented by using a 1 for the car ry in.\nFIGURE 3.11  Illustrating 2\u2019s complement subtraction.\nLikewise, the following algorithm describes an n-bit 2\u2019s\ncomplement addition. In this case, the input B is used as-is\n(unchanged) and the car ry in is set to 0.\n2\u2019s complement addition algorithm:\n2: Discar d the car ryout bit.\nA 2\u2019s complement arithmetic generates an n-bit 2\u2019s complement\noutput, except that the carryout is ignor ed and is not counted as\npart of the \ufb01nal result. However, the result may over\ufb02ow . For\ninstance, consider subtracting a 1 from the smallest n-bit 2\u2019s\ncomplement negative number, or adding a 1 to the largest n-bit\n2\u2019s complement positive number . In both cases, the resultant\ndi\ufb00er ence and the sum will exceed the ranges de\ufb01ned for the n-bit\nnegative and positive 2\u2019s complement numbers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 967, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c7b05aad-3f7d-4e7b-ae42-05e96dff902b": {"__data__": {"id_": "c7b05aad-3f7d-4e7b-ae42-05e96dff902b", "embedding": null, "metadata": {"page_label": "197", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a2da856e-c1a1-4424-a0ec-356182ee5529", "node_type": "4", "metadata": {"page_label": "197", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e6fe766705c317141cde9c540cef174425251315f96a80e8494a359a0786f6c8", "class_name": "RelatedNodeInfo"}}, "text": "When both A and B are 2\u2019s complement positive numbers, their\nsign-bits are 0. In this case, in order for the quantity A + B not to\nover\ufb02ow, the car ry-bit that is added to the sign-bits must be 0. This\nwill also produce 0 as the carryout; otherwise, there will be an\nover\ufb02ow . For example, consider examples (a) and (c) in Fig. 3.12.\nIn example (a), A = (0111)2s = 7 and B = (0001)2s = 1 are both\npositive 2\u2019s complement numbers, and in addition,  A is the largest\n4-bit positive number . As shown in the \ufb01gure, when B = 1 is added\nto A = 7, the result is (1000)2s = \u20138, a negative numbe r, which\nindicates an over\ufb02ow . Note that, in this case, c3 = 1 and when it is\nadded to the sign-bits, both 0, this makes the sign of the resultant\nsum 1 (negative) and carryout c4 = 0 \u2260 c3 = 1. For the over\ufb02ow\nnot to occur, both c3 and c4 must be 0 when adding two positive\n2\u2019s complements numbers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 887, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9a112d06-0b27-4c8f-a037-6e12cfe43157": {"__data__": {"id_": "9a112d06-0b27-4c8f-a037-6e12cfe43157", "embedding": null, "metadata": {"page_label": "198", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "954c1f4c-a655-4a34-b79b-cd7a2e470908", "node_type": "4", "metadata": {"page_label": "198", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "301aadc9afa6adb906054a38b0ea337c33d25207674be5838cbac3a835509149", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 3.12  Examples of 2\u2019s complement arithmetic.\nIn example (c), when two negative numbers A = \u20131 and B = \u20132,\nboth with sign-bits equal to 1, are added, the quantity A + B will\nnot over\ufb02ow if c3 = 1 generates c4 = 1. Otherwise, the result will\nover\ufb02ow, resulting in a positive number for the result. Therefore,\nthe conclusions from examples (a) and ( c) is that when c3 = c4, the\nresultant sum will not over\ufb02ow, regardless if both A and B are\npositive or negative 2\u2019s complement numbers.\nExamples (b) and (d) illustrate subtraction. In this case, the\nquantity A \u2013B is computed as A + (B)1s + 1. In example (b), when B\n= 1 (a positive number) is subtracted from A = \u20138 (the smallest 4-\nbit negative 2\u2019s complem ent number), c3, which  is 0, when added\nto the sign bits (both 1), generates 7 (an incor rect value). Note that\nc4 = 1 \u2260 c3 = 0. In example (d), both A = \u20131 and B = \u20132 are\nnegative 2\u2019s complement numbers and when subtracted, the result\nshould never over\ufb02ow . Note that in this case, c3 = 1 is the same as\nc4 = 1 (i.e., again, c3 = c4). The subtraction of two positive\nnumbers also should never r esult in an over\ufb02ow .\nTable 3.2 presen ts the truth table for the over\ufb02ow signal ovf for\nan n-bit 2\u2019s complement adder/subtractor . The carry-bit cn\u20132 is\nadded to the sign bits to generate the \ufb01nal carryout cn\u20131. Equation\n(3.14)  de\ufb01nes the over\ufb02ow signal.\nTABLE  3.2 Truth T able for Arithmetic Over\ufb02ow Signal", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1420, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1dd07021-a2d0-4ac1-b3f0-42adb2c187e7": {"__data__": {"id_": "1dd07021-a2d0-4ac1-b3f0-42adb2c187e7", "embedding": null, "metadata": {"page_label": "199", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c2e62d55-24d3-49fd-9256-ed43992e7492", "node_type": "4", "metadata": {"page_label": "199", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e49eb744f693e55658e418759e825616f8d8d776e10497e7fc156d46ef9a5ce5", "class_name": "RelatedNodeInfo"}}, "text": "Figure 3.13 shows two block diagrams: (a) a 2\u2019s complement\nadder, and (b) a 2\u2019s complement subtractor . The two block\ndiagrams di\ufb00er only in the way the input (B)2s and the initial carry-\nin bit are handled. In Fig. 3.13(a), the input B is added to A as-is,\nunchanged. In Fig. 3.13 (b), the input B is \ufb01rst bitwis e NOTed befor e\nit is added to A. Therefore, it is possible to combine the two block\ndiagrams into a single adder/subtractor module using only one\nadder modul e. An inverter module is used to output either B when\nadding, or bitwise NOT of B, denoted as E = en\u20131... e1e0 equals to\nthe 1s complement of B or (B)1s, when subtracting. A mode signal\nm is used to perfor m either addition when m = 0 (carry in is 0) or\nsubtraction when m = 1 (car ry in is 1).\nFIGURE 3.13  2\u2019s complement adder and subtractor block diagrams:\n(a) adder block diagram; ( b) subtractor block diagram that also\nincludes an adder module.\nTable 3.3 presents the truth table  of a 1-bit inverter slice.  The\n\ufb01nal combined design is illustrated in Fig. 3.14, wher e m also\nserves as the initial carry-in value. Note that this module with m\nconnected to the carry-in input cannot be used to design a bit-", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1186, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5a827953-e14e-4833-a2a9-e6ddb3a4f2ae": {"__data__": {"id_": "5a827953-e14e-4833-a2a9-e6ddb3a4f2ae", "embedding": null, "metadata": {"page_label": "200", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d305e2b0-b95d-4221-ac04-e9a632292d3a", "node_type": "4", "metadata": {"page_label": "200", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "aa4bb5f4f280e3eebab44b3e32ce2192d53a7b7983ea391dd672963a09b191ba", "class_name": "RelatedNodeInfo"}}, "text": "serial larger adder/subtractor circuit. For that, you must use a\nseparate input for car ry-in.\nTABLE  3.3 Truth T able of a 1- Bit Inverter\nFIGURE 3.14  2\u2019s complement adder/subtractor data path.\n3.6 Arithmetic Logic Unit\nAn ALU is included in every processor and perfor ms not only\ninteger arithmetic, but also bitwise logic functions such as bitwise\nAND and OR. An ALU is used in the execution of integer arithmetic\nand logic instructions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 441, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "380039c4-ca61-49c1-9590-e5ccaf8028cf": {"__data__": {"id_": "380039c4-ca61-49c1-9590-e5ccaf8028cf", "embedding": null, "metadata": {"page_label": "201", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "11ad9a04-786b-44c3-91a3-475ac8027f4c", "node_type": "4", "metadata": {"page_label": "201", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b937ef6a02d9bcdab6bb446d3519397bd733163b20540037a75a6032f5e745d3", "class_name": "RelatedNodeInfo"}}, "text": "Example 3.7. Design an n-bit, seven-function ALU that perfor ms add, subtract,\nincrement, decrement, and bitwise AND, OR, and NOT. A 3-bit funct ion code F = f2f1f0 is\nused to select an ALU operation as speci\ufb01ed in Table 3.4. The ALU also outputs over\ufb02ow\n\ufb02ag ovf when it perfor ms an arithmetic operation (F = 0, 1, 2, or 3). F = 7 is not used in\nthis desig n, and when selected, the ALU may perfor m an unknown operation. The details\nof bit-parallel and bit-serial designs ar e discussed ne xt.\nTABLE  3.4 A List of AL U Functions, F = f 2f1f0\nFigure 3.15 illustrates the top-level block diagram of the ALU.\nEach of the input values A and B and result value R is interpr eted\nas a 2\u2019s complement number when F speci\ufb01es an arithmetic\noperation. Signal ovf indicates an arithmeti c over\ufb02ow when\nasserted. Step-by-step bit-parallel and bit-serial ALU designs are\ndiscussed in the following sections.\nFIGURE 3.15  An AL U example.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 927, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd9ab66e-1554-4808-89a8-bfbd586e842b": {"__data__": {"id_": "cd9ab66e-1554-4808-89a8-bfbd586e842b", "embedding": null, "metadata": {"page_label": "202", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3ab12c9d-7a85-4d83-9971-e305ec2ce763", "node_type": "4", "metadata": {"page_label": "202", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "82c7b59cbda7750bf8094659085e141a9af86862a06fa6840be33a6c766ba5bc", "class_name": "RelatedNodeInfo"}}, "text": "3.6.1 Design Partitioning: Bit-Parallel\nThe AL U is consider ed a lar ge combinational cir cuit when n is large.\nUsing the top-down bit-parallel design methodology discussed\nearlier, the functions of the ALU are \ufb01rst partitioned into arithmetic\nand logic operations. The circuits for the four arithmetic operations\nadd, subtract, increment, and decrement are combined into a\nsingle arithm etic module in the ALU data path shown in Fig. 3.16.\nThe three bitwise operations are implemented using AND, OR, and\nNOT gates. An 8-bit, 4-to-1 MUX selects one of the outputs W, X, Y,\nand Z as the AL U output.\nFIGURE 3.16  A data path for the AL U of Example 3.1.\nIn the ALU data path, the A and B inputs are both connected to\nthe arithmetic and the three bitwise modules. These modules\nsimultaneously operate on inputs A and B, and each generates a\nresult, but only one must be selected as the \ufb01nal output of the\nALU. Ther efore, when F speci\ufb01es a logic operation, it is still possible", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 976, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8830ec4c-f4a4-4c76-81dc-a0818740f7a4": {"__data__": {"id_": "8830ec4c-f4a4-4c76-81dc-a0818740f7a4", "embedding": null, "metadata": {"page_label": "203", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2507823d-ae7a-4f37-adbf-f73a41118d3f", "node_type": "4", "metadata": {"page_label": "203", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "106537a16582214d9acc9f306616f629441cff9e15868ac2d81ce3f3e68464e7", "class_name": "RelatedNodeInfo"}}, "text": "for the arithmetic module to assert ov_\ufb02ag  depending on the\nvalues of A and B at the time. However, in such cases, the over\ufb02ow\nsignal should be mask ed and not output as asserted ovf by the\nALU. This is done using the Mask module.\nThe data path also includes a Map module that translates a\ngiven ALU function code F to internal signals s0, s1, s2, m, and msk\nin the ALU data path. The design of the ALU is complete when all\nits modules ar e designed and inter connected.\nThe 4-to-1 MUX in the data path selects and outputs one of the\nfour n-bit results generated by the arithmetic and the three bitwise\nmodules. The Mask module sets the ovf to 0 (not active) if F\nindicates a logic operation (F = 4 to 6); otherwise, ovf is set to\nov_\ufb02ag , an output of the arithmetic module.\nIf necessary,  the top-down design methodology is successively\napplied to partition all the larger modules in the data path to\nsmaller circuit modules until each of the lowest-level circuit\nmodules is small and requir es fewer inputs. The design techniques\npresented in Chap. 2 are then used to design each small circuit\nmodule. The bitwise logic modules are designed using n 2-input\nAND, n 2-input OR, and n NOT gates. These module s generate n-bit\nvalues X = xn\u20131\u2026x0, Y = yn\u20131\u2026 y0, and Z = zn\u20131\u2026z0, respectively,\nas shown in the \ufb01gure, wher e the ith bit in each case is de\ufb01ned as\nfollows:\nAs an example, Fig. 3.17 illustrates the circuit of a 4-bit bitwise\nAND. When A = a3a2a1a0 = (1011)2 and B = b3b2b1b0 = (1101)2, X\n= x3x2x1x0 = (1001)2 is deter mined as x0 = a0.b0 = 1.1 = 1, x1 =\na1.b1 = 0.1 = 0, etc. Other bitwise logic modules are similarly\ndesigned.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1639, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7f49fdc1-9453-4320-8112-1e967c14e687": {"__data__": {"id_": "7f49fdc1-9453-4320-8112-1e967c14e687", "embedding": null, "metadata": {"page_label": "204", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "15e5a9c0-0fbf-4067-8ec2-5c3ffbd242ca", "node_type": "4", "metadata": {"page_label": "204", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "036d56c50ae6a2c20fb696730273bc849b66bd299f4d4a2ddeee1de2e6a2c392", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 3.17  A 4-bit bitwise AND and its cor responding logic cir cuit.\nThe design of a small multiple xer circuit was discu ssed in Chap.\n2. The ALU requires an n-bit, 4-to-1 MUX that can be designed in\none of two ways as follows:\n1. Use n copies of a 1-bit, 4-to -1 MUX.\nor\n2. Use n-bit, 2-to -1 MUXs. An n-bit, 2-to -1 MUX is designed\nusing n copies of a 1-bit, 2-to -1 MUX, as illustrated in Fig. 3.18 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 407, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c18fd61-b4d8-49d7-9ac9-332bed0ee58e": {"__data__": {"id_": "6c18fd61-b4d8-49d7-9ac9-332bed0ee58e", "embedding": null, "metadata": {"page_label": "205", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e35cd07-2b1c-4c28-848e-a45b19ce7372", "node_type": "4", "metadata": {"page_label": "205", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1df2014400cd825630b2c6d0e3d7457c796e323b122d861776497a3f56eeef07", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 3.18  An n-bit, 2-to -1 MUX: ( a) block diagram; ( b) designed\nusing 1-bit, 2-to -1 MUX slices.\nOption 2 has the advantag e of extending the design to any n-bit,\nk-to-1 MUX without runnin g into any fan-in and fan-out problems.\nTable 3.5 shows a minimized truth table of an n-bit, 4-to-1 MUX.\nThe s1 signal selects either W or X if it is 0, or Y or Z if it is 1. On\nthe other hand, the s0 signal selects either W or Y if it is 0, or X or\nZ if it is 1. Thus, it is possible to apply the process of elimination\nand use three 2-to-1 MUXs to design a 4-to-1 MUX,  as illustrated in\nFig. 3.19 for n bits. For example, when s1s0 as a 2-bit number is 2\n(i.e., s1 = 1 and s0 = 0), the top two 2-to-1 MUXs correctly choose\nthe two possible input candidates W and Y, and the bottom 2-to-1\nMUX correctly chooses the input Y as the \ufb01nal output. This is\nillustrated in the \ufb01gur e.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 874, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f603714d-0ad8-4faf-a3ad-24d8571aaf9b": {"__data__": {"id_": "f603714d-0ad8-4faf-a3ad-24d8571aaf9b", "embedding": null, "metadata": {"page_label": "206", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cc56ba8e-09df-49fd-9b62-7c7e3f7e8f0b", "node_type": "4", "metadata": {"page_label": "206", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a8386b01860f0bca1779dcc63c933f24aad204cc04afae7429412c4951bbfcd0", "class_name": "RelatedNodeInfo"}}, "text": "In general, the previous approach requir es log2k levels of 2-to-1\nMUXs. Equation (3.15)  is used to estimate the propagation delay of\na k-to-1 MUX designed using 2-to -1 MUXs.\nTABLE  3.5 Simpli\ufb01ed T ruth T able of an n-Bit, 4-to -1 MUX\nFIGURE 3.19  An n-bit, 4-to -1 MUX designed using n-bit, 2-to -1\nMUXs.\nFor example, an 8-to-1 MUX would requir e three levels of 2-to-1\nMUXs, and a 64-to -1 MUX would requir e six levels of 2-to-1 MUXs.\nThe number of levels and thus the total delay could be reduced if a", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 507, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ed211f3b-5967-4dce-a041-582b2da3967a": {"__data__": {"id_": "ed211f3b-5967-4dce-a041-582b2da3967a", "embedding": null, "metadata": {"page_label": "207", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d062b573-7124-48ca-ac8e-4b98ee37c9e1", "node_type": "4", "metadata": {"page_label": "207", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c14f8616b385815d9fa9170e0860e3e31456bc208e6e3ceb67d90fc632f6c8bc", "class_name": "RelatedNodeInfo"}}, "text": "combination of di\ufb00er ent MUXs is used. For instance, an 8-to-1 MUX\ncan also be designed using a combination of 2-to-1 and 4-to-1\nMUXs. In this case, a 4-to-1 MUX would be designe d as an AND- OR\n(SOP) or OR -AND (POS) cir cuit to minimize its pr opagation delay .\nThe inputs to the arithmetic module are two n-bit 2\u2019s\ncomplement numbers A and B and two control signals m and s2, as\nillustrated in Fig. 3.20 for n = 8. The arithmetic module has two\noutputs: an n-bit 2\u2019s complement W and an (active-high) over\ufb02ow\nsignal ov_\ufb02ag . Table 3.6  lists the speci\ufb01c values of signals m and s2\nfor operating the arithmetic module. The m signal selects either\nadd or increment, if it is 0, or subtract or decrement, if it is 1. The\ns2 signal that contr ols the 2-to-1 MUX selects either B when adding\nor subtracting or the 8-bit value (00000001)2 when incrementing\nor decr ementing. The signal ov_\ufb02ag  is asserted if W over\ufb02ows.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 917, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad04c347-3b0d-4ae8-a75f-c2354588d93f": {"__data__": {"id_": "ad04c347-3b0d-4ae8-a75f-c2354588d93f", "embedding": null, "metadata": {"page_label": "208", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c6084c26-3599-4357-9636-d1296e3d13da", "node_type": "4", "metadata": {"page_label": "208", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8dc15484815e9619e541e6269cc7adeca24d177b668d2977e3e0d26b02b0c693", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 3.20  The detailed block diagram of the arithmetic module;\nthe result is A + B, A \u2212 B, A + 1, or A \u2212 1.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 110, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8efaaad4-4648-492b-8de7-806180b5d9e6": {"__data__": {"id_": "8efaaad4-4648-492b-8de7-806180b5d9e6", "embedding": null, "metadata": {"page_label": "209", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ad8f5a53-78aa-449c-ba57-931af1bc6e33", "node_type": "4", "metadata": {"page_label": "209", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "bf5c9255ba8dcf5b528d1927488a857908b0405c973b1ecb6034a7cf2dffaa62", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  3.6 Operating Signal V alues for the AL U\u2019s Arithmetic Module\nThe truth table and the circuit for the Mask module are given in\nFig. 3.21 . The module outputs ovf = 0 when msk = 1, masking the\nov_\ufb02ag  generated by the arithmetic module; it outputs ovf =\nov_\ufb02ag  when msk = 0.\nFIGURE 3.21  The over\ufb02ow signal-masking module: its truth table\nand logic cir cuit.\nTable 3.7 presents the truth table for the Map module. Some of\nthe contr ol signals in the table, except the msk, can be don\u2019t-cares\n(d). For example, when F speci\ufb01 es a logic operatio n (i.e., F = 4 to\n6), output W from the arithmetic module will never be selected as\nthe AL U output. Ther efore, the contr ol signals m and s2 can both be\ndon\u2019t-car es to minimize the circuit size. However, signal ov _ \ufb02ag\nmust be mask ed so it won\u2019t be output as ovf from the ALU. The\ncircuit for Map is shown in Fig. 3.22 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 876, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fbcc7b0b-4654-47a1-b717-a55a2ae0a92a": {"__data__": {"id_": "fbcc7b0b-4654-47a1-b717-a55a2ae0a92a", "embedding": null, "metadata": {"page_label": "210", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7808aa5c-46d9-4118-b90f-d1a1f9a6850b", "node_type": "4", "metadata": {"page_label": "210", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "98aa16fac11ed49c33be835267e60441ab3b09385d2a179074ba5bf9374d1cef", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  3.7 The T ruth T able for the AL U Map Module\nFIGURE 3.22  The cir cuit for the AL U map function.\nIn addition, because no operation is assigned to F = 7, all the\ncontr ol signals, except the msk, can be consider ed as don\u2019t-car es\nwhen F = 7. However, becaus e the Map circuit in Fig. 3.22\ngenerates s2 = 0, s1 = 1, s0 = 0, m = 1, and msk = 1 when F = 7\nand these signal values correspond to bitwise OR, the ALU is said\nto perfor m a bitwise OR when F = 5 or 7.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 469, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e40588ec-fbc7-4a06-ba81-7a422205a73b": {"__data__": {"id_": "e40588ec-fbc7-4a06-ba81-7a422205a73b", "embedding": null, "metadata": {"page_label": "211", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0d6ab4f3-bfc1-4a86-8dff-e693b8b75dc0", "node_type": "4", "metadata": {"page_label": "211", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a7ed503bca5c1be1dc33f688081fe6588558985c42959fb200732e9c6cfad720", "class_name": "RelatedNodeInfo"}}, "text": "3.6.2 Design Partitioning: Bit-Serial\nA bit-serial design, as opposed to a bit-parallel design, requir es the\ninput data bits divided into slices. For a bit-serial ALU design, each\nALU slice would operate on a fraction of the data bits but perfor m\nall the ALU functions. For example, Fig. 3.23 illustrates a bit-serial\nALU designed using n copies of a 1-bit ALU slice. Table 3.8  presents\nthe truth table of the 1-bit ALU slice. For inputs not shown in the\ntable, the r and co signals are consider ed zero. In addition, in order\nfor the increment and decrement operations to work correctly, the\ncarry-in signal c\u20131 must be 1. This requir es that the Inc/Dec module\nin the \ufb01gure must genera te c\u20131 = 1 when the ALU function code F\nis either 2 (incr ement) or 3 (decr ement); that is, \nFIGURE 3.23  One-bit AL U slice and n-bit AL U designed fr om the 1-\nbit slices.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 865, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aa82b9dd-e5fc-40b4-8fad-929bdb8798cc": {"__data__": {"id_": "aa82b9dd-e5fc-40b4-8fad-929bdb8798cc", "embedding": null, "metadata": {"page_label": "212", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "81c41fab-0e69-45a9-9e02-3ae94bfca27b", "node_type": "4", "metadata": {"page_label": "212", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1a76c1c4fa0247d6b0f152f07707b6d211be45af5368dc6817a64b4341cf85c7", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  3.8 The T ruth T able of a 1- Bit AL U Slice", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 51, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6a2e29e-2c3d-4f44-ac49-1894dd6d49ab": {"__data__": {"id_": "e6a2e29e-2c3d-4f44-ac49-1894dd6d49ab", "embedding": null, "metadata": {"page_label": "213", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6e37b3d-5510-47f0-9257-befae6fdd152", "node_type": "4", "metadata": {"page_label": "213", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "fc2bb86760d2fac07bb676429ee72c9b94ae09bf6fe68354eae570ba12fc9bf8", "class_name": "RelatedNodeInfo"}}, "text": "Note that because the ALU perfor ms no operations  when F = 7,\nthe corresponding table entries are set to don\u2019t-c ares. The truth\ntable is too big to be minimized manually . The Espresso-generated\nessential prime implicants are listed next. Although no speci\ufb01c\nfunction was de\ufb01ned for F = 7, the 1-bit ALU slice outputs 1 when F\n= 7. Therefore, an 8-bit bit-serial ALU would output eight 1s or\n(11111111)2 = 0xFF when F = 7. Note that the output 0xFF may\nalso be interpr eted as 8-bit 2\u2019s complement number for \u20131. Table\n3.9 presents the \ufb01nal list of the bit-serial AL U operations wher e ALU\noutputs \u20131 when F = 7.\nTABLE  3.9 The Final List of ALU Functions Performed by an n-Bit Bit-Serial ALU Using 1-\nBit AL U Slices\nThe essential prime implicants of the 1-bit AL U slice:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 776, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4ae878e-b606-47cf-afbe-a45b64d4f494": {"__data__": {"id_": "f4ae878e-b606-47cf-afbe-a45b64d4f494", "embedding": null, "metadata": {"page_label": "214", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "43512e3f-ee2d-4115-8e46-9f211baf2524", "node_type": "4", "metadata": {"page_label": "214", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c59d2c5f17ce33a3ea23884ddb7cef278d7c0b31d303e6c93b3f52f31132393a", "class_name": "RelatedNodeInfo"}}, "text": "In general, a bit-serial design may be advantageous if the word\nsizes are nonstandar d (e.g., 256- or 1024-bit operands used by a\nbit-serial encryption hardwar e), or the equivalent bit-parallel\ndesign would requir e prohibitively more hardwar e or creates less\nconcur rency compar ed to bit-serial.\n\u00a0\n3.7 Design Examples\nIn addition to combinational circuits that perfor m integer addition\nand subtraction operations discussed earlier,  the following\nsubsections present the design of combinational integer multiplier\nand divider circuits. The basic arithmetic operation for a multiplier\nis addition and for a divider is subtraction. However, some\nmultiplier and divider algorithms use both addition and subtraction\noperations. A 2\u2019s complement multiplier using addition and\nsubtraction operations is discussed in Chap. 6 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 824, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5bf8df0d-e7af-43a3-aaff-36daf4546ec2": {"__data__": {"id_": "5bf8df0d-e7af-43a3-aaff-36daf4546ec2", "embedding": null, "metadata": {"page_label": "215", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ad3bf511-89bb-4a1c-b70d-1e47eef1920a", "node_type": "4", "metadata": {"page_label": "215", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "afb35437e2fd8e2bbf5e659c6bee301422f79a94488d67cfe526d90288858063", "class_name": "RelatedNodeInfo"}}, "text": "3.7.1 Multiplier\nFigure 3.24 illustrates the multiplication of the 4-bit unsigned\nmultiplier B = b3b2b1b0 and the 4-bit unsigned multiplicand A =\na3a2a1a0. Each multiplication step generates an addend. In the\n\ufb01gure, the values (1001)2, (1001)2, (0000)2, and (1001)2 are four\naddends generated, respectively, by ANDing b0, b1, b2, and b3 with\nthe bits of A. Each new addend is shif ted lef t k \u2013 1 times, wher e k is\nthe multiplication step. As illustrated in the \ufb01gure, the four\naddends are shifted left, in order, by 0-, 1-, 2-, and 3-bits befor e\nthey ar e added to pr oduce the \ufb01nal pr oduct P.\nFIGURE 3.24  A 4-bit unsigned binary multiplication e xample.\nOne way to design a combinational n-bit multiplier circuit, such\nas the one illustrated in Fig. 3.25 for n = 4, is to use n \u2013 1 n-bit\nadders and n n-bit bitwise AND modules. The design is straight\nforwar d and is based on the steps illustrated in Fig. 3.24. The\ndesign, however, has a long propagation delay because, except for\nthe \ufb01rst two addends, the remaining addends are added one at a\ntime, creatin g long signal paths from the input to the \ufb01nal output\nsignals.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1127, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e554ea04-2f9e-4a1e-ba36-63f15fe7d305": {"__data__": {"id_": "e554ea04-2f9e-4a1e-ba36-63f15fe7d305", "embedding": null, "metadata": {"page_label": "216", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7850d479-8582-42e5-acc1-33c9a0af5c39", "node_type": "4", "metadata": {"page_label": "216", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "feb22d6dbbfdb95b2456c2de2802567d566776f1860483289680f4968b1e4129", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 3.25  A 4-bit unsigned multiplier using n-bit adder modules.\nAlternatively, one can use FA slices to add the addends, one\ncolumn at a time. When connected, the FA slices create a two-\ndimensional structur e called an array multiplier . Figure 3.26\nillustrates a 4-bit array multiplier using six columns of FAs. The\nsum of the addends is deter mined one column at a time, similar to\nhow one adds several numbers by hand. In the \ufb01gure, an addend is\nrepresented by its individual bits as aibj wher e ai is the ith bit of\nthe multiplicand A and bj is the jth bit of the multiplier B. Each of\nthe product bits is the 1-bit \ufb01nal sum generated by a chain of FAs\norganized in a column. In each column, the unused inputs are\nconnected to 0. The last product bit p7 is equal to the \ufb01nal carryout\nbit from the last F A column.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 822, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "daa08734-4a3f-404d-bdfd-7a3a76caaecc": {"__data__": {"id_": "daa08734-4a3f-404d-bdfd-7a3a76caaecc", "embedding": null, "metadata": {"page_label": "217", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5a384a83-08c1-422b-9d75-3d1b6b7e591b", "node_type": "4", "metadata": {"page_label": "217", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "6bbc6c0446c93f7fe4636b525ca8955c30bd09c18ae9c22e014d958cce526d92", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 3.26  A 4-bit ar ray multiplier using an ar ray of F As.\nIn the \ufb01gure, the FAs at the bottom row create a CPA, which may\nbe replaced by a CLA adder to minimize the total propagation\ndelay of the multiplier .\n3.7.2 Divider\nFigure 3.27  illustrates the steps to divide a 4-bit unsigned dividend\n(numerator) N = n3n2n1n0 = 4\u2019b1011 by a 4-bit divisor\n(denominator) D = 4\u2019b0010 to generate the 4-bit quotient Q =\nq3q2q1q0 = 4\u2019b0101 and the 4-bit remain der R = 4\u2019b0001. The N is\npadded with n \u2013 1, or in this case, with three zeroes from the left;\nthat is, the starting dividend becomes {000, N}, wher e {} is used\nhere to indicate concatenation. In each step, the divisor D is\nsubtracted from the higher n bits of the dividend, denoted as Ak,\nduring the division step k. If D \u2264 Ak, the corresponding quotient bit\nis 1; otherwise, the quotient bit is 0.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 855, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "619c6156-6f1a-40cd-ae1c-b786e9a33b2f": {"__data__": {"id_": "619c6156-6f1a-40cd-ae1c-b786e9a33b2f", "embedding": null, "metadata": {"page_label": "218", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "046984bf-6a90-4226-86f7-4e12e367e53d", "node_type": "4", "metadata": {"page_label": "218", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "449ec0bea063f1939a751679e0513ae9e89cf0e2ff3b97653993d007a9f50639", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 3.27  A restoring division e xample.\nThe steps illustrated in the \ufb01gure are known as the restoring\ndivision  algorithm because every time that the Ak < D (e.g., A3 =\n4\u2019b0001 < D = 4\u2019b0010) and thus the di\ufb00er ence Ak \u2013D < 0, the Ak,\nnot the remainder Rk = Ak \u2013D, is used to start the next division\nstep\u2014thus, the name \u201crestoring.\u201d In this case, the lower n \u2013 1 bits\nfrom Ak is concatenated with the next bit in N to make up the next\nn-bit dividend Ak-1. Speci\ufb01cally,  for n = 4, the steps to divide {000,\nN} by D and generate the 4-bits Q and 4-bits R, as illustrated in\nthe \ufb01gur e, are as follows:\n1. R3 = A3 \u2013D (4\u2019b0001 \u2013 4\u2019 b0010 = 4\u20191111) r esults in R3 = \u2013\n1 and thus bor row-out = 1 (i.e., bo3 = 1) and q3 = 0.\n2. R2 = A2 \u2013D (4\u2019b0010 \u2013 4\u2019 b0010) r esults in R2 = 0 and thus\nbo2 = 0 and q2 = 1.\n3. R1 = A1 \u2013D (4\u2019b0001 \u2013 4\u2019 b0010) r esults in R1 = \u20131 and\nthus bo1 = 1 and q1 = 0.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 889, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "68e9baf0-9678-4b0b-8aa6-0bbc77dc882e": {"__data__": {"id_": "68e9baf0-9678-4b0b-8aa6-0bbc77dc882e", "embedding": null, "metadata": {"page_label": "219", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "98128fd6-a024-4e91-8fbc-7542ab4289f3", "node_type": "4", "metadata": {"page_label": "219", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "552a5f622be91ee352fb20e9ac00f3e12eda9bcde353ab6c0f3b81507fe0e97e", "class_name": "RelatedNodeInfo"}}, "text": "4. R0 = A0 \u2013D (4\u2019b0011 \u2013 4\u2019 b0010) r esults in R0 = 1 and thus\nbo0 = 0 and q0 = 1. The \ufb01nal r emainder is R0 = 4\u2019 b0001.\nFigure 3.28 illustrates the data path of a 4-bit bit-parallel\nrestoring divider . A subtractor, a NOT gate, and a MUX are needed\nto implement each division step. The subtractor computes Rk = Ak\n\u2013D and generates the bok. The NOT gate generates  the quotient bit\nas \n  The MUX is used to select either Ak or Rk using the\nquotient bit qk. Equation (3.16)  estimates the pr opagation delay for\neach division step.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 530, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d4cb20ad-6595-4d8a-ad6d-ff8acd2ac54d": {"__data__": {"id_": "d4cb20ad-6595-4d8a-ad6d-ff8acd2ac54d", "embedding": null, "metadata": {"page_label": "220", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "09fc4f38-aa4e-4c1e-a0b9-b7508670e6d6", "node_type": "4", "metadata": {"page_label": "220", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8503e9324c6d4a3e5ab9f36bfe3c3099f1f217a27cb737e7d8cf66e3a15936ce", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 3.28  A 4-bit \u201c restoring\u201d divider data path.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 52, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d6bfd226-5046-4579-ba43-13eefda806ce": {"__data__": {"id_": "d6bfd226-5046-4579-ba43-13eefda806ce", "embedding": null, "metadata": {"page_label": "221", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b32c23b-20b8-455b-b826-847763f6cdda", "node_type": "4", "metadata": {"page_label": "221", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7de3acf777fbbf861566d639a9a7e15d4cac26501baa20c206f165eb1dfbfcc4", "class_name": "RelatedNodeInfo"}}, "text": "An array divider, similar to an array multiplier, can be designed\nusing an ar ray made of 1-bit divide slices. Each slice would perfor m\na combined subtractor -MUX function. The combined function can\nbe translated  into a truth table for minimal SOP or POS expressions\n(refer to the Ex ercise section for mor e details).\nFor a lar ge n, an arithmetic function designed as a combinational\ncircuit may requir e a prohibitively large number of gates. This is\nespecially true when the algorithm, such as that of the multiplier\nand divider, is repetitive and can alternatively be implemented\niteratively . For example, instead of using four subtractors, four\nMUXs, and four NOT gates to implement a 4-bit restoring divider,\nas shown in Fig. 3.28, one can use only one subtractor, one MUX,\none NOT gate, and a set of registers to generate the four quotient\nbits in four steps. The results of each step would be saved in the\nregisters. However, a repeated use of a hardwar e module requir es\nsome extra hardwar e to contr ol the timing of each step, and would\nslightly increase the total time requir ed to produce the \ufb01nal result.\nThe design of such cir cuits is discussed in Chap. 6 .\n\u00a0\n3.8 Real Number Arithmetic\nThe representation of real numbers as FP numbers was brie\ufb02y\ndiscussed in Chap. 1. Table 3.10 presents, as an example, three\ndi\ufb00er ent representations  of 3-bit exponent values as 2\u2019s\ncomplement signed numbers, as biased numbers with bias = 3,\nand as biased numbers with bias = 4. The exponent range for each\nof the three representations, respectively, are \u20134 to +3, \u20133 to +4\nwhen the bias = 3, and \u20134 to +3 when the bias = 4.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1633, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "485b2e6a-3876-42a7-a1d5-64a599604cc7": {"__data__": {"id_": "485b2e6a-3876-42a7-a1d5-64a599604cc7", "embedding": null, "metadata": {"page_label": "222", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5e847c31-e781-4616-9784-ff9421cd0ea2", "node_type": "4", "metadata": {"page_label": "222", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a3ee814efc90d8dccac371f5adf05f01fcd9c7d23c118acc945e1730f96c4515", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  3.10  The List of 3- Bit Signed vs. Biased Exponent V alues\nIn general, with biased exponents, the designers have more\nfreedom when deciding which set of real numbers to represent in a\ncomputer system. Note that, in this case, the highest positive\nexponent is 4 when bias = 3 vs. 3 when bias = 4. Likewise, the\nsmallest negative exponent is \u20133 when bias = 3 and \u20134 when bias\n= 4. This implies that with bias = 3, there would be more real\nnumbers > |1| (absolute  values) that can be represented as FP\nnumbers, but more real numbers < |1| (again absolute values) that\nwould be r epresented as FP numbers when bias = 4.\n3.8.1 Floating-Point Standards\nThe IEEE 754 standar ds [3] include three types  of FP\nrepresentations known as single, double, and double extended.\nTable 3.11 lists the exponent and fraction sizes of each type. Both\nthe single and double FP numbers have in-memory, or external,\nrepresentation with 23 and 52 fraction bits, respectively, and also\nin-register, or internal, representation inside the FPU with 24 and\n53 fraction bits, respectiv ely. The double extended  representation\nhas a 64-bit fraction and is used to increase the accuracy of FP\narithmetic. The fractions are represented as signed magnitude\nnumbers, using a separate bit for the sign bit. There is no external\n(in-memory) r epresentation for the double e xtended data type.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1367, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "18fd416d-8574-4e28-827f-ebe7189ae583": {"__data__": {"id_": "18fd416d-8574-4e28-827f-ebe7189ae583", "embedding": null, "metadata": {"page_label": "223", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5f778788-2aec-4a43-a630-4af88b35266e", "node_type": "4", "metadata": {"page_label": "223", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "ad6786c9961b00ad3ddb1d425519fd747c7814a144dcc415ee6e22c5d3daba06", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  3.11  IEEE 754 FP Standar ds\nIn addition, the IEEE standar ds group FP numbers into \ufb01ve data\nclasses, listed her e for the single data type:\n\u2022 Zer o\n\u2022 Denor mal with 23-bit fraction\n\u2022 Nor mal with 24-bit fraction (only 23 bits ar e stor ed in\nmemory)\n\u2022 In\ufb01nity\n\u2022 NaN (not-a-number), which indicates an invalid FP number\nor operation\nEquation (3.17)  presents the relationship between the unbiased\nexponent e and the biased exponent E. The format of a\nrepresentable single or double normal FP number is 1.F\u00d72E with an\nexplicit 1 befor e the decimal point; however, the 1 is not stored in\nmemory . The F is the external (in-memory) fraction, and 1.F is the\ninternal (in-register) fraction. A denor mal FP number is de\ufb01ned as\n0.F\u00d72E with an e xplicit 0 befor e the decimal point.\nTable 3.12 presents the ranges for each of the data classes. In\nthe table, the quantities emin and emax indicate the actual (not\nbiased) e xponent range for the nor mal FP numbers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 964, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f3a9afd5-1443-4ec1-b917-9dab61c30368": {"__data__": {"id_": "f3a9afd5-1443-4ec1-b917-9dab61c30368", "embedding": null, "metadata": {"page_label": "224", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "50c669d2-2e37-44a9-9583-e41f72ec05c3", "node_type": "4", "metadata": {"page_label": "224", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "21e528656b6655c433d9a62dff3291ea27938634951415f88785afc2c1cdbb95", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  3.12  IEEE FP Data Classes\nFor example, assuming 3-bit biased exponents with bias = 3, Eq.\n(3.18)  de\ufb01nes the E and F values for each of the data classes.\n3.8.2 Floating-Point Data Space\nA FP data space refers  to all the real numbe rs that can be\nrepresented as FP numbers in a computer system. Figure 3.29\ndisplays an FP data space using the positive real axis. The dotted\nhorizontal line between 0 and 2emin (not including 0 or 2emin)\nindicates the denor mal data space. The thin and bold vertical lines\nindicate the speci\ufb01c real numbers that can be represented as FP\nnumbers when fractions are only 2-bits each. The more fraction\nbits there are in the representation, the more real numbers can be\nrepresented as FP numbers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 734, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fe2570b9-4c5a-4264-9683-89e28751e58e": {"__data__": {"id_": "fe2570b9-4c5a-4264-9683-89e28751e58e", "embedding": null, "metadata": {"page_label": "225", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3c4293d8-d295-4cd2-a603-07d23b4b9cee", "node_type": "4", "metadata": {"page_label": "225", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "26e6def32f6512b27d09de0dfce7dcb7248fdb9d5051705392d773862385596a", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 3.29  An FP data space with 2-bit fractions.\nFor instance, in the single precision representation, the 8-bit\nunbiased exponent rage is from emin = \u2013126 to emax = 127 with\nbias = 127. Each fraction is 23-bits. Its data space would have 222\n\u2013 1 thin lines between each pairs of the bold lines.  The data space\nof the double precision representation would have 252 \u2013 1 thin lines\nbetween each pair of bold lines.\nFigure 3.30  displays the list of positiv e real numbers that can be\nrepresented as 6-bit FP numbers using 1-bit for sign, 2-bits for a\nfraction, and 3-bits for an exponent with bias = 3. As shown in the\n\ufb01gure, 17 real numbers ranging between 0.25 and 14.0 (inclusive)\ncan be represented with the 6-bit FP format. The FP numbers\nbetween 0 and 0.25 (e xclusive) would be consider ed denor mals.\nFIGURE 3.30  Real numbers r epresented as 6-bit FP numbers with 2-\nbit fractions and 3-bit e xponents with bias = 3.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 927, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7390479e-73bf-45d4-af24-c1e57c020fb0": {"__data__": {"id_": "7390479e-73bf-45d4-af24-c1e57c020fb0", "embedding": null, "metadata": {"page_label": "226", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f62672fe-84ad-4a41-a2ad-bc37ed30e41f", "node_type": "4", "metadata": {"page_label": "226", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7d1441fd7e3209c6a156cf5b4e81f8bbf80c2f46abd2dc14b891f9c564d51e2f", "class_name": "RelatedNodeInfo"}}, "text": "Example 3.2. Determine the external (in-memo ry) single precision FP representation of\nreal number +10.75.\nSolution:  First, the number is converted into binary . Then the\nrepresentation is converted into its scienti\ufb01c for mat in binary .\nThe result is a 32-bit number created from concatenating the 1-bit sign = 0, the 8-bit\nbiased exponent E = 130 = (10000010) 2, and the 23-bit fraction F = (010110\u2026.0) 2 as\nfollows:\nOr, 0x412C0000 in he x. The 1 in the 1. F format is not stor ed in memory .\nOther than the sign bit, the representation of negative and\npositive FP numbers is the same. Negative FP numbers have a 1 as\nthe sign bit. As an example, the single precision FP in-memory\nrepresentation of \u201310.75 is 0xC12C0000.\nTwo-Dimensional Displa y\nAlternatively, another way to display an FP data space is to use\nrectangular regions [4], as illustrated in Fig. 3.31 for the single\nprecision. A separate two-dimensional display is shown for each\npositive and negative FP data spaces. In the \ufb01gure, the x-axis is\narbitrarily selected to r epresent the e xponent values and the y-axis\nto represent fraction values. A di\ufb00er ent scale is used in each of the\naxes.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1159, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "70726ca8-87bc-41da-acf6-689d99370e15": {"__data__": {"id_": "70726ca8-87bc-41da-acf6-689d99370e15", "embedding": null, "metadata": {"page_label": "227", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "44d7d43e-d21e-419e-a0b7-dedf6504b8f6", "node_type": "4", "metadata": {"page_label": "227", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "35c7665006708c68dd41d84e86ee9377e73e574a2609049ecb9b21df087dba80", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 3.31  Two-dimensional display of the single pr ecision FP\ndata space.\nWhen compar ed to the one-dimensional display in Fig. 3.29, it is\neasier with the two-dimen sional display to identif y the location of a\nspecial FP number or the domain and/or the range for an FP\nfunction, such as cosine. For instance, the range  for the cosine\nfunction is all the representable FP numbers between 0 and 1.0,\ninclusive. A function\u2019s domain and range may be used, for\nexample, to generate test vectors for an FPU [4]. Figure 3.32\nillustrates the location of few sample FP numb ers in the two-\ndimensional FP data space.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 613, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e441137-b010-41dd-bc74-1a9ceee29fb0": {"__data__": {"id_": "3e441137-b010-41dd-bc74-1a9ceee29fb0", "embedding": null, "metadata": {"page_label": "228", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bee42ca5-41a6-4904-a90d-f7400d2417a3", "node_type": "4", "metadata": {"page_label": "228", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "00f19176fed4805d614573dd0bc4458e2e720addc5131548ad9d4e735d2e597f", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 3.32  Examples of the single pr ecision FPNs.\nThe smallest positive normal FP number is mark ed as item 1 in\nthe \ufb01gure and is located at the bottom-lef t corner of the positive\nnormal region with E = 1 and F = 0. The smallest (i.e., largest\nmagnitude) negative normal FP number is mark ed as item 2 and is\nlocated at the upper -right corner of the negative normal region\nwith exponent E = 254 and F all 1\u2019s. The +1.0 is mark ed as item 3\nand is located in the bottom center of the +nor mal region with E =\n127 and F = 0. The \u00b1zero is shown with E = 0 and F = 0. The\n\u00b1in\ufb01nity is shown with E = 255 and F = 0. Also, as implemented in\nthe Intel Pentium process ors, there are other special FP numbers,\nsuch as, the quite NaN (QNaN) that indicates an invalid operand\u2014\nfor example, \u20131 in the computation of \n  \u2014or the signaling NaN\n(SNAN) that indicates an invalid operation [ 5].\nThe two-dimensional display of the double precision FP data\nspace is similar, with the exception that the number of bits used to", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1011, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b4a5f580-133a-432a-9179-9eb83d28daa0": {"__data__": {"id_": "b4a5f580-133a-432a-9179-9eb83d28daa0", "embedding": null, "metadata": {"page_label": "229", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "caff4e75-787e-495a-a0c2-89ffbcc2e133", "node_type": "4", "metadata": {"page_label": "229", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f6c7bfab2c9fd5acbc5210b74dd767fbca174a52bfc9e92f0b0669b92a6b9b11", "class_name": "RelatedNodeInfo"}}, "text": "represent each exponent and fraction are, respectively, 11- and\n52-bits.\n3.8.3 Floating-Point Arithmetic\nBoth the exponent and the fraction of an FPN are integer numbers\nand are operated on separately when FP arithmetic is perfor med.\nFor example, in order to add the two real numbers 0.1075 (10.75 \u00d7\n10-2) and 72.5 (0.725 \u00d7 102) in decimal, the smaller fraction is\nshifted right to line up the decimal points befor e the two fractions\nare added to produce the sum 72.5075 (0.7250 75 \u00d7 102). The\nnumber of bits the smaller fraction is shifted is deter mined from\nthe two exponents. The algorithm to add two binary real numbers\nis the same as that in decimal and is outlined next. The labels A.s\nand B.s, A.E and B.E, and A.F and B.F, respectively, refer to the\nsign bits, biased exponent values, and the external (in-memory)\nfraction values of two FP numbers A and B. That is,\nwher e {} is used to indicate concatenation.\nFloating-Point Addition Algorithm:  Normal Data Class\n1. Initialize the inputs : A must be bigger than or equal to B.\ni. Let A. F= {1, A. F} and B. F= {1, B.F} be the inter nal (in-\nregister) r epresentations of the fractions.\nii. Mak e sur e |A| \u2265 |B|. If |A| <|B|, then switch B with A; |X|\nindicates the absolute value of X.\n2. Line up decimal points : Shif t B. F right by D bits as\ndeter mined ne xt.\ni. Let D = A.E \u2013 B.E.\nii. Shif t B.F right D number of times, entering 0 fr om lef t.\n3. Generate the r esult (R) : Compute R.F= A.F\u00b1 B.F.\ni. Generate the R.F as the sum or the di\ufb00er ence of A.Fand\nB. Fdepending on the values of A.s and B.s as follows:\nii. Let R.s = A.s and R.E = A.E.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1613, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0d1808bb-61c8-4c60-aa38-42c06f438ea1": {"__data__": {"id_": "0d1808bb-61c8-4c60-aa38-42c06f438ea1", "embedding": null, "metadata": {"page_label": "230", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74a0dacc-77c1-47e1-ba86-fad1602c1442", "node_type": "4", "metadata": {"page_label": "230", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c146e1c06ff830b1dc55e9bb66249b4551d07c7a6c9ea228e6f2a0efa9194d71", "class_name": "RelatedNodeInfo"}}, "text": "4. Normalize the r esult : Convert the R.F to 1.F format, if it is\nnot alr eady.\ni. If the for mat of the R.F is 1x.F wher e x is either 0 or 1 in\nstep 3. i, then add a 1 to R.E and shif t R.F 1-bit right to\nchange its for mat to 1.F; the LSB (least signi\ufb01cant bit) of 1\nx.F will be lost.\nii. Or, if R.F in step 3. i has leading zer oes, then subtract a 1\nfrom R.E each time that R.F is shif ted lef t in or der to r emove\nthe leading zer os necessary to r epresent R.F as 1.F. For\nexample, if R.F = 0.01xxxxxx\u2026.x, then it would be shif ted\nleft twice to 1.xxx\u2026x (1. F format). In this case, R.E must be\nreduced by two .\n5. Round the r esult :\nThe \ufb01nal output, S. F = {1, S.F}, is selected from the upper\nbits of R.F depending on the size of the target fraction: 24-bits\nfor single precision and 54-bits for the double precision internal\nrepresentations. The unused lower bits of R.F will be lost.\nHowever, the lost bits can be used to round up the result by\nadding a 1 to the LSB of S. F. If the format of the rounded S. F\nbecomes 1x.F again, another normalization step would be\nnecessary to change its format back to 1.F. A more complete\ndiscussion on rounding involving the guard (G), round (R), and\nsticky (S) bits, as outlined in the IEEE FP standar ds, is beyond\nthe scope of this book.\n6. Final output :\nThe R.s, R.E, and S.F are concatenated to create either a 32-bit\nnumber, if single precision, or a 64-bit number, if double\nprecision, befor e storing it in memory . That is,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1485, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1781f142-ea7e-458c-8671-28f57054a12b": {"__data__": {"id_": "1781f142-ea7e-458c-8671-28f57054a12b", "embedding": null, "metadata": {"page_label": "231", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "caefa15f-8957-4152-8aa7-c2c0e7ccb352", "node_type": "4", "metadata": {"page_label": "231", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e4f21f9238bd9043f086cba94e173fc1dacd568a95bef25c929708c875dc96e3", "class_name": "RelatedNodeInfo"}}, "text": "S ={R.s, R.E, S.F }\nThe size of R.F is 64-bits, and all the integer arithmetic and shift\nfunctions are perfor med in 64-bit fractions to minimize rounding\nerrors when billions of computations ar e perfor med.\nExample 3.3.  Deter mine S = A + B given that A = 17.875 and B = 15.75. Assume A, B,\nand S are 16-bit FP numbers with 1-bit sign, 7-bit e exponents with bias = 63, and 8-bit\nfractions.\nSolution:  The \ufb01ve steps to deter mine S = A + B are as follows:\n1. Convert each of the r eal numbers A and B into their binary\nrepresentations.\n2. Convert the binary r epresentation to their equivalent\nunbiased scienti\ufb01c for mat.\n3. Convert the unbiased scienti\ufb01c for mats to their equivalent\nbiased for mat.\n4. Convert each of the biased scienti\ufb01c for mats to a 16-bit\nin-memory r epresentation.\n5. Follow the FP addition algorithm to add the two FP\nnumbers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 854, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9c911061-c280-475e-8e21-dc798b0798c3": {"__data__": {"id_": "9c911061-c280-475e-8e21-dc798b0798c3", "embedding": null, "metadata": {"page_label": "232", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e712ac33-47d6-4312-ae2d-4d507d239c0d", "node_type": "4", "metadata": {"page_label": "232", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d757c4bcc6e2a3af25136cbfbc62f1863422c654c68451f14e06d6f5670319d7", "class_name": "RelatedNodeInfo"}}, "text": "1. Initialize the inputs :\nBecause |A| \u2265 |B| , ther e is no need to switch A with B.\n2. Line up the decimal points :\nShift B. F right once ( D= 1) to pr oduce B. F= 0.111111000\n3. Generate the sum :\n4. Nor malize the r esult :\ni. Add 1 to the R.E to yield R.E= 68 (67 + 1).\nii. Right-shif t the R.F by 1 to yield R.F = 1.000011010 (now\nin the 1. F format).\n5. Round the r esult :\nSelect the upper 9-bits from the new R.F as S. F= 1.00001101.\nThe lower only remaining bit of R.F is 0 and thus would be\nignor ed. The r esult is:\nS.F= 1.00001101 with S.F= 00001101\n(However, if the new R.F was instead 1.000011011 with 1 as its\nLSB, we would have had the option to round up the S. F to\n1.00001110 (i.e., 1.00001101 + 0.00000001).\n6. Final sum :", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 741, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0a868952-a55e-4ab2-81dc-9ac230f3bf16": {"__data__": {"id_": "0a868952-a55e-4ab2-81dc-9ac230f3bf16", "embedding": null, "metadata": {"page_label": "233", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9cc330af-6b00-4698-8a69-ce78f7e311bb", "node_type": "4", "metadata": {"page_label": "233", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8041af3c6e29a2c5a27217d4a8b9f2b3ea14a03ef9e0465216dc614e634e89df", "class_name": "RelatedNodeInfo"}}, "text": "The S is converted to a decimal number as follows:\nFP subtraction, multiplication, and division are similarly\nperfor med in several steps. For subtraction, the fractions are \ufb01rst\nlined up, as in the case of the FP add, and then they are subtracted\nif A.s = B.s or added if A.s \u2260 B.s. For multiplication, the fractions\nare multiplied, the exponents are added, and the sign bits are\nXORed. Finally, for division, the fractions are divided (integer\ndivision), the exponents are subtracted, and the sign-bits are\nXORed. The rounding and normalization steps are the same as\nthose discussed for the FP addition.\nHowever, because for FP division the most signi\ufb01cant bits of the\nnumerator internal fraction N. F and denominator internal fraction\nD. F are both 1, N. F is not padde d with 0\u2019s from left as it was done\nin Fig. 3.28  for integer division (r efer to Exercise 3.29 ).\n3.8.4 Floating-Point Unit\nFigure 3.33 illustr ates the data path of a \ufb02oating-point adder . The\ndata path includes combinational circuit modules that implement\nthe tasks outlined in the algorithm. In the data path, the Switch\nmodule is used to test if |A| < |B|. In order for |A| to be less than\n|B|, either A.E must be less than B.E, or in case of A.E = B.E, A. F\nmust be less than B. F. Two subtrac ting module s inside the Switch\n(not shown) generate the di\ufb00er ence A.E \u2013 B.E and A. F\u2013 B. F. The\nborrow-out signals from these modules would indicate whether or\nnot |A| \u2265 |B|.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1449, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6ed2ccfd-6e2f-4d98-9484-349e23b38f2e": {"__data__": {"id_": "6ed2ccfd-6e2f-4d98-9484-349e23b38f2e", "embedding": null, "metadata": {"page_label": "234", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "71fef793-0a6c-492e-a03f-880eea16cb18", "node_type": "4", "metadata": {"page_label": "234", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0694be73348573f55ae60af6a6b2627ff95eb1180b9f0d3fa85558c3022f25a7", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 3.33  A data path for FP addition.\nIf |A| < |B|, then A and B must be switched so that the larger\nnumber is used as A, the left input of the data path. Two 2-to-1\nMUXs (not shown) would be needed to switch A with B and B with A\nwhen necess ary. The two inputs A and B are switched if A.E < B.E\nor if A.F < B.F if A.E = B.E.\nThe Right Shifter module  is used to align the decimal points\nwhen computing A. F\u00b1 B. F. A Shift module is also used within each", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 459, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ef2f381f-7802-4c1b-860e-fc1931fb5ec6": {"__data__": {"id_": "ef2f381f-7802-4c1b-860e-fc1931fb5ec6", "embedding": null, "metadata": {"page_label": "235", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c50c0bb2-7df6-4dc4-91a4-4c5742b6ca81", "node_type": "4", "metadata": {"page_label": "235", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "fd5b321e4e6440246220d725f8d771f974bc698bd51461240013287087f6ab2d", "class_name": "RelatedNodeInfo"}}, "text": "of the normalization and rounding modules. A combinational shifter\nis described ne xt.\nCombinational Shifter\nA combinatio nal shifter is designed using log2(k) 2-to-1 MUXs\norganized in log2(k) levels, wher e k indica tes the range for the\nnumber of shifts. For example, for k = 8, a combinational shifter\ncan shift its input 0 to k \u2013 1 or 7 bits. Figure 3.34  illustrates an 8-bit\ncombinational right shifter with k = 8. The 3-bit S = s2s1s0\nspeci\ufb01es the shift size between 0 and 7 bits. The bits s2, s1, and s0\nare used as the select inputs to the thr ee MUXs.\nFIGURE 3.34  An 8-bit combinational right shif ter with zer o \ufb01ll.\nAs illustrated in the \ufb01gure, the top (Level 0) MUX selects either\nthe input X if s0 = 0 or the X shifted right by 1-bit if s0 = 1. The\nnext MUX selects either the Y if s1 = 0 or the Y shifted right by 2-\nbits if s1 = 1. Finally, the bottom (Level 2) MUX selects either the Z\nif s2 = 0 or the Z shifted right by 4 bits if s2 = 1.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 957, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cb9c2154-364d-42b5-8059-0c3078d71969": {"__data__": {"id_": "cb9c2154-364d-42b5-8059-0c3078d71969", "embedding": null, "metadata": {"page_label": "236", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e1d63c2a-80b9-4291-8a67-05641c07fdbc", "node_type": "4", "metadata": {"page_label": "236", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "37515398ad26e60bd3e2db706e66bdd2d1fe5c85b6d7ffeeb5910a69c9bd8100", "class_name": "RelatedNodeInfo"}}, "text": "For example, when S = s2s1s0= (011)2, s0 = 1 causes the Level 0\nMUX to shift input X right by 1-bit. The signal s1 = 1 causes the\nLevel 1 MUX to shift Y by 2 bits. Finally, the signal s2 = 0 causes\nthe L evel 2 MUX to pass Z as-is to its output. As a result, the shifter\nshifts its input X 3 bits to the right. When S = (101)2, X would be\nshifted right \ufb01ve times. The maximum number of times that X can\nbe shif ted is seven when S = (111)2.\n\u00a0\nReferences\n1. Vincent P . Heuring and Har ry F. Jordan, Computer Systems Design and\nArchitectur e, Pearson Education, Inc., 2004.\n2. Steve W ilson, \u201c Alternative Subtraction Algorithms,\u201d\nhttp://www .sonoma.edu/users/w/wilsonst/courses/math_300/gr oupwork/altsub/default.\nhtml.\n3. W. Kahan, \u201c Lectur e Notes on the Status of IEEE Standar d 754 for Binary Floating-\nPoint Arithmetic,\u201d http://www .cs.berk eley.edu/~wk ahan/ieee754status/ .\n4. Nikr ouz F aroughi, \u201c A \ufb02oating-point data space model: domain and range of a\nfunction,\u201d WORLDCOMP\u201903, The 2003 W orld Congr ess in Computer Science, Computer\nEngineering, and Applied Computing, June 25-28, 2007, Las V egas, US A.\n5. Intel 64 and IA -32 Ar chitectur e Sof tware Developer\u2019s Manual; V olume 1: Basic\nArchitectur e.\n\u00a0\nExercises\n3.1 Consider a CP A(8), an 8-bit CP A, and do the following:\na. Design the adder using NOT and NAND gates and\ndeter mine the total number of each gate used. Use SOP\nexpressions for the F A from Chap. 2 .\nb. Deter mine the total number of transistors.\nc. How many transistors would be needed to design a\nCPA(32)?\n3.2 Calculate the following 2\u2019s complement sum and di\ufb00er ence for\nthe following values. Indicate if any will r esult in an over\ufb02ow .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1671, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b192690f-c460-41d0-bf47-933703ce9244": {"__data__": {"id_": "b192690f-c460-41d0-bf47-933703ce9244", "embedding": null, "metadata": {"page_label": "237", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8ff13679-3b43-459d-8e58-996354454863", "node_type": "4", "metadata": {"page_label": "237", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "00f5acd65526c3db40ad2b136889495fe51d14e21ef46a84d41973406b66f8b1", "class_name": "RelatedNodeInfo"}}, "text": "3.3 Deter mine the POS e xpressions of a 1-bit PGU and 1-bit CGU\nand then draw their cir cuits using NOT and NOR gates, but\ncombine and use the minimum number of gates.\n3.4 Suppose an 8-bit adder is designed using two 4-bit CP As\n(labeled CP A1 and CP A2), wher e car ry-out c3 is fed as car ry-in\ninto CP A2. CP A1 inputs the initial car ry-in c\u20131. In or der to speed\nup the adder, c3 is generated as c3 = g3 + p3 g2 + p3 p2 g1 +\np3 p2 p1g0 + p3 p2 p1p0c\u20131, wher e p\u2019s and g\u2019s are generated in\n0.3 ns. Deter mine how much faster the new adder will be if\n\u0394FAc = 0.5 ns.\n3.5 Design and estimate the pr opagation delay of a 16-bit hybrid\nadder using\na. Two CL A(8) modules\nb. Four CL A(4) modules\nc. Eight CL A(2) modules\n3.6 Compar e \u0394CP A(8) with \u0394CL A(8) by calculating the speedup as\nthe ratio of \u0394CP A(8) over \u0394CL A(8). Use SOP e xpressions for an\nFA.\n3.7 Design a 15-bit CL A using 4-bit B CGUs, wher e each B CGU\noutputs thr ee car ry-bits and p* and g* signals.\n3.8 Design a 1-bit, 8-to -1 MUX using 1-bit, 2-to -1 MUXs. Also\nestimate its pr opagation delay assuming that NAND gates have\n0.1 ns delay .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1108, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ff283b25-698e-43b0-a6ff-75f17dada13a": {"__data__": {"id_": "ff283b25-698e-43b0-a6ff-75f17dada13a", "embedding": null, "metadata": {"page_label": "238", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e6f56514-5dec-4d4a-a9be-d93b6f89bef2", "node_type": "4", "metadata": {"page_label": "238", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "fbdc66c3c8f99cd4e01f136e3825671ca5f52aee68095401072a29339bc80c13", "class_name": "RelatedNodeInfo"}}, "text": "3.9 Design a 1-bit, 8-to -1 MUX using a combination of 1-bit, 2-to -1\nand 1-bit, 4-to -1 MUXs. Also estimate its pr opagation delay\nassuming that NAND gates have 0.1 ns delay and a 4-to -1 MUX\nimplements SOP e xpressions.\n3.10 Estimate the delay of the 8-bit AL U in Fig. 3.16  assuming 0.1\nns delay for NAND gates, the adder is a CL A(8), and ther e are\nonly 2-to -1 MUXs available.\n3.11 V erify that the cir cuit in Fig. 3.22  implements the AL U Map\nmodule.\n3.12 Consider an 8-bit bit-parallel AL U with only four functions:\nadd, subtract, and bit-wised AND and X OR. Assume an\nadder/subtractor module uses a hybrid adder designed fr om\nCLA(2) modules. In addition, the over\ufb02ow \ufb02ag must be mask ed\nout when perfor ming bitwise computation. Assume only 8-bit,\n2-to-1 MUXs ar e available. Do the following:\na. Draw the data path and estimate its pr opagation delay\nassuming 0.1 ns delay for each NOT and NAND gate.\nb. Construct the truth table for its Map module.\n3.13 Design a 4-to -2 encoder using 2-to -1 encoder modules. Hint:\nYou also need a 1-bit, 2-to -1 MUX and a two -input OR gate.\n3.14 Design an 8-to -3 encoder using 4-to -2 encoder modules. Hint:\nYou also need a 2-bit, 2-to -1 MUX and a two -input OR gate.\n3.15 Design the 8-bit bit-serial AL U shown in Fig. 3.23  and use the\ntruth table given in Table 3.8  for the 1-bit AL U slice.\n3.16 Design a 2-bit 2\u2019s complement comparator, and then use four\nof the comparator modules to design an 8-bit comparator . Hint:\nA 2-bit 2\u2019s complement comparator inputs two 2-bit inputs A\nand B and also gti (greater than), eqi (equal), and lti (less than)\nsignals, wher e \u201ci\u201d stands for input fr om the pr evious module\nand then outputs thr ee signals, gto, eqo, and lto, wher e \u201co\u201d\nstands for output. F irst design a 2-bit 2\u2019s complement with only\ninputs A and B to generate thr ee outputs gtt if A > B, eqt if A =\nB, and ltt if A < B, wher e \u201ct\u201d stands for temporary . Then\ncombine gtt, eqt, and ltt with the gti, eqi, and lti to generate\nthe gto, eqo, and lto. For example, gto = 1 if ( gti = 1 and gtt =", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2058, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ca4da36-c6db-440b-83c7-6eb393c3a4bf": {"__data__": {"id_": "7ca4da36-c6db-440b-83c7-6eb393c3a4bf", "embedding": null, "metadata": {"page_label": "239", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "49c26bcd-1d87-43ce-90a7-2347f567c804", "node_type": "4", "metadata": {"page_label": "239", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3a4d124d04913cc74d89ef6731195a2c471099142b59651f67e4208d1052f3e5", "class_name": "RelatedNodeInfo"}}, "text": "1) or ( gti = 1 and eqt = 1) or ( eqi = 1 and gtt = 1) or ( lti = 1\nand gtt = 1).\n3.17 Consider the 4-bit ar ray multiplier given in Fig. 3.26 . Do the\nfollowing:\na. Estimate its pr opagation delay in ter ms of pr opagation\ndelays of the car ry- and sum-bits of an F A; that is, in ter ms of\n\u0394FAc and \u0394F As.\nb. Give a generalized equation for the pr opagation of an n-\nbit ar ray multiplier .\n3.18 Consider an 8-bit ar ray multiplier wher e a CL A(8) is used to\nreplace the CP A(8) in the last r ow. Assuming that \u0394F Ac = 0.2\nns, \u0394F As = 0.3 ns, and CL A(8) = 0.8 ns, how much faster will\nthe new multiplier will be compar ed to the original?\n3.19 Use the r estoring division algorithm discussed to divide N =\n10101101 by D = 1110. Note you can use binary calculation on\nyour calculator to double-check your r esults.\n3.20 Design an ar ray divider by \ufb01rst designing a 1-bit combined\nsubtract-MUX bit slice with minimum delay (i.e., SOP or POS\nexpressions); then use it to design a 4-bit bit-serial subtract-\nMUX module; then r eplace each of the 4-bit subtract and 4-bit\nMUX pairs in the divider in Fig. 3.28 . with a 4-bit bit-serial\nsubtract-MUX module.\n3.21 W rite a pr ogram in the language of your choice (or use Ex cel)\nto implement the following r ecipr ocal division algorithm and\nmake an observation when D becomes 1.0. Then verif y that\nthe recipr ocal division algorithm, which computes Q, is equal to\nN/D computed by using the divide (/) operator . The r ecipr ocal\ndivision algorithm is as follows:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1511, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5d303f2b-a9c3-4d0e-92ac-c56319831895": {"__data__": {"id_": "5d303f2b-a9c3-4d0e-92ac-c56319831895", "embedding": null, "metadata": {"page_label": "240", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ecccc4f3-9d88-4234-98fa-7368117c1c6f", "node_type": "4", "metadata": {"page_label": "240", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "beb61ca0edf2ddfbb378a995ddd4928f6f0e79510125b8a28ad7c0ba5b2c66c7", "class_name": "RelatedNodeInfo"}}, "text": "Note that no division operator is used in the calcu lation of Q;\nonly multiplication and subtraction operations are used to\ncompute the result of N divided by D. This algorithm was\nimplemented in hardwar e as the FP divide instru ction in an\nIntel x486 processor . Run the program twice, once with inputs\nD = 1.99 and N = 2.4, and again with D = 1.56 and N = 2.4.\nNote the fraction of D is always less than 2 (e.g., maximum\nfraction of D in binary is 1.1111111\u20261 < 2 with 23 1s after the\ndecimal point for the \u201c\ufb02oat\u201d data type and 52 1s for the\n\u201cdouble\u201d data type).\nCompar e the N value when  D becomes 1.0 with the Q value\ncomputed as the original N (N0) divid ed (/) by the original D\n(D0) (e.g., Q = 2.4/1.99). Compar e Ni with Q = N/D when D i\nbecomes 1.0 for some i. Is Q = Ni when Di = 1.0? What do you\nnotice between the two runs?\n3.22 Deter mine the IEEE \ufb02oating point r epresentations of 6.725 for :\n3.23 Deter mine the IEEE \ufb02oating point Single pr ecision\nrepresentation of 0.35.\n3.24 0x41DD0000 is an IEEE single pr ecision FP number . What\nnumber does it r epresent in decimal?", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1089, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a001dd78-f4bf-4aab-b0a2-053f46843602": {"__data__": {"id_": "a001dd78-f4bf-4aab-b0a2-053f46843602", "embedding": null, "metadata": {"page_label": "241", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ec3b40e1-d906-4812-adee-ed525404832d", "node_type": "4", "metadata": {"page_label": "241", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f567e6f842e2fd75465c0499690036bf75565cc19f5e5ab7f57e6e9b7cea5a47", "class_name": "RelatedNodeInfo"}}, "text": "3.25 Show the steps to compute the sum (S) of two single pr ecision\nFP numbers A = 0xC18D0000 = \u201317.625 and B = 0x41080000\n= 8.5.\n3.26 Design an 8-bit combinational arithmetic right shif ter. Each\ntime a number is arithmetic right shif ted, the sign bit is\nrepeated. Also illustrate \u201380 right shif ted thr ee times (i.e., \u201380\n>>> 3).\n3.27 Design and simulate a V erilog behavior and structural model\nfor an 8-bit 2\u2019s complement adder/subtractor using a CP A(8).\nUse a \u201ccase\u201d statement to describe an F A; then use a V erilog\nstructural model to design the CP A(8) with eight copies of the\nFA modules. Use an \u201cassign \u201d statement to enter the e xpression\nfor the over\ufb02ow \ufb02ag ( ovf) and an \u201cif -else\u201d statement to\ndescribe the inverter module. Cr eate a V erilog tester module\nand test your design using test vectors 0x80 \u2013 0x01 and 0x7F\n+ 0x01. Is the over\ufb02ow \ufb02ag asserted in both cases?\n3.28 Design an 8-bit r estoring divider in V erilog. Use a behavior\nVerilog model to cr eate a 1-bit subtractor similar to an F A. Also\ncreate an 8-bit BPS similar to an 8-bit CP A. Create a behavior\ndescription of 8-bit, 2-to -1 MUX. Combine several BPS and MUX\nmodules to design the divider . Create a tester module to test\nyour design.\n3.29 Consider the FP numerator with e xternal fraction N. F = {1,\nN.F} and denominator e xternal fraction D. F = {1, D.F} wher e\nN.F and D.F ar e 4-bit numbers. Use four 4-bit bit-serial\nsubtractor -MUX modules fr om Ex ercise 3.20 to design an\ninteger divider used in an FPU. Hint: N.F will be padded with 0\u2019s\nfrom the right; in this case, Ak in each step is always a 5-bit\nnumber and Ak[4], the most signi\ufb01cant bit (MSB), is not used\nto deter mine the ne xt remainder (i.e., Ak[3:0] \u2013 D.F); Ak[4] is\nused instead with the conjunction of bor row-out (bo) in each\nstep to deter mine the ne xt quotient bit as \n3.30 Computer security (har dwar e Trojans): Ex ercise 11.12 to\nunderstand how a computational malicious cir cuit is designed.\nDo not implement the triggering mechanism; instead, dir ectly\noperate the multiple xer to cause a computational attack (also\nsee Sec. 11.2).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2102, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3faf2cc3-9ddd-4254-81c0-91e76b3e268e": {"__data__": {"id_": "3faf2cc3-9ddd-4254-81c0-91e76b3e268e", "embedding": null, "metadata": {"page_label": "242", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9f7a214f-04a6-486e-916d-a6aae8b1c739", "node_type": "4", "metadata": {"page_label": "242", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d04f56832565c450ac933942d5fcf10369dc0426d70116c4c1c1d6fb86f133bc", "class_name": "RelatedNodeInfo"}}, "text": "3.31 Computer security : (access contr ol) Ex ercise 11.26 to design a\nhierar chical access contr ol scheme suitable for har dwar e\nimplementation (also see Sec. 11.1.4 and Sec. 11.1.5).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 186, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b2b8e6dc-6ad4-46b5-917d-4cd3ce617cb5": {"__data__": {"id_": "b2b8e6dc-6ad4-46b5-917d-4cd3ce617cb5", "embedding": null, "metadata": {"page_label": "243", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "964c5e1c-8778-46b1-8e6d-bdffde3f2bb6", "node_type": "4", "metadata": {"page_label": "243", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0492888664277b0ea3c02971d7f591f4f14e8d169fa2fb3cafd6d093a5431875", "class_name": "RelatedNodeInfo"}}, "text": "CHAPTER 4\nSequential Circuits: Core\nModules\n\u00a0\n4.1 Introduction\nWhile combinational circuits are necessary and are an important\npart of a digital system, their outputs depend only on the inputs\ncurrently applied. Any change in the inputs is expected to change\nthe outputs. On the other hand, the outputs of a sequential circuit\ndepend not only on the current inputs, but also on the inputs\npreviously entered. For example, as illustrated in Fig. 4.1 , if a single\nadder is used to genera te the sum of several numbers, then a\npartial sum, initially zero, must be saved and adde d with each new\nnumber to generate the next partial sum. Therefore, the circuit is a\nsequential circuit because the current partial sum is the sum of all\nthe previously enter ed numbers, and the next partial sum is\ndeter mined by adding the next number, now the current input to\nthe adder, to the saved partial sum.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 892, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b177c33d-b45d-4f26-9bc8-9ddf63178c24": {"__data__": {"id_": "b177c33d-b45d-4f26-9bc8-9ddf63178c24", "embedding": null, "metadata": {"page_label": "244", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "805bb99a-3473-4756-b914-ab3fe0a51da9", "node_type": "4", "metadata": {"page_label": "244", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "bb8c0454118e69d2bc39d57782f5f1841479b0498dd0b75017fad5c0cd3b7855", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 4.1 An illustration of a sequential cir cuit; it computes the\nsum of several numbers, V0, V1, etc.\nIn general, a comple x sequential data path requir es\ncombinational circuits to generate outputs as results and storage\nmodules (typically registers) to save those results. The data path\nalso requires a contr ol unit (a contr oller) that follows a speci\ufb01c set\nof steps (i.e., an algorith m) to compute a comple x function using\nthe data path. A contr ol unit is a sequential circuit and uses storage\nmodules to save its current state (e.g., a speci\ufb01c step in the\nalgorithm) in order to deter mine its next state using the inputs it\ncurrently r eceives.\nSequential circuits also requir e a timing contr ol signal called a\nclock . It is used to deter mine when a value\u2014for example, the sum\nfrom the adder in Fig. 4.1\u2014should be stored in the storage module.\nNote that the adder does not generate all the sum bits at the same\ntime. Each sum bit is the output of a combinational circuit with a\nspeci\ufb01c propagation delay. The circuits that have shorter\npropagation delays generate their outputs sooner than those that\nhave longer propagation delays. Therefore, the sum is valid when\nthe circuit with the longest propagation delay in the adder\ngenerates its output. Otherwise, one or more of the sum bits would\nbe still changing, and thus the sum would be invalid. The clock\nsignals the validity of the sum and allows the storage module to\nsave it.\nThis chapter presents the core logic circuits requir ed to design a\nstorage module. In a core circuit, outputs are fed back as inputs so", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1584, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "83b0a7f2-daba-4e8c-bb68-cb74b4926cf4": {"__data__": {"id_": "83b0a7f2-daba-4e8c-bb68-cb74b4926cf4", "embedding": null, "metadata": {"page_label": "245", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a24c9a0a-7cbc-48c3-b3b2-339a2bdd5b1f", "node_type": "4", "metadata": {"page_label": "245", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "fa956038e71253d17d6ebc713ca1bfbe4f53b36d18c54289a887c55e27f0888a", "class_name": "RelatedNodeInfo"}}, "text": "the circuit can retain an output value, thereby creating a storage\nmodule. However, these core circuits requir e certain operating\nconstraints to remain stable and retain their stored values. They are\nused in the design of small and large sequentia l circuits. Small\nsequential circuit designs  are cover ed in Chap. 5, large designs in\nChap. 6 , and CPU design in Chap. 8 .\n\u00a0\n4.2 SR Latch\nThe cir cuit of an SR latch is illustrated in Fig. 4.2 . The circuit has two\ninputs: s and r. They, respectively, stand for set q, meaning q\nbecomes 1, and reset q, meaning q becomes 0. Signals p and q are\ninterdependent and are de\ufb01ned as \n  and \n  In order to\ndeter mine the value of q, one must know the value of p, or vice\nversa. Therefore, becaus e the initial values of q and p are not\nknown, the circuit activiti es are best understood by examining the\nfollowing four cases.\nFIGURE 4.2 A basic SR latch.\nCase 1: s = 0 and r = 0\na. Assuming that the cur rent value of q = 0, let s = 0 and r\n= 0 and then deter mine the new values of p and q. In this\ncase,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1050, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b109d6c1-c239-4244-b87c-9b4b277bc138": {"__data__": {"id_": "b109d6c1-c239-4244-b87c-9b4b277bc138", "embedding": null, "metadata": {"page_label": "246", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a965a8a9-dd15-4565-bc30-5298c9cba25b", "node_type": "4", "metadata": {"page_label": "246", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "ce0e0b1952f0f0070c4a24e091af39bf7595a46994214ae4cd497a4dcb5409ce", "class_name": "RelatedNodeInfo"}}, "text": "b. Assuming that the initial value of q = 1, let s = 0 and r\n= 0 and then deter mine the new values of p and q.\nThat is, when s = 0 and r = 0, qnew = 0 (no change) and\npnew = 1.\nThat is, when s = 0 and r = 0, qnew = 1 (again no change)\nand pnew = 0.\nCase 1 indicates that when both s = 0 and r = 0, the values\nof p and q remain unchanged and \n .\nCase 2: s = 0 and r = 1\na. Assuming that q = 0, let s = 0 and r = 1. Thus,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 420, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f0a51c21-a2eb-491a-89ed-000a3393d819": {"__data__": {"id_": "f0a51c21-a2eb-491a-89ed-000a3393d819", "embedding": null, "metadata": {"page_label": "247", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f377e790-8556-442e-ae67-844d189cdd81", "node_type": "4", "metadata": {"page_label": "247", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d1083a1f34813f100a8b0ab08693bc73877a74ed09e82ebdfda7a4923fcd1cb2", "class_name": "RelatedNodeInfo"}}, "text": "That is, when > = 0 and r = 1, qnew = 0 (no change) and\npnew = 1.\nb. Assuming that q = 1, let s = 0 and r = 1.\nIn this case, the value of q changes, but eventually stabilizes\nand r emains at 0.\nThat is, when no matter what the cur rent value of q is, if s\n= 0 and r = 1, then qnew = 0 and pnew = 1. That is, q is reset\nto 0 (or the latch stor es logic 0) and p = \n.\nCase 3: s = 1 and r = 0\na. Assuming that q = 0, let s = 1 and r = 0.\nThat is, if s = 1 and r = 0, then qnew = 1 (change s from 0 to 1)\nand pnew = 0.\nb. Assuming that q = 1, let s = 1 and r = 0.\nCase 3 indicates that no matter what the current value of q\nis, if s = 1 and r = 0, then qnew = 1 and pnew = 0. That is, q is\nset to 1 (or the latch stor es logic 1) and p = \n.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 736, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "23c686ac-889c-417e-b37b-6ed31b12889e": {"__data__": {"id_": "23c686ac-889c-417e-b37b-6ed31b12889e", "embedding": null, "metadata": {"page_label": "248", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6729378c-c0b5-4f7c-82da-1defe160e62d", "node_type": "4", "metadata": {"page_label": "248", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "fff85dd1bd86703231f59ac5f4eae686a19ac8a90dc37a608cd656a9339aab19", "class_name": "RelatedNodeInfo"}}, "text": "Case 4: s = 1 and r = 1\na. Assuming that q = 0, let s = 1 and r = 1.\nIn this case, both qnew and pnew become 0.\nb. Assuming that q = 1, let s = 1 and r = 1.\nAgain, in this case, both qnew and pnew become 0.\nCase 4 is a special case. It indicates that no matter what the\ninitial value of q is, if s = 1 and r = 1, then pnew and qnew both\nbecome 0, unlike the other three cases. This case produces\ninconsistent values for p and q as compar ed to the previous\nthree cases, wher e p and q always have the opposit e values.\nThis case is also inconsistent because if both r and s are\nsimultaneously set to 0 after both being 1, p and q signals will\noscillate, both will become 1 and then both will become 0, and\nthen it would repeat again. While the oscillation will continue\nforever (never stabilizing) during simulation, the oscillation\nwould eventually stop in a real circuit. However, the \ufb01nal and\nstabilized value of q would be random, 0 or 1, and p = \n. Case\n4 can alter the state of a system, randomly causing problems.\nFor this reason, Case 4 should never happen. That is, r and s\nshould never become 1 at the same time.\nCases 1 to 3, on the other hand, provide the necessary\nfunctions one would expect from a storage module: retain q\n(Case 1), reset q or store 0 (Case 2), or set q or store 1 (Case\n3), with p always being equal to \n .\nFigure 4.3 illustrates the \ufb01nal SR latch circuit, with p replaced\nwith \n . Its characteristic table (also called a truth table) is shown in\nthe \ufb01gure with Case 4 (s = 1 and r = 1) mark ed unused. In the\ntable, the current value of q is shown as qt to mean the value of q", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1609, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9fbfcdf0-49f4-4c09-9c5d-d125eb0a0002": {"__data__": {"id_": "9fbfcdf0-49f4-4c09-9c5d-d125eb0a0002", "embedding": null, "metadata": {"page_label": "249", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0b091c35-6ea0-41e7-95fd-fb126491912e", "node_type": "4", "metadata": {"page_label": "249", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d9706ddd8eb6ed45ece605b0f7cc094c53d6c62feca453f6e63f914c043e7632", "class_name": "RelatedNodeInfo"}}, "text": "at time t. The new (next) value of q is shown as qt+1 to indicate the\nstabilized values of both q and \n .\nFIGURE 4.3 SR latch and its characteristic table: ( a) SR latch\u2019s\ncharacteristic table; ( b) a NOR -gate SR latch.\nThe SR latch circuit still lacks certain featur es to be a useful\ncircuit:\n\u2022 We must mak e sur e that r and s signals both do not become\nactive at the same time (i.e., Case 4 never happens).\n\u2022 We must be able to initialize q to a known value, 0 or 1,\nduring a system startup.\n4.2.1 Clocked SR Latch\nA clock is a signal generated by an electr onic device called an\noscillator that repeatedly outputs 1 and 0, each with a \ufb01xed\nduration. It is used to sample signals at speci\ufb01c  times, and the\nsampling is done either when the clock is 0 or when the clock is 1.\nFigure 4.4 presents the circuit for a clock ed SR latch. The clock\nsignal is individually ANDed with r and s signals. It contr ols the\ntiming when both r and s signals are allowed to change the state of\nthe cor e circuit ( Fig. 4.3 (b)), de\ufb01ned by the q and \n  signal values.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1055, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "51dc8d6d-a6d1-44cc-a345-c876173aea37": {"__data__": {"id_": "51dc8d6d-a6d1-44cc-a345-c876173aea37", "embedding": null, "metadata": {"page_label": "250", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bcaec3c1-de55-49d4-9737-5228f2021e55", "node_type": "4", "metadata": {"page_label": "250", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9888effea549cdef30d7982e37421e0c760050fcdc0a50654c389787e2225dfd", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 4.4 A positive-level SR latch.\nWhen clk = 0 in Fig. 4.4 , both G1 and G2 AND gates in the circuit\nwould output 0, independent of the values of r and s. This, in turn,\nwill cause the core SR latch to retain its current state (Case 1).\nHowever, when clk becomes 1, G1 will output an incoming r value\nand G2 an incoming s value. At this time, the r and s values could\nalter the state of the core SR latch accor ding to the characteristic\ntable in Fig. 4.3 (a).\nThe circuit in Fig. 4.4  is called a positive-level  SR latch if r and s\nsignal value s \u201center \u201d the core circuit when clk = 1, and a\nnegative-level  SR latch if the signals \u201center \u201d the core circuit when\nclk = 0. Figure 4.5 illustrates a few timing scenarios for a positive-\nlevel SR latch, assuming that signal s has a shorter propagation\ndelay than r.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 819, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be38b3a4-76bd-4f14-8071-e1a2e705a695": {"__data__": {"id_": "be38b3a4-76bd-4f14-8071-e1a2e705a695", "embedding": null, "metadata": {"page_label": "251", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6da769e2-2f28-49d8-acee-80a617e8b936", "node_type": "4", "metadata": {"page_label": "251", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "60435230da62bdda3f31ddc76ae4e6fd2e5a7b58530ec728396a4a86ba6bc7ce", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 4.5 SR latch timing e xamples.\nDuring time slot 1, both s and r signals are changing, and since s\nhas a shorter pr opagation delay than r, it changes to 1 while r is still\n1. Thus, as illustrated in the \ufb01gure, both r and s are 1 momentarily\n(i.e., Case 4), as illustrated by the shaded area in the timing\ndiagram. However, becau se clk = 0 during this time slot, both G1\nand G2 AND gates output 0 and prevent s = 1 and r = 1 from\n\u201centering\u201d the core. The latch, therefore, retains its current state,\nuna\ufb00ected.\nDuring time slot 2, when clk = 1, r = 0, and s = 1, the AND gates\nwould pass the r = 0 and s = 1 to the core circuit, changing q to 1.\nDuring this time slot, the latch is said to be sampling its r and s\ninput values.\nDuring time slot 3, when clk = 0 (retain), the latch retains q = 1,\nkeeping it at 1. Finally, during time slot 4, when clk = 1 and the\nlatch is sampling, a mom entary change in the value of r (e.g., due\nto a glitch) unexpectedly changes q to 0. For this reason, both r and\ns signal values must stabil ize prior to each sampling time. This is a\ndisadvantage of an SR latch.\nAnother disadvantage of an SR latch is that the latch requir es two\ninputs (r and s) to operate. This is especially true today with\nmoder n integ rated chips (ICs), wher e wires also occupy chip real\nestate. A moder n IC implements thousands of latches to build\nregisters. If each latch r equir es two input signals to operate, this will\ndouble the space r equir ed to wir e those signals.\nA D-latch , designed from an SR latch, resolves both of these\ndisadvantages. The D-latch will be discussed in the ne xt section.\nBecause the r and s inputs a\ufb00ect the core circuit only during the\nsampling time, they are known as the synchr onous reset and\nsynchr onous set signals, respectively . However, it is often necessary\nto initialize the latch to either q = 0 or q = 1 asynchr onously,\nindependent of the clock levels. Figure 4.6 illustrates a clock ed SR", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1960, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a735e59d-4bfe-45d8-8aa8-4602361e8067": {"__data__": {"id_": "a735e59d-4bfe-45d8-8aa8-4602361e8067", "embedding": null, "metadata": {"page_label": "252", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e48e0742-d4e6-4040-ae24-8b89215a1f2d", "node_type": "4", "metadata": {"page_label": "252", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2227fd9e95a442be261ec873b309375ceeca35b3e37b3cac08fbd070e82b0d4e", "class_name": "RelatedNodeInfo"}}, "text": "latch with asynchr onous reset and asynchr onous preset signals.\nThese signals are direct inputs to the NOR gates, and each can\nindependently change both q and \n  when active. When reset = 1\nand preset = 0, q becomes 0, independent of the values of r, s, and\nclk signals. Likewise, when preset = 1 and reset = 0, q becomes 1.\nThe reset and preset signals both should not be active at the same\ntime; only one needs to be active to either initialize q to 0 or 1.\nFIGURE 4.6 An SR latch with asynchr onous r eset and pr eset signals.\nNAND V ersion\nThe NOR -version SR latch in Fig. 4.6  is easier to understand because\nit uses active-high signals . An equivalent NAND version of the latch\nis shown in Fig. 4.7 with asynchr onous active-low _reset (or _r) and\n_preset (or _s) signals. Note that, when compar ed to the NOR\nversion, the position of the r and s signals have changed in the\nNAND version ; the s is now lined up with the q signal and r with the \n signal . The \ufb01gure also shows the symbol for a clock ed SR latch,\nwher e the input c indicates \u201cclock.\u201d Unless otherwise stated, the\nterm \u201cSR latch\u201d implies a clock ed SR latch, either positive or\nnegative level.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1167, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3bbcb749-fc46-4445-ac61-d901d45bba7d": {"__data__": {"id_": "3bbcb749-fc46-4445-ac61-d901d45bba7d", "embedding": null, "metadata": {"page_label": "253", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c04764b-3ee5-4b4b-9e5e-b3bd1743c19c", "node_type": "4", "metadata": {"page_label": "253", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8303db4023bc55a7cf5f1d5a750ffa1420065120cb11eacb8a016795953c27f7", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 4.7 A positive-level SR latch: ( a) NANDs- only SR latch; ( b) SR\nlatch logic symbol.\n4.3 D-Latch\nAn SR latch can be converted to a D-latch by eliminating the retain\noption (Case 1) when both s and r signals are 0. In synchr onous\nmode, a D-latch requir es a single input d in addition to the clock\nsignal to operate it. This is done by connecting d to s and \n  to r, as\nillustrated in Fig. 4.8; the d stands for data. A D-latch operates in\nonly two modes, setting q (q = 1) synchr onously when d = 1 or\nresetting q (q = 0) synchr onously when  d = 0. The q signal always\nbecomes d when the clock signal indicates sampling. Howeve r, a D-\nlatch, just like an SR latch, does retain q when the clock is in the\n\u201co\ufb00\u201d and nonsampling level.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 742, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7576405a-387c-490e-9b2e-25621826b39b": {"__data__": {"id_": "7576405a-387c-490e-9b2e-25621826b39b", "embedding": null, "metadata": {"page_label": "254", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bc9dc249-ad2e-422a-91c6-06d3afc242de", "node_type": "4", "metadata": {"page_label": "254", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "87305f4d6cb0da7971e24d516ae200938be8e718837769840754607ce9bd3caa", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 4.8 The cir cuit and logic symbol of a D-latch.\n4.4 Disadvantage of Latches\nBoth SR and D-latches have a disadvantage that limits their\napplication in the design of most sequential circuits. When two or\nmore latches operate with the same clock signal, no data\ndependency can exist among their d signals. Consider two or more\nD-latches that operate with the same clock signal. In this case, none\nof the d inputs among the latches can be a function of any of the\nq\u2019s or \n\u2019s; otherwise , a condition called signal chasing  will prevent\nthe cir cuit fr om operating cor rectly.\nFor instance, consider the two positive-level D-latches illustrated\nin Fig. 4.9. Both latche s operate using the same clock signal clk. In\nthis case, d0 depends on q1 (i.e., d0 = q1). The circuit is supposed to\noperate as a 2-bit right-shif t register, but it does not. Each time that\nclk changes from 0 to 1, the current register content , indicated by\nq1 and q0 signals, should change to its new content as \n  = 0 and \n = \n .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1008, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc3f1f76-0a4e-4a06-8c88-67c04060dbfe": {"__data__": {"id_": "bc3f1f76-0a4e-4a06-8c88-67c04060dbfe", "embedding": null, "metadata": {"page_label": "255", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8297c76e-0721-4088-8f30-7730455f5682", "node_type": "4", "metadata": {"page_label": "255", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "71b2a384b2655e91fadef793025957a95205cf30accb07623acf8cfffd5651e3", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 4.9 Illustrating an incor rectly designed 2-bit right-shif t\nregister; no latches should be used.\nTo illustrate this, suppose  that after using the active-low _reset\nsignal to reset the latche s, making their q bits 0, the q1 is set to 1\nusing the switch connecte d to the Latch 1 active-low asynchr onous\nset (_s) input. This makes the concatenated values of q1 and q0 or\nq1q0 = (10)2, indicated in the \ufb01gure as the initial values of q1 and\nq0. Now, when clk changes from 0 or 1, the next value of q1q0\nshould be (01)2 indicating a right shift wher e d1 = 0 is enter ed from\nthe lef t. However, that will not happen with latches.\nSpeci\ufb01cally, when clk becomes 1, both the D-latches will\nsimultaneously begin to sample their inputs, changing the current\n(in this case, initial) value s of \n  = 1 and \n  = 0 to \n  = d1 =\n0 and \n  = d0 = \n  = 1. However, if clk remains at 1, the D-\nlatches will continue sampling their inputs, causing  \n to take the\nvalue of \n , making the \ufb01nal q1q0 = (00)2 instead of, as expected,\n(01)2. In this case, signal d1 = 0 chases and changes d0 to 0 when\nclk stays 1 for a longer time.\nIn gene ral, a set of interconnected latches with dependent inputs\nwill fail to operate independently, and thus canno t be used in the\ndesign of many important  sequential circuits, such as shift registers", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1326, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "226292ba-6725-47ec-98cc-ae40bb312694": {"__data__": {"id_": "226292ba-6725-47ec-98cc-ae40bb312694", "embedding": null, "metadata": {"page_label": "256", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c412444-1c0e-4375-9468-3d009f6e959f", "node_type": "4", "metadata": {"page_label": "256", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "16d540bdaeefaac64bc8277fa26e7049e18e0bbe77c4983d94a73e4a54678174", "class_name": "RelatedNodeInfo"}}, "text": "and control units. The circuit that prevents signal chasing is called a\n\ufb02ip-\ufb02op.\n\u00a0\n4.5 D Flip-Flop\nA \ufb02ip-\ufb02op can be designed from two connecting latches, as\nillustrated in Fig. 4.10 for a D \ufb02ip-\ufb02op. During each clock level, only\none of the latches samples its input signal, while the other latch\nretains its current value. The two latches operate like a double-door\nentry system , much like the ones used in many buildings. Only one\ndoor at a time is kept open while the other door is closed. To enter\nthe building, one must enter through the \ufb01rst door and then the\nsecond door. In the \ufb01gure, the two latches are labeled A (door A)\nand B (door B). Their inputs and outputs are, respectively, referred\nto as A.d, A.q, B.s, etc. Both A and B are positive-level latches but\noperate with complementing clock levels. Latch A is a D-latch and\nLatch B is an SR latch.\nFIGURE 4.10  A D \ufb02ip-\ufb02op.\nWhen clk = 1 and thus \n  = 0, Latch A would not be sampling\n(i.e., door A is closed), and thus r etains its q, A.q. During this time, a\nchange in the primary input d (A.d = d) will not a\ufb00ect A.q and A.\n.\nThese two signals are connected, respectively, to B.s and B.r inputs\nof Latch B, and thus if d changes, B.q will not chan ge even though\nLatch B is still sampling when clk = 1 (i.e., door B is open).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1290, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab5c3290-4410-4424-ba77-b5379d73ebeb": {"__data__": {"id_": "ab5c3290-4410-4424-ba77-b5379d73ebeb", "embedding": null, "metadata": {"page_label": "257", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "10b9fffa-0d1c-4fa1-812c-36352a8949c5", "node_type": "4", "metadata": {"page_label": "257", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "922592e92a2e940bb9525a124a07da5b3733e755bac9c8ab4d5f76bfb1add83e", "class_name": "RelatedNodeInfo"}}, "text": "However, when clk transitions from 1 to 0 and \n transitions from\n0 to 1, the latches switch modes; Latch A starts sampling A.d (i.e.,\ndoor A opens), and Latch B stops sampling A.q (i.e., door B closes);\nthus, Latch B retains B.q. At this time, any change in the primary\ninput d will change A.q but not B.q. Therefore, the two latches that\noperate with opposite clock levels prevent signal chasing. The\noutput of Latch A can only a\ufb00ect the output of Latch B if the clk\ntransitions again from 0 to 1. Thus, the \ufb02ip-\ufb02op requir es a clock\npulse to operate.\nIn the \ufb01gure, when the clk signal changes from 1 to 0 and again\nback to 1 (a 1-0-1 transition), the \ufb02ip-\ufb02op samples and stores its\nprimary input d as B. q, its primary output.\n4.5.1 Alternative Circuit\nA di\ufb00erent D \ufb02ip-\ufb02op circuit with fewer total requir ed gates is\nillustrated in Fig. 4.11 . The D \ufb02ip-\ufb02 op operates like the one shown in\nFig. 4.10 . It samples the primary input d when the clk makes a 1-0-1\ntransition. Speci\ufb01cally, when clk transit ions from 1 to 0, both signals\n and \n  become 1, causing the \ufb02ip-\ufb02op to retain q, independent of\nthe current value of d. When clk transi tions from 0 to 1, the \ufb02ip-\ufb02op\nstarts sampling d. If d = 1, then \n  = 0 and \n  = 1 will chan ge q to 1;\nor, if d = 0, then \n  = 1 and \n  = 0 will change q to 0. The values of\nboth \n  and \n  remain unchanged until the ne xt time that clk mak es a\n1-0-1 transition.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1405, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7d91119a-e518-44ff-b4bb-53c839807903": {"__data__": {"id_": "7d91119a-e518-44ff-b4bb-53c839807903", "embedding": null, "metadata": {"page_label": "258", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6fb36892-17d0-476c-9e06-f9fc3546b239", "node_type": "4", "metadata": {"page_label": "258", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "090f2806a745c58ef9b906db3528dcced58335e14580ed805d01ccb49a65e3e9", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 4.11  An alter native D \ufb02ip-\ufb02op with fewer gates.\n4.5.2 Operating Conventions\nLatch A and Latch B in Fig. 4.10  do not opera te (i.e., sample) during\nthe same clock level (0 or 1). One latch is always not sampling (one\ndoor is closed) while the other is always sampl ing (one door is\nopen). The only time that a sampled input d is passed from Latch A\nto Latch B (i.e., B.q) is when clk makes a 0-1 transition and causes\nLatch A, which was sampling, to stop sampling and Latch B to start\nsampling A .q. Note that A.q will not change even if d changes since\nLatch A is now not sampling. The next time that Latch A will start\nsampling is when clk makes a 1-0 transition, which makes Latch B\nstop sampling.\nWith D \ufb02ip-\ufb02 ops, data moves from one latch to the next on the\nclock edge and not on the clock level; thus, a D \ufb02ip-\ufb02op is called\nedge triggered . It is called a positive- or rising-edge trigger ed \ufb02ip-\n\ufb02op if a 1-0-1  clock transition causes d to be loaded (A.q = d on 1-0\ntransition) and stored as q (B.q = A.q on 0-1, positive, up arrow\ntransition). Likewise, a negative- or falling-edge trigger ed \ufb02ip-\ufb02op\nwould requir e a 0-1-0 clock transition to load d (A.q = d on 0-1\ntransition) and store it as q (B.q = A.q on 1-0, nega tive, down arrow\ntransition). As illustrated in Fig. 4.12, the clock input of an edge\ntrigger ed \ufb02ip-\ufb02op is mark ed with the right angle (>) symbol, and\nalso with a small bubble if the \ufb02ip-\ufb02op is negative edge trigger ed.\nFIGURE 4.12  Positive- and negative-edge trigger ed \ufb02ip-\ufb02op symbols.\n4.5.3 Setup and Hold Times", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1557, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f783c9cd-8a7c-4d89-81a1-f76372e38651": {"__data__": {"id_": "f783c9cd-8a7c-4d89-81a1-f76372e38651", "embedding": null, "metadata": {"page_label": "259", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d04b13ce-4bb9-49bf-b37b-ffdb361be193", "node_type": "4", "metadata": {"page_label": "259", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9ca71e4548cbcdea389c1d171cc4e8d688a20df2e031580c88d007e609606d8a", "class_name": "RelatedNodeInfo"}}, "text": "A D \ufb02ip-\ufb02op,  as opposed to, say, an SR \ufb02ip-\ufb02op, that is designed\n(but not used today) using positive-level and negative-level SR\nlatches has the advantage of allowing its d input to change while\nLatch A (the \ufb01rst latch) is still sampling. The only requir ement is\nthat the d signal  must  stabilize and remain stable during a small\nperiod when the clock is transitioning.\nFor example, consider the positive edge-trigger ed \ufb02ip-\ufb02op in Fig.\n4.10. When clk = 0, Latch B retains B.q (i.e., door B is closed), and\nbecause \n  is 1, Latch A samples A.d (i.e., door A opens). Now, the\ninstant that the clk makes a rising-edge (0-1) transition and\nbecomes 1, both the clk and the \n  are still at logic 1 until the \nchanges to 0 after the short propagation delay of the NOT gate and\nstops Latch A from sampling d (i.e., door A closes). Durin g this short\nperiod, both the latches will be sampling their r espective inputs.\nTherefore, in order for the D \ufb02ip-\ufb02op to operate correctly during\nthis time, d must becom e stable\u2014so the s and r signals within Latch\nA can becom e stable\u2014a short time befor e clk transitions from 0 to\n1, and in order to continue keeping the s and r signals stable, d\nmust remain stable for a short time after clk has transitioned to 1.\nThis is requir ed because the signals clk and \n  do not change\nsimultaneously at the same time, thus causing Latch A to stop\nsampling (\u201cclosing\u201d) with a delay (see Fig. 4.10). The amount of\ntime that d must remain  stable befor e and after a 0-1 clk transition\nis called, r espectively, setup time ( \u03c4st) and hold time ( \u03c4ht) of the \ufb02ip-\n\ufb02op. For a negative-edge \ufb02ip-\ufb02op, d must remain stable before and\nafter a 1-0 clock transition.\nThe violation  of setup and hold times destabilizes a D \ufb02ip-\ufb02op\u2014a\ncondition known as metastability , as illustrated in the following\ntwo \ufb01gures. In Fig. 4.13(a), signal d changes too close to clk\ntransitioning from 0 to 1; thus, it violates the \ufb02ip-\ufb02op\u2019s setup time\nand causes B.q and B.\n to oscillate. On the other hand, in Fig.\n4.13(b), because d stabilizes earlier befor e clk transitions to 1 by at\nleast an amount \u2265 \u03c4st, the \ufb02ip-\ufb02op cor rectly loads d, making B. q = d\nand B.\n = \n.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2172, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "29cf613e-e1f0-43c4-8768-b8694ff735bb": {"__data__": {"id_": "29cf613e-e1f0-43c4-8768-b8694ff735bb", "embedding": null, "metadata": {"page_label": "260", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b2c2b11-5a35-4fe7-a9c9-cd826e196428", "node_type": "4", "metadata": {"page_label": "260", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "de65e69656c8b95d3674fa981ac26c019f9dcec66fc3eb3ba19234fd6cebd178", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 4.13  D \ufb02ip-\ufb02op timing: ( a) setup time violation; ( b) no setup\ntime violation.\nLikewise, in Fig. 4.14(a), when d chang es too soon after clk\ntransitions from 0 to 1, it violates the hold-time requir ement of the\n\ufb02ip-\ufb02op. This would also cause signal oscillations at B.q and B.\n. On\nthe other hand, in Fig. 4.14 (b), the D \ufb02ip-\ufb02op operates normally and\nmakes B. q = d and B.\n = \n when d continues to remain stable after\nclk transi tions to 1. The hold time (\u03c4ht) is the amount of time that d\nmust remain stable after clk transitions to 1. The \u03c4ht must be\ngreater than or equal to the clock-to -q (\u03c4cq) delay, which is the time\nrequir ed for the \ufb02ip-\ufb02op to stabilize and output the \ufb01nal values of\nB.q and B.\n . The \u03c4cq is also known as clock-to -output ( \u03c4co).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 767, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0d280986-9132-4b02-b7c0-1b304f8f8681": {"__data__": {"id_": "0d280986-9132-4b02-b7c0-1b304f8f8681", "embedding": null, "metadata": {"page_label": "261", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d4f229ff-f9a6-454f-8c8f-14223b5381e9", "node_type": "4", "metadata": {"page_label": "261", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e16a62b157eceb266a71c4574a6614634f35a63f0052ff953fd6dc540c541eb0", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 4.14  D \ufb02ip-\ufb02op timing: ( a) hold-time violation; ( b) no hold-\ntime violation.\nNegative Hold Time\nThe setup and hold times discussed earlier pertain to d and clk\nsignal sources at the \ufb02ip-\ufb02op and not at the boundary of an IC or a\nmodule within a chip. These setup and hold times may also be\ndeter mined with respect to the data and clock sources at a chip\u2019s or\na module\u2019s boundary . Figure 4.15 illustra tes a \ufb02ip-\ufb02op inside a chip\nwith \ufb01ve interface signals d, clock , q, and active\u2013low signals _preset\nand _reset at the chip\u2019s  boundary . In this case, the input signals will\na\ufb00ect the \ufb02ip-\ufb02op after some signal routing delay, as illustrated in\nthe \ufb01gure. Likewise, the output of the \ufb02ip-\ufb02op as q will be available\nafter some signal routine delay at the chip\u2019s boundary . In addition,\nthe signal routing delays to the \ufb02ip-\ufb02op may not be the same.\nTherefore, in such cases , the timing diagram may look di\ufb00er ent\nfrom the ones shown in Figs. 4.13  and 4.14.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 966, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c480a3e3-887b-44a8-acb2-16dabeac9ae9": {"__data__": {"id_": "c480a3e3-887b-44a8-acb2-16dabeac9ae9", "embedding": null, "metadata": {"page_label": "262", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "48fd3d4a-0db8-4ea1-8156-20ca595872e4", "node_type": "4", "metadata": {"page_label": "262", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7db1e026776ef6f2eeb15a68742c80b9f63c27fb7946096c600bfd8d62f82c20", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 4.15  Illustrating signal delay within an integrated chip (IC)\nor a module.\nFigure 4.16 illustr ates the timing simulation of a D \ufb02ip-\ufb02op that\nwas synthesized in an Altera \ufb01eld programmable gate array (FPGA).\nAll the input/ output signa ls\u2014d, reset, preset, clock , q, and not_q\u2014\nare at the FPGA\u2019s bounda ry, which are then routed with some delay\nand fed to the corresponding inputs and outputs of the \ufb02ip-\ufb02op\ninside the FPGA . As shown  in the \ufb01gure, even though initially, d = 1\nand changes  to 0 at \u20132.902 ns befor e the rising edge of the clock  at\n250.0 ns (a reference point), the \ufb02ip-\ufb02op is still able to load d = 1\nand change q to 1 at 5.922 ns after the rising edge of the clock. In\nthis case, the \ufb02ip-\ufb02op is said to have a negative hold time with\nrespect to the input sources at the chip\u2019s boundary . The \ufb02ip-\ufb02op\nalso has \u03c4cq = 5.922 ns delay with respect to the chip\u2019s boundary .\nThe \ufb02ip-\ufb02op\u2019s simulation wavefor m illustrating a violation of\nnegative hold time at \u20133.489 ns is shown in Fig. 4.17 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1016, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d69b14ad-fd83-44c4-8495-7eb5094d4fc7": {"__data__": {"id_": "d69b14ad-fd83-44c4-8495-7eb5094d4fc7", "embedding": null, "metadata": {"page_label": "263", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5b58311e-9362-4ec9-b065-d1187bae82f1", "node_type": "4", "metadata": {"page_label": "263", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "02baf85c65b3a5d32bbc439c113c24251e924828891c41532ec16687354b2ce0", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 4.16  A D \ufb02ip-\ufb02op timing diagram illustrating its nor mal\noperation with a negative hold time.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 101, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dc46949b-b172-4b45-b1a8-29a9e09b08b1": {"__data__": {"id_": "dc46949b-b172-4b45-b1a8-29a9e09b08b1", "embedding": null, "metadata": {"page_label": "264", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ee3f69be-3e0d-4a78-92f5-cfc16c2aa534", "node_type": "4", "metadata": {"page_label": "264", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f3610fa8eede519d5226d183675dd7c04b9f94802da621b4ec8b4765fe197f9d", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 4.17  A D \ufb02ip-\ufb02op timing diagram illustrating a negative\nhold-time violation at \u20133.489 ns.\nLikewise, it is possible for the \ufb02ip-\ufb02op in Fig. 4.15 to have a\nnegative setup time with respect to the d and clock  signal s at the\nchip\u2019s boundary . In this case, d may stabiliz e later with respect to\nthe 0-1 clock  transition at the chip\u2019s boundary, but still arrive in\ntime, meeting the \ufb02ip-\ufb02op\u2019s requir ed setup time. The d may also be\nan input to a combinational circuit that has an output connected to\nthe D-input of the \ufb02ip-\ufb02op. In this case, the timing of when the d\nsignal will a\ufb00ect the \ufb02ip-\ufb02 op depends on both signal routing delays\nand the pr opagation delay of the combinational cir cuit.\nFurther more, an FPGA or an application-speci\ufb01c integrated chip\n(ASIC) may include \ufb01xed and prefabricated circuit modules. For\nexample, consider an FPGA chip that contains the circuit in Fig. 4.1\ndesigned with a CLA adder as a prefabricated module. In addition,\nthe module may include some internal clock signal routing delay .\nSuch modules may have negative hold/setup times with respect to\nthe input signals at their boundary . It has been shown that a more", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1161, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b9d86eab-2eb6-412d-a3b9-356f61109eff": {"__data__": {"id_": "b9d86eab-2eb6-412d-a3b9-356f61109eff", "embedding": null, "metadata": {"page_label": "265", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ab971895-e0e9-47b5-a29d-61b63bdca91e", "node_type": "4", "metadata": {"page_label": "265", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "776362aa513f3901bf90a6ece3a8615105dc9d17f69eca0e4f6077d75be58588", "class_name": "RelatedNodeInfo"}}, "text": "accurate timing simulation can be achieved when negative\nhold/setup time requir ements of prefabricated modules are\nmodeled in HDL simulation sof tware [1].\n\u00a0\n4.6 Clock Frequency Estimation without\nClock Skew\nFigure 4.18 illustrates the minimum clock period (\u03c4) requir ed to\noperate a D \ufb02ip-\ufb02op. The period is the duration of one clock cycle\nand includes the amount of time that the clock is 1 and the amount\nof time that the clock is 0. The period is calculated in terms of\nsignal d\u2019s maximum propagation delay (\u03c4pd-max ), the maximum\nclock-to -q delay (\u03c4cq-max ), and the \ufb02ip-\ufb02op\u2019s setup time (\u03c4st).\nFIGURE 4.18  The r elationship between the clock period and di\ufb00er ent\ndelays.\nEquation (4.1) is used to calculate the estimated minimum clock\nperiod. The estimated period does not take into account a\nsequential circuit phenomenon called clock skew discussed in Chap.\n5.\nEquation (4.2) de\ufb01nes the maximum clock frequency as the\nnumber of cycles per second (cycles/second), also called hertz. It is", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 998, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "571bdd05-c6d5-42c3-a1b2-87ab05917cab": {"__data__": {"id_": "571bdd05-c6d5-42c3-a1b2-87ab05917cab", "embedding": null, "metadata": {"page_label": "266", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f717f52e-dfbd-4fc2-a24e-245cfecb69de", "node_type": "4", "metadata": {"page_label": "266", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "611dbd422805e4f8ae37fd8515ec77cdba1b702cba61d31ccdc79f1c8048a9c5", "class_name": "RelatedNodeInfo"}}, "text": "the number of clock cycles in 1 second.\nTypically, large frequency values are converted into thousands, or\nkilohertz (KHz); millions, or megahertz (MHz); or billion, or gigahertz\n(GHz), by dividing the number of cycles/second by one thousand,\none million, or one billion, r espectively .\n\u00a0\n4.7 Flip-Flop with Enable\nA comp lex digital circuit typically contains hundr eds or thousands of\n\ufb02ip-\ufb02ops. The \ufb02ip-\ufb02ops are not all active (sampli ng) at the same\ntime. Some of the \ufb02ip-\ufb02ops may be individually activated, and some\nmay be activ ated as a group. For instance, a processor that has 16\n32-bit registers contains 512 (16 * 32) \ufb02ip-\ufb02ops. A group of, say, 32\n\ufb02ip-\ufb02ops that make up a 32-bit register would  be all selected\n(enabled) at the same time to load a 32-bit result generated, for\nexample, by an adder during the execution of an ADD instruction.\nTherefore, an additional contr ol signal is necessary to select a \ufb02ip-\n\ufb02op or a gr oup of \ufb02ip-\ufb02ops during a particular clock cycle.\nFigure 4.19 illustrates the design of a D \ufb02ip-\ufb02op with an enable\nsignal e that contr ols a 2-to-1 multiple xer (MUX). When e = 0, the\nMUX selects q and causes the \ufb02ip-\ufb02op to reload q and thus retain its\nstored value . When e = 1, the MUX selects the d_in input and\ncauses the \ufb02ip-\ufb02op to load and change q to d_in. The \ufb02ip-\ufb02op is said\nto be enabled, or selected, when e = 1, and disabled, or not\nselected, when e = 0.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1401, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "651cebfe-cf80-42be-bbfb-e6fe78d0050b": {"__data__": {"id_": "651cebfe-cf80-42be-bbfb-e6fe78d0050b", "embedding": null, "metadata": {"page_label": "267", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4b8122a-7599-46fb-b398-77181296219e", "node_type": "4", "metadata": {"page_label": "267", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1898f7346f265ed76dac794173ee4b9746d6d6ae210c76832c7d7e8561517c65", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 4.19  A D \ufb02ip-\ufb02op cir cuit with enabling signal and its symbol.\n4.8 Other Flip-Flops\nA historically popular \ufb02ip-\ufb02op is called the JK \ufb02ip-\ufb02op . It uses two\ninput signals j and k as shown in Fig. 4.20(a). In the \ufb01gure, the SET\nand CLR signa ls indicate active-high asynchr onous set and reset\nsignals, respectively . The outputs of the \ufb02ip-\ufb02op toggle; q becomes  \n and \n  becomes q during each clock cycle when j and k inputs are\nboth 1. JK \ufb02ip-\ufb02ops have the disadvantage of requiring two contr ol\nsignals. However, in gene ral, circuits that use JK \ufb02ip-\ufb02ops have the\nadvantage of requiring simpler circuits for the j and k signals as\ncompar ed to the d signals of a circuit that uses D \ufb02ip-\ufb02ops. An\nedge-trigger ed JK \ufb02ip-\ufb02op can be designed using a D \ufb02ip-\ufb02op, as\nillustrated in Fig. 4.21 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 796, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9e5a8557-5915-4695-a0a4-b3369df155e4": {"__data__": {"id_": "9e5a8557-5915-4695-a0a4-b3369df155e4", "embedding": null, "metadata": {"page_label": "268", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1af51978-8ca5-4853-aed2-b80d20c9b100", "node_type": "4", "metadata": {"page_label": "268", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b1f0266e00b55f5ca03baaab1eacf23a1083e8e58ac007c7b40a730a2a0cd420", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 4.20  Other types of \ufb02ip-\ufb02ops.\nFIGURE 4.21  A cir cuit for an edge-trigger ed JK \ufb02ip-\ufb02op.\nIn Fig. 4.20 (b), another \ufb02ip-\ufb02op called a T \ufb02ip-\ufb02op  is shown . This\n\ufb02ip-\ufb02op is designed using a JK \ufb02ip-\ufb02op with both j and k inputs\nconnected to a single signal t, which stands for toggle. A T \ufb02ip-\ufb02op\nperfor ms only one of two functions: retain its current state (q) or\ntoggle. If t = 0, a T \ufb02ip-\ufb02op retains  the value of its q. If t = 1, its\noutputs toggle: q becomes \n  and \n  becomes q every clock cycle. A T\n\ufb02ip-\ufb02op, similar to a D \ufb02ip-\ufb02op, also has the advan tage of requiring\nonly a single input ( t) to synchr onously either set or r eset its q.\nIn general, any \ufb02ip-\ufb02op can be designed systematically from any\nother \ufb02ip-\ufb02op. For examp le, the behavior of a JK \ufb02ip-\ufb02op, like many\nother sequential circuits, can be expressed by a \ufb01nite state diagram", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 853, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "574b6124-4277-4d2f-9020-a266a0a1de97": {"__data__": {"id_": "574b6124-4277-4d2f-9020-a266a0a1de97", "embedding": null, "metadata": {"page_label": "269", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0a109ba-a75c-42bf-bb00-5be1b7a301cf", "node_type": "4", "metadata": {"page_label": "269", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0941e9772a3ee84cbefcb4a547c9af85f59a28ceea31ab502a34840e37ee33a3", "class_name": "RelatedNodeInfo"}}, "text": "(FSD). FSDs and their implementations, known as \ufb01nite state\nmachines (F SMs), ar e discussed in Chap. 5 .\n\u00a0\n4.9 Hardware Description Language\nModels\nExample 4.1 presents a Verilog behavior model for a positive-level\nD latch with active-low asynchr onous _reset and _preset signals.\nWith latches and \ufb02ip-\ufb02ops, the nonblocking or concur rent\nassignment operator \u201c<=\u201d guarantees simultane ous clocking of\nmultiple latches and \ufb02ip-\ufb02 ops that operate with the same clock. The\n\u201calways\u201d block in the example includes the four signals\u2014 clock ,\n_reset, _preset, and d\u2014in its sensi tivity list. In the description, the\n_reset is assigned the highest priority and the clock  is the lowest.\nWhen _reset = 1 (not active), _preset = 1 (not active ), and clock  =\n1, a change in the d signal  will a\ufb00ect the q signal, as expected, as\nlong as clock  stays at 1 (sampling level). The Verilog code has a\nmissing \u201celse\u201d statement for when clock  = 0, and this creates an\nimplicit latch that r etains q when clock  = 0.\nExample 4.1.  A behavior model of a positive-level, asynchr onous active-low reset (_reset)\nand activ e-low preset (_preset) for a D-latch, a test-bench, and the simulation output are\nlisted here. As shown in the output, when clock  = 0, d = 1 at simulatio n time 3, q still 0\nindicates the latch is retaining its 0 state as expected. At time 4, when clock  = 1 and d =\n1, q changes to 1 as expected, but while clock  is still 1 at time 5 and d changes to 0, q\nchanges to 0, as it should, illustrating a latch behavior .\nHDL Model:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1531, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a69bb3f0-b615-4ad0-95ca-bb3a053a6d5a": {"__data__": {"id_": "a69bb3f0-b615-4ad0-95ca-bb3a053a6d5a", "embedding": null, "metadata": {"page_label": "270", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d85fbf35-0c2c-4ca8-ba7f-1a8d417d154a", "node_type": "4", "metadata": {"page_label": "270", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4ed112de55850da1bef0eae501bc4492d982a926f9b90ee08b0f0fdf5bf7ecfe", "class_name": "RelatedNodeInfo"}}, "text": "Test-bench:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 11, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "51cd9df0-c775-4a5e-a5de-83f650b803b8": {"__data__": {"id_": "51cd9df0-c775-4a5e-a5de-83f650b803b8", "embedding": null, "metadata": {"page_label": "271", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1dee9ce2-ca00-44b2-8f48-76c57551b272", "node_type": "4", "metadata": {"page_label": "271", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d105e330455c45c94dbfdb825d035d9d35d492a2ee07d14b98a48fd894186d96", "class_name": "RelatedNodeInfo"}}, "text": "Simulation Output:\nV C S Simulation Report", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 42, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6d335d9-a01e-4261-b00c-537b4b4ab7bc": {"__data__": {"id_": "e6d335d9-a01e-4261-b00c-537b4b4ab7bc", "embedding": null, "metadata": {"page_label": "272", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dee0be0b-ff5b-47e0-90b6-c9f1e7a0c57b", "node_type": "4", "metadata": {"page_label": "272", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b3e8394ef4045d178fa3f02b61f9e1eb58a897bb85660a3413e8da1908fecb6e", "class_name": "RelatedNodeInfo"}}, "text": "Example 4.2 presents a Verilog D \ufb02ip-\ufb02op behavi or model. The\nposedge or negedge keywor d stands for rising- or falling-edge\ntrigger ed behavior, respectively . The Verilog code describes a\npositive-edge trigger ed D \ufb02ip-\ufb02op with asynchr onous active-low\n_reset and _preset signal s, with priority given to _reset. These two\nsignals operate the circuit asynchr onously because they are listed\nas part of the \u201calways\u201d block sensitivity list; other wise, if they are\nnot included  in the sensitivity list, they would operate the circuit\nsynchr onously and only when clk makes (in this case) a rising-edge\ntransition.\nExample 4.2. A behav ior model for a positive-edge trigger ed D \ufb02ip-\ufb02op with\nasynchr onous active-low _reset and _preset and active-high enable (e) signals and a test-\nbench and simula tion output are listed. Note that, in the model, the d and e signals ar e not\nincluded in the sensitivity list of the \u201calways\u201d block; thus, as expect ed, they will a\ufb00ect the\nD \ufb02ip-\ufb02op synchr onously . When _reset = 1 and _preset = 1, a 0-1 clock  transition will\ncause the \ufb02ip-\ufb02op to load and make q = d if the \ufb02ip-\ufb02op is enabled (e = 1). Otherwise, if e\n= 0 and the \ufb02ip-\ufb02 op is disabled, the value of q is retained. A \ufb02ip-\ufb02op also retains q when\nclk is not making a 0-1 transition; that is, clk is either 0 or 1. A 1-0 level chang e in signal\n_reset asynchronously  resets q (q = 0), and a 1-0 level change in signal _preset\nasynchr onously would set q (q = 1). Again, the concur rent, nonblocking operator \u201c<=\u201d\ncauses simultaneous clocking of multiple instantiated \ufb02ip-\ufb02ops (if any).\nAs shown in the simulation output, when clock  = 0 at simulation time 3, d changing 1\nwill not change q as expected. When clock  mak es a 0-1 transition at time 4, d = 1 also\nchanges q to 1 as e xpected. When clock  is still 1 at time 5 and d changes to 0, as\nexpected, q should not change, illustrating a \ufb02ip-\ufb02op behavior .\nHDL Model:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1921, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "34e5d780-2ec8-4262-9cf8-af2e29512eb9": {"__data__": {"id_": "34e5d780-2ec8-4262-9cf8-af2e29512eb9", "embedding": null, "metadata": {"page_label": "273", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14a821c4-ccc2-4045-8a30-6d59b3f77ddf", "node_type": "4", "metadata": {"page_label": "273", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "fd2d5699b7bae86e9b826e8d5081e72d610ac795facfd6639a3ea775789b1926", "class_name": "RelatedNodeInfo"}}, "text": "Test-bench:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 11, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ee0ca39a-85ab-4f3e-9454-af1472f18b51": {"__data__": {"id_": "ee0ca39a-85ab-4f3e-9454-af1472f18b51", "embedding": null, "metadata": {"page_label": "274", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5a02ea50-5f39-4ae8-9c7c-60309c8c9144", "node_type": "4", "metadata": {"page_label": "274", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "853e84b4a8f6bb8ecd2af4d25847e31eaf1b99710d5f4465d6bcc4e2c04b4ede", "class_name": "RelatedNodeInfo"}}, "text": "Simulation Output:\nV C S Simulation R eport", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 43, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "155407cc-9eee-4f2a-8ab1-8c332b2176e5": {"__data__": {"id_": "155407cc-9eee-4f2a-8ab1-8c332b2176e5", "embedding": null, "metadata": {"page_label": "275", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "90ba6b19-143b-45f9-bfe4-54c0e4cd7791", "node_type": "4", "metadata": {"page_label": "275", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c971d6540c5d8df248cc816fe2efcd213f0ee8c0bc6d769314a363e18916ac6c", "class_name": "RelatedNodeInfo"}}, "text": "References\n1. Mi-Sook Jang and Hoi- Jin Lee, \u201cMethods of HDL simulation\nconsidering har d macr o cor e with Negative Setup/Hold time,\u201d US\nPatent 7,213,222 B2, May 1, 2007.\n\u00a0\nExercises\n4.1 P art 1: Given the cir cuit in Fig. 4.22  wher e qa is the output of a\npositive-level D latch, complete the timing wavefor m for qa\ngiven in Fig. 4.23 . Assume \u03c4st = \u03c4cq = 0.\nFIGURE 4.22  Circuit for Ex ercises 4.1 and 4.2.\n4.2 P art 2: Given the cir cuit in Fig. 4.22  wher e qb is the output of a\npositive-edge trigger ed D \ufb02ip-\ufb02op, complete the timing\nwavefor m for qb given in Fig. 4.23 . Assume \u03c4st = \u03c4cq = 0.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 604, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "41e676e4-c960-4385-b65f-4b7e5dad07db": {"__data__": {"id_": "41e676e4-c960-4385-b65f-4b7e5dad07db", "embedding": null, "metadata": {"page_label": "276", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3cfeadb2-ba85-4531-a835-742a85aa0442", "node_type": "4", "metadata": {"page_label": "276", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3e014ceda1da397c992ef2ffe29a3c23cddaa6d54ab0405c066c8d376ea2739a", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 4.23  Wavefor m for Ex ercises 4.1 to 4.4.\n4.3 P art 1: Given the cir cuit in Fig. 4.24  wher e qa is the output of a\nnegative-level D latch, complete the timing wavefor m for qa\ngiven in Fig. 4.23 . Assume \u03c4st = \u03c4cq = 0.\nFIGURE 4.24  Circuit for Ex ercises 4.3 and 4.4.\n4.4 P art 2: Given the cir cuit in Fig. 4.24  wher e qb is the output of a\nnegative-edge trigger ed D \ufb02ip-\ufb02op, complete the timing\nwavefor m for qb given in Fig. 4.23 . Assume \u03c4st = \u03c4cq = 0.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 468, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cb355f64-0441-4fde-866a-4fed5e1331bd": {"__data__": {"id_": "cb355f64-0441-4fde-866a-4fed5e1331bd", "embedding": null, "metadata": {"page_label": "277", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "37bc96a4-474f-48e7-b469-32df425f61b1", "node_type": "4", "metadata": {"page_label": "277", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "be67a7a8be6da26575ba9a537fa45be95b0ac5c06527a9532092cc2679802a13", "class_name": "RelatedNodeInfo"}}, "text": "4.5 Given the cir cuit in Fig. 4.22  wher e qb is the output of a positive-\nedge trigger ed D \ufb02ip-\ufb02op, complete the timing wavefor m for qb\ngiven in Fig. 4.25 . Assume \u03c4st = 0.15 ns and \u03c4cq = 0.1 ns.\nFIGURE 4.25  Wavefor m timing diagram for Ex ercise 4.5.\n4.6 Given the cir cuit in Fig. 4.22  wher e qb is the output of a positive-\nedge trigger ed D \ufb02ip-\ufb02op, complete the timing wavefor m for qb\nin Fig. 4.26 . Assume \u03c4st = 0.15 ns, and \u03c4cq = 0.2 ns.\nFIGURE 4.26  Wavefor m for Ex ercises 4.6.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 494, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bcdc2a33-8cca-4e80-b27b-867e6b676cc0": {"__data__": {"id_": "bcdc2a33-8cca-4e80-b27b-867e6b676cc0", "embedding": null, "metadata": {"page_label": "278", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cc376b0f-1e3f-4a0b-9fe8-32d23f927510", "node_type": "4", "metadata": {"page_label": "278", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d58e46c3f63b19264f90fece7635694ef5d4dfd2435ea06d6621aa6197047965", "class_name": "RelatedNodeInfo"}}, "text": "4.7 Given that a D \ufb02ip-\ufb02op has 0.1 ns setup time and 0.1 ns hold\ntime and the maximum pr opagation delay for d is 0.3 ns,\ndeter mine the maximum clock fr equency for the pr oper\noperation of the D \ufb02ip-\ufb02op.\n4.8 Cr eate and simulate a V erilog structural model of a D \ufb02ip-\ufb02op\nusing NAND gates with r eset and pr eset signals.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 323, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be462abc-b34d-4506-9a49-bb4eef0c764c": {"__data__": {"id_": "be462abc-b34d-4506-9a49-bb4eef0c764c", "embedding": null, "metadata": {"page_label": "279", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a945daf6-17f2-4dca-89b2-f34e1245275f", "node_type": "4", "metadata": {"page_label": "279", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3a0399a2ae52a6273d3d5249838d12b708aa61e0b311c2229f24253f8d7c436d", "class_name": "RelatedNodeInfo"}}, "text": "CHAPTER 5\nSequential Circuits: Small\nDesigns\n\u00a0\n5.1 Introduction\nLike combinational circuits (CCs), sequential circuits can also be\nclassi\ufb01ed as small and large circuits. An up-counter, for example,\nthat generates the sequence 0, 1, 2, 3, etc., as output would be\nconsider ed a small sequential circuit. On the other hand, a\nprocessor core (a CPU) is a very large sequential circuit that may\nexecute multiple instructions simultaneously . Each instruction\nwould requir e a set of operations and involves one or more\nregisters and possibly memory .\nAll small and large sequential circuits are made of \ufb02ip-\ufb02ops and a\nset of CCs, such as the one shown for a 2-bit up-counter in Fig. 5.1 .\nThe counter circuit includes two \ufb02ip-\ufb02ops and a set of CCs\nassociated with the 2-bit adder shown in the \ufb01gure. Contrary to\nCCs, a sequential circuit has states and transitions from a current\nstate to a next state every clock cycle. A current state is\ndeter mined from the \ufb02ip-\ufb02ops\u2019 q bits. In the \ufb01gure, if the 2-bit Q =\nq1q0 = (00)2, then the counter is said to be currently in state 0; if\nthe Q = q1q0 = (01)2, then the counter is said to be currently in", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1141, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7bf402a5-067f-40d0-a5b1-5fb3d6836dc4": {"__data__": {"id_": "7bf402a5-067f-40d0-a5b1-5fb3d6836dc4", "embedding": null, "metadata": {"page_label": "280", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c6614abf-0613-4b79-8034-63242b2e96a5", "node_type": "4", "metadata": {"page_label": "280", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7e4a09bfd04f8f431a28d738b61d4650dc505102b5e325a715425b345a866e8b", "class_name": "RelatedNodeInfo"}}, "text": "state 1, etc. The counter also outputs the 2-bit state number Q =\nq1q0 as count every clock cycle.\nFIGURE 5.1 An F SM as a 2-bit counter with two \ufb02ip-\ufb02ops.\nThe adder (i.e., the set of the counter\u2019s CCs) generates the\ncounter\u2019s next state as a 2-bit number D = d1d0 = q1q0 + 1. If the\ncounter\u2019s current state is Q = q1q0 = (00)2, then its next state is D\n= d1d0 = (01)2. The d1 and d0 are saved in the \ufb02ip-\ufb02ops during the\nnext clock cycle.\nThe design  of sequential circuits requir es additional\nmethodologies. A sequential circuit design problem is typically\nmodeled as a \ufb01nite state diagram (FSD). An FSD consists of circles\nas states and arcs (arrows) as transitions. It formally speci\ufb01es the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 694, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "30791011-f32f-49d2-8b5f-05024a8cfa6b": {"__data__": {"id_": "30791011-f32f-49d2-8b5f-05024a8cfa6b", "embedding": null, "metadata": {"page_label": "281", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8a685682-a834-48b0-9caf-3b70e11a1d6c", "node_type": "4", "metadata": {"page_label": "281", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "28d5040806858e0c2ad467e9862d14bbe80782b6d8b8c998c0a5edcd423471d4", "class_name": "RelatedNodeInfo"}}, "text": "behavior of a target sequ ential circuit. The 2-bit counter has four\nstates, number ed 0, 1, 2, and 3. It transitions from state 0 to state\n1, then from state 1 to 2, then from state 2 to 3, and \ufb01nally from\nstate 3 back to 0. An FSD is systematically conver ted into a circuit\ncalled a \ufb01nite state machine (F SM), such as the one in Fig. 5.1 .\nA large sequential circuit design problem is typically partitioned\ninto the design of a data path and a contr ol unit. The data path\nwould conta in both CC modules, such as arithmetic logic units\n(ALUs), multiplexers (MUXs), and decoders, and small sequential\ncircuits, such as registers and counters. The design of large\nsequential circuits is discussed in Chap. 6, and CPU design,\nspeci\ufb01cally, is discussed in Chap. 8 .\nOccasionally, it is possibl e to design a sequential circuit without\n\ufb01rst constructing an FSD. This is an important design concept and,\nin many cases, simpli\ufb01es the design of some small and large\nsequential circuits, including CPUs. For example, the CC module\n(i.e., an adder) in Fig. 5.1 perfor ms addition, which is a known\nfunction, and thus the counter can be designed without an F SD.\nOn the other hand, the design of, for example, a sequence\nrecognizer  that inputs a sequence of 1\u2019s and 0\u2019s, one at a time,\nand outputs a 1 each time it encounters a prespeci\ufb01ed\nsubsequence would requir e an FSD. In this case, as opposed to the\n2-bit counter example, it would be nearly impossible for a designer\nto deter mine  in advance what speci\ufb01c known function the CCs of a\nsequence r ecognizer would be perfor ming.\nSequential circuits are also subject to envir onmental hazar ds,\nsuch as transient faults  that occur at random and can change the\nstate of a sequential circuit, causing a malfunction. One way to\nprotect sequential circuits from envir onmental hazar ds is through\nfault-tolerant design .\nWe will start this chapter  with a small FSM design problem and\nthen formally  present the design of FSMs in general, including the\ndesign of a fault-tolerant FSM. We will also present timing\nrequir ements of sequential circuits and discuss examples of FSM\ndescriptions in V erilog.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2149, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b2dded93-21d9-4a1b-b9fe-d4c7594b15af": {"__data__": {"id_": "b2dded93-21d9-4a1b-b9fe-d4c7594b15af", "embedding": null, "metadata": {"page_label": "282", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eb7b8b5a-e649-4567-8187-45a1c0a1e74e", "node_type": "4", "metadata": {"page_label": "282", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "301e9d6e28611325d3842a47568504fe9707dc203fa085ce9d3c0aaf4d9d7ecd", "class_name": "RelatedNodeInfo"}}, "text": "5.2 Introduction to FSM: Register Design\nA register, as a small sequential circuit, is used as a storage module\nto save the output of a CC. As a shift register, it would have the\ncapability of shifting its content either to the right or to the left by a\nnumber of bits. We have selected a simple register as the \ufb01rst\ndesign pr oblem for the following r easons:\n\u2022 To illustrate design partitioning\n\u2022 To \ufb01rst design a simple F SM\n\u2022 To provide a for mal design for a \ufb02ip-\ufb02op that was discussed\nin Chap. 4\nFigure 5.2 illustrates a 4-bit parallel-load register  with input X\n= x3\u2026 x0 and output Z = z3\u2026 z0. Assuming that _reset = 1 (i.e., not\nactive), the register would  load X, making Z = X on the next rising\nedge of the clk if the register is enab led (i.e., enable  = 1).\nOtherwise, if enable  = 0, the register is disabled and retains its\ncontent.\nFIGURE 5.2 A 4-bit, parallel-load r egister .\nIn the \ufb01gure, the asynchr onous preset signal _s of each \ufb02ip-\ufb02op is\nassumed to be 1 (disabl ed), and thus is not shown. However, if\n_reset is supposed to initialize some of the register bits to 1 and\nothers to 0, then _reset signal would be connected to the _s inputs\nof those \ufb02ip-\ufb02ops that initialize to 1 and the _r inputs of the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1226, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "17972320-67a0-4971-be28-a346c34d4e1e": {"__data__": {"id_": "17972320-67a0-4971-be28-a346c34d4e1e", "embedding": null, "metadata": {"page_label": "283", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "894f259d-2a60-4d21-96d5-e1cefac39447", "node_type": "4", "metadata": {"page_label": "283", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "91713395770da57b8a2a662f9a041e86a3f98eae5d21a62ddad7d54a0b94187e", "class_name": "RelatedNodeInfo"}}, "text": "remaining \ufb02ip-\ufb02ops. In addition, all the unused _s and _r inputs\nwould need to be disab led, and being active-low  signals in this\ncase, they would be connected to 1.\n5.2.1 Register Model\nAs illustrated in Fig. 5.2  for n = 4, the design of an n-bit register can\nbe partitione d using n 1-bit registe r slices. The behavior of the\nregister slice can be formally modeled as an FSD, shown in Fig. 5.3 .\nThe circles represent a set of unique but \ufb01nite number of states\ndeter mined by analyzing the design problem. Because the 1-bit\nregister slice can store either a 0 or a 1 as its content, its FSD has\ntwo possible states (i.e., two circles). The arcs represent transitions\nfrom one state to the next, and there are conditions for each\ntransition.\nFIGURE 5.3 One-bit r egister slice modeled as an F SD.\nAs shown in the \ufb01gure, if the register slice is not enabled (i.e., e\n= 0), as expected, the register slice will remain in its current state 0\nor 1. This is indicated by an arc (Arc1) from the state 0 back to itself\nand again a second arc (Arc4) from the state 1 back to itself. The\nsignal values associated with each transition are listed next to its\ncorresponding arc. For example, the signals associated with Arc1\nand Arc4 are e = 0 and x as don\u2019t-car e (0 and 1). If the register\nslice is in state 0 and e = 1 and x = 1, then the register slice will", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1353, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "86f33101-1276-4a4a-b8db-97b26f0d6c21": {"__data__": {"id_": "86f33101-1276-4a4a-b8db-97b26f0d6c21", "embedding": null, "metadata": {"page_label": "284", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d34f7ce3-0174-4175-9268-0e628e547653", "node_type": "4", "metadata": {"page_label": "284", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7b02339256824c9f4c852e71ea82d0363467327c7e8b9042b68823a6375109e5", "class_name": "RelatedNodeInfo"}}, "text": "transition from state 0 to state 1 on the next clock cycle. This is\nillustrated by Ar c3. The other ar cs ar e similarly drawn.\nFigure 5.4  illustra tes a detailed block diagram of the 1-bit register\nslice as an FSM. It includes a single \ufb02ip-\ufb02op that holds the 1-bit\nregister state as 0 or 1 and a CC that inputs the current state,\nindicated by the q signal, and the external inputs x and e to output\nthe next state, indicated by the d signal. The output of the register\nslice is de\ufb01ned as z = q .\nFIGURE 5.4 The detailed block diagram of a 1-bit r egister slice.\nThe logic expression for the d signal is deter mined from a truth\ntable, also known as a transition table . The table is a tabular\nrepresentation of information in an FSD. Table 5.1 presents the\ntransition table of the 1-bit register slice. For example, the \ufb01rst two\nrows in the table de\ufb01ne Arc1 (Fig. 5.3); row 3 de\ufb01nes Arc2; row 4\nde\ufb01nes Arc3; etc. From the transition table, one can deter mine the\nminimal sum of pr oduct (SOP) e xpression \n .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1010, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5129cfea-f2bc-40ea-bed3-8e968abd9ebb": {"__data__": {"id_": "5129cfea-f2bc-40ea-bed3-8e968abd9ebb", "embedding": null, "metadata": {"page_label": "285", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "635454cb-a99e-42c7-80bd-d3eb22dc2eea", "node_type": "4", "metadata": {"page_label": "285", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b5ef55c04d3dc0129986b854e663f0960dc1cabcac95bd7fbf4a93c3d990b4d7", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  5.1 Transition (T ruth) T able for the 1- Bit Register Slice Deter mined fr om Its F SD\nNote that the expression de\ufb01nes a 2-to-1 MUX. As expected, if e\n= 0, then d = q, else if e = 1, then d = x. The circuit for the 1-bit\nregister slice is shown in Fig. 5.5. Recall that the exact same circuit\nwas initially introduced in Chap. 4 as a \ufb02ip-\ufb02o p with an enable\nsignal (Fig. 4.19). However, the circuit was formally designed here\nusing an F SD.\nFIGURE 5.5 One-bit r egister -slice (also shown in Fig. 4.19 ).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 512, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be3a3de4-c31c-4e55-a857-ac6e8d9e4a8d": {"__data__": {"id_": "be3a3de4-c31c-4e55-a857-ac6e8d9e4a8d", "embedding": null, "metadata": {"page_label": "286", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f02d0cc3-9105-4c29-b230-46eab391d9b7", "node_type": "4", "metadata": {"page_label": "286", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c21aa0e76abf3579308052d8a778bb62f386b5aabc16374449c287cb9e044249", "class_name": "RelatedNodeInfo"}}, "text": "5.2.2 Multifunction Registers\nOccasionally, a register may need to perfor m one of several\nfunctions. Figure 5.6 shows  the block diagram of a four-function\nregister with an n-bit input X, an n-bit output Z, and a 2-bit function\ncode F = f1 f0. The register is enabled when its active-high enable\nsignal is asserted. The register also requir es an active-low _reset\nsignal to initialize it asynchr onously to 0. The four functions of the\nregister are synchr onous reset (clear), parallel load, arithmetic right\nshift that repeats the sign bit, and right shift that enters a 0 from\nleft.\nFIGURE 5.6 The block diagram of a four -function r egister .\nBit-Serial Design\nThe detailed block diagr am and the FSD of a 1-bit four-function\nregister slice are given  in Fig. 5.7. Contrary to the previous\nexample, the \ufb02ip-\ufb02ops in this case are assumed to include an\nenable signal e. Also, for clarity and convenience, don\u2019t-car e signal\nvalues are not shown and omitted from the arcs in the FSD. For\ninstance, i and x are don\u2019t-ca re and thus are not shown for the arcs\nfor which F = 0 (f1 f0 = 00). When F = 0, the register slice must be\nsynchr onously initialized to 0 (clear ed), independent of the values\nof its i and x inputs.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1221, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2fcc68de-86ab-4321-8023-b0bfbfa5ede8": {"__data__": {"id_": "2fcc68de-86ab-4321-8023-b0bfbfa5ede8", "embedding": null, "metadata": {"page_label": "287", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "38ddc103-a3fc-4495-a4fa-e027cf952a43", "node_type": "4", "metadata": {"page_label": "287", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "187929722f7e70d9fe66d76d9dfea03af4f87e119f6b0021826af023e0fabe8f", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.7 A detailed block diagram and the F SD of a 1-bit four -\nfunction r egister slice.\nIn Fig. 5.7, the combinational circuit has \ufb01ve inputs\u2014 q (the\ncurrent state), f1, f0, i, and x\u2014and one output d (the next state). Its\ntruth table would consis t of 32 rows and thus is not shown.\nHowever, using the Espresso minimization software yields the\nexpression \n  The \ufb01nal circuit and the symbol for the 1-\nbit four-function register slice are shown in Fig. 5.8. Using four\ncopies of the register slice, a 4-bit four-function register can be\ndesigned as illustrated in Fig. 5.9. For each register slice in the\n\ufb01gure, the input i, except the leftmost one, is connected to the z\noutput from its precedin g connected slice. The i input for the\nleftmost slice is de\ufb01ned as \n  It repeats the sign-bit z3 when F\n= 2 that speci\ufb01es an arithmetic right shif t.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 850, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "42959e03-64ea-43fc-a0c0-073ec69e77de": {"__data__": {"id_": "42959e03-64ea-43fc-a0c0-073ec69e77de", "embedding": null, "metadata": {"page_label": "288", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "01734ade-d30a-48e2-b2e3-d863903555a3", "node_type": "4", "metadata": {"page_label": "288", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "6acec1c551f3df4e9136631569a166be0e0cb53c3980212e5a2ed7b77713e98a", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.8 One-bit four -function r egister slice and its symbol.\nFIGURE 5.9 A 4-bit 4-function bit-serial r egister design.\nNote that the combination  circuit in Fig. 5.8 de\ufb01nes a 1-bit 4-to-1\nMUX with the inputs 0, x, i, and i (the i is used twice), as shown in\nFig. 5.10 . The SOP expression of the MUX simpli\ufb01es to \n which is the exact same expression shown in Fig.\n5.8 obtain ed using the FSD. This is a valuable technique that can\nbe used to design a bit-serial or a bit-parallel FSM without actually\nrequiring an FSD model. The technique does, however, requir e\nanalyzing the design problem to deter mine whet her a known CC\nmodule, such as the MUX in this case, can be used in the design.\nThis is illustrated next by using the bit-parallel technique to design\nthe 4-bit four-function register . However, if one cannot identif y a\nknown modu le by analyzing the design problem, then one must use\nan FSD to for mally model the design pr oblem.\nFIGURE 5.10  A 1-bit 4-to -1 MUX with inputs, 0, x, and i used twice.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1019, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "18fa1e63-afb7-47cd-8671-88dafddb0c31": {"__data__": {"id_": "18fa1e63-afb7-47cd-8671-88dafddb0c31", "embedding": null, "metadata": {"page_label": "289", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6a34e83a-e66d-41c5-b92b-fa1eed20ff23", "node_type": "4", "metadata": {"page_label": "289", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "438e57d5a7a1d5c3384c41467f8e4c87195a71d892d56df024c26d1136775c78", "class_name": "RelatedNodeInfo"}}, "text": "Bit-P arallel Design\nFigure 5.11 illustrates the design of the four-function register given\nin Fig. 5.6  using a 4-bit parallel-load  register and a 4-bit 4-to-1 MUX.\nThe MUX routes one of its four 4-bit inputs to its output, which is\nthen loaded into a 4-bit parallel-load register . The four inputs of the\nMUX ar e de\ufb01ned as follows:\nFIGURE 5.11  Bit-parallel design of a 4-bit four -function r egister .\nInput-0:  Synchr onous clear ( F = 0), gr ounded and set to logic 0\nInput-1:  Parallel loading ( F = 1), connected to the 4-bit input X\nInput-2:  Arithmetic right shif t (F = 2), connected to { z3,\nz3z2z1}, the sign-bit z3 is concatenated (indicated by {})\nwith the upper thr ee bits of r egister output Z to cr eate a\n4-bit number\nInput-3:  Right shif t (F = 3), connected to { 0, z3z2z1}, a 0 is\nconcatenated with the upper thr ee bits of r egister output\nZ to cr eate a 4-bit number\n\u00a0\n5.3 Finite State Machine Design\nIn the previous section, simple examples of bit-serial and bit-\nparallel FSMs were presen ted. In general, FSMs are categorized into\nMealy , Moore , or hybrid  machines. In addition, the combinational", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1127, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c0a8657b-18c3-4e3d-8177-ce712c6279af": {"__data__": {"id_": "c0a8657b-18c3-4e3d-8177-ce712c6279af", "embedding": null, "metadata": {"page_label": "290", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "057ecfc8-761c-4320-a092-0899f4c4d07b", "node_type": "4", "metadata": {"page_label": "290", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1f5dd0a244eb2f79088fa090aa20b6a374651f60e158fc6748e4189b348594c7", "class_name": "RelatedNodeInfo"}}, "text": "circuits of an FSM can be grouped into two sets: those forming a\nnext-state generator  (NSG ) and those forming an output\ngenerator  (OG). An NSG deter mines the next state, and an OG\ngenerates output signals.\nFigure 5.12 illustrates an FSM detailed block diagram . An FSM\nis called a Mealy machine if its outputs, known as Mealy outputs ,\nare deter mined using its current state as well as using its current\n(external) inputs\u2014not counting the clock, reset, and preset signals\nthat directly connect to \ufb02ip-\ufb02ops and the enable signal used with\n\ufb02ip-\ufb02ops. A change in the values of one or more of the external\ninputs could change the value of a Mealy output independent of the\nclock signal. In the \ufb01gure, this is shown by a wire (a bold and\ndashed line) connecting the external input signals  to the inputs of\nthe OG. Mealy outputs ar e said to asynchr onously dependent on the\nexternal input values. Unlik e Mealy outputs, Moore outputs\nsynchr onously depend on the external input values. A hybrid\nmachine has both Mealy and Moor e outputs.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1038, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "492e200d-bcad-4322-95d4-04f4d0650daf": {"__data__": {"id_": "492e200d-bcad-4322-95d4-04f4d0650daf", "embedding": null, "metadata": {"page_label": "291", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b45f254-03e0-4433-bcbe-05b71c6926e7", "node_type": "4", "metadata": {"page_label": "291", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "218d47323bb245cd47aa9295434061d7d6d946449489144af84be56eb52fff0f", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.12  A detailed block diagram illustrating Mealy and Moor e\nFSMs.\nWe use a sequence recognizer as an example to further discuss\nthese topics, as well as the design decisions that a\ufb00ect circuit size.\nA sequence recognizer operates much like the contr oller of a\ncombinational digital lock. It monitors inputs one bit at a time and\noutputs a 1 (assuming active high) each time that the recognizer\nencounters a tar get sequence, for e xample, a 3-bit sequence \u201c101.\u201d\nA recognizer can be designed to recognize either an overlapping\nor nonoverlapping  sequence. For example, the input sequence\n\u201c10101\u201d contains two overlapping sequences of \u201c101,\u201d wher e the\n\u201c1\u201d in the center of the input sequence is shared. On the other", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 724, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6029199c-c754-449a-93f0-e0dd87c3a785": {"__data__": {"id_": "6029199c-c754-449a-93f0-e0dd87c3a785", "embedding": null, "metadata": {"page_label": "292", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6dad700b-8a1b-4404-be87-96f3dd3295f5", "node_type": "4", "metadata": {"page_label": "292", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "34c71cb708ad10d1f16d5770b310220b195df1ec515fda3bd21183fee48dde5b", "class_name": "RelatedNodeInfo"}}, "text": "hand, there are two nono verlapping \u201c101\u201d sequences in the input\nsequence \u201c101101.\u201d\nExample 5.1  The design of a Moor e FSM that detects the overlapping sequence \u201c101\u201d:\nSolution  Figure 5.13 shows the top-level block diagram of the sequence recognizer with\nthe external input x and the output z. Its Moor e FSD is also shown with four states labeled\nA, B, C, and D. The active-high reset signal is used to asynchr onous initialize the machine\nto a know n state A, as illustrated by an arrow labeled reset in the FSD. An input sequence\nis processed one bit at a time. The recognizer makes a transition to a new state each time\nthat it counters the next bit in the target sequence. For example, if the recognizer is in the\nstate C, it indicates that it has received the \ufb01rst 2-bits of the target sequence. The output\nz is shown below each state and becomes 1 when the recognizer receives the last bit of\nthe tar get sequence and enters state D. The z is 0 in all other states. The recogn izer would\nreject all other 3-bit sequences that it inputs and start over each time. The details of\nalternative solutions ar e discussed ne xt.\nFIGURE 5.13  A block diagram of a \u201c101\u201d sequence r ecognizer and\nits Moor e FSD.\nAn FSD is called deterministic  if each of its states has a unique\nset of transitions (arcs). However, if there was also a second\ntransition from state A in Fig. 5.13 , say, to state C when x = 1, then\nthe FSD would be nondeterministic . In this case, if x = 1, then it\ncould not be deter mined if the transition should be from state A to\nB or to C. Ther e are two ways to implement a deter ministic F SD:\n1. Binary encoded states\u2014 In this case, the states ar e\nassigned (labeled) with unique binary numbers with the least\nnumber of bits possible. F or example, four states in Fig. 5.13\ncan be labeled with 2-bit binary numbers: 00, 01, 10, and 11.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1859, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca643294-18fc-48e7-8dc6-b783fc07ff81": {"__data__": {"id_": "ca643294-18fc-48e7-8dc6-b783fc07ff81", "embedding": null, "metadata": {"page_label": "293", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0853a91f-a960-42c1-b0f6-9baa8f8adc13", "node_type": "4", "metadata": {"page_label": "293", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d832087b0b8879bc088566038ca371faa0175b7b84ecf0e24a9a3120d056366f", "class_name": "RelatedNodeInfo"}}, "text": "2. One-hot encoded states\u2014 In this case, the states ar e\nlabeled with unique binary numbers, each consisting of only a\nsingle 1 (one-hot); the r emaining bits ar e 0. F or example, the 4-\nbit one-hot numbers 0001, 0010, 0100, and 1000 can be used\nto label the four states in Fig. 5.13 .\n5.3.1 Binary Encoded States\nThe minimum number of bits requir ed to encode the states of an\nFSD is deter mined from Eq. (5.1), wher e k is the total number of\nstates. The symbols \u2308 \u2309 indicate the ceiling function.\nFor instance, if the number of states is more than 4 and less than\n8 (i.e., 4 < k < 8), then 3-bit numbers ar e needed to label anywher e\nbetween \ufb01ve and eight states. Which one of the numbers should be\nassigned to each state is a logic optimization problem. Figure 5.14\nillustrates a detailed block diagram for the sequen ce recognizer in\nFig. 5.13  using binary encoded states.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 880, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dcc726d1-870b-4cd5-9974-e2bbf83a463a": {"__data__": {"id_": "dcc726d1-870b-4cd5-9974-e2bbf83a463a", "embedding": null, "metadata": {"page_label": "294", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9c7c6b04-d790-4cf5-bffc-16ddd95b1b34", "node_type": "4", "metadata": {"page_label": "294", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b9ad84e4bd67461e4d439b4140e9da5ad9443921c7e6b4c76841b97373b94d16", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.14  The detail block diagram of a \u201c101\u201d sequence\nrecognizer .\nThe following two transitio n (truth) tables (Tables 5.2  and 5.3) are\ndeter mined from the FSD, wher e binary numbers 00 is assigned to\nthe state A, 01 to state B, 10 to state C, and 11 to state D. The\ntruth tables are used to deter mine minimum SOP expression (Eq.\n(5.2)) for each of the state variables d1, d0, and the output variable\nz. A completed circuit using positive-edge trigger ed \ufb02ip-\ufb02ops and\nactive-high r eset is shown in Fig. 5.15 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 518, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fd7430d5-9397-4c56-98ba-dcbfd4ceb13e": {"__data__": {"id_": "fd7430d5-9397-4c56-98ba-dcbfd4ceb13e", "embedding": null, "metadata": {"page_label": "295", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d4e57f75-132e-482a-bcdf-270f38acbac1", "node_type": "4", "metadata": {"page_label": "295", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "aff345d29964409d3b25aa9fc636ab3d55cc64bd223d65e9335afa720cf1faa6", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  5.2 The NSG T ransition T able Compiled fr om the F SD in Fig. 5.13\nTABLE  5.3 The OG T ruth T able Complied fr om the F SD in Fig. 5.13", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 143, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4e824a5-df30-495a-b7fe-6842524e63b5": {"__data__": {"id_": "e4e824a5-df30-495a-b7fe-6842524e63b5", "embedding": null, "metadata": {"page_label": "296", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "37ec63a4-6df6-4ed0-aaa3-e59ff6a2f35c", "node_type": "4", "metadata": {"page_label": "296", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "64d6b318592fa4d5abcd4f5055f86eac1fa6a7eb5eb5b31d302f3f898643c68a", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.15  A Moor e FSM to detect the overlapping sequence\n\u201c101.\u201d", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 67, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ec7aed8f-e820-414d-a4c5-9dda249693bd": {"__data__": {"id_": "ec7aed8f-e820-414d-a4c5-9dda249693bd", "embedding": null, "metadata": {"page_label": "297", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42f50af4-2c73-4f00-a917-911e403c75cd", "node_type": "4", "metadata": {"page_label": "297", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "682e67fd67a9338d3450814bafd3c3eb9de062d5e49b7286ccc89eceb160b10b", "class_name": "RelatedNodeInfo"}}, "text": "An alternative circuit schematic (layout) with distributed CCs is\nillustrated in Fig. 5.16. In this case, each of the CCs\u2014CC1 and CC2\n\u2014are schematically shown next to its correspondin g \ufb02ip-\ufb02op. This is\nhow cir cuits ar e generally implemented.\nFIGURE 5.16  An alter native and typical layout for the cir cuit shown\nin Fig. 5.15 .\nUpon reset, the sequenc e recognizer initializes to state 0 (i.e.,\nq1q0 = 00) and, as expected,  outputs z = 0. Assuming x = 1, the\nexpressions yield d1 = 0 and d0 = 1, given q1 = 0 and q0 = 0. The\nrecognizer transitions from state 0 to state 1 as soon as d signals\nare loaded into the \ufb02ip-\ufb02ops, making q1q0 = 01.\nSuppose the next input is 0 (i.e., x = 0). This time, the\nexpressions yield d1 = 1 and d0 = 0, and thus would cause the\nrecognizer to transition to state 2 (q1q0 = 10). Finally, suppose the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 834, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "80747942-9cd9-4900-807f-da6ec5b0d54f": {"__data__": {"id_": "80747942-9cd9-4900-807f-da6ec5b0d54f", "embedding": null, "metadata": {"page_label": "298", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3fae26c6-a079-4e1f-ace2-d6aaa5dabf65", "node_type": "4", "metadata": {"page_label": "298", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e71f325355bc264f1095aa8fb6e29d475c42bdbaffc4cee7007af34e29ee9915", "class_name": "RelatedNodeInfo"}}, "text": "next input is 1 (x = 1). This yields d1 = 1 and d0 = 1, and the\nrecognizer would transition to state 3 ( q1q0 = 11). Once in state 3, z\nbecomes 1 and recognizes the sequence \u201c101.\u201d In general, testing\nevery transition of an FSM, especially a large one, is di\ufb03cult and\ncan r equir e a pr ohibitively lar ge number of tests.\nThe amount of hardwar e requir ed for implementin g an NSG and\nan OG depends on the binary label assigned to each state. The\ncircuit in Fig. 5.15 was designed using 00, 01, 10, and 11 to label\nthe states A through D, respectively . Suppose we decide to change\nthe assignments and instead use the labels 00, 11, 10, and 01 in\norder for states A to D. This would yield a circuit requiring less total\nhardwar e. Equation (5.3) lists a minimal SOP expression for each of\nthe state variables d1 and d0 and the output z using the new binary\nstate labels. Note that, compar ed to the circuits in Fig. 5.15, the\ncircuit for d1 is simpler, as shown in Fig. 5.17 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 977, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fac9007f-450a-425a-b40c-e30c75544317": {"__data__": {"id_": "fac9007f-450a-425a-b40c-e30c75544317", "embedding": null, "metadata": {"page_label": "299", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "75979810-6419-4098-853f-37f464e898db", "node_type": "4", "metadata": {"page_label": "299", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8ee655fbf19f24e2447a7338c13a6127aff87e0ecdd262b76cb5a9e757d16964", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.17  A Moor e FSM to detect the overlapping sequence\n\u201c101\u201d with alter native encoded states.\n5.3.2 One-Hot Encoded States\nThe design technique of binary encoded states minimizes the\nnumber of \ufb02ip-\ufb02ops. On the other hand, the design technique of\none-hot encoded states minimizes the size of the CCs. The one-hot\ndesign technique is especially advantageous with programmable\nlogic devices (PLDs) wher e there are numer ous con\ufb01guration logic\nblocks (CLBs ), each with one or more \ufb02ip-\ufb02ops. For example, an\nFPGA with thousands of CLBs would contain thousands of \ufb02ip-\ufb02ops.\nTherefore, it may be more e\ufb03cient to use more \ufb02ip-\ufb02ops (one per\nstate) and less comple x CCs. The one-hot design technique is more\nlikely to produce circuits with the least propagation delay, not\ncounting wir e delays, which can be longer in some PLD designs.\nDuring each clock cycle, only one \ufb02ip-\ufb02op is set (i.e., only one q\nis 1), while the remaining  \ufb02ip-\ufb02ops are reset (the other q\u2019s are 0).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 973, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0fb72b93-51ec-40c3-9788-13d6aa13cfdb": {"__data__": {"id_": "0fb72b93-51ec-40c3-9788-13d6aa13cfdb", "embedding": null, "metadata": {"page_label": "300", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f80af379-fd6b-4f95-a291-5b9cfd308078", "node_type": "4", "metadata": {"page_label": "300", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b0c94bd1afc2959bb162a2f7bd107f444530249d5ea4ecf86e25bdcc5b90a4eb", "class_name": "RelatedNodeInfo"}}, "text": "For example, suppose instead of using 2-bit numbers to label the\nfour states of the FSD in Fig. 5.13, 4-bit one-hot labels 0001, 0010,\n0100, and 1000 are used. Figure 5.18 illustrates a detailed block\ndiagram of the corresponding one-hot FSM. Note that, upon reset,\nthe machine must start in state A ( q3q2q1q0 = 0001) with one of the\n\ufb02ip-\ufb02ops set. Therefore, the reset signal must be connected to the\npreset (s) input of the \ufb02ip-\ufb02op associated with q0 and to the reset\n(r) input  of the remaining \ufb02ip-\ufb02ops, as illustrated in the \ufb01gure. Table\n5.4 presents the truth table for the NSG, and Table 5.5  presents the\ntruth table for the OG. The missing table entries are don\u2019t-car es and\nare not shown. However , the don\u2019t-car e output values should be\nenter ed in Karnaugh maps (K-maps), Espresso \ufb01les, and in HDL\nmodels to further minimize the circuits. In addition, don\u2019t-car e\nvalues are especially important in HDL models to avoid creating\nimplicit latches.\nTABLE  5.4 One-Hot Design NSG T ruth T able Compiled fr om the F SD in Fig. 5.12", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1039, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a4078a39-41d8-43f6-bd1a-48db5ffb5e99": {"__data__": {"id_": "a4078a39-41d8-43f6-bd1a-48db5ffb5e99", "embedding": null, "metadata": {"page_label": "301", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5cc82101-62d5-412b-86e8-11c3f840df54", "node_type": "4", "metadata": {"page_label": "301", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3204afb2065123381ea5eed7f729efcf9d303f3f9082496f907aa5a80bd0669d", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.18  The detailed block diagram of a one-hot F SM for\ndetecting the sequence \u201c101.\u201d", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 91, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c9368bbc-79f9-4694-9908-ed69f4c756a3": {"__data__": {"id_": "c9368bbc-79f9-4694-9908-ed69f4c756a3", "embedding": null, "metadata": {"page_label": "302", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c644b6f3-895d-4c0f-bd06-0f5e06fcee78", "node_type": "4", "metadata": {"page_label": "302", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "971e9a9e8ef4eeb5770fc1024b67c69e1f701a553e0db2afe24f398427bcd4e5", "class_name": "RelatedNodeInfo"}}, "text": "Equation (5.4) lists the minimal expressions for the next state\nvariables d3 through d0 and the output variable z.\nThe \ufb01nal circuit is shown in Fig. 5.19. When compar ed to the\nbinary encoded FSM in Fig. 5.17, the one-hot FSM requir es more\ngates, but simpler circuits for each next state-bit, and output z\nrequir es no cir cuit.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 329, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6818f3dc-6f1f-4456-9feb-77498ead4dc6": {"__data__": {"id_": "6818f3dc-6f1f-4456-9feb-77498ead4dc6", "embedding": null, "metadata": {"page_label": "303", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1e262d43-1198-41d8-8d8a-6f7670343339", "node_type": "4", "metadata": {"page_label": "303", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "74d58c3bfc61464edc89287ccebcd987b02cfaf34bc42033fb35d25e8bab2e63", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.19  A one-hot design F SM to detect the sequence \u201c101.\u201d\nExample 5.2  The design of a Mealy F SM that detects an overlapping sequence \u201c101\u201d:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 148, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "590e8d16-a76a-4666-9118-58d8ba5aec74": {"__data__": {"id_": "590e8d16-a76a-4666-9118-58d8ba5aec74", "embedding": null, "metadata": {"page_label": "304", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e2063691-df5c-4125-b62c-5a263e127ab9", "node_type": "4", "metadata": {"page_label": "304", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "6f554be67ef7b26b9b3eca45d93ae89f14cfcef696af3af789bd76e21de0664d", "class_name": "RelatedNodeInfo"}}, "text": "Solution  Figure 5.20 shows the block diagram and a Mealy FSD for the sequence\nrecognizer . Note that, in this case, the z being a Mealy output is assigned to the arcs and\nnot to the states.  The label of each arc has two parts separated by a slash (/), the inputs\n(only x in this case) are listed to the left of the slash, and the outputs (only z in this case)\nare listed to the right of the slash. Befor e a Mealy solution is presen ted, additional, Mealy\nand Moor e design issues ar e discussed ne xt using this e xample.\nFIGURE 5.20  The block diagram of the \u201c101\u201d sequence r ecognizer\nand its Mealy F SD.\nThe detailed block diagram  for the Mealy FSM is illustrated in Fig.\n5.21. Note that if the FSM is in state C, then either z = 0 if x = 0 or\nz = 1 if x = 1. Therefore, as expected, the Mealy output z (z-Mealy)\ndepends asynchr onously on external input x. This is a typical\nbehavior of a Mealy FSM. As soon as the x signal changes, the z\nsignal could change, independent of the clock signal. The FSD has\nthree states.  It can be implemented using either two \ufb02ip-\ufb02ops with\nbinary encoded state labels or three \ufb02ip-\ufb02ops with one-hot state\nlabels.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1153, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0ea476de-5669-41c2-aa82-25e29a286950": {"__data__": {"id_": "0ea476de-5669-41c2-aa82-25e29a286950", "embedding": null, "metadata": {"page_label": "305", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ee6ce97d-029c-4490-b4a3-db07aa31b9e6", "node_type": "4", "metadata": {"page_label": "305", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "18841f91406de64daea1de41a03d31fefa624103ae0824a8052d57fa8a83c8d7", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.21  A detail block diagram of the \u201c101\u201d Mealy sequence\nrecognizer .\nAssuming that states A, B, and C are encoded with 2-bit binary\ncodes, one of the four possible binary state labels would not be\nused. For example, suppo se, the binary label 00 is assigned to state\nA, 01 to state B, and 10 to state C. The binary label 11 will not be\nused and would constitute an unknown/unde\ufb01ned  machine state.\nAn environmental hazar d (e.g., a transient fault) that causes a state\nchange in one or more of the \ufb02ip-\ufb02ops could alter the state of the\nFSM. For example, a 1-bit accidental change in the value of q1 or q0\nwould switch  state 01 (C) either to the known state 00 (A) or to the\nunknown state 11 (e.g., D). In general, there are several choices for\nhow to handle the unknown states in a design:\n\u2022 The unknown FSM states are ignored in the design \u2014\nIn this case, the unknown states ar e consider ed unimportant,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 914, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "414d64c9-5f03-4d86-b859-f7036baaccc5": {"__data__": {"id_": "414d64c9-5f03-4d86-b859-f7036baaccc5", "embedding": null, "metadata": {"page_label": "306", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "797a7b73-f4d3-4923-a360-dbf451551192", "node_type": "4", "metadata": {"page_label": "306", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "09045fc857cbbc066749e0723a2da2e8b66409648ac812e7d226d449402ec0f7", "class_name": "RelatedNodeInfo"}}, "text": "for example, if the F SM operates a simple toy . If the F SM enters\ninto one of its unknown states and thus malfunctions, the F SM\nneeds to be r eset. Mor e speci\ufb01cally, the binary labels of the\nunknown states ar e enter ed in the NSG and OG truth tables, but\nthe values for the ne xt state and the output variables ar e set to\ndon\u2019t-car e. This helps to r educe the size of the NSG and OG\ncircuits.\n\u2022 The unknown FSM states are transitioned to a known\nstate \u2014In this case, each time that an F SM enters into an\nunknown state, the machine is transitioned into a known state\nduring the ne xt clock cycle. F or example, Fig. 5.22  shows a\nbinary encoded F SD with one unknown state D. If, due to an\nenvir onmental hazar d, the F SM accidentally enters the unknown\nstate D, it would not only transition to the known state A on the\nnext clock cycle, as shown in the \ufb01gur e, but also would not\ngenerate invalid outputs. In this case, the label for the unknown\nstate D would be enter ed in both the NSG and OG truth tables,\nbut the label for the state A would be enter ed as the ne xt state\nfor both when x = 0 and x = 1. Also, the output z would be set\nto 0.\n\u2022 The sequential circuit is designed as a fault-tolerant\nFSM \u2014In this case, the F SM would be able to r ecover fr om an\nunknown state or fr om an accidental transition to a known state\nand would continue operating nor mally . For example, a single\nbit fault, which would set or r eset a single \ufb02ip-\ufb02op, can be\ndetected and cor rected by including additional har dwar e that\nimplements a single er ror detection and cor rection scheme. A\nfault-tolerant F SM would use e xtra \ufb02ip-\ufb02ops and logic to detect\nand cor rect the er rors caused by faults. Note that er ror\ndetection is simpler if one-hot state labels ar e used. W e will\ndiscuss the design of a fault-tolerant F SM in Sec. 5.5.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1838, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d25c174c-b087-47c7-9d65-fbb6356c8962": {"__data__": {"id_": "d25c174c-b087-47c7-9d65-fbb6356c8962", "embedding": null, "metadata": {"page_label": "307", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16a113c1-82a9-479a-88f8-26f94038b6a7", "node_type": "4", "metadata": {"page_label": "307", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "39a5af31d2fb42571726dd275989fa481c30b411f0079789f83f142449b6ddff", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.22  A binary encoded F SD with one unknown state D.\nAssuming that the \ufb01rst option (ignoring the unknown states) is\nused to design the Mealy FSD in Fig. 5.20 , Table 5.6 presents the\ntruth table for the NSG with the unknown state D ignor ed in the\ndesign; when  the current state is D, the next state is de\ufb01ned as\ndon\u2019t-car e. Likewise, Table 5.7 presents the truth table for the OG\nwith the output z set to don\u2019t-care when the current state is D.\nEquation (5.5) lists the minimal expressions for the next state\nvariables d1 and d0 and the output variable z.\nTABLE  5.5 One-Hot Design OG T ruth T able Compiled fr om the F SD in Fig. 5.12", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 646, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e348a71-b2a5-4ca7-9be6-5f762eb62ce5": {"__data__": {"id_": "8e348a71-b2a5-4ca7-9be6-5f762eb62ce5", "embedding": null, "metadata": {"page_label": "308", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8d7330c2-535f-4501-a8fe-caa62577b0a8", "node_type": "4", "metadata": {"page_label": "308", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d18fe3897fffd58ed5d90bf409a7d1bafe59657df69842f501fe1b206f9f44e3", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  5.6 The NSG T ruth T able Deter mined fr om the F SD Given in Fig. 5.20\nThe corresponding FSM circuit is given in Fig. 5.23. Mealy\nmachines, in general, requir e fewer \ufb02ip-\ufb02ips than their equivalent\nMoor e machi nes. Howeve r, sometimes Moor e outputs are preferred.\nIn such cases, additional \ufb02ip-\ufb02ops, one per Mealy output, are used\nto convert a Mealy output  to its corresponding Moor e output. In the\n\ufb01gure, a \ufb02ip-\ufb02op convert s the z-Mealy to its equivalent z-Moor e.\nWhile the z-Mealy async hronously depends on the external input x,\nthe z-Moor e does not. Howeve r, the z-Moor e would lag the z-Mealy\nby one clock cycle.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 632, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1760c119-df9b-4b4f-b6f6-7789f0030c34": {"__data__": {"id_": "1760c119-df9b-4b4f-b6f6-7789f0030c34", "embedding": null, "metadata": {"page_label": "309", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "10bc834e-da68-4933-aa76-9d1fff813a21", "node_type": "4", "metadata": {"page_label": "309", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b031e3bfaf00b2862ec51c530782d34ea0377697c9f8a9c083443a60e934b65b", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.23  The cir cuit for the Mealy \u201c101\u201d sequence r ecognizer .\nAlso illustrated is the conversion of a Mealy output to a Moor e\noutput using a synchr onizing \ufb02ip-\ufb02op.\n\u00a0\n5.4 Counters\nIn the previou s sections, various FSM design techni ques and sample\napplications were discussed. A counter is a sequential circuit that\noutputs a \ufb01nite set of prespeci\ufb01ed values. For example, a 2-bit\nbinary counte r, also known as mod-4 counter , outputs the binary\nnumbers 00, 01, 10, and 11 in order and then it repeats, (3 + 1)\nmod 4 = 0. In general, a mod-k counter outputs k values starting at\n0 and ending at k \u2013 1 and then it r epeats.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 631, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "37cf2e54-37be-4762-b087-d6152ccd87c6": {"__data__": {"id_": "37cf2e54-37be-4762-b087-d6152ccd87c6", "embedding": null, "metadata": {"page_label": "310", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "de07417a-628e-4f7f-9be7-e7c3f09dc087", "node_type": "4", "metadata": {"page_label": "310", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c50ae64569e174fe18325d71576cb5328e08afbbf428b424cdb71d025f12faec", "class_name": "RelatedNodeInfo"}}, "text": "There are many other counter examples. A binary-coded-\ndecimal  (BCD) counter would output the sequence 0 through 9 and\nthen it would r epeat. A Gray code counter would output a sequence\nof numbers, wher e each  number is di\ufb00er ent in only 1-bit when\ncompar ed with an immediately preceding number . For example, the\nnumbers 000, 001, 011, 010, 110, 111, 101, 100, and then 000,\nrepeating, would be the outputs of a 3-bit Gray code counter .\nThe fact that two consecutive Gray codes di\ufb00er in only 1-bit helps\nto limit the number of possible bit errors to only one when a Gray\ncode is accessed as external data by a totally separate sequential\ncircuit. For an example of why Gray code counters would be\nnecessary for two independently functioning sequ ential circuits to\naccess a \ufb01rst-in-\ufb01rst- out (FIFO) bu\ufb00er, refer to Exercise 5.30 (also\nsee Sec. 5.6.2).\nExample 5.3 The design of a bit-serial mod-8 counter with asynchr onous active-high\nreset that uses three copies of a 1-bit counter slice. For k = 8, the counter outputs 0\nthrough 7 and then repeats. This would requir e the design of a hybrid FSM with both Mealy\nand Moor e outputs.\nSolution  A k-bit binary counter slice must perfor m one of two operations: It should either\nretain its current count or increment it by 1. The slice associated with the least signi\ufb01cant\ndigits must increment every clock cycle. The other slices only increment when they\nreceive a signal indicating \u201cincrement.\u201d Figure 5.24 illustrates the block diagram and the\nFSD of a 1-bit binary counter slice. The FSD de\ufb01nes a hybrid FSM with a Moor e output z-\nMoor e and a Mealy output o-Mealy . The i input is used as an enabling input signal in each\nslice. If i = 1, the slice increments its current value; otherwise, it retains its current value.\nEach o-Mealy output connects to the i input of its immediately succeeding slice.\nFIGURE 5.24  The block diagram and the F SD of a 1-bit counter slice.\nTable 5.8 presents a comb ined NSG and OG transition (truth) table deter mined from the\nFSD of the 1-bit counter slice. The minimal expressions for the z-Moor e and o-Mealy\noutputs and the next state variable d are listed in Eq. (5.6). The circuit for the 1-bit\ncounter slice and a corresponding  mod-8 counter are shown in Fig. 5.23 . The 1-bit counte r", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2285, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8657f37b-79c8-4371-9c8f-3700ae5ddc0a": {"__data__": {"id_": "8657f37b-79c8-4371-9c8f-3700ae5ddc0a", "embedding": null, "metadata": {"page_label": "311", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a0deb0fc-1fda-40ad-b4bf-be6825d8c749", "node_type": "4", "metadata": {"page_label": "311", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "aeec4c339c310c7f1aac08b50efd68ece94873d8e1d3f55f6ce02b8d88165cef", "class_name": "RelatedNodeInfo"}}, "text": "slice can be used to design any mod-k counter as long as k \u2265 2 is power of 2 (i.e., k = 2m,\nwher e m \u2265 1).\nTABLE  5.7 The OG T ruth T able Deter mined fr om the F SD Given in Fig. 5.20\nTABLE  5.8 A Combined NSG and OG T ruth T able Complied fr om the F SD in Fig. 5.24\nExample 5.4  A bit-ser ial mod-6 counter with active-high reset; note that 6 is not a power\nof 2.\nSolution  A mod- 6 counter outputs 0, 1, 2, 3, 4, 5, and then it repeats. Like a mod-8\ncounter, it also requir es three \ufb02ip-\ufb02ops to store a value between 0 and 5 as its current\nstates. However, a mod-6 counter, contrary to a mod-8 counter, must reinitialize when it\nreaches 5 and starts the count from 0 on the next clock cycle. For this, a simple but less\npreferred solution is to use the output of a simple CC that asynchronously resets the\ncounter as soon as count reache s 6, but befor e the next clock cycle. A signal labeled\naclear  (\u201ca\u201d for asynchr onous) is de\ufb01ned as aclear = z2z1z0_ and then combined with the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 986, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a2eb9f94-3511-41d6-8c92-1d46678989f3": {"__data__": {"id_": "a2eb9f94-3511-41d6-8c92-1d46678989f3", "embedding": null, "metadata": {"page_label": "312", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f3bd359d-9f66-4f11-a732-0bcef15f73f9", "node_type": "4", "metadata": {"page_label": "312", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5e4043f53612d3cbca15cb1244ba9650b972397ad4a0843e64297c0d7ae4729c", "class_name": "RelatedNodeInfo"}}, "text": "master asynchr onous signal reset to asynchr onously reset each slice, as illustrated in Fig.\n5.26.\nFIGURE 5.25  A bit-serial mod-8 counter : (a) 1-bit counter slice; ( b)\nmod-8 counter with thr ee slices.\nFIGURE 5.26  An asynchr onously clear ed bit-serial mod-6 counter\n(not a pr eferred solution).\nHowever, since r = aclear  + reset is used to asynchr onously reset all the \ufb02ip-\ufb02ops, \u0394r\n(delay of signal r) would not be included in the calculation of the minimum operating clock\nperiod. Thus, it is very likely (due to signal routing delays) that all the \ufb02ip-\ufb02ops may not\nreset to the initial value 0. That is, it is possible that when aclear  = 1, some of the \ufb02ip-\n\ufb02ops may reset quickly, causing aclear  to become 0 (deasserted) befor e all the \ufb02ip-\ufb02ops\nare able to reset. Hence, the coun ter may produce an incor rect output on the next clock\ncycle.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 855, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3ada6a29-8776-4518-9b12-3a60c51313df": {"__data__": {"id_": "3ada6a29-8776-4518-9b12-3a60c51313df", "embedding": null, "metadata": {"page_label": "313", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c4aa7098-4014-4f37-b5db-5f94c771e5e7", "node_type": "4", "metadata": {"page_label": "313", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9336a28a982adea236bd0befcb25c11121d1d9703f82bf1b9bcc9af54929b824", "class_name": "RelatedNodeInfo"}}, "text": "A preferred solution is to reset the \ufb02ip-\ufb02ops synchr onously each time the counter outputs\n5 and reserve the asynchr onous reset only for counter initialization during startup. To do\nthis, the 1-bit counter slice must include an additional external input, for example, sc\n(synchr onous clear). Figure 5.27  illustrates the block diagram of the modi\ufb01ed 1-bit counter\nslice. Its FSD is also shown. When sc = 1, the next state is always 0 and the o-Mealy is a\ndon\u2019t-car e indepe ndent of the value of the i input. For convenience and clarit y, the i and\nthe o signals ar e omitted and not shown on those ar cs that sc = 1.\nFIGURE 5.27  The block diagram and the F SD of a synchr onously\nclear ed (sc) 1-bit counter slice (a pr eferred solution).\nTable 5.9 presents the combined  NSG and OG truth table. The\nminimized logic expressions for the next state variable d and the z-\nMoor e and o-Mealy outpu ts are given in Eq. (5.7). The circuits for\nthe bit slice and the mod-6 counter are illustrated  in Fig. 5.28. The\nsignal sc is de\ufb01ned as sc = z2z1_ z0 and is asserted each time that\nthe counter outputs 5 and thus synchr onously clears all the \ufb02ip-\n\ufb02ops during the ne xt clock cycle.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1181, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eb40f08e-c188-4703-87e5-773280852f3b": {"__data__": {"id_": "eb40f08e-c188-4703-87e5-773280852f3b", "embedding": null, "metadata": {"page_label": "314", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f0203cc0-ea7d-4276-b67a-223311739df1", "node_type": "4", "metadata": {"page_label": "314", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e48cb9ab661644e38ed997f15a4c5c5364699779373d971bee81ce0cbc99ebef", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  5.9 The Combined Truth Table of the NSG and OG for the 1-Bit Counter Slice in\nFig. 5.27", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 94, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "79b30b01-f67b-4062-a4c6-df3a52a58c81": {"__data__": {"id_": "79b30b01-f67b-4062-a4c6-df3a52a58c81", "embedding": null, "metadata": {"page_label": "315", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7863a71f-7cab-4460-9eeb-9656fe30e401", "node_type": "4", "metadata": {"page_label": "315", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c590e4191449a38c021f66da053bf347bfeba0173de3a341d673a17435854b4e", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.28  A synchr onously clear ed bit-serial counter : (a) modi\ufb01ed\n1-bit counter slice; (b) cir cuit for the mod-6 counter (a pr eferred\nsolution).\nAlso note that often an enabling signal is also requir ed in the\ndesign of a counter so that the counter operates only when it is\nenabled. Two design options are available: (1) include a counter", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 347, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6cdf2062-0843-4d57-a47d-ed503874053c": {"__data__": {"id_": "6cdf2062-0843-4d57-a47d-ed503874053c", "embedding": null, "metadata": {"page_label": "316", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "36b3d26b-7471-4804-bad4-2d1f180c7b7d", "node_type": "4", "metadata": {"page_label": "316", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f2f714186de6e6e51425e330f04a4fccc94135a3ba57228988c25ebb6e3b634e", "class_name": "RelatedNodeInfo"}}, "text": "enable signa l in its FSD model, or (2) use \ufb02ip-\ufb02ops with enable. The\nformer counter, however, would operate with a faster clock.\nExample 5.5  The design of a bit-serial mod-16 up/down counter using two copies of a 2-\nbit counter slice is presented. An up/down counter either counts up or down, based on the\nvalue of a contr ol signal. The dir ection to count up or down can change at any time.\nSolution  Figure 5.29 illustrates the block diagram and the FSD of a mod-4 up/down\ncounter slice. The slice generates the sequence 0, 1, 2, 3 and then repeats when counting\nup, and generates the sequence 3, 2, 1, 0 and then repeats when counting down. The\nsignal u indicates the direction of the counter . If u = 1, the counter counts up; otherwise, if\nu = 0, the counter counts down. For a mod-16 counter, the \ufb01rst slice, which is responsible\nfor the least two signi\ufb01cant bits, counts every clock cycle, while the second slice counts\nonly once every four clock cycles. The input i, if asser ted, enables the corresponding slice\nduring the next clock cycle. Disabling the \ufb01rst slice will automatically disable the second\nslice. However, the second slice is only enabled when the \ufb01rst slice reaches its maximum\nvalue = 3 when counting up or its minimum value = 0 when counting down. For example,\nwhen cur rent count  = (0011) 2, both the slices must be enabled to generate the ne xt count\n= (0100) 2 while counting up. That is, the \ufb01rst slice must count up to produce 0 = (00)2, (3\n+ 1) mod 4 = 0, and the second slice must count up to produce 1 = (01)2, (0 + 1) mod 4\n= 1.\nFIGURE 5.29  The block diagram and the F SD of a 2-bit up/down\ncounter slice.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1645, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8d001a58-9dd0-4307-8d5b-8bc0da7ed588": {"__data__": {"id_": "8d001a58-9dd0-4307-8d5b-8bc0da7ed588", "embedding": null, "metadata": {"page_label": "317", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "403c9c16-6a0c-4263-bf75-6d71428b1af7", "node_type": "4", "metadata": {"page_label": "317", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b3afddc83922dbb512d8f5c99378e78e0b83be2cae7610d6aa5cc41b4663c710", "class_name": "RelatedNodeInfo"}}, "text": "The design requir es two \ufb02ip-\ufb02ops and thus there are two current-state variables q1 and q0\nand two ne xt-state variables d1 and d0. Table 5.10  is the combined truth tables of the NSG\nand OG. The corresponding Espresso minimized SOP logic terms are listed next. Figure\n5.30 is the \ufb01nal circuit for the mod-16 counter using two copies of the counter slice,\nlabeled Slice1 and Slice0. Slice0 is shown always enabled (i.e., i0 = 1), while Slice1 is\nenabled only when Slice0 outputs 3 when counting up or 0 when counting down.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 522, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "98e2d39c-dc92-4473-8e80-ac345d0790ee": {"__data__": {"id_": "98e2d39c-dc92-4473-8e80-ac345d0790ee", "embedding": null, "metadata": {"page_label": "318", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "35cf410d-49ab-416c-a813-bdf7f8837d7f", "node_type": "4", "metadata": {"page_label": "318", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3587183c546d4a2253a839bb201ca49b024db9ba0689238c491cecc60c2434cd", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  5.10  The Combined Truth Table for the NSG and OG of the 2-Bit Counter  Slice in\nFig. 5.29", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 97, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bfdbaae8-2820-4661-aab3-668aa68e030c": {"__data__": {"id_": "bfdbaae8-2820-4661-aab3-668aa68e030c", "embedding": null, "metadata": {"page_label": "319", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b95be12b-d1bd-4074-93b9-cd814031fba9", "node_type": "4", "metadata": {"page_label": "319", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f357431dece7e8e105fe84b1e98ea32cbb4307b1a49062c292a52ac7bfca8c42", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.30  An up/down bit-serial mod-16 counter using 2-bit\nup/down counter slices.\nAlternatively, because all counters requir e some kind of an adder\nthat perfor ms a known function, they could be designed without\nrequiring an F SD. This is illustrated in the following e xample.\nExample 5.6 The bit-parallel design of a mod- 8 up-counter using a set of known combi-\nnational cir cuit (CC) modules and a parallel-load r egister is pr esented.\nSolution  Figure 5.31  illustrate s the data path of a bit-parallel mod-8 up-counter . The data\npath includes a 3-bit binary adder, a 2-to-1 3-bit MUX, and a 3-bit parallel-load register\nwith an active-hig h asynchr onous reset. The register is also designe d using \ufb02ip-\ufb02ops with\nenable. The adder always outputs the register content plus 1. The signal sc (synchr onous\nclear) contr ols the MUX and is used to synchr onously initialize the counter to 0. On every\nclock cycle, the register, if enable d, loads the 3-bit output of the MUX, either the quantity\nZ + 1 if sc = 0 or zer o if sc = 1.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1039, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7c0275ee-df84-44b7-8759-3d1baefbef45": {"__data__": {"id_": "7c0275ee-df84-44b7-8759-3d1baefbef45", "embedding": null, "metadata": {"page_label": "320", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e475547e-556a-4faa-bf6d-5cf450987bfb", "node_type": "4", "metadata": {"page_label": "320", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9af6738de4a3a0b8cf240d29f9ff81b8be2f1840ca1508d35fff0f712cf1faa4", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.31  A synchr onously clear ed bit-parallel mod-8 up-counter .\nThe speed of the counter depends on the propagation delay of the adder . A carry\npropagate adder (CPA), for example, would introduce a longer signal delay, similar to that\nof a bit-serial circuit. On the other hand, one may use a faster adder , such as, a carry look-\nahead (CLA) adder, to design a high-speed counter . Figure 5.32 illustrates the simpli\ufb01ed\ncircuit of a synchr onously clear ed mod-8 up-counter using a 3-bit CLA adder . The circuit in\nFig. 5.32 is the result of further simpli\ufb01cations of the CLA\u2019s and the MUX\u2019s logic\nexpressions using the constant operand (001) 2 for the CLA adder and the constant input\n(000) 2 for the MUX in Fig. 5.31 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 729, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "739a9a25-a065-482f-87a8-d0ea57329ef4": {"__data__": {"id_": "739a9a25-a065-482f-87a8-d0ea57329ef4", "embedding": null, "metadata": {"page_label": "321", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "afdf01dc-1776-40ef-9c62-0c15e1d657f2", "node_type": "4", "metadata": {"page_label": "321", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "67a902e324723983676fb340272daf925d5db2ac2fb78ba154bb71f57e5970b1", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.32  A synchr onously clear ed bit-parallel mod-8 up-counter\nusing a simpli\ufb01ed CL A adder and a simpli\ufb01ed MUX.\nIn order to design a bit-parallel k-bit counter slice, the slice must\ninclude both the i and o interface signals that were discussed\nearlier in the design of the bit-serial counters. In addition, a bit-\nparallel (including a bit-parallel slice) solution, especially for large\ndesigns, has the advantag e of not requiring an FSD. The technique,\nhowever, does requir e the designers\u2019 ability to determine, from the\ndescription of the desig n problem, the functions that will be\nperfor med by the combinational circuits. In Chap. 8 , we will use this\napproach to design a CPU data path.\n\u00a0\n5.5 Fault-Tolerant Finite State Machine", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 744, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0392620d-a857-407e-bf04-f97a7dc7eb34": {"__data__": {"id_": "0392620d-a857-407e-bf04-f97a7dc7eb34", "embedding": null, "metadata": {"page_label": "322", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c4b46bff-69e0-4058-b1ca-f7baca95ca18", "node_type": "4", "metadata": {"page_label": "322", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "33a9fac39f11cfa13819488bd7f82bee4c912e6c346ce70917b53418e2db8b9f", "class_name": "RelatedNodeInfo"}}, "text": "A fault-tolerant FSM refers to an FSM that detects and corrects\nfaults that occur, not because of a manufacturing or design error,\nbut rather because of some random envir onmental hazar d during\noperation. In general, such hazar ds a\ufb00ect storage elements like\nlatches, \ufb02ip-\ufb02ops, and memory . The state of a \ufb02ip-\ufb02op, indicated by\nits q bit, can sudd enly change  from 0 to 1 or vice versa. A fault can\ncause an FSM to transitio n to an invalid state and therefore cause\ncircuit malfunction. A fault can cause a counter to suddenly output\na wrong value, a sequence detector to r ecognize a wr ong sequence,\nor skip and not r ecognize a right sequence, etc.\nIn gene ral, faults can a\ufb00ect a single bit or multiple bits. However,\nsingle-bit faults are more common. A fault-tolerant FSM requir es\nextra hardware to implement redundancy in the circuit and be able\nto detect and correct errors caused by faults. For example, a fault-\ntolerant FSM requir es extra \ufb02ip-\ufb02ops and extra combinational\ncircuits. The number of extra \ufb02ip-\ufb02ops depends on how many states\nthere are originally in the FSD. For example, to design a single-bit\nfault-tolerant FSM, each binary state label must be di\ufb00er ent in at\nleast 3-bits when compa red to the other labels. In general, the\nnumber of bits that two binary numbers di\ufb00er is called their\nHamming distance . Further more, a set of binary numbers is\ncalled Hamming code  if each code is at least a three Hamming\ndistance away fr om any other code in the set.\nFor example , if an FSD has three states, then for a single-bit\nfault-tolerant FSM we must use 5-bit Hamming codes, such as\n00000, 0011 1, and 11001, to label the three state s. Note that the\nHamming distance between any of the three 5-bit codes is 3 or\nmore. The codes 00000 and 00111 di\ufb00er in the \ufb01rst 3-bits; thus,\ntheir Hammin g distance is 3. The codes 00111 and 11001 di\ufb00er in\nbit numbers 1, 2, 3, and 4 (Little Endian); thus, their Hamming\ndistance is 4. A Hamming  distance of any two code s is calculated as\nthe number of 1\u2019s in their bitwise XOR. Table 5.11 presents the\nHamming distances calculated for the three codes 00000, 00111,\nand 11001.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2140, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8f5020c5-f04f-4317-a2ef-743d12005452": {"__data__": {"id_": "8f5020c5-f04f-4317-a2ef-743d12005452", "embedding": null, "metadata": {"page_label": "323", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74c8dc61-5119-4df7-946e-e12ba0a878cf", "node_type": "4", "metadata": {"page_label": "323", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "624715d8ae98701a86cda846872136a7fa62d6f442aca57c45f61afe0caf8a8e", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  5.11  Hamming Distance between a P air of Codes\nSuppose a fault causes bit 2 in the code 00000 to change from 0\nto 1 and produce an invalid code 00100. The new code is 1\nHamming distance away from the valid 00000,  but 2 or more\ndistances away from each of the valid codes 00111 and 11001.\nThus, the invalid code is closer to the valid code  00000 than the\nother two valid codes. Therefore, the error caused by the fault can\nbe detected and corrected by replacing the invalid code 00100 with\nthe valid code 00000.\nExample 5.7  The design of a fault-tolerant FSM using the Mealy FSD given in Fig. 5.33  is\npresented. As shown in the \ufb01gur e, each state is labeled with a 5-bit Hamming code.\nFIGURE 5.33  An F SD using 5-bit Hamming state codes as the state\nlabels.\nSolution  Table 5.12 present s a combined truth table  for the NSG and OG of the fault-\ntolerant FSM using \ufb01ve \ufb02ip-\ufb02ops. In the table, all the single-bit invalid current-state labels\nare interpreted the same as the corresponding valid-state label. For example, because\neach of the invali d labels 00001, 00010, 00100, 01000, and 10000 is 1 Hamming distance", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1126, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d3d4c49b-4d71-4db1-82bb-4b859d6fdba4": {"__data__": {"id_": "d3d4c49b-4d71-4db1-82bb-4b859d6fdba4", "embedding": null, "metadata": {"page_label": "324", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d14ef6dd-a376-4161-98ee-09043710f475", "node_type": "4", "metadata": {"page_label": "324", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a478dc537e705924a0f970503e607f0d8531042d4abb85a05ecd359d9f9610c5", "class_name": "RelatedNodeInfo"}}, "text": "away from the valid code 00000, they all are interpr eted as state A. In the \ufb01rst six rows in\nthe table, if x = 0, then the next state label is 00000 (state A). Therefore, a single -bit error\nin any of the q4, q3, q2, q1, and q0 signals will not alter the state of the FSM. The \ufb01nal\ncircuit is not shown. However, one can use Espresso minimization  software to minimize\nthe truth  table and obtain the required logic expressions for the circuit. Alternatively, the\ncircuit can be modeled in Verilog using a \u201ccase\u201d statement to enter the truth table (see\nExercise 5.25).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 569, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d91cf7cd-10ba-4cc8-9410-a1adf93f775c": {"__data__": {"id_": "d91cf7cd-10ba-4cc8-9410-a1adf93f775c", "embedding": null, "metadata": {"page_label": "325", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "29a6c8b2-efb7-4c30-b404-82f6daab22af", "node_type": "4", "metadata": {"page_label": "325", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e8d30e6c3cdb456144df7cde0f526712f2e7e2cb07a9925c163e0a32d1696b5c", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  5.12  A Fault-Tolerant Combined NSG and OG Truth Table Deter mined from the\nFSD in Fig. 5.33", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 99, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f281539d-44f8-4333-938c-cd4499bf0045": {"__data__": {"id_": "f281539d-44f8-4333-938c-cd4499bf0045", "embedding": null, "metadata": {"page_label": "326", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16fd39e4-6d54-47fc-991a-51fc9d8db306", "node_type": "4", "metadata": {"page_label": "326", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d7445868eed2daa3f76c1baf6faf79b00b199602b34f411cfd10c4cc70be36c0", "class_name": "RelatedNodeInfo"}}, "text": "A single fault can be simulated if one uses individually contr olled\ninput signals to reset or preset each \ufb02ip-\ufb02op. For example,\nassuming that the current state is 00000, a fault can be introduced,\nsay, in the q2 bit by using the corresponding preset signal to\nchange the state to 0010 0 (an invalid state). As indicated in Table\n5.12, the FSM should correctly transition from this invalid state\neither to the valid state 00000 if x = 0 or to the valid state 00111 if\nx = 1. Thus, the circuit will detect and correct the single-bit error.\nNote that in this case, the detecting and correcting mechanism\nwould be embedded in the NSG and OG modules. A technique that\nwould convert a nonfault-tolerant sequential circuit to a single-bit\nfault-tolerant circuit without requiring the construction of a large\ntruth table is discussed later .\nIn addition, in general, it is easy to come up with a small number\nof Hamming codes to design a small fault-tolerant FSM. However, it\nis more appropriate to use the Hamming coding scheme\ndescribed next to generate as many Hamming codes as necessary\nfor a given F SD of any size.\n5.5.1 Hamming Coding Scheme\nHamming codes are usefu l for detecting and correcting a single-bit\nerror or detecting a double-bit error. The errors can occur during\ndata transmi ssion in digital communication or in a data storage\nmodule such as a \ufb02ip-\ufb02op or memory . Each Hamming code includes\na certain number of parity  bits and a certain number of data bits. A\nparity bit can be calcula ted as even parity  or odd parity . For\nexample, consider a 7-bit Hamming code. The bits would be\nnumber ed right to left from 1 to 7 with bits 1, 2, and 4 reserved for\nthree even parity bits and bits 3, 5, 6, and 7 for four data bits.\nEquation (5.8) is used to compute the even parity bits p1, p2, and p4\nfrom the data bits d3, d5, d6, and d7. Now suppose d7 = 1, d5 = 1,\nand d3 = 0. The parity bit p1, as an even parity, must be 0 so that\nthe number of 1\u2019s among d7, d5, d3 and p1 is an even number . If d7\n= 1, d5 = 1, and d3 = 1, then p1 must be a 1.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2056, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58e6c758-bff7-4f89-87ad-4e8dbd20feb9": {"__data__": {"id_": "58e6c758-bff7-4f89-87ad-4e8dbd20feb9", "embedding": null, "metadata": {"page_label": "327", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "95f91784-872e-443e-8c5d-9ec857e7f8b4", "node_type": "4", "metadata": {"page_label": "327", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f34602b9697241560f33c26e27b4088ccf2beeb287e7405296f2fe7837b68c72", "class_name": "RelatedNodeInfo"}}, "text": "Given the 4-bit data 1101, its 7-bit Hamming code is deter mined\nas follows using Eq. (5.8).\nData bits: d3 = 1, d5 = 0, d6 = 1, d7 = 1\nEven parity bits:\nThe 7-bit Hamming code is organized as d7d6d5p4d3p2p1 =\n1100110. The parity bit p1 is deter mined from the data bits d3, d5,\nand d7. These data bits are located in the bit positions 011 (3), 101\n(5), and 111 (7) in the Hamming code, respectively . Note that the\n\ufb01rst bit in each of the position numbers is 1, indicated by the\nunderline. Likewise, the parity bit p2 is determined from the data\nbits located in the bit positions 011 (3), 110 (6), and 111 (7). In\ngeneral, a parity bit p2k for k = 0, 1, 2, etc., is generat ed by XORing\nall the data bits that have a 1 in the kth bit of their respective\nposition numbers. For instance, for k = 2, p4 is deter mined by\nXORing the data bits at bit positions 5 (101), 6 (110), and 7 (111)\nbecause 5 is 4 + 1, 6 is 4 + 2, 7 is 4 + 3, wher e 4 is the common\nvalue among them.\nThe parity bits are used to deter mine the location of an error bit\n(if any). For example, consider the 7-bit Hamming code d7 d6 d5 p4\nd3 p2 p1 = 1001100. Suppose this Hamming code is transmitted\nwirelessly to a remote destination. Further more, suppose, the\nreceived Hamming code indicated as d\u20327 d\u20326 d\u20325 p\u20324 d\u20323 p\u20322 p\u20321 =\n(1101100)2 includes a single-bit error in bit d6 (underlined). The\nreceived parity and data bits are then p\u20324 p\u20322 p\u20321 = 100 and d\u20327 d\u20326\nd\u20325 d\u20323 = 1101. Using Eq. (5.8), the new parity bits, p\u20334, p\u20332, and p\u20331", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1502, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0dd74447-51c7-4854-82f0-9736c7215f7f": {"__data__": {"id_": "0dd74447-51c7-4854-82f0-9736c7215f7f", "embedding": null, "metadata": {"page_label": "328", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "805711ff-fc58-4b1e-b7ba-be9c2a90e81e", "node_type": "4", "metadata": {"page_label": "328", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c3300e18fd64b5ef14f141da1704d4d24f6ca68ea0c5e8fe7223d81682154456", "class_name": "RelatedNodeInfo"}}, "text": "are computed from the received data bits d\u20327 d\u20326 d\u20325 d\u20323 = 1101 as\nfollows:\nEquation (5.9) is used to deter mine the location of the bit in error\nas a 3-bit number E = e2e1e0.\nThat is,\nThe 6 indicat es that the bit in location 6 (i.e., d6) in the received\nHamming code is in error and should be changed from 1 to 0 to\nyield the cor rect Hamming code 1001100 that was transmitted.\nWith an additional overall parity bit c, a Hamming  code can also\nbe used to detect, but not correct, a double-bit  error. Equation\n(5.10) de\ufb01nes an overall even parity bit. The four parity bits c, p4,\np2, and p1 and the four data bits d7, d6, d5, and d3 create an 8-bit\nHamming code. Table 5.13 presents some examples of Hamming\ncode sizes.\nTABLE  5.13  Sample Hamming Code Sizes", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 760, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "41a39dc4-bcd4-4074-9a55-bc886bcfd57f": {"__data__": {"id_": "41a39dc4-bcd4-4074-9a55-bc886bcfd57f", "embedding": null, "metadata": {"page_label": "329", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c5d5f2ee-2d24-481b-aa0f-a1e672d8d7c2", "node_type": "4", "metadata": {"page_label": "329", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "132d54bc591ddd8e06cd251898c51a07cd1e9a426b3d2d54711aa5cefaba6927", "class_name": "RelatedNodeInfo"}}, "text": "Table 5.14 presents the rules of the Hamming coding scheme\n(HCS) using the E, c\u2032 (the received overall parity bit), and c\u2033(the\ncomputed overall parity bit from the received data bits). When c\u2032\nand c\u2033 are equal and E = 0, then there are no faults in the received\nHamming code. If the c\u2032 and c\u2033 are the same but E \u2260 0, then there\nis a double and uncor rectable error in the received code. If c\u2032 \u2260 c\u2033\nand E = 0, then the error is in c\u2032. Finally, if c\u2032 \u2260 c\u2033 and E \u2260 0, then\nthe E identi\ufb01es the bit in error. If 3 or more bits are in error, the HCS\nwill interpr et the error (incor rectly) either as a single-bit or a\ndouble-bit er ror.\nTABLE  5.14  The R ules of the HCS (Hamming Code Scheme)\nIn Example 5.7, we selected the three Hamming codes 00000,\n00111, and 11001 to encode the three states of the FSD in Fig.\n5.33. Here, we will illustrate how the HCS can be used to\nsystematically encode the states of an FSD with Hamming codes.\nSuppose the states A, B, and C in Fig. 5.33  are initially encoded with\n2-bit binary numbers s1s0 = 00 for A, 01 for B, and 10 for C. By\ninterpr eting the 2-bit state labels as two data bits, Eq. (5.11) is used\nto compute the parity bits using the data bits d7 = 0, d6 = 0, d5 =\ns1 and d3 = s0.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1226, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ce56d7ac-0806-4743-b1aa-9662f833e7d2": {"__data__": {"id_": "ce56d7ac-0806-4743-b1aa-9662f833e7d2", "embedding": null, "metadata": {"page_label": "330", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b2b147eb-4e8c-4b59-a4c6-5527018386b8", "node_type": "4", "metadata": {"page_label": "330", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f87e2dce758128913d05e7d09392efec52e943a0a11924403a9b4297770c4841", "class_name": "RelatedNodeInfo"}}, "text": "For example , for s1s0 = 01, p1 = 1, p2 = 1, and p4 = 0, the\ncorresponding Hamming code is s1 p4 s0 p2 p1 = (00111)2. Table\n5.15 presents a summary of the parity bit calculation s. Note that\nthe resultan t Hamming codes are the same as those used in\nExample 5.7.\nTABLE  5.15  The 5-Bit Hamm ing Codes Generated From the 2-Bit Numbers 00, 01, and\n10\nAn alternative fault-tolerant FSM design to the one was discussed\nin Example 5.7 involves  \ufb01rst designing the FSM as a nonfault-\ntolerant circuit and then incorporating in the circuit the additional\ncircuits requir ed to implement the Hamming error detection and\ncorrection mechanism. Consider, for example, the fault-tolerant\nFSM design problem in Example 5.7. First, the FSM is designed as a\nnonfault-tolerant FSM. This will requir e two \ufb02ip-\ufb02ops (two state\nbits), an NSG, and an OG. Suppose the two next state bits\ngenerated by the NSG are labeled s1 and s0. A fault-tolerant circuit\nwould requir e six \ufb02ip-\ufb02ops that are associated with the two state\nbits s1 and s0, three parity bits p1, p2, and p4, and an overall parity\nbit c.\nSuppose the six \ufb02ip-\ufb02op q bits are labeled q0 to q5. For a fault-\ntolerant design, the \ufb02ip-\ufb02ops would be interpr eted as a\ntransmission medium and a receiver . The d bits are \u201ctransmitted\u201d\nthrough the \ufb02ip-\ufb02ops and then are \u201creceived\u201d as the q bits. A single\nfault can switch one of the q bits and thus cause an error. On the\ntransmission side, the six state bits (d\u2019s) would be connected to the\ns1 and s0 signals and the four parity bits p1, p2, p4, and c. On the\nreceiver side, the q\u2019s represent two current state bits labeled s\u20321\nand s\u20320 and four received parity bits labeled p\u20321, p\u20322, p\u20324, and c\u2032. The", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1686, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2d650689-0f70-4ac1-b387-70398648c26c": {"__data__": {"id_": "2d650689-0f70-4ac1-b387-70398648c26c", "embedding": null, "metadata": {"page_label": "331", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d5bcc824-134e-463e-9879-d9689fa4e72a", "node_type": "4", "metadata": {"page_label": "331", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9aac0af1839582c44a3eea081c86f5cd787699135a2b13216d8bb911854f93f3", "class_name": "RelatedNodeInfo"}}, "text": "relationships between the Hamming codes and the \ufb02ip-\ufb02op inputs\nand outputs ar e summarized in Table 5.16 .\nTABLE  5.16  Conver ting a FSM to a Fault-Tolerant FSM Using the Hamming Error\nDetection and Cor rection Mechanism\nAn explicitly designed fault-tolerant FSM would requir e two\nadditional modules: a parity generator (PG) module and an error\ndetection and correction (EDC) module. The PG module would input\ns1 and s0 and would generate four even parity bits p1, p2, p4, and c.\nThe EDC would input the bits s\u20321 and s\u20320 (the \u201creceived\u201d next state\nbits) and would generate  the parity bits p\u20334, p\u20332, and p\u20330. The bits\np\u20324, p\u20322, and p\u20320 and the p\u20334, p\u20332, and p\u20330 would  be used to compu te\nthe er ror bit position E (Eq. (5.9)) if c\u2032 \u2260 c\u2033.\nUsing a 3-to -8 decoder, the E is decoded into one of seven output\nsignals (1 through 7) for which only one could be active if E \u2260 0.\nThe active decoder signa l (if any) would subsequently be used to\ncorrect the bit in error using an XOR gate if c\u2032 \u2260 c\u2032\u2032. The resultant\nFSM, however, will have a longer propagation delay than the one\ndesigned using the truth  table in Example 5.7 and SOP or POS\nexpressions.\n\u00a0\n5.6 Sequential Circuit Timing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1181, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1b2da40-9f03-4554-8f64-71ff4c049b8b": {"__data__": {"id_": "c1b2da40-9f03-4554-8f64-71ff4c049b8b", "embedding": null, "metadata": {"page_label": "332", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a94daa11-4bc8-43d2-bb55-bfb4fe3fab49", "node_type": "4", "metadata": {"page_label": "332", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d1b5be9518fca748f81fe03d8b32a9e170ec2cc9046afdf30d92545a8770463b", "class_name": "RelatedNodeInfo"}}, "text": "Flip-\ufb02ops that share a common clock signal are expected to receive\nthe sampling  edge of the clock at approximately the same time so\nthat all the \ufb02ip-\ufb02ops can sample their respective inputs\nsimultaneously and befor e the arrival of the next sampling edge.\nOtherwise, as illustrated in Fig. 5.34, if there are delays in the\ntransmission of the clock signal to the \ufb02ip-\ufb02ops, then it is possible\nthat some of the \ufb02ip-\ufb02ops will receive the sampling clock edge\nmuch later than other \ufb02ip-\ufb02ops. For example, as shown in the\n\ufb01gure, clk1 arrives after some delay (due to signal routing delay) as\nclk2 at the second \ufb02ip-\ufb02op (FF2). This variation in the arrival times\nof a sampling clock edge at di\ufb00er ent \ufb02ip-\ufb02ops is known as clock\nskew (\u03c4cs).\nFIGURE 5.34  Illustrating a potential clock sk ew pr oblem within one\nclock cycle; the d2 signal could be changing if the sampling edge of\nclk2 arrives late at FF2.\nA clock skew can cause many problems. The \ufb02ip-\ufb02ops that\nreceive a sampling clock edge earlier will be able to sample their\ninputs, and thus change their outputs, befor e others will. As a\nresult, this could cause the newly sampled inputs  to modif y all or\nsome of the inputs for those \ufb02ip-\ufb02ops that have not yet completed\nsampling their inputs. This may, in turn, either cause a timing\n(setup-time or hold-time) violation or cause an invalid state\ntransition r esulting in a cir cuit malfunction.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1396, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b4d0cd3d-9280-4fef-a6bb-0c29918869f8": {"__data__": {"id_": "b4d0cd3d-9280-4fef-a6bb-0c29918869f8", "embedding": null, "metadata": {"page_label": "333", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "896a0d62-e9cc-409e-ba20-3038a067a5d9", "node_type": "4", "metadata": {"page_label": "333", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2c6e57e9ba7aa804be9c094af1d4257523fa8edd35cacd0c8bf3c9b923c2a402", "class_name": "RelatedNodeInfo"}}, "text": "In the \ufb01gure, when FF1 receives the sampling edge of clk1, it\nsamples d1current and change s q1current to \n . When  FF2 receives\nthe sampling edge of clk2, it is supposed to sample d2current and\nchange q2current to q2new. However, because of a clock skew, one of\nthree scenarios may occur, as stated next and illustrated in Fig.\n5.35.\nFIGURE 5.35  A timing diagram illustrating the e\ufb00ect of a clock sk ew\nwithin one clock cycle ( Fig. 5.34  circuit).\nScenario a:\nThe propagation delay of d2 is about  the same as the clock skew (\u0394d2 \u2245 \u03c4cs). In this\ncase, d2 would be chang ing while FF2 is still sampling and, therefore, may cause a\nsetup or hold-time violation at FF2.\nScenario b:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 681, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b3ef2eca-6d40-4770-8209-934d82c943c5": {"__data__": {"id_": "b3ef2eca-6d40-4770-8209-934d82c943c5", "embedding": null, "metadata": {"page_label": "334", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "19c0839d-ad3a-45d0-867e-94c5ec4dce19", "node_type": "4", "metadata": {"page_label": "334", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "aae079490e556e115683b68a3f753b3a697c46241fbfc3775d2ffa42829b207c", "class_name": "RelatedNodeInfo"}}, "text": "The propagation delay of d2 is smaller than the clock skew (\u0394d2 < \u03c4cs). In this case,  \n would be able to change d2currentto d2new prior to the arrival of the clk2\u2019s\nsampling edge at FF2, and thus would cause FF2 to load d2newwhile FF1 loads\nd1current. This will cause an invalid state transition, r esulting in a functional er ror.\nScenario c:\nThe propagation delay of d2 is larger than the clock skew (\u0394d2 > \u03c4cs). In this case, the\nclk2\u2019s sampling edge will arrive at the FF2 befor e q1new can change the d2current to\nd2new; thus, FF2 would load d2current as it should for nor mal cir cuit operation.\nThe circuit in Fig. 5.34 includes only two \ufb02ip-\ufb02o ps. In general, a\ncircuit may contain many  \ufb02ip-\ufb02ops, and the d input of each \ufb02ip-\ufb02op\nmay depend  on one or more q\u2019s. In this case, for the circuit to\noperate normally, the earliest time that a qnew can change a dcurrent\nis the sum of the minimum clock-to -q time (\u03c4cq\u2013min) and the\nminimum circuit propagation delay (\u03c4pd\u2013min). This implies that the\nrelationship in Eq. (5.12) must hold for the circuit to operate\ncorrectly:\nOtherwise, a dcurrent would change too quickly, such as in the\nscenarios a and b in Fig. 5.35, and would either cause a setup or\nhold time violation (scena rio a) or cause a functional error (scenario\nb). How close \u03c4cs can be to quantity \u03c4cq-min + \u03c4pd-min can be de\ufb01n ed\nin relation to the \u03c4ht (hold time) as shown in Eq. (5.13):\nFigure 5.36 illustr ates another circuit with possible clock skew\nproblems. In this case, the sampling edge of clk1 arrives at FF2\nbefor e the sampling edge of clk2 arrives at FF1.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1587, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "812d3851-a374-44b2-94df-58540d892a69": {"__data__": {"id_": "812d3851-a374-44b2-94df-58540d892a69", "embedding": null, "metadata": {"page_label": "335", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7295b5ed-3551-46b9-8585-d83ca6892395", "node_type": "4", "metadata": {"page_label": "335", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "59abbe9e1f3264d1889d55daa558d7320c51c9ba7a0b492e10b02f380df11676", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.36  Illustrating a potential clock sk ew pr oblem between a\ncurrent sampling edge and the ne xt sampling edge of ckl1; the d2\nsignal could be changing when the ne xt sampling edge of clk1\narrives at FF2.\nIn the \ufb01gure, a clock skew could create the followin g two possible\nscenarios between the time that clk2\u2019s sampling edge arrives at\nFF1 and the time that the next clk1\u2019s sampling edge arrives at FF2.\nThe two scenarios ar e described ne xt and illustrated in Fig. 5.37 :", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 482, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fb9fe461-854e-4cbb-8722-5620ded0e4b8": {"__data__": {"id_": "fb9fe461-854e-4cbb-8722-5620ded0e4b8", "embedding": null, "metadata": {"page_label": "336", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0ba57251-0a16-4042-8760-3ebf2c5f8a7e", "node_type": "4", "metadata": {"page_label": "336", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "eaf23e9ed0d387b2cf8d8753212cd14f4f2a061fbce6e75c955a6685a804081b", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.37  A timing diagram illustrating the e\ufb00ect of clock sk ew\nbetween the cur rent and the ne xt sampling edge of the clk1 (Fig.\n5.36 circuit).\nScenario a:\nThe propagation delay of d2 is about the same as the clock period (\u03c4) minus the clock\nskew (i.e., (\u0394d2 < \u03c4 \u2013\u03c4cs). In this case, the d2new may be changing when the next\nsampling edge of clk1 arrives at FF2; therefore, d2new may cause a setup or hold-time\nviolation at the FF2.\nScenario b:\nThe propagation delay of d2 is smaller than the clock period (\u03c4) minus the clock skew\n(i.e., \u0394 d2 < \u03c4 \u2013 \u03c4cs). In this case, d2new stabilizes prior to the arrival of the next clk1\u2019s\nsampling edge, and thus, FF2, as expected, would load d2new. Therefore, the circuit\nwould operate nor mally .\nExample 5.8 Consider the circuit in Fig. 5.34. Suppose \u03c4 = 0.65 ns, \u0394CC = 0.25 ns,\n\u0394delay  = 0.3 ns, \u03c4st = 0.05 ns, and \u03c4cq = 0.05 ns. Draw  a timing diagram and discuss if", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 913, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bdaa0f2b-5961-4839-834b-bddce0b55741": {"__data__": {"id_": "bdaa0f2b-5961-4839-834b-bddce0b55741", "embedding": null, "metadata": {"page_label": "337", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aa70feb9-2fcc-42b1-b670-634d996a1ffa", "node_type": "4", "metadata": {"page_label": "337", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "29df694ca15c316693604eac21836035379723933c9ca2933979c68847ff8e3d", "class_name": "RelatedNodeInfo"}}, "text": "there is a pr oblem due to clock sk ew.\nSolution  The timing diagram is illustrated in Fig. 5.38 . The signal d1current is sampl ed at\nthe positive edge of clk1 and thus, q1new becomes d1current \u03c4cq = 0.05 ns after clk1\nedge. At this time, q1new starts changing d2, and it would take \u0394CC = 0.25 ns for\nd2current to change to d2new from the time that \n  changes to q1new. This time is\n\u0394CC + \u03c4cq, or, in this case, 0.3 ns. Therefore, d2 will change exactly when FF2 starts\nsampling d2, resulting in setup time violation at FF2.\nFIGURE 5.38  A timing diagram illustrating a setup or hold-time\nviolation due to clock sk ew.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 619, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e300206d-3ca5-443f-bf2d-419fc84a895b": {"__data__": {"id_": "e300206d-3ca5-443f-bf2d-419fc84a895b", "embedding": null, "metadata": {"page_label": "338", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1df352b6-b749-4f92-a09e-88dc00117603", "node_type": "4", "metadata": {"page_label": "338", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f0a1f02fc1a0e060f7b26510b1633bf40e980a9a5bee138aab524a6203a2c7c4", "class_name": "RelatedNodeInfo"}}, "text": "5.6.1 Clock Frequency Estimation with\nClock Skew\nThe total estimated minim um clock period, which was discussed in\nChap. 4, did not include the time lost due to clock skew. As\nillustrated in Fig. 5.37 , the total time needed for a signal to stabilize\nbefor e the arrival of the next clock edge can be reduced by an\namount equa l to the clock skew. This implies that the minimum\nclock period must include  the delay caused by clock skew, as given\nin Eq. (5.14) [ 1].\n5.6.2 Asynchronous Interface\nSequential circuits that depend on external inputs, such as d1 in Fig.\n5.36, expect that an external signal always changes at the right\ntime with respect to the sampling edge of the clock. However, an\nexternal signal may change at any time if it is generated by an\ninput device, for example , a keyboar d, or it is the output of another\nsequential circuit that uses a di\ufb00er ent clock source. As a result, this\nmay violate the setup or hold time of the sequen tial circuit\u2019s \ufb02ip-\n\ufb02ops, causing metastability and possibly a malfunction.\nA recommen ded solution  [2\u20133] for resolving this problem is to\nsample the external inputs befor e they are fed into the target\nsequence circuit, as illustrated in Fig. 5.39(a). In the \ufb01gure, the\nexternal input is fed into a synchronizing \ufb02ip-\ufb02op . It is assumed\nthat any possible metasta bility caused by the input will be resolved\nby the synch ronizing \ufb02ip-\ufb02op befor e the next clock edge. That is, if\nthe input violates the setup or the hold time of the synchr onizing\n\ufb02ip-\ufb02op and causes the \ufb02ip-\ufb02op\u2019s output to oscillate (metastability),\nit is expecte d that the oscillating output would stabilize to 1 or 0\nbefor e the arrival of the next clock edge. Therefore, the sequential\ncircuit will input the synchr onized signal and potentially will avoid a\nmetastability of its own. This is illustrated by an example timing\ndiagram shown in Fig. 5.40 using  the circuit in Fig. 5.39(a).\nFurther more, a synchr onizing \ufb02ip-\ufb02op may be designed so its\noutputs stabilize quickly when the external input value changes at\nthe wr ong time, violating the \ufb02ip-\ufb02op\u2019s setup or hold time [ 4].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2109, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "816c1263-f6a2-4f2d-80bd-df4fcc5fca2d": {"__data__": {"id_": "816c1263-f6a2-4f2d-80bd-df4fcc5fca2d", "embedding": null, "metadata": {"page_label": "339", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2327da6d-0def-41cd-8d06-fc9fc7f37c48", "node_type": "4", "metadata": {"page_label": "339", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b732b941f15ecd35ddd16bde8cfeec7d900b18b5410fe6e782de43e7496afda8", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.39  Exter nal input synchr onization [ 1]: (a) using one\nsynchr onization \ufb02ip-\ufb02op; ( b) using two \ufb02ip-\ufb02ips to allow the\nmaximum metastability r esolution time.\nHowever, in order to avoid a potential metastability at the output\nof the synchr onizing \ufb02ip-\ufb02 op in Fig. 5.39(a) from ever entering the\nsequential circuit, two synchr onizing \ufb02ip-\ufb02ops are recommended, as\nillustrated in Fig. 5.39 (b).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 403, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "beaca39f-fd55-4935-a093-7bf97a456d95": {"__data__": {"id_": "beaca39f-fd55-4935-a093-7bf97a456d95", "embedding": null, "metadata": {"page_label": "340", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "13416d19-4476-4a9a-b430-a0fea55ab0a8", "node_type": "4", "metadata": {"page_label": "340", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3807ac8be0218cfa2ce7ec5c5e89867107a04902199cc777b1bd4e0aca97ba79", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.40  An e xample timing diagram illustrating the r esolution\nof a metastability due to an e xternal input.\n\u00a0\n5.7 Hardware Description Language\nModels\nExamples 5.9 and 5.10 present HDL models for Mealy and Moor e\nFSMs.\nExample 5.9 A Verilog behavior model for the Moor e sequence\nrecognizer in Example 5.1 that detects the overlapping sequence\n\u201c101\u201d is presented, wher e the code is divided into three sections as\nfollows:\nCode section 1: A behavior description of the NSG. It describes the\narcs of the recognizer\u2019s FSD. The FSD consists of four states labeled\nA to D.\nCode section 2: A behavior description of the OG. It describes the\nstate in which the recognizer outputs a 1, signaling the detection of\na \u201c101\u201d sequence.\nCode section 3: A behavior description of the \ufb02ip-\ufb02ops with\nasynchr onous reset capability . Upon reset, the FSM is initialized to\nthe initial state A .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 883, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d2a77c14-606f-4610-b23f-cab1e642539b": {"__data__": {"id_": "d2a77c14-606f-4610-b23f-cab1e642539b", "embedding": null, "metadata": {"page_label": "341", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "905d733b-b320-4f7d-80e6-ec347be1f6e5", "node_type": "4", "metadata": {"page_label": "341", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d779ef860e46b6b66d692a5f15ba0599ac4371af8955e1c7afbbe9522234a81e", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e574579d-3c8c-446b-9b9a-f9d2313b9c43": {"__data__": {"id_": "e574579d-3c8c-446b-9b9a-f9d2313b9c43", "embedding": null, "metadata": {"page_label": "342", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2dfd9ae9-4c98-4bd8-bfbc-0222226ab9f3", "node_type": "4", "metadata": {"page_label": "342", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9746aedcc8e2fd5a8181434c6cbfbc21dbb88099ef2e34d8227bc94c97520839", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7d30d1ce-2395-45d8-ad27-477d1300cdcd": {"__data__": {"id_": "7d30d1ce-2395-45d8-ad27-477d1300cdcd", "embedding": null, "metadata": {"page_label": "343", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a4f3f97d-2692-444f-b286-a4d89a655dc4", "node_type": "4", "metadata": {"page_label": "343", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3cdebb5859dcb8950949e22a3397c6de208bc952d4ef7e9e5167beb97115453b", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "853f4537-5804-4440-af1b-d1a9d2636676": {"__data__": {"id_": "853f4537-5804-4440-af1b-d1a9d2636676", "embedding": null, "metadata": {"page_label": "344", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "41cc6a27-4487-47d6-b684-fd5d26f1a835", "node_type": "4", "metadata": {"page_label": "344", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f29c32d8c49543684162e85f2b82142f56fc6f3cf1c0fa6432cd97d10ae49f4d", "class_name": "RelatedNodeInfo"}}, "text": "Simulation Output\nThe functional simulation output for the Moor e FSM is shown next.\nThe Moor e signal z becomes 1 at the simulation time slots 55 and\n75, indicating that there were two \u201c101\u201d sequences in the test\nvector .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 222, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2392e6b6-907b-4cfe-be46-6eff156bee98": {"__data__": {"id_": "2392e6b6-907b-4cfe-be46-6eff156bee98", "embedding": null, "metadata": {"page_label": "345", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8a8d01f5-6740-4108-97cd-8ae04ff9e1c4", "node_type": "4", "metadata": {"page_label": "345", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9ee7c8ff06b2ca553a4d888eee86936ad0b9b161aa9cc516d8380344bc0a3cd4", "class_name": "RelatedNodeInfo"}}, "text": "Example 5.10  A Verilog behavior model for the Mealy sequence\nrecognizer in Example 5.2 that recognizes the overlapping\nsequence \u201c101\u201d is presented, wher e the code consists of two\nsections as follows:\nCode section 1: A behavior description for the combined NSG and\nOG. However, note that a combined code for some larger designs\nmay create synthesizing problems, especially when PLDs with\nrestricted hardwar e resour ces are used. The code describes the\nMealy FSD. The FSD consists of only three states, labeled A, B, and\nC.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 524, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "029704d2-b38e-4046-8f38-435bb0ad0cfa": {"__data__": {"id_": "029704d2-b38e-4046-8f38-435bb0ad0cfa", "embedding": null, "metadata": {"page_label": "346", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b43723c8-9658-4f9f-9433-bc6872e5f5c7", "node_type": "4", "metadata": {"page_label": "346", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f62463dc122529e833c02ee6ae5d86c729c399bf0a357c4306ed7fa567663aab", "class_name": "RelatedNodeInfo"}}, "text": "Code section 2: A behavior description of the \ufb02ip-\ufb02ops with\nasynchr onous reset capability . Upon reset, the FSM is initialized to\nits initial state A .\nHDL Model", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 162, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1bba514-3bd0-45dd-8bc0-b65d9e1c7f13": {"__data__": {"id_": "d1bba514-3bd0-45dd-8bc0-b65d9e1c7f13", "embedding": null, "metadata": {"page_label": "347", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "faa39ab5-962e-4a54-a7ee-5e9d1fe4b294", "node_type": "4", "metadata": {"page_label": "347", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "22c1120980a5ae42a2b9bc2665489cf13a6eb741dba54a0daee5302d92f1b7d1", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a89614f1-840a-45c9-a643-4d41e1a66157": {"__data__": {"id_": "a89614f1-840a-45c9-a643-4d41e1a66157", "embedding": null, "metadata": {"page_label": "348", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "58b8f63e-4b5d-4c68-8925-4db416b624ef", "node_type": "4", "metadata": {"page_label": "348", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b4254c5b0a5219ebdf1c5ba187ffafb8c13ceb38aa74e8778d9497087fbf608d", "class_name": "RelatedNodeInfo"}}, "text": "Simulation T est-Bench\nThe test-bench is the same as the one given in Example 5.9, with\nthe e xception that \u201cmealy_seq.v \u201d is instantiated instead.\nSimulation Output\nThe functional simulation output for the Mealy FSM is given next.\nNote that, in this case, the Mealy output z depends on the current\nstate as well as the input x. If x changes, so might z. On the other\nhand, in the case of the Moor e machine, the input x a\ufb00ects the\nMoor e output z on the next clock cycle.  Here, Mealy -z is 1 at the\nsame time as when the last bit of the target sequence \u201c101\u201d is\nenter ed at the simulation times 50 and 70.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 607, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c917cac0-2364-479a-83d6-f51dfeb7e7f0": {"__data__": {"id_": "c917cac0-2364-479a-83d6-f51dfeb7e7f0", "embedding": null, "metadata": {"page_label": "349", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "faa9b7cd-ec6c-478b-a740-249ed26ec60f", "node_type": "4", "metadata": {"page_label": "349", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b5bdb8b52f5d192fdac87ffb0044441fc5d46a958fbf2111d71b3c97e5219b6b", "class_name": "RelatedNodeInfo"}}, "text": "5.7.1 Synthesis and Simulation\nThe Verilog model for the Mealy sequence recogn izer in Example\n5.10 was synthesized and simulated using the Altera Quartos II and\nModelSim design and simulation tools. The synthesized circuit is\nshown in Fig. 5.41 and its simulation wavefor m is shown in Fig.\n5.42. As illustrated in the timing diagram, signal z becomes 1 each\ntime x inputs indicates a \u201c101\u201d sequence.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 401, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e8fa8d8e-1fed-4d17-a188-a4d2800e3872": {"__data__": {"id_": "e8fa8d8e-1fed-4d17-a188-a4d2800e3872", "embedding": null, "metadata": {"page_label": "350", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0881a790-589c-4e7b-9b61-81283ad36e34", "node_type": "4", "metadata": {"page_label": "350", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "81233dc69200c67823e5b277ac04cb099a3d85619e9d03fe68e37e9bd6c633b9", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 5.41  The synthesized cir cuit of the Mealy sequence\nrecognizer of Example 5.10.\nFIGURE 5.42  A simulation wavefor m for the synthesized Mealy\nsequence r ecognizer in Fig. 5.41 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 185, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3d91e25a-c8db-4659-9d34-aa5ba793684a": {"__data__": {"id_": "3d91e25a-c8db-4659-9d34-aa5ba793684a", "embedding": null, "metadata": {"page_label": "351", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3fa928d2-45f8-4142-af82-9e149e3f82ee", "node_type": "4", "metadata": {"page_label": "351", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4a6f14e079f8971ca762857dec0fd45020364484857d096e1a26e460bea99524", "class_name": "RelatedNodeInfo"}}, "text": "References\n1. E. G. F riedman, ed., Clock Distribution Networks in VLSI Cir cuits\nand Systems , IEEE P ress, 1995.\n2. Wakerly, J. F ., Digital Design: P rinciples and P ractices , 4th ed.,\nPrentice Hall, 2006.\n3. Cypr ess Semiconductor, \u201c Are Your PLDs Metastable?\u201d May\n1992, R evised Mar ch 6, 1997.\n4. Ryan Donohue, Synchr onization in digital logic cir cuits, L ectur e\nnotes, Stanfor d University .\n5. Shomit Das, Comparison of synchr onization techniques in\npointer FIFOs, T echnical r eport, University of Utah, 2009.\n\u00a0\nExercises\n5.1. Use Espr esso to minimize the truth tables for the F SD in Fig.\n5.7 and draw the minimized cir cuit. Is your solution the same\nas that shown in Fig. 5.8 ?\n5.2. Consider a 1-bit 4-to -1 MUX lik e the one given in Fig. 5.10 .\nUse the MUX and design a 1-bit four -function r egister slice\nthat perfor ms synchr onous clear when F = f1 f0 = 0, parallel-\nload when F = 1, arithmetic right shif t when F = 2, and right\nshift with a lef t input (li) when F = 3. Then, use four copies of\nthe slice to draw the details of a 4-bit four -function r egister\nshowing all the signal connections to each MUX.\n5.3. Deter mine the minimum clock period for the bit-serial\nmultifunction r egister given in Fig. 5.9  wher e \u03c4st and \u03c4cq are\neach assumed to be 0.1 ns and delay for NOT and NAND\ngates ar e each 0.1 ns.\n5.4. Deter mine the minimum clock period for the bit-parallel\nmultifunction r egister given in Fig. 5.11  in ter ms of \u03c4st, \u03c4cq,\nand delay of a NAND gate, and assuming only 2-to -1 MUXs\nare available.\n5.5. R efer to Ex ercise 5.2. This time, design the 4-bit r egister\ndirectly fr om a 4-bit 4-to -1 MUX and a 4-bit parallel-load", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1667, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "95abdb68-54a0-44c8-b642-f680fa633a93": {"__data__": {"id_": "95abdb68-54a0-44c8-b642-f680fa633a93", "embedding": null, "metadata": {"page_label": "352", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0bce934-aec1-4f8d-a4d1-a58ea3213057", "node_type": "4", "metadata": {"page_label": "352", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a631c60c81c55018f3e658b2d2e3058bb03a2e88ae3aad1d74ab7527d9fa0f60", "class_name": "RelatedNodeInfo"}}, "text": "register .\n5.6. Design an 8-bit multifunction r egister with asynchr onous\nreset that perfor ms parallel load, cir cular right shif t, or\ncircular lef t shif t.\n5.7. V erify that the cir cuit in Fig. 5.16  works cor rectly by\nconstructing a truth table with cur rent state bits q1 and q0,\ninput x, next state bits d1 and d0, and output z. After reset,\nthe \ufb02ip-\ufb02ops initialize to q1 = 0 and q0 = 0. Enter these\nvalues in the table as they indicate the cur rent state of the\nFSM. Ne xt, set x = 1 and deter mine the values of d1, d0, and z\nusing the e xpressions in Eq. (5.2). Enter these values in the\ntable. Now assume the clock signal mak es a 0-1 transition\nand thus changes the values of q1 and q0 to those of d1 and\nd0. Enter the new values of q1 and q0 in the table, and r epeat\nthe pr ocess for the ne xt values of x in or der as 1, 0, 1, 0, 1,\nand 0. F rom the z values, deter mine if the cir cuit works\ncorrectly.\n5.8. Design a Moor e sequence r ecognizer that detects the\nnonoverlapping sequence \u201c101.\u201d Use binary encoded state\nlabels and design and draw the cir cuit schematic similar to\nthe one shown in Fig. 5.16 .\n5.9. Design a Mealy sequence r ecognizer that detects the\nnonoverlapping sequence \u201c101.\u201d Use binary encoded state\nlabels and draw the cir cuit schematic similar to the one\nshown in Fig. 5.16 .\n5.10. Design a Moor e sequence r ecognizer that detects the\noverlapping sequence \u201c1001.\u201d Use binary encoded state\nlabels.\n5.11. Design a Mealy sequence r ecognizer that detects the\noverlapping sequence \u201c1001.\u201d Use binary encoded state\nlabels.\n5.12. Consider the F SD in Fig. 5.13 . Use the binary encoded state\nlabels 11, 01, 10, and 00, in or der, for the states A to D. Draw\nthe cir cuit, making sur e that upon r eset, the F SM starts at\nstate 11 (A). Compar e the size of the combinational cir cuits\nwith those in Fig. 5.15  and Fig. 5.17 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1864, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "10bde0fd-9fbd-47ee-b599-a3d874d61cc3": {"__data__": {"id_": "10bde0fd-9fbd-47ee-b599-a3d874d61cc3", "embedding": null, "metadata": {"page_label": "353", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "00f2a5f1-29b0-4ee5-b6d1-1c310efee388", "node_type": "4", "metadata": {"page_label": "353", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f4871a5bf1b1091eaf9492f2a151ffb8cb4e98860414544828924da3bf38b9d8", "class_name": "RelatedNodeInfo"}}, "text": "5.13. Design a Mealy sequence r ecognizer that detects the\noverlapping sequence \u201c1001.\u201d Use one-hot state labels and\nuse Espr esso to minimize the combined truth table.\n5.14. F ormally design a JK \ufb02ip-\ufb02op using a D \ufb02ip-\ufb02op (also see\nChap. 4 ).\n5.15. Simulate the following cir cuits modeled in V erilog as\nspeci\ufb01ed:\na. Design the F SM in Example 5.1, but use the\nexpressions given in Eq. (5.2).\nb. Design the F SM in Example 5.1 by dir ectly describing\nthe F SD.\n5.16. Consider the F SD in Fig. 5.22 . Design the cor responding F SM\nusing binary encoded labels and compar e the cir cuit size with\nthe one in Fig. 5.15 .\n5.17. Design a bit-serial mod-11 counter (also r efer to Fig. 5.28 )\nwith asynchr onous active-low r eset.\n5.18. Design a bit-parallel mod-11 counter (also r efer to Fig. 5.31 )\nwith asynchr onous active-low r eset.\n5.19. Simulate the following cir cuits modeled in V erilog as\nspeci\ufb01ed:\na. Model the 1-bit binary counter slice given in Fig. 5.28\nand then use it to design the counter in Ex ercise 5.17.\nb. Use behavioral models for an adder, an MUX, and a\nparallel-load r egister and then use them to design the\ncounter in Ex ercise 5.18.\nc. A complete behavioral model for the counter in\nExercise 5.18.\n5.20. Design a mod-4 up/down counter (not a counter slice) with\nasynchr onous active-low r eset.\n5.21. Design a mod-4 up/down counter (not a counter slice) with\nboth synchr onous and asynchr onous r eset capabilities.\n5.22. Design a 3-bit gray -code counter with both synchr onous and\nasynchr onous r eset signals.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1539, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cb713036-59dd-40ee-abaf-a6fdecd82038": {"__data__": {"id_": "cb713036-59dd-40ee-abaf-a6fdecd82038", "embedding": null, "metadata": {"page_label": "354", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7ea9d83-d97b-4d8d-b994-266604edd55c", "node_type": "4", "metadata": {"page_label": "354", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0c82444706155eb6011d9cc21f30a7cc0b4bf3fcd82eefe9d0c1e3221fa414c4", "class_name": "RelatedNodeInfo"}}, "text": "5.23. Non-r eturn-to-zero inverted (NRZI) is a data coding scheme\nused to communicate with universal serial bus (USB) devices.\nThe output signal (z) of an NRZI generator transitions when\nthe input bit ( x) is 0 and r emains at the constant pr evious\nvalue (0 or 1) when the input bit is 1. That is, fr om right to\nleft, when the input to the NRZI generator is 0 0 0 0 0 0, its\noutput fr om right to lef t will transition as 1 0 1 0 1 0. Its\noutput for consecutive 1\u2019s at the input, however, will r emain\nat the pr evious output value. F or example, the NRZI\ngenerator outputs fr om right to lef t z: 0 0 0 0 0 1 0 1 1 1 1 0 1\n0 1 1 for input X: 1 1 1 1 0 0 0 1 1 1 0 0 0 0 1 1 r ead fr om\nright to lef t. Lik ewise, for X = 0xCF0C, Z: 0xEF AE. Design the\nNRZI generator . (Hint: design a Mealy F SM).\n5.24. Suppose an F SD has \ufb01ve states. Use the Hamming coding\nscheme and generate \ufb01ve Hamming codes to label the states.\nEach pair of labels should have a Hamming distance of 3 or\nmore.\n5.25. Cr eate and simulate a V erilog model for the fault-tolerant\nFSM in Example 5.7. Speci\ufb01cally, copy the entries of Table\n5.12 to an Ex cel sheet. Then use the Ex cel \u201cconcatenate\u201d\nfunction to concatenate bits q4 to q0 and x in each r ow into a\n6-bit binary number . Do the same for bits d4 to d0 and z. (You\nmay also use the Ex cel \u201cbin2he x\u201d function to convert the\nconcatenated 6-bit numbers to a 6-bit he x). Then sort the\ntable so the r ows of the table for the cur rent state bits and x\nin the Ex cel sheet ar e in ascending or der. Then cr eate two\ncolumns and use concatenation to convert the two 6-bit\nentries to a syntactically cor rect V erilog statement to be used\nin a \u201ccase\u201d statement. F or example, 000000 for the q\u2019s and x\nis written as \u201c6\u2019b000000:\u201d and 000000 for the d\u2019s and z is\nwritten as \u201c{d, z} = 6\u2019b000000;\u201d wher e d would be declar ed\nas a 5-bit ne xt state variable in V erilog. Copy the two columns\nfrom Ex cel into a V erilog te xt editor and model the F SM using\na combined model for the NSG and OG modules. F or\nsimplicity, model the \ufb02ip-\ufb02ops with a common r eset but\nseparate pr eset signals. In the test-bench, use the pr eset\nsignals to cause a 1-bit fault; that is, change a q = 0 to 1. The\nFSM should continue operating as if ther e wer e no faults.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2273, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cb9497f2-e42d-4695-b852-82ca391d35e7": {"__data__": {"id_": "cb9497f2-e42d-4695-b852-82ca391d35e7", "embedding": null, "metadata": {"page_label": "355", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "927edddb-f50b-4b6c-ade9-0a1d82003e16", "node_type": "4", "metadata": {"page_label": "355", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3c59bf926619a51c86228af1b514f15e280e0b0813a0ec5bc14ac3707fd8f487", "class_name": "RelatedNodeInfo"}}, "text": "5.26. Design a fault-tolerant mod-4 up-counter (not a counter\nslice).\n5.27. Consider the cir cuit given in Fig. 5.15 . Without altering its\ncombinational cir cuits, use the Hamming er ror detection\nscheme and add modules to the cir cuit so it would operate as\na single-bit fault-tolerant F SM.\n5.28. A serial adder inputs 2-bits x and y and outputs their sum-bit\ns every clock cycle. It k eeps the pr esence or the absence of a\ncarryout bit inter nally. Assuming that the initial car ry-in is\nzero, do the following:\na. Draw a Mealy F SD for the serial adder .\nb. Design the Mealy serial adder F SM.\nc. Draw a Moor e FSD for the serial adder .\nd. Design the Moor e serial adder F SM.\ne. Design a fault-tolerant Mealy serial adder .\n5.29. Consider the cir cuit in Fig. 5.34 . Suppose \u0394CC = 0.3 ns, \u03c4sc =\n0.2 ns, \u03c4st = 0.05 ns, \u03c4cq = 0.05 ns. Assuming that \u03c4 = 0.6 ns,\ndraw a timing diagram and discuss if ther e can be pr oblems\nin operating the cir cuit due to clock sk ew.\n5.30. Consider the cir cuit in Fig. 5.36 . Suppose \u0394CC = 0.3 ns, \u03c4sc =\n0.2 ns, \u03c4st = 0.05 ns, and \u03c4cq = 0.05 ns. Assuming that \u03c4 =\n0.6 ns, draw a timing diagram and discuss if ther e can be\nproblems in operating the cir cuit due to clock sk ew.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1218, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "67887cfa-8fca-44b8-83ad-ddbfd302b0c0": {"__data__": {"id_": "67887cfa-8fca-44b8-83ad-ddbfd302b0c0", "embedding": null, "metadata": {"page_label": "356", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "db65070d-ecb1-4206-8ebf-fc81d8e3bbe3", "node_type": "4", "metadata": {"page_label": "356", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "6bf6a99bb4050fdcb6390297892a66fb50eb1c6b819779ecbb58a794c432ac3c", "class_name": "RelatedNodeInfo"}}, "text": "5.31. Consider the cir cuit in Fig. 5.36 . Suppose \u0394CC = 0.3 ns, \u03c4sc =\n0.2 ns, \u03c4st = 0.05 ns, and \u03c4cq = 0.05 ns. Assuming \u03c4 = 0.7 ns,\ndraw a timing diagram and discuss if ther e can be pr oblems\nin operating the cir cuit due to clock sk ew.\n5.32. Consider a har dwar e FIFO bu\ufb00er with input and output ports\naccessed by two sequential cir cuits A and B that perfor m\nconcur rent computations [ 4\u20135]. Cir cuit A generates IN as the\nnext bu\ufb00er location to write a value to, and cir cuit B\ngenerates OUT as the ne xt bu\ufb00er location to r ead a value\nfrom. T wo counters, X and Y, each contr olled by one of the\ncircuits, ar e used to generate the IN and OUT values,\nrespectively . The bu\ufb00er operates in a cir cular fashion. The two\ncircuits, and thus their r espective counters, also operate with\ntwo di\ufb00er ent clocks. Cir cuits A and B also need to input IN\nand OUT values in or der to deter mine when the bu\ufb00er is full\nor empty . Do the following:\na. Draw the block diagrams of cir cuits A and B, counters,\nand the bu\ufb00er with labels and signal names. IN is an\nasynchr onously input to cir cuit B, and OUT is an\nasynchr onous input to cir cuit A . Use two synchr onizing \ufb02ip-\n\ufb02ops for each bit.\nb. Suppose the bu\ufb00er size is 8 and X and Y ar e designed\nas mod-8 counters. Assuming that IN is 6, list the possible\nvalues cir cuit B may input as IN fr om the synchr onizing \ufb02ip-\n\ufb02ops. Discuss how the bu\ufb00er empty \ufb02ag can be generated\nif input IN to cir cuit B is not 3.\nc. Repeat part (b), but this time assume X and Y ar e\ndesigned as Gray code counters.\n5.33. Computer security (har dwar e Trojans): See Ex ercise 11.12 to\nunderstand single-input trigger computational malicious\ncircuits (also see Sec. 11.2).\n5.34. Computer security (har dwar e Trojans): See Ex ercise 11.13 to\nunderstand timer attack malicious cir cuits (also see Sec.\n11.2).\n5.35. Computer security (con\ufb01dentiality): See Ex ercise 11.14 to\ndesign a har dwar e encryption cir cuit (also see Sec. 11.5).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1967, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dcc7ee51-3e67-4981-8e73-19a08fa02a3b": {"__data__": {"id_": "dcc7ee51-3e67-4981-8e73-19a08fa02a3b", "embedding": null, "metadata": {"page_label": "357", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7b6d2bf-2ce8-4505-852d-123a1424fd5d", "node_type": "4", "metadata": {"page_label": "357", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "790d7ed3615ba26071b0b14d873f3fbe16320e7a8a7d37346a4e977fc270b0b3", "class_name": "RelatedNodeInfo"}}, "text": "5.36. Computer security (computer security thr eats): See Ex ercise\n11.15 to understand computer security thr eats (also see Sec.\n11.1.3).\n5.37. Computer security (har dwar e developmental thr eats): See\nExercise 11.16 to understand homomorphic encryption as a\nhardwar e developmental security policy mechanism (also see\nSecs. 11.1.3 and 11.2).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 344, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae70a06f-eec7-4f3d-95e8-687b5e5ec363": {"__data__": {"id_": "ae70a06f-eec7-4f3d-95e8-687b5e5ec363", "embedding": null, "metadata": {"page_label": "358", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8db30909-9db2-4429-9f5d-22b4c6a91b08", "node_type": "4", "metadata": {"page_label": "358", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d871525458b10c3f3d326f4129a6df2680d56ee44e2b07d42cb4bf20f08a0ed9", "class_name": "RelatedNodeInfo"}}, "text": "CHAPTER 6\nSequential Circuits: Large\nDesigns\n\u00a0\n6.1 Introduction\nA large sequential circuit is made of a data path and a contr ol unit,\nas illustrated in Fig. 6.1. The data path consists of both sequential\nand combina tional circuit modules, such as registers, counters,\nmultiple xers (MUXs), decoders, arithmetic logic unit (ALUs), and\nothers, that are either standar d or problem speci \ufb01c. The modules\ncollectively implement a list of simple operations,  such as adding\nthe content of two registers and storing the result in a third register .\nThe contr ol unit is respon sible for asserting the necessary contr ol\nsignals for the data path to carry out an operation. A data path may\nperfor m one or mor e operations during each clock cycle.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 742, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "69fd9cdf-86e6-41d8-ac4a-1946979f557d": {"__data__": {"id_": "69fd9cdf-86e6-41d8-ac4a-1946979f557d", "embedding": null, "metadata": {"page_label": "359", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dd35f9a1-5a21-4e9b-8a74-7c216306b78f", "node_type": "4", "metadata": {"page_label": "359", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8f00263d863b3d8edc3eba7e2f36288c91fca8d2f46e419bf485142780dedeb9", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 6.1 A diagram block of a lar ge sequential cir cuit.\nEach data path operation  requir es one or more inputs as data\nand generates one or more outputs, wher e each is then stored in a\nregister or memory . An operation may also use one or more\ncombinational circuit modules to compute an output. Two or more\noperations may share some or all of the comb inational circuit\nmodules in the data path. For example, two operations that\ncompute a sum but use data values read from di\ufb00er ent sources\nmay shar e an adder to r educe har dwar e.\nA data path may also perfor m one or more operations\nconditionally, depending on the value of a signal either internal to\nthe data path or generated by another module external to the data\npath. Arithm etic over\ufb02ow \ufb02ag, a speci\ufb01c register bit value, and a\nspeci\ufb01c counter value are examples of signals internal to the data\npath that indicate a condition. Exter nal event-triggering signals,\nsuch as a signal starting the contr ol unit, a signa l generated by a\nkeystr oke, and a signal indicating a memory data is available to\nread, are examples of conditions indicated by external signals to\nthe data path.\nThere are alternative architectur es to design data paths and\ncontr ol units. Many factors, including operating clock frequency and\nhow often results should be generated, a\ufb00ect the architectur e of a\ndata path. A high clock frequency implies that the data path has a", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1413, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bb6e0f04-0e54-4b28-ade1-e6da52e044ce": {"__data__": {"id_": "bb6e0f04-0e54-4b28-ade1-e6da52e044ce", "embedding": null, "metadata": {"page_label": "360", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "60b45658-c9ce-4001-8283-f7206e997e43", "node_type": "4", "metadata": {"page_label": "360", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "23d636bef9f5f91ab710eb1c7d2728c507e1cafe627876b11344fbbdfb83ced1", "class_name": "RelatedNodeInfo"}}, "text": "short maximum propagation delay, which deter mines how fast\nresults can be generated.  However, there is a relationship between\na circuit\u2019s clock frequenc y and its number of transistors with the\namount of power the circuit consumes, which deter mines how\nmuch heat the circuit can dissipate. As was mentioned in Chap. 1,\nthere is a limit to how fast a sequential circuit may operate and still\nremain within  the allowable temperatur e range using a fan cooling\nsystem. In practice, the amount of heat an integrated circuit (IC),\nsuch as a processor, can dissipate on average sets a limit on how\nhigh its clock frequency can be and how many transistors it can\ncontain using cur rent chip technologies.\nIn this chapt er, we examine di\ufb00er ent data path and contr ol unit\narchitectur es, illustrate their organizations, and estimate\nperfor mance parameters. We also present power and energy usage\nmodels for a comple x sequential circuit, discuss how such models\nmay be used to reduce power consumption, and how to estimate\nthe ener gy e\ufb03ciency of a comple x sequential cir cuit.\n6.1.1 Register Transfer Notation\nA register transfer notati on (RTN) is used to formally describe an\noperation of a data path. Each operation generates a result that\nmust be stored in a stora ge module such as a register or memory .\nThe syntax for RTN is arbitrary . For example, R3 \u2190 R1 + R2 that\ninvolves three registers, R1, R2, and R3, is an RTN. The left arrow\n(\u2190) indicates that the sum of the two register contents will be\nstored in register R3 during the next clock cycle. Table 6.1 presents\nsome RTN syntax example s used in this book. Some  of the syntax is\nborrowed fr om the V erilog har dwar e description language (HDL).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1711, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0c81ce65-235e-4467-a6a0-88b9c84ec756": {"__data__": {"id_": "0c81ce65-235e-4467-a6a0-88b9c84ec756", "embedding": null, "metadata": {"page_label": "361", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8f4aa600-f146-4a8f-b379-8f0af6bc647e", "node_type": "4", "metadata": {"page_label": "361", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "14e9d62d9f8d8d02aadcd4b2f88e1070f7f860c595d1a618994a3925b3d7d4e2", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  6.1 RTN Syntax Examples Using Both an Arbitrary Syntax and V erilog HDL Syntax\n\u00a0\n6.2 Data Path Design\nThe architectur e of a data path can be classi\ufb01ed as single-cycle ,\nmulticycle , or pipelined . A single-cy cle data path requir es more\nhardwar e but a simpler contr ol unit. A multicycle data path requir es\nless hardwar e but generates results in steps using several clock\ncycles. A pipelined data path also requir es more hardwar e but can\noperate on multiple inputs concur rently. Pipelining is only e\ufb03cient\nwhen ther e are many inputs to pr ocess.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 561, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df2bf765-76c0-47d1-b299-699d2ca2bb57": {"__data__": {"id_": "df2bf765-76c0-47d1-b299-699d2ca2bb57", "embedding": null, "metadata": {"page_label": "362", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c952c7dc-0543-4dfa-8d6b-5601458c8fc7", "node_type": "4", "metadata": {"page_label": "362", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "da8b48146ce0afd45023618b3a140cec82ed804ecffe6d9f48322a7f93437381", "class_name": "RelatedNodeInfo"}}, "text": "Example 6.1.  The design and perfor mance of single-cycle, multicycle, and pipelined data\npaths performing one or more RTN operations of the type R \u2190 A + B + C \u00b1 D is presented.\nA to D represent values read simultaneo usly from some registers or mem ory. The pipeline\ndata path, however, will perfor m Ri \u2190 Ai + Bi + Ci \u00b1 Di for i = 0, 1, 2, 3, etc.\nThe RTNs R \u2190 A + B + C + D and R \u2190 A + B + C \u2013 D do not\nrepresent operations a typical CPU instruction perfor ms, as we will\nsee in Chap. 8. Such RTNs would be consider ed fused operations,\nrequiring computations perfor med on three or more data values. A\ntypical arithmetic instruction operates on two data values. Here,\nthe RTNs are used to illustrate and compar e single-cycle,\nmulticycle, and pipelined data path designs. However, some CPUs\n(e.g., [1]) have instructions that perfor m fused operations  on\nthree data values, such as multiply -add (R \u2190 A + B \u2217 C), a common\noperation used in computations involving matrice s. If A, B, and C\nare \ufb02oating-point (FP) numbers, a fused operation has the\nadvantage of producing a result in memory with only one rounding\nerror (see Sec. 3.8.3 ). Done separately with two instructions, the\nresult of B \u2217 C, if stored in memory, will result in one rounding\nerror, and the result of adding A to the memory content,  again if\nstored in memory, will r esult in another r ounding er ror.\nOther examples include custom instructions that perfor m fused\noperations as proposed in the design of con\ufb01gura ble CPUs [2]. In\nthis case, the dependent operations perfor med by a set of\ninstruction sequences within a program loop can be combined into\na single custom instruction with fused operations. The new\ninstruction replaces the instruction sequence within the loop, and\nthus increases perfor mance by reducing the number of instructions\nthat must be fetched fr om memory .\nThe SIMD architectur e, which was discussed in Chap. 1, is\nanother variation of instructions that operate on multiple data\nvalues. In this case, howe ver, each SIMD instructi on speci\ufb01es only\none operation that is perfor med simultaneously and with no data\ndependency on multiple data values. The design of contr ol units for\neach of the thr ee data paths is discussed in Sec. 6.4 .\n6.2.1 Single-Cycle\nFigure 6.2 illustrates a single-cycle data path that computes either\nthe quantity A + B + C + D or A + B + C \u2013 D and stores the result in", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2399, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae1b25bc-5bcb-46a9-bb46-4fd990eb1b11": {"__data__": {"id_": "ae1b25bc-5bcb-46a9-bb46-4fd990eb1b11", "embedding": null, "metadata": {"page_label": "363", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "33fae1a3-763a-4980-ae79-0d29c5ae30b9", "node_type": "4", "metadata": {"page_label": "363", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1fbd864e3fef8828207dac522ca75276835b50154bb687be6f50ee63273827f9", "class_name": "RelatedNodeInfo"}}, "text": "register R within one clock cycle. The data path contains two adder\n(+) modules and one adder/subtractor (+/\u2013) module. The signal\nmode  contr ols the functions of the adder/subtractor module. If\nmode  = 0, the data path perfor ms R \u2190 A + B + C + D; otherwise, it\nperfor ms R \u2190 A + B + C \u2013 D.\nFIGURE 6.2 A single-cycle two -function data path that computes\neither A + B + C + D or A + B + C \u2013 D in one clock cycle.\nEquation (6.1) estimates the minimum clock period requir ed to\nrun the data path. The period is proportional to the propagation\ndelay of the longest signal path that starts from the inputs of the\n\ufb01rst adder and ends at the input of the r egister .\nIn general, if a single-cyc le data path implements several simple\nand comple x operations, its minimum clock period would be\nproportional to the time requir ed to complete the most comple x\noperation. Therefore, both simple and comple x operations would\neach requir e the same amount of time to complete. This will\nincrease the total time needed to complete a task that requir es\nboth simple and comple x operations.\n6.2.2 Multicycle", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1096, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f3e70fd5-da19-44ab-91eb-4c16ecfca0e3": {"__data__": {"id_": "f3e70fd5-da19-44ab-91eb-4c16ecfca0e3", "embedding": null, "metadata": {"page_label": "364", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b7d7ddc-01a0-437c-9dff-20f3352a1ab2", "node_type": "4", "metadata": {"page_label": "364", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "065ec6a2a7bf3ecd4243525692f1ce31c73d8906f8d2eae1fc75a8993185e9c7", "class_name": "RelatedNodeInfo"}}, "text": "A multicycle data path requir es that a computation be divided and\ncompleted in steps, each requiring a simple data path operation.\nFigure 6.3 illustrates a multicycle data path with a single\nadder/subtractor and two multiple xer (MUX) modules. The data\npath can perfor m \ufb01ve possible simple operations as R \u2190 A, R \u2190 R +\nB, R \u2190 R + C, R \u2190 R + D, or R \u2190 R \u2013 D. The followin g algorithm\nimplements R \u2190 A + B + C \u00b1 D using four clock cycles:\nA multicycle algorithm to implement R \u2190 A + B + C \u00b1 D:\nCycle 1: R \u2190 A\nCycle 2: R \u2190 R + B\nCycle 3: R \u2190 R + C\nCycle 4: If mode  == 0 then R \u2190 R + D; otherwise, R \u2190 R \u2013 D\nFIGURE 6.3 A multicycle data path r equiring four clock cycles to\ncompute A + B + C + D or A + B + C \u2013 D.\nThe clock period of a multicycle data path is also proportional to\nthe delay of its longest signal path. In this case, the longest path\nstarts from the inputs of the MUX1 through the adder/subtractor\nmodule and ends at the input of the register . Equation (6.2)\nestimates the minimum clock period of the data path. Note that the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1041, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6d9aeaa1-259c-430c-8306-3beba2275b78": {"__data__": {"id_": "6d9aeaa1-259c-430c-8306-3beba2275b78", "embedding": null, "metadata": {"page_label": "365", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "868c4946-0500-4f37-9fc2-afbfa857a3ef", "node_type": "4", "metadata": {"page_label": "365", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7e16895d5d669e96a47f93abf70fb08e1ed31f8ce04334c1d507bebc721936b0", "class_name": "RelatedNodeInfo"}}, "text": "propagation delay of a MUX is less than that of an adder . Therefore,\nthe estimated minimum clock period of the multicycle data path is\nshorter than that of the single-cycle data path. However, the\nmulticycle algorithm requir es four clock cycles to complete the task\nversus one clock cycle r equir ed by the single-cycle data path.\nA multicycle  data path has the advantage of reducing the\nrequir ed total hardwar e. In the \ufb01gure, a single adder/subtractor\nmodule is used several times to produce the \ufb01nal result. In general,\na multicycle data path is also advantageous if it perfor ms both\nsimple and comple x computations. In this case, fewer clock cycles\nwould be requir ed to complete a simpler compu tation and more\ncycles to complete a complex one. Therefore, it will reduce the total\nnumber of clock cycles requir ed to complete a task. In addition,\ncompar ed to a single-cycl e data path, a multicycle data path would\nrequir e a higher -frequency (shorter period) clock. A single-cycle\ndata path, on the other hand, would r equir e a slower (longer period)\nclock but would use only one clock cycle to perfor m each simple or\ncomple x computation.\n6.2.3 Pipelined\nA pipelined data path,  or pipeline  for short, is the ideal\narchitectur e for processing a stream of data. For example, consider\nadding N pairs of FP numbers one pair at a time, to generate N\nsums, or consider executing N assembly instructions. When\nprocessing in a pipelined  fashion, a computation is divided into a\nset of depen dent opera tions, much like the ones used for the\nmulticycle data path, wher e each is perfor med in a separate\nsubdata path called a pipeline stage .\nThe stages do not share any modules and are separated by\nparallel-load registers forming an assembly line, like a car-\nmanufacturing assembly line discussed in Chap. 1. All the stages\noperate concurrently to process a stream of data. For example,\nconsider the problem of computing N quantities, each Ai + Bi + Ci \u00b1\nDi for i = 0 to N \u2013 1. Each Ai to Di identi\ufb01es four data items , such as\nthe ith element from four di\ufb00erent arrays. One way to divide each", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2108, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e888290c-4fa5-483b-8979-8132dc3e66ee": {"__data__": {"id_": "e888290c-4fa5-483b-8979-8132dc3e66ee", "embedding": null, "metadata": {"page_label": "366", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "60b39855-be2f-412b-a014-67b2b40b7429", "node_type": "4", "metadata": {"page_label": "366", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9713af7e2cce42e99add2c3cd3cc1b8df06a606d436fe309752df5b259ea42ab", "class_name": "RelatedNodeInfo"}}, "text": "computation Ai + Bi + Ci \u00b1 Di to its set of dependent operations is\nas follows:\nFigure 6.4 illustrates the architectur e of a pipelined data path\nwith three stages labeled 1 to 3. Three sets of registers are used to\nseparate the result gene rated by each stage. In the \ufb01gure, the\npipeline receives a set of four values, Ai, Bi, Ci, and Di, from an\nexternal module and sends the result Ri, also to an external\nmodule. During each clock cycle, stage 1 takes its inputs from an\nexternal data source, stage 2 takes its inputs from stage 1, and\nstage 3 takes its inputs from stage 2. Therefore, all three stages\noperate concur rently during each clock cycle.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 653, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f4ae8b7-d195-475b-b539-4a0b32494b70": {"__data__": {"id_": "9f4ae8b7-d195-475b-b539-4a0b32494b70", "embedding": null, "metadata": {"page_label": "367", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fc69de6d-d34f-4492-aa46-e919852178de", "node_type": "4", "metadata": {"page_label": "367", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2acf796b18e88729ce83633bf4138985b7943f16684ca8512d6a015ae3d0556e", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 6.4 A two -function pipelined data path computing a str eam\nof quantities Ai + Bi + Ci \u00b1 Di for i = 0, 1, 2, etc.\nFigure 6.5 shows two di\ufb00er ent pipeline chart  styles for\nillustrating pipelining. Note the charts do not include the one-cycle\ndelay caused by the interfacing registers shown in Fig. 6.4. The\npipeline chart in Fig. 6.5(a) has a horizontal organization, with the\nclock cycles shown on the x-axis. On the other hand, the chart in\nFig. 6.5(b) has a vertical organizatio n, with the clock cycles shown\non the negative y-axis.\nFIGURE 6.5 Two alter native pipeline charts: ( a) from lef t to right; ( b)\nfrom top to bottom; showing the r esults R0, R1, etc.\nAs illustrated in Fig. 6.5, during cycle 3, while stage 3 is\ngenerating R0, stage 2 is generating the intermediate result Y1\nrequir ed for R1, and stage 1 is generating the intermediate result X2\nrequir ed for R2. Therefore, the pipeline  perfor ms three simple", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 935, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3fe3c2de-dabb-4675-acae-5d4f77002e31": {"__data__": {"id_": "3fe3c2de-dabb-4675-acae-5d4f77002e31", "embedding": null, "metadata": {"page_label": "368", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "391ea42a-2276-4397-aee4-03baacdd2ff2", "node_type": "4", "metadata": {"page_label": "368", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "ab83b62bcc4eb98cc7f79423d6e59f1cc46e67f57f67478daa7a818257c73629", "class_name": "RelatedNodeInfo"}}, "text": "operations at the same time, and thus concur rently operates on\nmultiple data values. This helps to complete tasks quickly .\nA pipeline uses more hardwar e, similar to a single-cycle data\npath, but operates with a higher -frequency clock, similar to a\nmulticycle data path. F urther more, it can pr ocess a str eam of data a\nlot faster than the other two data paths. The clock period of a\npipelined data path is proportional to the propagation delay of its\nlongest stage. In Fig. 6.4, stage 3 has the longest propagation\ndelay; it uses an adder/subtractor module, while the other two\nstages use an adder module. Equation (6.3) estimates the pipeline\nclock period.\nThe pipelined data path in Fig. 6.4  is known as a linear pipeline ,\nwher e each of its three stages is used only once to compute a \ufb01nal\nresult (e.g., R0). A nonlinear pipeline , on the other hand, would\nuse one or more of its stages multiple times to compute a \ufb01nal\nresult. Designs of nonlinear pipelines ar e referred to elsewher e.\nDuring a clock cycle, each stage in a linear pipeline inputs one or\nmore data items from its immediately preceding stage. In general,\nthe data for the \ufb01rst stage is read either from an external module\n(e.g., memory) or from memory located internally. The \ufb01nal result is\neither stored in a storage module (register or memory) in one of the\nstages or is sent to an external module. This is further discussed in\nChap. 8 .\nPipeline Performance\nA car eful study of the pipeline chart ( a) or ( b) in Fig. 6.5  reveals that\nR0, being the \ufb01rst result, requir es three clock cycles to compute\n(not includin g the clock cycle requir ed to load the interface\nregisters), wher eas the results R1, R2, etc., each requir es only one\nclock cycle to compute. This reduces the total time requir ed to\ncompute N \ufb01nal results. In genera l, a k-stage (linear) pipeline\nrequir es k clock cycles to produce its \ufb01rst output. Equation (6.4)\nestimates the total time requir ed to process a data stream of size N\nusing a k-stage linear pipeline in ter ms of its clock period \u03c4pipeline .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2060, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "49e082ac-ee79-4fb0-932b-50f8b7ae92be": {"__data__": {"id_": "49e082ac-ee79-4fb0-932b-50f8b7ae92be", "embedding": null, "metadata": {"page_label": "369", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3fd0c1a5-90e1-4cbb-b154-fb21b036b43c", "node_type": "4", "metadata": {"page_label": "369", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5fa97d536affda7c712166a70bda7ecb8ae724e6714df0eb7a0835f8bb81c26a", "class_name": "RelatedNodeInfo"}}, "text": "For example, when N = 3 and k = 3, the pipeline will requir e a\ntotal of 5 \u03c4pipeline  to produce three outputs, such as the three\noutputs R0, R1, and R3 shown in Fig. 6.5( b). Assuming that the clock\nperiod of a single-cycle data path \u03c4single-cycle  is approximately equal\nto k \u2217\u03c4pipeline , wher e \u03c4pipeline  is the clock period of a corresponding\npipeline, Eq. (6.5) estimates the total time requir ed to process a\ndata str eam of size N using a single-cycle data path.\nHowever, note that, in general, even if both a single-cycle data\npath and its corresponding k-stage pipeline use identical\ncombinational circuit modules with identical propagation delays,\n\u03c4single-cycle  would be slightly less than k \u2217 \u03c4pipeline . The quantity k \u2217\n\u03c4pipeline  includes the sum of k register setup time and k clock-to -q\ndelays, wher eas \u03c4single-cycle  would include the sum of only one\nregister setup  time and one clock-to -q delay. The k \u2217 \u03c4pipeline  is also\nan upper bound estimat e because \u03c4pipeline  is proportional to the\npropagation delay of the longest stage in the pipeline. In Fig. 6.4,\n\u03c4pipeline  is calculated  based on the propagation delay of stage 3,\nwhich uses an adder/subtractor module, while the other two stages\neach use an adder . However, the di\ufb00er ence between \u03c4single-cycle  and\nits k \u2217 \u03c4pipeline  approximatio n is ignor ed to simplif y the perfor mance\nanalysis of a pipeline as compar ed to a correspon ding single-cycle\ndata path.\nSpeedup  is a perfor mance parameter that, in general, measur es\nthe perfor mance of a faster system as compar ed to a slower system\nwhen perfor ming the same task. It is de\ufb01ned as the ratio of the\ntime requir ed to complete a task by a slower syste m over that of a\nfaster system. It indicate s how much faster a faster system is as\ncompar ed to an equivalent slower system. For example, Eq. (6.6)\nde\ufb01nes the speedup between a faster pipelined data path as\ncompar ed to a corresponding slower single-cycle data path when\nprocessing a data stream of size N with \u03c4= \u03c4pipeline . For N = 3 and k", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2037, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "174c19cd-820c-41b0-857e-f28bd1b2d9bb": {"__data__": {"id_": "174c19cd-820c-41b0-857e-f28bd1b2d9bb", "embedding": null, "metadata": {"page_label": "370", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8af4c9da-6fa7-4f72-81b8-821435c2d851", "node_type": "4", "metadata": {"page_label": "370", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "377068321f0dc827d051b1fc3a7c64170bd6c8a0015eb7db6553d95cb5e72f18", "class_name": "RelatedNodeInfo"}}, "text": "= 3, a pipeli ne is approximately 1.8 (3 \u2217 3 \u2217 \u03c4pipeline /5 \u03c4pipeline  =\n1.8) times faster than the single-cycle data path. For N = 1000 and\nk = 3, the speedup is approximately 2.99. Note that the speedup\nincreases and approaches k (the numb er of stages) as N\napproaches in\ufb01nity (\u221e). The more stages there are in a pipeline, the\nlarger the speedup would be, provided that it processes a large\ndata stream. As N increases, the processi ng of a data stream\nbecomes more e\ufb03cient as the time requir ed to \ufb01ll the pipeline\nbecomes negligible as compar ed to the total time requir ed to\nprocess the entir e stream.\nE\ufb03ciency  is a perfor mance parame ter that measur es how well a\nsystem\u2019s resour ces were utilized to complete a task. The e\ufb03ciency\nof a pipeline data path is said to be 100% if all its stages were busy\nall the time; that is, there were no idle stages. For example,\nconsider the pipeline chart in Fig. 6.5(a). The e\ufb03ciency of the\npipeline reaches 100% starting with clock cycle 3 when all the three\nstages becom e busy for the rest of the computations. However, we\nneed an overall e\ufb03ciency value and not just when all the resour ces\nare utilized. From Eq. (6.6), the speedup of the pipeline approaches\nK, the number of stages,  when the number of computations N\napproaches in\ufb01nity (\u221e). Therefore, an overall e\ufb03ciency of a system\ncan be de\ufb01ne d as the ratio of its speedup to its maximum possible\nspeedup. Equation (6.7) de\ufb01ne s the e\ufb03ciency of a pipeline data\npath with K stages.\nThe substitution of Eq. (6.6)  in Eq. (6.7)  yields,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1542, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b5f11f73-adb4-440e-9229-a95f83f5b77d": {"__data__": {"id_": "b5f11f73-adb4-440e-9229-a95f83f5b77d", "embedding": null, "metadata": {"page_label": "371", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8da61bb5-1434-4913-a1db-3ed8ff0139ad", "node_type": "4", "metadata": {"page_label": "371", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "740e3516d0c7389c46178e9594b0170f071b29d33c27b69e9502ad3441042428", "class_name": "RelatedNodeInfo"}}, "text": "As N approaches in\ufb01nity (\u221e), the e\ufb03ciency of the pipeline in Fig.\n6.4, as e xpected, appr oaches 1 or 100%.\nThroughput  is another perfor mance parameter that measur es a\nsystem\u2019s rate of process ing. It indicates the number of items (N)\nperfor med per second. It is calculated as the ratio of the total\nnumber of items (tasks, calculations, operations,  Google search,\netc.) performed over the total requir ed time (T). Equation (6.8)\nde\ufb01nes the throughput of a linear pipeline with k stages. For N = 3\nand k = 3, the throughput is about 0.6\u03c4\u20131 (3/5\u03c4). For N = 1000 and\nk = 3, it is about 0.99\u03c4\u20131 (1000/1002 \u03c4). In general, the throughput\nof a linear pipeline could approach to \u03c4\u20131 (the operating clock\nfrequency) as N approaches in\ufb01nity (\u221e). For example, if the clock\nfrequency (f = 1/\u03c4) of the pipeline in Fig. 6.4 is 1 GHz (one billion\ncycles per second), its peak throughput (\u03c4\u20131) would be one billion\ncomputations (each A + B + C \u00b1 D), or three billion arithmetic\noperations (each + or \u2013) per second, not including the delays\nrequir ed for reading the input data, for example, from memory and\nwriting the outputs back to memory .\nAs discussed  in Chap. 1, the CPU data path is pipelined as it\nexecutes many instructions, including \ufb02oating-point (FP)\ninstructions that operate on FP numbers. For a data path to perfor m\nFP arithmetic, it must perfor m several operations, such as\ninitialization, lining up decimal points, integer arithmetic,\nnormalization, and rounding, as discussed in Chap. 3. These FP\noperations are typically divided into several pipeline stages to\nincrease throughput. For example, consider the following for-loop\nwher e an FP ADD instruction (e.g., \u201c FADD\u201d) would be e xecuted 1000\ntimes to add 1000 elemen ts of array A with 1000 elements of array\nB to produce 1000 eleme nts of array C. With a pipelined \ufb02oating-\npoint unit (FPU), the 1000 ADD instructions would  execute in less\ntime as compar ed to, say, a single-cycle FPU.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1956, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "54b28003-ab8f-4345-9349-29577a095613": {"__data__": {"id_": "54b28003-ab8f-4345-9349-29577a095613", "embedding": null, "metadata": {"page_label": "372", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "255afbd0-a37f-4f4a-8c8d-406b0e32e6bf", "node_type": "4", "metadata": {"page_label": "372", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "cdee17abe8bf27a0fefa11f2522e628991daefe4347935f7324a13f40ee254de", "class_name": "RelatedNodeInfo"}}, "text": "The FLOPS (\ufb02oat ing-point operations per second) or the less\npopular MIPS (millions of instructions per second) are two examples\nof throughput measur ement units that are typically reported by\nprocessor designers. However, these throughput units reported by\nthe designers often assume ideal conditions and may represent\npeak performance values. In addition, MIPS may be based on\nexecuting a set of some random instruction mix. In general, a more\nrealistic perfo rmance measurement requir es the execution of some\nbenchmark (existing standar d) programs, such as the compute-\nintensive workload called standar d perfor mance evaluation\ncorporation 2006 (SPEC CPU2006) benchmark for measuring the\nperfor mance of a computer system, or the graphic-intensive\nworkload SPECviewperf benchmark for measuring the perfor mance\nof a computer -graphic system [3].\n\u00a0\n6.3 Control Unit Design Techniques\nA contr ol unit is a \ufb01nite state machine (FSM). As a hardwired\ncontrol unit, the contr ol signals are generated using a set of\ncombinational circuits. For maximum speed, each contr ol signal can\nbe the output of an AND- OR (SOP expression) or OR-AND (POS\nexpression) cir cuit with the maximum 3\u0394NAND or 3\u0394NOR.\nA contr ol unit may be modeled as a \ufb01nite state diagram (FSD) or\ndesigned using the bit-parallel methodology discussed in the\nprevious chapter. However, once a hardwired contr ol unit is built, it\ncannot be repair ed if there are design errors, especially if it\nimplements a set of very comple x algorithms. A high-perfor mance\npipelined data path is typically contr olled by a hardwired contr ol\nunit.\nOn the other hand, a memory -based contr ol unit, called a\nmicroprogrammed control , keeps the values of the contr ol", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1720, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "120eedf0-73ef-4849-a84e-3f12ff8dd2ab": {"__data__": {"id_": "120eedf0-73ef-4849-a84e-3f12ff8dd2ab", "embedding": null, "metadata": {"page_label": "373", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1883e804-6ed5-486c-a939-c0e69afca23f", "node_type": "4", "metadata": {"page_label": "373", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1c6dd5d9ef27d76a4f20e3b1247aaf4564dcdbbff1fd2450ba4aca87e70be802", "class_name": "RelatedNodeInfo"}}, "text": "signals in memory inside the IC. The content of the memory can be\nupdated in the futur e in case some design errors are discover ed\nafter manufacturing. A memory -based contr ol unit, however, can be\nslow, depending on the size of the memory . It takes a lot longer\nthan 3\u0394NAND to perfor m a memory read/write operation, which will\nbe discussed in Chap. 7 .\nThe applicat ion of a microprogrammed contr ol has diminished\nover the years, especially due to the advant age of reduced\ninstruction set computer (RISC) versus comple x instruction set\ncomputer (CISC) architectur e. With an RISC, as opposed to a CISC,\nthe CPU has simpler and fewer instructions. Therefore, it is easier to\ndesign a hardwired contr ol unit to contr ol an RISC data path. RISC\nand CISC will be discussed in Chap. 8 .\nThe applicati on of microprogrammed contr ol has also diminished\ndue to the availability of moder n HDL synthesis tools today . The\ntools have simpli\ufb01ed the design and veri\ufb01cation of hardwired\ncontr ol units. However, microprogrammed contr ols would still be\nused when designing control units that have a large number of\nstates [4], or when it is necessary to transla te legacy CISC\ninstructions to a list of simple operations that would be perfor med\non a mor e e\ufb03cient RISC data path.\n6.3.1 Hardwired Control: FSD\nFigure 6.6 shows the multicycle data path given in Fig. 6.3 with an\nFSD model of its contr ol unit. The FSD has four states and de\ufb01nes\nthe data path operations in RTN. The contr ol unit generates contr ol\nsignals for the data path to compute either the quantity A + B + C\n+ D if the external input signal mode  = 0 or the quantity A + B + C\n\u2013 D if mode  = 1 in four clock cycles. The result will be stored in the\nregister within the data path. An external input signal start, when\nasserted, triggers the start of the computation. In contrast, Fig. 6.7\nillustrates the FSD with the actual contr ol signals . Note that it is\nmuch easier to verify an FSD if data path operations are speci\ufb01ed in\nRTN than if they ar e speci\ufb01ed with actual contr ol signals.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2059, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "52b838ed-d16c-4d0b-b7de-571dd46b86f7": {"__data__": {"id_": "52b838ed-d16c-4d0b-b7de-571dd46b86f7", "embedding": null, "metadata": {"page_label": "374", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c74ea664-c253-4e93-9019-5528bb9d7482", "node_type": "4", "metadata": {"page_label": "374", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "729ce1392ebedf5e1807a44cd4391a8d25754612139b2ebf0f6395569bb21043", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 6.6 Illustrating an F SM-based contr ol unit for the data path\nshown in Fig. 6.3  with R TNs, wher e \u201cd\u201d stands for don\u2019t-car e.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 135, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ed747990-d4db-4ab0-8430-3b688efd264b": {"__data__": {"id_": "ed747990-d4db-4ab0-8430-3b688efd264b", "embedding": null, "metadata": {"page_label": "375", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c191cd8a-5a1a-40d4-8359-e4e0b09e688d", "node_type": "4", "metadata": {"page_label": "375", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a7ae7d67746f16e9448abe0ec0a7ce5f677772ed6238e1a40b11d29e01af2a46", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 6.7 The F SD in Fig. 6.6  with the actual contr ol signals; d\nstands for don\u2019t-car e.\nFigure 6.8 illustrates a detailed block diagram of the\ncorresponding FSM with two \ufb02ips: a next-state gene rator (NSG), and\nan output generator (OG). The OG generates the data path contr ol\nsignals. Durin g each clock cycle, only the contr ol signals associated\nwith a speci\ufb01c data path operation are asserte d. For example,\ninitially, when start = 0, the register R is disabled and the data path\nis said to be \u201cdoing nothing.\u201d When start becomes 1, the contr ol\nunit asserts e (i.e., e = 1), enabling the register R, and makes s0 =\n0 so the MUX selects the input A. In each clock cycle, only contr ol\nsignals that are requir ed to perfor m a speci\ufb01c data path operation\nare asserted, while other contr ol signals would be deasserted or set\nto don\u2019t-car e (d) as necessary . The NSG module implements the\nspeci\ufb01c order in which the data path must perfor m operations as\ndictated by the algorithm . The design is completed by following the\nFSM design steps discussed in Chap. 5 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1070, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "83c58c16-faa9-4972-a5d8-4887ade3c927": {"__data__": {"id_": "83c58c16-faa9-4972-a5d8-4887ade3c927", "embedding": null, "metadata": {"page_label": "376", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1d001377-ee0e-45ea-a11b-3c2887f33afd", "node_type": "4", "metadata": {"page_label": "376", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e875ed60c58241a46b6e94a5dff7b315d13a46225d4e545ad98fe2e54f8c7457", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 6.8 The detailed block diagram of the F SM-based contr ol\nunit.\n6.3.2 Microprogrammed Control\nA microprogrammed contr ol unit uses a memory called control\nmemory  (CM) for storing a description of an algorithm called a\nmicroprogram . The program is made of a set of\nmicroinstructions , wher e each speci\ufb01es one or more data path\noperations called micro-operations . Each microinstruction also\nincludes microprogram \ufb02ow control  information in the form of\n\u201cjump\u201d or \u201cno-jump\u201d that decides which microinstruction will\nexecute ne xt.\nFigure 6.9  shows the microprogram for computing R \u2190 A + B + C\n\u00b1 D using the multicycle data path in Fig. 6.3. Note, the\nmicroprogram reads like a program. It consists of \ufb01ve\nmicroinstructions that would be translated into binary, called a\nmicrocode , and would be stor ed in CM at locations (i.e., addr esses)\n0 to 5. The microprogram consists of three types of\nmicroinstructions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 919, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "975ad313-da0f-4695-9f1e-e8acae06f65e": {"__data__": {"id_": "975ad313-da0f-4695-9f1e-e8acae06f65e", "embedding": null, "metadata": {"page_label": "377", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6c28ad50-1e4c-4fc8-80a2-7e40788c9dd6", "node_type": "4", "metadata": {"page_label": "377", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "246e7ee502c82b2af2373229d0c6f1865701350cc1a64ec1ec218eab120aeb74", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 6.9 The multicycle data path in Fig. 6.3  is contr olled using a\nmicroprogram.\nThe microinstruction in address 0, or simply instruction 0,\nincludes the condition \u201cif start == 0\u201d and operates like a while-loop\nthat checks the value of start every clock cycle until the signal\nbecomes 1 and the contr ol is transfer red to instruction 1.\nOtherwise, if start = 0, instruction 0 executes again. The condition\n\u201cif start == 0\u201d and the address 0 form the \ufb02ow contr ol information\nof instruction 0. Note that instruction 0 does not include any micro-\noperations that, otherwise, would be listed as R TNs.\nThe instructions 1 to 3, wher e each consists of only one micro-\noperation, are not conditional and are executed in sequence. The\nprogram \ufb02ow contr ol information for these three instructions is to\nexecute the next instruc tion. Instruction 4 is also conditional. It\nchecks for mode  = 0, and if 0, it perfor ms a micro-operation and\nthen jumps to instruction 0 at the start of the microprogram. The\ncondition \u201cif mode  == 0\u201d and address 0 form the \ufb02ow contr ol\ninformation of instruction  4. Otherwise, if mode  = 1, instruction 5\n(the next instruction), which is an unconditional instruction and\nadditionally perfor ms a micro-operation (an RTN), executes.\nInstruction 5 also perfor ms \u201cgo to 0\u201d\u2014an unconditional jump to\naddress 0\u2014wher e 0 is the \ufb02ow contr ol information of the\ninstruction.\nA detailed block diagram  of a microprogrammed contr ol unit is\nillustrated in Fig. 6.10. It consists of a CM and a next-address-", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1527, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "52be5629-c655-4af3-adb3-a86a8bb89c37": {"__data__": {"id_": "52be5629-c655-4af3-adb3-a86a8bb89c37", "embedding": null, "metadata": {"page_label": "378", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "289db677-2391-478e-9b1c-4b1193b751b7", "node_type": "4", "metadata": {"page_label": "378", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "981e1d90775577c5fb5ff475d9a66009f79b00f4ccb5c25253c3118ce75996d2", "class_name": "RelatedNodeInfo"}}, "text": "generator  (NAG) that generates the address of the next\nmicroinstruction in CM. It also consists of a multi function counter\ncalled a microprogram counter  (MPC) and a 1-bit k-to-1 MUX,\nwher e k is the number of condition signals (e.g., start and mode )\nplus 2; k = 4 in this case. The MPC holds the address of the\ncurrently executing microinstruction. In each clock cycle, the MPC\neither increments the address of the current instru ction it holds or\nloads a new (jump) address from CM. The MUX decides which\nfunction, increment or load, the MPC will perfor m next. In the \ufb01gure,\nthe MPC is designed to load a jump address if load = 1 or to\nincrement its content if load = 0.\nFIGURE 6.10  A detailed block diagram of a micr oprogrammed\ncontr ol unit.\nA microcode is organized as a table and stored in CM. Each table\nentry consists of a condition code, a set of contr ol signals, and may\nbe a jump address. Table 6.2  lists four arbitrarily assig ned condition\ncodes to implement the microprogram contr ol shown in Fig. 6.9 as", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1026, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ccdf9cef-54ce-4825-aac3-7d1ef6d24548": {"__data__": {"id_": "ccdf9cef-54ce-4825-aac3-7d1ef6d24548", "embedding": null, "metadata": {"page_label": "379", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2f149ff6-101d-4d39-acdc-f6e32b0a5f21", "node_type": "4", "metadata": {"page_label": "379", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "fe500ac01c3e8fcd7db53479abc105d8a34e3c4c73ead4d28bc0afa25c6e52b1", "class_name": "RelatedNodeInfo"}}, "text": "illustrated in Fig. 6.11. Each condition code selects one of the four\ninputs of the 4-to -1 MUX as load signal value.\nFIGURE 6.11  Micr oprogrammed contr ol unit for the multicycle data\npath in Fig. 6.9 .\nTABLE  6.2 Condition Codes for the Micr oprogram in Fig. 6.9", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 265, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ecb579e-0d2e-424f-aab9-f6772bf605f5": {"__data__": {"id_": "7ecb579e-0d2e-424f-aab9-f6772bf605f5", "embedding": null, "metadata": {"page_label": "380", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4a096443-a162-47d9-939a-0fb0946c98ac", "node_type": "4", "metadata": {"page_label": "380", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "ba7d6d9f2f2da86d91104c5c3cfdf24baa5929c985c6937fda38f7881526a49c", "class_name": "RelatedNodeInfo"}}, "text": "Condition code 0 (c1c0 = 00) is assigned to the microinstructions\nthat are not conditional, such as instructions 1 to 3 in Fig. 6.9. The\ncode represents a \u201cno-jump\u201d statement (making load = 0), which\ncauses the MPC that points to the current microinstruction to\nincrement the next clock cycle. Code 1 (c1c0 = 01) represents a\n\u201cjump\u201d statement (making load = 1). It is assigned to the\nmicroinstructions that ar e unconditional, such as instruction 5. Code\n2 (c1c0 = 10) is assigned to the microinstruction 0. It represents the\n\u201cif start == 0\u201d condition and, via the MUX, makes load = \n . If\nstart = 0, then load = 1 (jump); otherwise, load = 0 (no -jump). Last,\ncode 3 (c1c0 = 11) is assigned to the microinstruction 4. It\nrepresents the \u201cif mode  == 0\u201d condition and, via the MUX, makes\nload = \n .\nTable 6.3 lists the microcode for the microprogram in Fig. 6.9. It\nhas six rows, each a 10-bit binary representation of a\nmicroinstruction as {c1c0, s2, s1, s0, e, m, a2a1a0}. The binary\nrepresentations ar e also shown in he x in the last column.\nTABLE  6.3 Micr ocode for the Micr oprogram in Fig. 6.9\n6.3.3 Hardwire Control: Pipeline\nThe control signals for all the stages of a pipeline are generated at\nonce, but applied to each stage at the right time. A stage that\nperfor ms only a single operation requir es no contr ol signals. Figure\n6.12 illustrat es the pipelined data path in Fig. 6.4 with a pipelined", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1410, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a5f54fb4-71b9-4015-abeb-8b396255afea": {"__data__": {"id_": "a5f54fb4-71b9-4015-abeb-8b396255afea", "embedding": null, "metadata": {"page_label": "381", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6dd358b-3b4c-4af0-9d18-49c7ea701347", "node_type": "4", "metadata": {"page_label": "381", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0be94caaf002f2fa06586425b956cba465ec6db724b7134e0e84faebdd9388f4", "class_name": "RelatedNodeInfo"}}, "text": "contr ol unit. The data path perfor ms N computation s each Ai + Bi +\nCi \u00b1 Di for i = 0, 1, 2,... N \u2013 1. The signal modei decides if the last\narithmetic operation that the data path will perfor m is an addition\nor a subtract ion. All the registers in the \ufb01gure are enabled by the\nincoming start signal. It is assumed that start will remain at logic 1\n(active) for N + 4 clock cycles, the requir ed number of clock cycles\nto perfor m N computation s (also counting the one clock signal\nrequir ed by the interface registers). The modei signal along with\nfour data values Ai to Di enter the pipeline on every clock cycle for\nN cycles, but the modei is passed from one stage to the next until it\nis used in stage 3 to generate the \ufb01nal quantity Yi + Di if modei = 0\nor Yi \u2013 Di if modei = 1. The values of modei for the last four \ufb01nal\ncycles are set to don\u2019t-car e. Note that, in this case, the pipeline\ncontr ol unit uses only a set of registers and no combinational\ncircuits, and stages 1 and 2 requir e no contr ol signals other than\nthe start.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1042, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ec429d08-a05c-4690-a7cd-2dc53a2850b0": {"__data__": {"id_": "ec429d08-a05c-4690-a7cd-2dc53a2850b0", "embedding": null, "metadata": {"page_label": "382", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ded4edd-68db-4ad0-9da1-7d98cd12debb", "node_type": "4", "metadata": {"page_label": "382", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0e9ef88a3575d50957c1f1efa28372561b89640b607b7a92055644681c6f83cc", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 6.12  A pipeline contr ol unit and the pipelined data path in\nFig. 6.4 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 79, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d32641aa-22c0-48aa-bf55-ba6c7138fb9d": {"__data__": {"id_": "d32641aa-22c0-48aa-bf55-ba6c7138fb9d", "embedding": null, "metadata": {"page_label": "383", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a853aed6-311d-4435-aaae-d20761d89c00", "node_type": "4", "metadata": {"page_label": "383", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a9f85bddba13eb191450d11b3a362bfe40400d2edcb5e0690e6a616ab9386859", "class_name": "RelatedNodeInfo"}}, "text": "6.4 Energy and Power Consumption\nAs stated in Chap. 1 , as the number of transistors and the operating\nclock frequency of ICs increase, they use more power and also\ndissipate more heat. Consider the CMOS NOT gate circuit shown\nnext that was discussed in Chap. 1. Recall that in CMOS circuits,\npMOS and nMOS transistors are complementary ; one transistor\nremains in ON position and the other in OFF positio n once the gate\noutput stabilizes to either logic 1 or logic 0 voltage level.\nIn Fig. 6.13, the circuit is also shown with a capacitive load C,\nwher e its size deter mines the amount of dynamic energy\nnecessary to charge the capacitance and generate logic 1 as the\ngate output. It is called dynamic ener gy because inputs and outputs\nof a gate do not instantl y change from logic 1 to logic 0 or from\nlogic 0 to logic 1, as was discussed in Sec. 2.6 (Chap. 2). For\nexample, when input x = 1, the pMOS and nMOS transistors remain\nOFF and ON (not shown), respectively . As x starts to change from\nlogic 1 voltage level to logic 0 voltage level, both the transistors\nstart switching. Each transistor becomes partially ON or partially\nOFF until x falls to logic 0 voltage level. At that time, the pMOS  and\nnMOS that have complet ely switched to ON and OFF positions, as\nshown in the \ufb01gure, will remain in those ON and OFF positions as\nlong as x remains at logic 0.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1369, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4692d605-7fc1-45bd-9af6-e2ff838aad67": {"__data__": {"id_": "4692d605-7fc1-45bd-9af6-e2ff838aad67", "embedding": null, "metadata": {"page_label": "384", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c07f65d5-a94b-4b55-8ed4-59879e88eb03", "node_type": "4", "metadata": {"page_label": "384", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "06a046b64cbbe34dc5765a6613112023b37f3d8c84dc674b2b68cf2bad4d7d54", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 6.13  CMOS NOT gate cir cuit fr om Chap. 1  illustrating\ncapacitance char ging when x transitions fr om 1 to 0 that r esults in\na 0-1 transition at the output.\nDuring this transistor -switching time wher e x makes a 1-0\ntransition and the output of the NOT gate makes a 0-1 transition,\nthe circuit is said to be a short circuit . During this time, a certa in\namount of current, also known as shoot-through current , \ufb02ows\nfrom VDD to ground. The total amount of energy drawn from the\npower source for 0-1 transition at the NOT gate output is CVDD2.\nFrom this total energy, one half dissipates as heat and the other\nhalf is stored in the capacitance, as speci\ufb01ed in its simpli\ufb01ed form\nby Eq. (6.9).\nwher e \u201cJoules\u201d is the unit for energy. The 1-0 transition at the\noutput of the NOT gate, however, does not draw energy from the\npower source. Instead, the charge (\n ) that was stored in the\ncapacitance dischar ges to ground, as illustrated in Fig. 6.14. This is\ncalled the 1-0 transition dynamic ener gy, or", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1012, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "54ce8925-e9f5-474a-9341-b2cae1c36e9a": {"__data__": {"id_": "54ce8925-e9f5-474a-9341-b2cae1c36e9a", "embedding": null, "metadata": {"page_label": "385", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f54364ad-b8a8-4810-bedf-a17c88636320", "node_type": "4", "metadata": {"page_label": "385", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "754128a1c7625308a87755c9487de1d5f8861388a56b6a7ca06967c13e0e823a", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 6.14  CMOS NOT gate cir cuit fr om Chap. 1  illustrating\ncapacitance dischar ging when x transitions fr om 0 to 1 that r esults\nin a 1-0 transition at the output.\nThe amount of total dynamic energy that a NOT gate dissipates\nas heat due to a single transition, 0-1 or 1-0, at the gate output is\nshown in Eq. (6.10) :\nRecall that in sequentia l circuits, signals make 0-1 or 1-0\ntransitions during each clock cycle; some signals transition from 0\nto 1 and others from 1 to 0. Each signal then remains at its \ufb01nal\nlogic value 0 or 1 until the next clock cycle. Equation (6.11) de\ufb01nes\nthe total dynamic power  (in watts) a sequential circuit consumes\nduring one clock cycle. It is deter mined from the amount of total\ndynamic energy (in joules ) the circuit consumes during one second.\nIn the equation, \u03c4 and f represent the period and frequency of the\nclock signal, respectively and Ctotal represents the total equivalent\ncapacitive load in the circuit; Ctotal is deter mined from the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 989, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9126bb45-11e5-4ca9-9fe3-61ff8e66f5f8": {"__data__": {"id_": "9126bb45-11e5-4ca9-9fe3-61ff8e66f5f8", "embedding": null, "metadata": {"page_label": "386", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f219b70f-f4a0-4d97-941d-0104df8369e7", "node_type": "4", "metadata": {"page_label": "386", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3b16b9cb1234f0be2f2308a0d9d1bada164ad1fa92027e5992b16eb043a2fa42", "class_name": "RelatedNodeInfo"}}, "text": "capacitive load of all the gates (NOT, NAND, etc.) and all the wire\nconnections in the cir cuit.\nOr\nEquation (6.11) indicates that as the clock frequency increases,\nso will the number of 0-1 and 1-0 transitions in the circuit. This, in\nturn, will increase the total dynamic power consumed and the heat\ngenerated by the circuit. There are three ways that one may be\nable to reduce the dynamic power consumption of a comple x\ncircuit:\n\u2022 Reduce total capacitance, Ctotal\n\u2022 Reduce supply voltage, VDD\n\u2022 Reduce clock fr equency, f\nThe size of the capacitive load or more precisely the e\ufb00ective\ncapacitive load, however , depends on many parameters including\nthe circuit topology (the gates and they way they are connected)\n[5]. In addition, dynamic power consumption can be reduced if\nthere are fewer glitches  in the circuit. Recall that glitches are\nunwanted signal transitions in the circuit and, therefore, they would\ncause unwanted capacitance charging and dischar ging that\ncontribute to the amoun t of total dynamic energy dissipated as\nheat. Because glitches happen when signals do not arrive at the\ngates\u2019 inputs  at the same  time, designing gates with equal rise and\nfall times can eliminate some glitches, reducing some dynamic\npower usage.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1247, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7a63bff0-45ae-48e4-8daf-8212b94844d2": {"__data__": {"id_": "7a63bff0-45ae-48e4-8daf-8212b94844d2", "embedding": null, "metadata": {"page_label": "387", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6ba0f0a3-6855-4d5f-a810-8cf32b168acf", "node_type": "4", "metadata": {"page_label": "387", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f09d98e1a3c03d73382372b984714aca8f93bd7644c86c59f7f36a8a2d488a3b", "class_name": "RelatedNodeInfo"}}, "text": "In addition to dynamic power, circuits consume static  (standby)\npower . This is the amoun t of power used by the circuit when no\ntransistor switching is taking place. This happens when inputs to\nthe circuit are static (not changing) and the outputs are at \ufb01xed DC\nvoltage levels representin g logic 1 or logic 0. In this case, a certain\namount of current, called DC current (IDD) or leakage current ,\nwould \ufb02ow through the transistors that are o\ufb00. Equation (6.12)\nde\ufb01nes a cir cuit\u2019s static power consumption.\nWhile energy and power consumption in a circuit are related,\nenergy is a preferred metric to compar e the e\ufb03ciency of two\ncomple x circuits (e.g., processors) [6]. From Eq. (6.11), if we\nincrease the clock frequency, the amount of dynamic power\nconsumed to perfor m a task also increases. Howe ver, the amount\nof dynamic energy consumed remains unchanged (constant).\nConsider, for example, two processors A and B. Now suppose,\nduring the execution of a program, processor A\u2019s dynamic power\nconsumption PA is gr eater than PB consumed by pr ocessor B (i.e., PA\n> PB). However, processor A is able to execute the program faster\nthan processor B. That is, tA < tB, wher e tA and tB are, respectively,\nthe program execution times by processors A and B. In this case, it\nis possible that processor A could be more energy e\ufb03cient than\nprocessor B.\nSuppose, for a given program, PA is 20% more than PB and tA is\n40% less than tB. That is, processor A consumes 20% more power\nthan processor B, but executes the program faster, requiring only\n60% of the time it takes processor B to execute the program. In\nanother word, PA = (1 + 0.2)PB and tA = (1 \u2013 0.4)tB. Therefore,\naccor ding to Eq. (6.13) , processor A consumes 72% of the energy\nconsumed by pr ocessor B.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1764, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0bf0c6d4-9ca4-4c6b-b6f8-9ec2b0a6b85c": {"__data__": {"id_": "0bf0c6d4-9ca4-4c6b-b6f8-9ec2b0a6b85c", "embedding": null, "metadata": {"page_label": "388", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e115c218-e8fe-4d89-995e-8d77f6d29329", "node_type": "4", "metadata": {"page_label": "388", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c0b6f7906c7638e216452776bf70bf7b7a9c0a8e62156257d47127cada756a72", "class_name": "RelatedNodeInfo"}}, "text": "Even though  during the execution of the program, processor A\nconsumes more dynamic power than processor B, processor A is\nbetter than processor B because it consumes 28% less total energy.\nProcessor B consumes less dynamic power, but since it takes a\nlonger time to execute the program, overall, processor B consumes\nmore dynamic energy than processor A. As also discussed in Chap.\n1, the power and cooling requir ements (i.e., thermal design power)\nof a comple x IC can be incorporated into its operations so that its\nclock frequency may be increased on occasion to improve\nperfor mance, subject to meeting its cooling r equir ements.\n\u00a0\n6.5 Design Examples\nIn Chap. 3 , an unsigned multiplier was designed as a combinational\ncircuit with several adder modules. As a sequential circuit, a\nmulticycle multiplier can reduce hardwar e, and a pipelined\nmultiplier can increase throughput. Table 6.4 lists a set of design\nexamples. Section 6.5.1  presents the design of a multicycle\nunsigned multiplier using a hardwired contr ol unit designed from an\nFSD. Section 6.5.2  presents the design of a multicycle signed\nmultiplier using a microprogrammed contr ol unit. The signed\nmultiplier uses a single adder/subtractor module  and iteratively\nmultiplies two 2\u2019s complement numbers. Section 6.5.3  presents the\ndesign of a rudimentary graphic pipeline that implements a two-\ndimensional (2-D) CORDIC (COor dinate Rotation Digital Computer)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1433, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bf4b51ba-822a-4c82-8bb4-4798d23cf2e5": {"__data__": {"id_": "bf4b51ba-822a-4c82-8bb4-4798d23cf2e5", "embedding": null, "metadata": {"page_label": "389", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "829e68b1-b135-4847-a859-d7b204eaa65a", "node_type": "4", "metadata": {"page_label": "389", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "cab6eff6d9f5a47ed74ab45002226ebf72568e2b26d1c7719ff4dc5bd7eabce6", "class_name": "RelatedNodeInfo"}}, "text": "rotation algorithm. In general, CORDIC algorithms can be used to\nimplement elementary comple x functions, includin g trigonometric,\nhyperbolic, logarithmic, exponential, and squar e root. The last two\nlarge sequential circuit designs in the table will be cover ed in Chap.\n8.\nTABLE  6.4 A Set of Lar ge Sequential Cir cuit Design Examples\n6.5.1 Unsigned Sequential Multiplier\nThe advantage of a sequential multiplier is that it computes the\nproduct of two numbers in steps using a multicycle data path with\nonly one adder . In each step, the next addend  is added to the\naccumulated sum of previously generated adden ds. As discussed\nearlier, a multicycle data path has the disadvantage of being slow\nbut uses less hardwar e. This section presents the design of the\nunsigned multiplier data path and its FSD-based contr oller. The\nsection also discusses alternative hardwar e description language\n(HDL) design models, and the code for an all-behavioral Verilog\nmodel for the multiplier  is provided and simulation results are\ndiscussed.\nData P ath", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1047, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "36ab57ad-9a37-46b4-bb6e-61bf1de49e12": {"__data__": {"id_": "36ab57ad-9a37-46b4-bb6e-61bf1de49e12", "embedding": null, "metadata": {"page_label": "390", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a61615ef-df3d-4173-a9e2-14a96da682ef", "node_type": "4", "metadata": {"page_label": "390", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9cc09561e6a9f1701e12d605cc5adfbaec1cc3e8738d686288170755a07d43b0", "class_name": "RelatedNodeInfo"}}, "text": "Figure 6.15  illustra tes the data path of an unsigned multiplier using\na single adder, three registers, and a mod n + 1 counter . The A and\nB registers are n bits each and are used to load an n bits\nmultiplicand A_value  and n bits multiplier B_value . The P register is\nused to hold an n + 1 bits partial sum (including the carry-out bit)\neach time that two multiplication addends are added. Recall that an\naddend is the result of a bitwise AND of all the A register bits with a\nsingle B register bit. Here, only the addends that are not zero are\nadded to reduce the total computation time. Therefore, the wired-\nAND circuits that were used in the design of the multiplier as a\ncombinational circuit in Chap. 3 are not necessary . If bi = 1,\naddendi= A_value ; otherwise, addendi = 0 and the step to add the\naddend to the partial sum is skipped. Further more, the register B\nwill be shifted right after each multiplication step so that its least\nsigni\ufb01cant bit (LSB) b0 is used to deter mine the value of the next\naddend. The counter is used to keep track of the n iterations\nrequir ed to pr oduce the \ufb01nal pr oduct r esult.\nFIGURE 6.15  A multicycle unsigned multiplier data path.\nIn the \ufb01rst clock cycle, all three registers and the counter are\ninitialized. Each time that a partial sum is generated, the sum is\nloaded to P register . The P and B registers are then both shifted\nright. This simpli\ufb01es the algorithm and reduces hardwar e.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1441, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a8dcb576-35ef-414e-8d9e-fc6dfce6291c": {"__data__": {"id_": "a8dcb576-35ef-414e-8d9e-fc6dfce6291c", "embedding": null, "metadata": {"page_label": "391", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8227dd3a-4b7a-49ea-9282-fbc4ad984b99", "node_type": "4", "metadata": {"page_label": "391", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b0daa92bf373e81b093f4bece255e7447b10fa478e48a52345bf289bc886d6a5", "class_name": "RelatedNodeInfo"}}, "text": "Speci\ufb01cally, the shifts allow (1) to replace the current b0 with the\nnext higher bit in B; (2) to line up the partial sum bits for the next\nmultiplication step; and (3) to store the P\u2019s LSB in B as P and B\nregisters are simultaneously shifted right. The \ufb01nal product will be\nstored in both P and B registers. The aforementioned steps are\nsummarized as the multiplier algorithm as follows:\nSequential unsigned multiplication algorithm:\nTable 6.5 presents a step-by -step illustration of the unsigned\nmultiplier algorithm using A_value  = 7 = (111)2 and B_value  = 5 =\n(101)2. After three steps, the \ufb01nal 6-bit result in {P[2:0], B} is\n(100,011)2, or 35 in decimal.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 663, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "186ccfc4-e820-4f57-b434-c71dfee7ec89": {"__data__": {"id_": "186ccfc4-e820-4f57-b434-c71dfee7ec89", "embedding": null, "metadata": {"page_label": "392", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "445fd25a-ccf4-4d79-b0cb-547cf5d773fa", "node_type": "4", "metadata": {"page_label": "392", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "ea62c2d9afd453ff9e4a4b41ebb0ee6cf32158ac70e2d9b77afab103e7ed384c", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  6.5 Step-by -Step Illustration of Multiplying Unsigned Numbers A_value  = (111) 2\nand B_value  = (101) 2\nControl Unit Design: FSD\nThere are several ways to design a large sequential circuit using\nHDL and/or an schematic  design tool. The following outlines three\ngeneral design practices for all types of data paths and contr ollers:\nI. All structural\u2014The design would use a hierar chy of\ninterconnected modules, wher e all the modules at the leaf\nof the hierar chy would be modeled with Boolean\nexpressions (i.e., using \u201cassign \u201d statements) or cir cuits (i.e.,\nusing primitive gates). The modules would then be\ninterconnected operating with e xplicitly declar ed contr ol\nsignals. This option is not r ecommended for very lar ge\ndesigns. In addition, one may use a schematic design tool.\nII. Hybrid\u2014The design would use both structural and\nbehavioral models. In this case, a hierar chical model uses\nbehavioral models (e.g., \u201calways\u201d blocks) for the leaf\nmodules that would then be inter connected and operated\nwith e xplicitly declar ed contr ol signals. One may also use an\nschematic design tool that has an HDL interface.\nIII. All behavior\u2014The design would describe the behavior of\nthe cir cuit modeled as an F SD with data path operations\nindicated in R TNs. The design would r equir e no e xplicitly R TN-\nrelated contr ol signals.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1345, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6bd674ec-1ff8-4648-99c9-759d1caedae5": {"__data__": {"id_": "6bd674ec-1ff8-4648-99c9-759d1caedae5", "embedding": null, "metadata": {"page_label": "393", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1dd15f7f-56ac-4b7a-80bd-35a5cf936497", "node_type": "4", "metadata": {"page_label": "393", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1c1bb37e0dc1926ff179883e8ce65a635c71c305b4ffd194ab94b09354a459c3", "class_name": "RelatedNodeInfo"}}, "text": "We \ufb01rst present the design requir ements for the unsigned\nmultiplier circuit, starting with the explicitly declar ed contr ol signals\nthat would be needed to operate each of the registers and the\ncounter in Fig. 6.15. Table 6.6 presents the list of functions each of\nthe registers A, B, and P and the counter (CNTR) must perfor m. The\nA is a single -function parallel-load register; B is a dual-function\nparallel-load and right-shif t register; and P is a three-function\nparallel-load, right-shif t, and synchr onous-clear register . The CNTR\nis a dual-function counting-up and synchr onous-clear counter .\nTABLE  6.6 Register and Counter F unctions in R TN\nFor all structural (Option I) or hybrid (Option II) designs, all the\nregisters and the counter must be assigned a set of contr ol signals,\nas shown in Fig. 6.16 . A simple combinational circuit (CC) is used to\nconvert a multibit output  from the CNTR to a single signal, \ufb02ag,\nused by the contr ol unit. If count = n, \ufb02ag = 1; otherwise, \ufb02ag = 0.\nTable 6.7 lists the speci\ufb01c contr ol signal values and the\ncorresponding data path operation for each. The registers and the\nCNTR are assumed to be implemented with \ufb02ip-\ufb02ops with no enable\nsignals.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1201, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "452ec158-f742-4ce0-8150-4f5040e36a1a": {"__data__": {"id_": "452ec158-f742-4ce0-8150-4f5040e36a1a", "embedding": null, "metadata": {"page_label": "394", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c0e00c40-a006-4394-bb86-7dfe428bc3fd", "node_type": "4", "metadata": {"page_label": "394", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "61e6d669196807b4102d9777babd6a332f90d0eb1fb9704d64ce605bea620ea0", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 6.16  Data path of unsigned multiplier with contr ol signals.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 68, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58788801-2068-4aac-87bb-425efff4305a": {"__data__": {"id_": "58788801-2068-4aac-87bb-425efff4305a", "embedding": null, "metadata": {"page_label": "395", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8aefe9e1-3da1-4b0c-a0eb-c88bcfcf5c35", "node_type": "4", "metadata": {"page_label": "395", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "05296b6c3302d62d22659ab3931b13dca3f52f4ab0d32bb5ebb4ddb01353893e", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  6.7 The Contr ol Signals of the Data P ath in Fig. 6.16  for Structural HDL Models\nFigure 6.17 shows the detailed block diagram of the unsigned\nmultiplier circuit. The external triggering signal start, which  is the\noutput of a synchr onizing  \ufb02ip-\ufb02op (FF1), starts the multiplier contr ol\nunit. The done  (Mealy) signal is asserted at the end of the\ncomputation and is saved  as done_moor e in another \ufb02ip-\ufb02op (FF2).\nFF1 is reset if either _reset = 0 or done  = 1, and FF2 is reset if\neither _reset = 0 or start_asyn  = 1.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 530, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b836ee80-1e16-4a98-ba51-1654b51b289d": {"__data__": {"id_": "b836ee80-1e16-4a98-ba51-1654b51b289d", "embedding": null, "metadata": {"page_label": "396", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e61def83-4e90-417e-bd0c-609ad1b2ecab", "node_type": "4", "metadata": {"page_label": "396", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c8a64a177f34e8b8b3cf1fd3f9fa0ffe5378afccffc85b69a9e09238c5503e5c", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 6.17  Unsigned multiplier block diagram, contr ol signals, and\ninterfacing signals.\nFigure 6.18 presents the multiplier contr ol unit FSD with data\npath operations indicated in RTNs. The FSD consist s of three states\nlabeled \u201cIdle,\u201d \u201cCheck,\u201d and \u201cAdd\u201d. Upon reset, the contr ol unit\ninitializes to the Idle state as shown in the FSD. Once in Idle state,\nthe contr ol unit monitors the start signal  until the signal becomes 1\nand triggers the contr ol unit that multiplies A_value  and B_value\naccor ding to the unsig ned multiplication algorithm discussed\nearlier .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 573, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8fc7757b-c491-4786-aa12-5c82e9bde502": {"__data__": {"id_": "8fc7757b-c491-4786-aa12-5c82e9bde502", "embedding": null, "metadata": {"page_label": "397", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "19755f5e-5c1b-45c5-92bf-0a3918ff1d3d", "node_type": "4", "metadata": {"page_label": "397", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "65ddba7c4baabbe2bea7194bcf187bb5f22c716c0ad85af45cced2946a6cf980", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 6.18  Unsigned multiplier contr oller F SD; adding only the\nnon-zer o addends.\nHDL Model\nThe multiplie r all-structural and hybrid designs are defer red to the\nExercises section. However, for an example of a design that uses\nexplicitly declared contr ol signals refer to Sec. 6.5.2. Next is an all-\nbehavioral (Option III) HDL code for the unsigned multiplier and its\ninterface module shown in Fig. 6.17. The HDL code models the FSD\nin Fig. 6.18 with no explicitly declar ed data path contr ol signals.\nSpeci\ufb01cally, the code describes an FSM with an NSG, an OG, and a\nset of \ufb02ip-\ufb02ip s. The OG is responsible for generating the data path\ncontr ol signals as speci\ufb01ed implicitly by the RTNs. Therefore, an all-\nbehavioral OG using the RTNs would model the multiplier data path\nwith implicit contr ol signals.\nExample 6.2. A Verilog behav ior model of the unsigned multiplier and its interface\nmodule in Fig. 6.17 is descr ibed. The description uses no explicitly declar ed data path\ncontr ol signals.\nSolution:  The multiplier is described exactly as speci\ufb01ed in its FSD in Fig. 6.18 with the\ndata path operations given in R TN.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1133, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d76678a4-a1f4-4c1e-9784-719966e797eb": {"__data__": {"id_": "d76678a4-a1f4-4c1e-9784-719966e797eb", "embedding": null, "metadata": {"page_label": "398", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "63522a09-9807-415a-bdc8-13ad3f868004", "node_type": "4", "metadata": {"page_label": "398", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "30f00e2518d3a0be9296a68afdfcf295c2e6f1e99a81a2850d5e9e5d193e5cbd", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4328d0df-a787-4e3d-a3bd-6ac500dcf8f9": {"__data__": {"id_": "4328d0df-a787-4e3d-a3bd-6ac500dcf8f9", "embedding": null, "metadata": {"page_label": "399", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d42e1da1-e8d0-4188-8d49-d870a96ae45e", "node_type": "4", "metadata": {"page_label": "399", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "40b39ad552f184c983ca373ef927d4162fe94aaf4b9669708c4695acc01b9376", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b305704c-1342-4ad0-8f75-4b36186c20bc": {"__data__": {"id_": "b305704c-1342-4ad0-8f75-4b36186c20bc", "embedding": null, "metadata": {"page_label": "400", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "638fd362-9e0f-41a7-b3c3-25a9b6266a99", "node_type": "4", "metadata": {"page_label": "400", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9c597446824b8f2f6dddbe2a4f3275d276490771427ecda1da4fb2cd50af620b", "class_name": "RelatedNodeInfo"}}, "text": "Simulation", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 10, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "567cb12e-201f-46fb-9fda-d5d48e6ba7bd": {"__data__": {"id_": "567cb12e-201f-46fb-9fda-d5d48e6ba7bd", "embedding": null, "metadata": {"page_label": "401", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cb506695-c3ed-477b-810b-f158cea54a96", "node_type": "4", "metadata": {"page_label": "401", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d39ee71523a580c7ae6dcac03e550e3bdf515c3b7cc50c3977c13f9edcc35a4d", "class_name": "RelatedNodeInfo"}}, "text": "The multiplier and its interface module were synthesized and\nsimulated using Altera Quartus II and Altera Mode lSim 10.1b. The\ntool also provides a \u201cstate  machine viewer \u201d veri\ufb01cation featur e that\nreconstructs the FSD from a given Verilog description. Figure 6.19\nshows the reconstructed FSD of the multiplier control unit from the\nVerilog description in Example 6.2 .\nFIGURE 6.19  FSD reconstructed fr om the multiplier V erilog\ndescription in Example 6.2 .\nExample 6.3 is a test-bench with two test vectors. The\ncorresponding simulation timing diagram is shown in Fig. 6.20 . Note\nthat because  the algorithm skips addends that are zero, the\nmultiplier takes a longer  time to multiply A_value  = 8\u2019h03 with\nB_value  = 8\u2019h7F that has seven 1\u2019s, as compar ed to A_value  =\n8\u2019h7F with B_value  = 8\u2019h03 that has only two 1\u2019s. Alternatively, a\nmultiplier may be design ed with a comparator that switches the\noperands A_value  and B_value  if ther e are fewer 1\u2019s in the A_value .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 979, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b85a5abf-32d5-46d8-b4e0-1dbcabe7e0c6": {"__data__": {"id_": "b85a5abf-32d5-46d8-b4e0-1dbcabe7e0c6", "embedding": null, "metadata": {"page_label": "402", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3b619a66-a90d-4611-8b84-f1400c26bb74", "node_type": "4", "metadata": {"page_label": "402", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e6bab68fc6ef29808878f4c11c1f46efbaadde29b47d95edf6ee28acbbc0262b", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 6.20  A simulation output for the multiplier in Fig. 6.17 , using\nthe test-bench in Example 6.3 .\nExample 6.3. The HDL model of a test-bench with two test cases\n8\u2019h03 \u00d7 8\u2019b7F and 7\u2019h7F \u00d7 8\u2019h03 is described.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 213, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "01e74903-1749-43b9-aeb4-cab2a0d28c3e": {"__data__": {"id_": "01e74903-1749-43b9-aeb4-cab2a0d28c3e", "embedding": null, "metadata": {"page_label": "403", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8cd8ae84-425c-43b8-8073-642e3fc6a33a", "node_type": "4", "metadata": {"page_label": "403", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "80c7cd3ea44007014bdd12cc708757a8e7807947a2645a12926934cee5871dfe", "class_name": "RelatedNodeInfo"}}, "text": "6.5.2 Signed Sequential Multiplier\nA 2\u2019s complement multiplication algorithm, commonly known as the\nBooth\u2019s multiplier, uses both addition and subtraction to multiply\ntwo 2\u2019s complement positive or negative numbers. Its data path is\nsimilar to that of the unsigned multiplication discu ssed earlier with\nthree registers A, B, and P. A 2\u2019s complement multiplicand A_value\nand a 2\u2019s complement multiplier B_value  are loaded in the A and B", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 437, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "671c270e-54c5-4127-a44d-2c44db901612": {"__data__": {"id_": "671c270e-54c5-4127-a44d-2c44db901612", "embedding": null, "metadata": {"page_label": "404", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a2cb4083-2ee1-4bab-a7a1-45d1d20d258c", "node_type": "4", "metadata": {"page_label": "404", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3afb3b56fa341ed7fa1cf97e210848946177d5d531e5915224bc758cf9e675bf", "class_name": "RelatedNodeInfo"}}, "text": "registers, respectively, and the \ufb01nal product result  is read from the\nP and B r egisters.\nIn the Booth\u2019 s algorithm, a sequence of, for example, three 1\u2019s or\n(111)2 is interpr eted as (100\n )2; wher e \n is used here to represent \u2013\n1. Both (111)2 and (100\n )2 represent 7 in decimal; (111)2 = 4 + 2 +\n1 is 7 and so is (100\n )2 = 8 \u2013 1. This interpr etation replaces the\ncomputations of three partial sum values that typically would be\nneeded to multiply 7 by A_value  by only two partial sum\ncomputations: a subtraction at the start of the sequence and an\naddition at the end of the sequence. The intermediate 1\u2019s would be\ninterpr eted as 0\u2019s and would be skipped.\nThis is done by examining the quantity {B_value , 0} (i.e., the\nB_value  concatenated with a 0) two bits at a time but overlapping,\nstarting from its LSB and using the rules speci\ufb01ed in Table 6.8 to\nmultiply A_value  by B_value .\nTABLE  6.8 Bit Interpr etations in the Booth\u2019s Multiplier\nData P ath\nA data path for the Booth \u2019s multiplier is illustrated in Fig. 6.21. The\nx and the b1 signal s are used by the contr ol unit. If x = 0, both\nregisters P and B (shown as {P, B}) are arithmetic right shifted at\nthe same time, saving the LSB of P in B. If x = 1, then if b1 = 0,\nA_value  is added to the content of P; otherwise, A_value  is\nsubtracted from the content of P. The combinational circuit (CC), as", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1370, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e641874-453e-4491-9f58-26ecc3386068": {"__data__": {"id_": "1e641874-453e-4491-9f58-26ecc3386068", "embedding": null, "metadata": {"page_label": "405", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2f039022-0615-4abd-8d02-b418b6f391ff", "node_type": "4", "metadata": {"page_label": "405", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d97893a65e61c6e19fad9621de475ea920fc6ca43828101d760c260365714144", "class_name": "RelatedNodeInfo"}}, "text": "in the case of the unsigned multiplier, converts the counter output\nto a signal, \ufb02ag. If count = n, \ufb02ag = 1; otherwise, \ufb02ag = 0.\nFIGURE 6.21  Sequential Booth\u2019s multiplier data path.\nIn addition to the B register, which is an n + 1 bits register, both\nA and P registers are also n + 1 bits so the multiplier circuit can\nhandle the largest magnitude n-bit 2\u2019s complement negative\nnumber . For example, consider A_value  = \u2013 8 or (1000)2s as the\nsmallest 4-bit 2\u2019s complement negative number and the content of\nP is 0 (i.e., P_value  = 0). Now, the quantity P_value  \u2013 A_value , which\nshould equal to +8, would be represented incor rectly in 4-bits as\n(1000)2s, which is \u2013 8 using 4-bit 2\u2019s complement representations.\nTherefore, making both the A and the P 5-bit registers resolves this\nproblem. With 5-bits, \u2013 8 is represented as (11000)2s in the A\nregister, and the quantity (00000)2s \u2013 (11000)2s would be\nrepresented as (01000)2s = +8 in the P r egister, cor rectly.\nThe B register stores the n + 1 bit quantity {B_value , 0}.\nSuppose the 4-bit B_value  = (1111)2s = \u2013 1. Note that A_value  \u00d7\nB_value  or A_value  \u00d7 \u2013 1 should result in \u2013 A_value , wher e A_value\nis an arbitrary 4-bit 2\u2019s complement number . Initially, as illustrated\nin the data path, the B_value  would be stored in the B register in 5-\nbits as (11110)2s with its two LSB bits b1b0 = (10)2. Using the rules", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1378, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c61cf845-6ceb-46d8-bac6-7490ddc86007": {"__data__": {"id_": "c61cf845-6ceb-46d8-bac6-7490ddc86007", "embedding": null, "metadata": {"page_label": "406", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bf56cf77-3c0a-4134-8684-108344100996", "node_type": "4", "metadata": {"page_label": "406", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e61d13b18400a9de23d2add29f957d2522e45deae8c422be90b508405e4a45a2", "class_name": "RelatedNodeInfo"}}, "text": "in Table 6.8, if b1b0 = (10)2, then the content of the P register,\ninitially 0, will become 0 \u2013 A_value  = \u2013 A_value . Next, {P, B} would\nbe arithmetic shifted right, repeating the sign of P, which is now a\n1. Because the remaining bits in the B register are all 1\u2019s, {P, B}\nwill be arithmetic right shifted four times, each time repeating the\nsign of P. This will produce the \ufb01nal correct product  result \u2013 A_value\nin {Pn-1..0, Bn..1} as a 2n bits 2\u2019s complement negative number .\nTable 6.9  illustrates \u2013 8 \u00d7 \u2013 5 using the data path in Fig. 6.21  with n\n= 4. The r esult is 40 = (0010, 1000)2s = 8\u2019h28.\nTABLE  6.9 A 4-Bit Booth\u2019s  Multiplication Example: A_value  = \u2013 8 = (1000) 2s and\nB_value  = \u2013 5 = (1011) 2s\nMultiplier Algorithm: Microprogram\nAssuming that the interface module in Fig. 6.17 is also used to\ngenerate the two interfac ing signals start and done , Table 6.10 lists\nthe micr oprogram for contr olling the signed multiplier in Fig. 6.21 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 957, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d68dd9d8-869c-4a42-9479-e3759c3a0cdc": {"__data__": {"id_": "d68dd9d8-869c-4a42-9479-e3759c3a0cdc", "embedding": null, "metadata": {"page_label": "407", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cb404486-d9fe-42f5-a34e-dd174e0fe925", "node_type": "4", "metadata": {"page_label": "407", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "999c7ced8d480c5b0934b907f378bce3c25ec4ac114372aa8724d071f6cb036e", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  6.10  A Micr oprogram to Contr ol the Signed Multiplier Data P ath in Fig. 6.21\nControl Unit Design: Microprogrammed\nA microprogrammed contr ol unit of the signed multiplier is shown in\nFig. 6.22. The conditions \u201cif start == 0,\u201d \u201cif CNTR  == n,\u201d and \u201cif x\n== 0\u201d are arbitrarily assigned the condition codes 2, 3, and 4,\nrespectively . The microprogram counter (MPC) loads a jump address\n(a2a1a0) if load = 1 or increments its content if load = 0. The\nmicrocode for the micr oprogram is listed in Table 6.11 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 515, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e36bed3f-0985-4461-95f5-f195ae51802a": {"__data__": {"id_": "e36bed3f-0985-4461-95f5-f195ae51802a", "embedding": null, "metadata": {"page_label": "408", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5843ec08-6a84-4be0-9378-123123f7ce99", "node_type": "4", "metadata": {"page_label": "408", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "32fe581214edac8c2e306161ce905f2359fdb60ba5e093553f2aff699e373a0f", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  6.11  The Micr ocode of the Micr oprogram in Table 6.10\nHDL Model\nExample 6.4 describes the microprogrammed contr ol unit in Fig.\n6.22 and the data path in Fig. 6.21 with explicitly speci\ufb01ed contr ol\nsignals. The description of the data path includes the initialization\nof the CM.\nFIGURE 6.22  A micr oprogrammed contr ol unit for the Booth\u2019s\nmultiplier data path in Fig. 6.21 .\nExample 6.4. A Verilog model of the 2\u2019s complement Booth multiplier using both HDL\nstructural and behavioral descriptions is pr esented.\nSolution:  Assume the interface in Fig. 6.17  is used to interface with the contr ol unit.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 613, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6eae4d42-a9de-45d6-99b3-4da7601c0e59": {"__data__": {"id_": "6eae4d42-a9de-45d6-99b3-4da7601c0e59", "embedding": null, "metadata": {"page_label": "409", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d113e6e0-ab4c-41f6-8080-53d2d985b2ed", "node_type": "4", "metadata": {"page_label": "409", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "fe693c05be0eaf29c7ea4edb72da46deb52e3ab4294ad67d6559af40ef52bc19", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5280a483-e787-4ae5-b428-557f21fe9acf": {"__data__": {"id_": "5280a483-e787-4ae5-b428-557f21fe9acf", "embedding": null, "metadata": {"page_label": "410", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3572ffc6-e39e-44bb-aef4-21254e195207", "node_type": "4", "metadata": {"page_label": "410", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e41829f5311935093ccab127482f000085c8b5a1611fdef2e34d24c543d5455c", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a3d62345-756f-447c-9d63-3fe3cfc53d30": {"__data__": {"id_": "a3d62345-756f-447c-9d63-3fe3cfc53d30", "embedding": null, "metadata": {"page_label": "411", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aadcf74f-b9a7-4744-a0e9-7fe7be15181c", "node_type": "4", "metadata": {"page_label": "411", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f5c665de4a6456766abf03e0b92188d48dcf83a1e6bf24a48f47fdb72599f686", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dd2efdbe-7e1c-4c0b-bba1-35a7872904e3": {"__data__": {"id_": "dd2efdbe-7e1c-4c0b-bba1-35a7872904e3", "embedding": null, "metadata": {"page_label": "412", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5cedaaaf-5d4c-4256-9078-a0578b3bb162", "node_type": "4", "metadata": {"page_label": "412", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d06623c82d9f4eda9ee53ea28046d760b468368cf71cd0c092c7170b06f8ad9d", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1a5d47c5-f2dd-4382-9831-1c4de21493eb": {"__data__": {"id_": "1a5d47c5-f2dd-4382-9831-1c4de21493eb", "embedding": null, "metadata": {"page_label": "413", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0096533-6636-46c8-965e-21d6c495476e", "node_type": "4", "metadata": {"page_label": "413", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "96507cba88edd0faa0f6b639b0a2a71161cf0864a557233638a0355a8273930f", "class_name": "RelatedNodeInfo"}}, "text": "Simulation\nExample 6.5 describes a test-bench for the signed multiplier . Figure.\n6.23 illustrates the simulation timing diagram illustrating \u20138\nmultiplied by \u20135. The r esult is 40 in decimal.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 192, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "71106dca-3b78-4be0-8acd-9244501f1013": {"__data__": {"id_": "71106dca-3b78-4be0-8acd-9244501f1013", "embedding": null, "metadata": {"page_label": "414", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f568caf1-38b6-4259-a243-020e8b9847fc", "node_type": "4", "metadata": {"page_label": "414", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "efaae084cf0ba13309b9ac8a53119af2402f1e0abd744fe13b27c5afd1b20f3d", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 6.23  Simulation output of multiplying \u20138 by \u20135.\nExample 6.5. A test-bench  to compute \u20138 \u00d7 \u20135, indicated as 0xF8\n\u00d7 0xFB in hex or 8\u2019hF8 \u00d7 8\u2019hFB in Verilog is describ ed. Assume that\nthe interface module in Fig. 6.17 is used to interface with the\ncontr ol unit.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 268, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9901e4ed-9f0c-43dd-83d2-d268bfaed3ee": {"__data__": {"id_": "9901e4ed-9f0c-43dd-83d2-d268bfaed3ee", "embedding": null, "metadata": {"page_label": "415", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c0d02e3d-28b5-452f-b631-67a7c910234b", "node_type": "4", "metadata": {"page_label": "415", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "47e70ec12a8aafe20e7b8c9af9e549afa52ff4ef874e13cd7ded115dbaf94f83", "class_name": "RelatedNodeInfo"}}, "text": "6.5.3 Computer Graphics: Rotation\nIn computer graphics, a virtual object is de\ufb01ned by several points in\nthe Cartesian coordinate system. For example, as illustrated in Fig.\n6.24, a 2-D virtual object \u201chouse\u201d is de\ufb01ned by its \ufb01ve points,\nlabeled a through e in the x-y coordinate system. Each  point is\nviewed as a vector  connecting the origin coordinate point (0, 0) to", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 370, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "364b04c1-ae38-4d1d-9f95-42c349dd3f7b": {"__data__": {"id_": "364b04c1-ae38-4d1d-9f95-42c349dd3f7b", "embedding": null, "metadata": {"page_label": "416", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8c4f6acb-375f-4247-a375-86163978a4db", "node_type": "4", "metadata": {"page_label": "416", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "862ebad243199a00ee126ad1ae3448f222ddff0e51373d3ddfd08c39dcde5416", "class_name": "RelatedNodeInfo"}}, "text": "a coordinate point (X, Y). The x-y coordinates for vectors a through\ne are (10, 10), (10, 20), (15, 30), (20, 20), and (20, 10),\nrespectively .\nFIGURE 6.24  A 2-D virtual object with \ufb01ve x-y coor dinate points.\nAlso shown is the new vector b\u2019 as vector b rotated by 55\u00b0.\nIn order to rotate the \u201chouse,\u201d say, by 55 degrees (55\u00b0), we must\nrotate each of its vectors by 55\u00b0 as shown in the \ufb01gure for the\nvector b. A rotation is a linear transfor mation of a coordinate point\n(X, Y) to a new coordinate point (X\u2019, Y\u2019) using a rotation angle \u03b2. For\na posit ive \u03b2, the rotation is in the counter clockwise direction, and it\nis in the clockwise direction if \u03b2 is negative. Equation (6.14)\npresents the e xpressions used for a 2-D r otation.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 733, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "75dd6ecb-d894-4f1b-b256-fd5ac689ee59": {"__data__": {"id_": "75dd6ecb-d894-4f1b-b256-fd5ac689ee59", "embedding": null, "metadata": {"page_label": "417", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ca08241d-8020-4baf-a638-9c5dc773408a", "node_type": "4", "metadata": {"page_label": "417", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "55e77b9f0267b9d0261a7d14387a66cd07b26ab4a2b114cca2f1eaef28eb7756", "class_name": "RelatedNodeInfo"}}, "text": "In the \ufb01gure, vector b, with coordinate points (0, 0) and (X, Y) =\n(10, 10), is transfor med to vector b\u2019 with the coordinate points (0,\n0) and (X\u2019, Y\u2019) = (\u201310.64, 19.66). The calculations for this\ntransfor mation ar e given in Eq. (6.15).\nCORDIC Algorithm\nThe CORDIC algorithms can be used to perfor m trigonometric,\nhyperbolic, logarithmic, exponential, squar e root, etc. functions.\nCORDIC algorithms may be used in the design of pocket calculators\nand 2-D/3-D graphic processors. Further more, it has been shown\nthat one can develop simple CORDIC algorithms that are iterative\nand requir e only simple functions, such as integer addition,\nsubtraction, and arithmet ic right shift [7]. The right shift is used to\nperfor m an integer division by 2, 4, 8, etc. An iterative CORDIC\nalgorithm, discussed next, can be used to perform a linear\ntransfor mation (Eq. (6.14) ). Also presented is the design of a data\npath for a simple graphic pr ocessor .\nThe expressions in Eq. (6.14)  require comple x cosine and sine\nfunctions. However, they can be simpli\ufb01ed by facto ring out the \u201ccos\n\u03b2\u201d term from both the expressions, as shown in Eq. (6.16) . As you\nwill see, it is easier to compute tan \u03b2 and keep the factor ed-out\n\u201ccos \u03b2\u201d separate from the computations requir ed for a linear\ntransfor mation. The result of \u201ccos \u03b2,\u201d however, will be used as a\nscaling factor to adjust each of the new computed coordinate\npoints.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1414, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4c48f75-305e-4bcf-afc3-15b6b67256a3": {"__data__": {"id_": "e4c48f75-305e-4bcf-afc3-15b6b67256a3", "embedding": null, "metadata": {"page_label": "418", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "59b4fd11-4d2d-4818-8453-ad8c0ac2ee9e", "node_type": "4", "metadata": {"page_label": "418", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "828725c21eb1dce0996622fecfd6f22f0fe3237475fd010af78260b755f4b02c", "class_name": "RelatedNodeInfo"}}, "text": "The iterative and simple  algorithm only uses a set of \ufb01xed\nrotation angles with predeter mined tangent values. Table 6.12 lists\nseven angles, 45\u00b0, 27\u00b0, 14\u00b0, 7\u00b0, etc., with tangent values equal to,\nrespectively, 1 and fractions 1/2, 1/4, 1/8, etc. For integer\narithmetic, each angle in the table is rounded up to its nearest\ninteger value.\nTABLE  6.12  Seven \u201cT an \u03b2\u201d V alues and Their Cor responding Appr oximate \u03b2 V alues\nA vecto r, such as the b in Fig. 6.24 , can be rotated by an angle \u03b2\n= 55\u00b0 in four steps by \ufb01rst rotating the vector by 45\u00b0, then by 7\u00b0,\nthen by 2\u00b0, and \ufb01nally by 1\u00b0, as illustrated in Eq. (6.17). The result\nin step 4 includes the scaling factor 0.701 = cos 1\u00b0 \u2217 cos 2\u00b0 \u2217 cos\n7\u00b0 \u2217 cos 45\u00b0. Without the scaling factor, the values X ' = \u2013 15.1 and\nY\u2019 = 28.1 are larger by a constant 1.427 (1/0.701). The \ufb01nal values\nof X\u2019 and Y\u2019 without this (1.427) gain are given in step 5. The small\ndi\ufb00er ence between these values and those obtained in Eq. (6.15)\nare due to r ounding er rors caused by manual calculations.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1032, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7d2f4331-6c75-4274-adfc-f49275cf6846": {"__data__": {"id_": "7d2f4331-6c75-4274-adfc-f49275cf6846", "embedding": null, "metadata": {"page_label": "419", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "51000967-d717-43e7-8d27-011ab05a377a", "node_type": "4", "metadata": {"page_label": "419", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a3edac73fd9323a9e6af5c9abf897bbb70d12e757b4f9dfa0947e318d987aea6", "class_name": "RelatedNodeInfo"}}, "text": "Although this example illustrates that the iterative process can\neliminate the need for computing the tangent of an arbitrary angle,\nsuch as 55\u00b0, for a simp le graphic data path, there exist some\nimplementation comple xities, as follows:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d65f0a56-1f14-447f-b67e-92e98a221818": {"__data__": {"id_": "d65f0a56-1f14-447f-b67e-92e98a221818", "embedding": null, "metadata": {"page_label": "420", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "477d3e3d-6a12-4faf-b0ec-d52ac008b126", "node_type": "4", "metadata": {"page_label": "420", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8c32226805542bed1efd9fd8ac111fd048c436d2f1a183745b3b355fe647ad6e", "class_name": "RelatedNodeInfo"}}, "text": "\u2022 How to select the ne xt \u03b2i in Table 6.12\n\u2022 When to end the computation\n\u2022 What scaling factor should be used for a given r otation\nangle\nA solution that resolves all those implementation comple xities is\nto use a \ufb01xed number of steps, independent of the target rotation\nangle [7]. This r equir es that some r otations in the opposite dir ection\nmay be necessary if the previous step resulted in an over-rotation.\nFor instance, a vector can be rotated, say, by 55\u00b0 in seven steps\nusing 45\u00b0, 27\u00b0, \u2013 14\u00b0, \u2013 7\u00b0, 4\u00b0, 2\u00b0, and \u2013 1\u00b0. Further more, only one\nscaling factor = 0.6048 (Eq. (6.18)) would be needed for all target\nrotation angles. Note that since cos \u03b2i = cos \u2013 \u03b2i, the single scaling\nfactor is not a\ufb00ected by the direction of the rotations. The more\nsteps there are, the closer the scaling factor would become to its\nmaximum 0.607 as the number of steps appr oaches in\ufb01nity .\nFor a simple graphic data path, each step of the algorithm\nrequir es integer arithmetic. Each of the products , 1/8 X, 1/32 X,\netc., in Eq. (6.17) is implemented by an arithmetic right shift. For\ninstance, the quantity 1/8 \u2217 10, if converted to its nearest integer,\nis equal to 10 = (01010)2 being right shifted 3 times, as illustrated\nnext. An arithmetic right shift is used to handle both positive and\nnegative coor dinate values.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1313, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "51fafe83-e48a-4e75-b6cf-3b075a8e7975": {"__data__": {"id_": "51fafe83-e48a-4e75-b6cf-3b075a8e7975", "embedding": null, "metadata": {"page_label": "421", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "476d10c6-b80c-49d6-9432-53e4d51deb03", "node_type": "4", "metadata": {"page_label": "421", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a1d3e7fa9de072fc2e1f676acf3331357972e087cfe389ad7b62bc95f247bccf", "class_name": "RelatedNodeInfo"}}, "text": "The following describes the iterative rotation algorithm for \u03b2\nvalues that are between \u2013 90\u00b0 and +90\u00b0 (i.e., \u03b2 \u2264 |90\u00b0|). The \ufb01nal\nnew coordinate values are deter mined by the two expressions in\nEq. (6.19).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 205, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "22cc2f77-5311-4f7f-956b-8d41b48e2928": {"__data__": {"id_": "22cc2f77-5311-4f7f-956b-8d41b48e2928", "embedding": null, "metadata": {"page_label": "422", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8212dda6-2965-4045-a459-a2f7859ec491", "node_type": "4", "metadata": {"page_label": "422", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9b41fc0929ebe673ca7c63f1fa836e1114d81e138c66407e497a295fdb470cee", "class_name": "RelatedNodeInfo"}}, "text": "The quantity Ak is the scalin g factor and is an FP number . For\ninstance, for k = 7, A7 = 0.6048. Ther efore, for each vector, once its\nlast computed coordinate point (Xk, Yk) is deter mined, the Xk and Yk\nare then each multiplied by the constant Ak to produce the \ufb01nal\nnew coordinate point (X ', Y '). This requir es an FP multiplier, and\nthus it would be perfor med by CPU. Equation (6.20) shows the\ncalculations of (Xi+1, Yi+1) for i = 0, 1, and 2 wher e (X0, Y0) = (10,\n20) and \u03b20 = 55\u00b0. Table 6.13  lists all the Xi+1, Yi+1, and Ai + 1 values\nfor i = 0, 1, and 6.\nTABLE  6.13  Illustrating the Intermediate Results Obtained for Rotating the Vector b with\nthe Coor dinates (10, 20) in Figure 6.24  by 55\u00b0", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 709, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "43c42c6a-0f4c-4c50-8fed-22fe6d3d5a15": {"__data__": {"id_": "43c42c6a-0f4c-4c50-8fed-22fe6d3d5a15", "embedding": null, "metadata": {"page_label": "423", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d9255a00-27af-4637-8714-5c58401a8b1e", "node_type": "4", "metadata": {"page_label": "423", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f30d3f205da365e82520f46317b2ae4b8ebadf304930a21a599bd0f7558c594b", "class_name": "RelatedNodeInfo"}}, "text": "The transfor med coordinate point at the end of step 7 is (X7, Y7)\n= (\u2013 18, 34) and includes a gain of 1/A7 = 1.427. The \ufb01nal new\ncoordinate point (X ', Y ') is deter mined by multiplying X7 and Y7 by\nA7 = 0.6048, as follows:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 225, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a0a65121-93be-4eda-84b4-0e6efd07b0e7": {"__data__": {"id_": "a0a65121-93be-4eda-84b4-0e6efd07b0e7", "embedding": null, "metadata": {"page_label": "424", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3ab23acd-13f1-4289-9cb0-2949ae9e5cae", "node_type": "4", "metadata": {"page_label": "424", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "22b6a5d3357e6894576c348ca1e2f872a643d9532a5bb8a619632d2fbfd5cc4c", "class_name": "RelatedNodeInfo"}}, "text": "The values X ' = \u2013 10.88 and Y ' = 20.56 given in Eq. (6.21) are\nslightly di\ufb00er ent from the \u2013 10.64 and 19.6 that were obtained in\nEq. (6.15) due to integer arithmetic.\nFor rotation angles \u03b2 = |90\u00b0|, an initial rotation by \u00b190\u00b0 or \u00b1\n180\u00b0 is requir ed. For example, for \u03b2 = 125\u00b0, an initial rotation by\n90\u00b0 reduces the target rotation angle to 35\u00b0, which is < 90\u00b0. Since\ncosine of \u00b1 90\u00b0 = 0 and sine of \u00b1 90\u00b0 = \u00b1 1, an initial \u00b1 90\u00b0\nrotation changes the initial values X0, Y0, and \u03b20 as follows:\nAlternatively, a 180\u00b0 initial rotation would reduce a \u03b2 = 125\u00b0 to \u2013\n55\u00b0 > \u2013 90\u00b0 and change the initial values X0, Y0, and \u03b20 as follows:\nFor a \u03b2 > |180\u00b0| and \u2264 |360\u00b0|, an initial rotation by \u00b1 360\u00b0 is\nrequir ed to reduce \u03b2 to < |180\u00b0|. This, howeve r, will keep the initial\nvalues the same as follows:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 797, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "279d38c8-7b00-4a3e-a707-c79b6bb8f00c": {"__data__": {"id_": "279d38c8-7b00-4a3e-a707-c79b6bb8f00c", "embedding": null, "metadata": {"page_label": "425", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "457f1027-efcc-4572-b554-b9cdf2b4b749", "node_type": "4", "metadata": {"page_label": "425", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d5b0f1a062d8d2fbabdbc4ea4a884c27a26f7902d41b63bca3002401e07aa9be", "class_name": "RelatedNodeInfo"}}, "text": "Finally, for \u03b2 > |360\u00b0|, the \u03b2 is replaced with \u03b2 mod 360. That is,\nThe pseudo -code shown next speci\ufb01es the steps necessary to\nrotate a virtual object by a given angle \u03b2.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 171, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "370990fa-5905-417b-9a6f-ef7af8eec42d": {"__data__": {"id_": "370990fa-5905-417b-9a6f-ef7af8eec42d", "embedding": null, "metadata": {"page_label": "426", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4be61f4b-98d2-44f8-94e5-e41919ad1e8a", "node_type": "4", "metadata": {"page_label": "426", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e5a2ddcadd311418f9294cd24768a709f1102ec71cb1044a8701dd74ff4c0f4b", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "16407134-7c04-4fa5-a4b8-dacf7ced730e": {"__data__": {"id_": "16407134-7c04-4fa5-a4b8-dacf7ced730e", "embedding": null, "metadata": {"page_label": "427", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b537b42c-cedb-49f8-b089-2b8a2b928182", "node_type": "4", "metadata": {"page_label": "427", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "624681400b7ca118bdcaf2979a22c2a36a630332431cb56a407a6f7794b4b2e2", "class_name": "RelatedNodeInfo"}}, "text": "Pipelined Data P ath and Control\nTypically, a virtual object includes thousands or millions of\ncoordinate points that all must be transfor med to new coordinate\npoints when the object is rotated by a given angle. A pipelined data\npath that implements the aforementioned \u201cvector transfor m\u201d\nfunction given in the pseudo -code can process many vectors in a\nshort time or even in real time. A nonpipelined data path, such as a\nmulticycle data path, would have a lower throughput as compar ed\nto a pipelined data path, but would r equir e less har dwar e.\nIn a nonpipe lined data path, these incremental angles must be\nstored in a look-up-table (LUT) and would be read one at a time to\ncompute the rotation angle for the next step. In addition, a\nnonpipelined data path may need to use a combinational shifter\n(discussed in Chap. 3 ) to shif t the Xi and Yi values during iteration i.\nFigure 6.25 illustrates a seven-st age pipelined data path\nimplementing the \u201cvector_transfor m\u201d function. Note that \u2013 90\u00b0 \u2264 \u03b2\n\u2264 90\u00b0. Each pipeline stage perfor ms one of the seven vector\ntransfor mation steps, illustrated by an example in Table 6.13. Each\nstage includ es three 2\u2019s complement adder/subtractor modules.\nThe sign of an incoming 2\u2019s complement r otation angle ( Bin) is used\nto deter mine the value of the direction signal d that is used to\ncompute the rotation angle Bout and the new coordinate  values\nXout and Yout used for the ne xt stage.\nEach stage also inputs the arithmetic right shifted values SXin\nand SYin obtained by shifting Xin and Yin values . Note that in the\npipeline data path, no circuits are used to generate the SXin and\nSYin values; they are hard-wir ed shifts. The \ufb01rst stage is responsible\nfor transfor ming an initial coordinate point (Xin, Yin) by 45\u00b0; the\nsecond stage is responsible for transfor ming its input coordinate\npoint by 27\u00b0; etc.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1863, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "35128009-e695-45ff-9a69-6c066a0b057a": {"__data__": {"id_": "35128009-e695-45ff-9a69-6c066a0b057a", "embedding": null, "metadata": {"page_label": "428", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1e756e56-bb98-40f6-bf40-83043d7e17d9", "node_type": "4", "metadata": {"page_label": "428", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a59f0030a3133cf7e5c89ac4b5fe159ba44c77b1a719e31afa96dada8a7f18ed", "class_name": "RelatedNodeInfo"}}, "text": "HDL Model\nThe HDL code in Example 6.6 describes the pipelined data path in\nFigure 6.25. The seven rotation angles are speci\ufb01ed in Table 6.12,\ncolumn 3. All the stages perfor m the same functions, and,\ntherefore, only one contr ol signal is needed to enable all the\npipeline r egisters.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 285, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e5de7c4a-0125-4f65-8e83-bf08ed0c9953": {"__data__": {"id_": "e5de7c4a-0125-4f65-8e83-bf08ed0c9953", "embedding": null, "metadata": {"page_label": "429", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d11c5c0e-aca6-4070-b201-0bc26c16f582", "node_type": "4", "metadata": {"page_label": "429", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0c83e1f1a1474d220ef68775ed73537be99de06c2ce7d7852df3fa5bd0ed8ab7", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 6.25  A seven-stage pipeline data path implementing a 2-D\nlinear transfor mation.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 88, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "38a438bd-16dd-4d80-81b3-0732c8531dd1": {"__data__": {"id_": "38a438bd-16dd-4d80-81b3-0732c8531dd1", "embedding": null, "metadata": {"page_label": "430", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "53003ffe-399a-41f5-bec5-5c20a293c219", "node_type": "4", "metadata": {"page_label": "430", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "aab23adc7b38a01b0c2e4af1449f5b7ed9f02cf4adc29c20c45162f626f0a6b5", "class_name": "RelatedNodeInfo"}}, "text": "Example 6.6. An HDL behavior description of the seven-stage pipelined data path in\nFigure 6.25  is pr esented.\nSolution:  The \u201ccordic\u201d module is described structurally, while the \u201cstage\u201d and \u201cregister \u201d\nmodules are described behaviorally (i.e., using the Option II design model described in\nSec. 6.5.1). Further more, in order to simply the description of the \u201ccordic\u201d module, the\n\u201cstage\u201d and \u201cregister \u201d modules are instantiated using their port names instead of by their\nport positions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 488, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "506eb36c-8ee7-429f-9978-dbfd3fb4654a": {"__data__": {"id_": "506eb36c-8ee7-429f-9978-dbfd3fb4654a", "embedding": null, "metadata": {"page_label": "431", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e3e49bb7-573e-433e-8009-79a390d40da2", "node_type": "4", "metadata": {"page_label": "431", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a629732ff10dfe6b9a55092c9b6cc7ec4052aae351312db2320f8d9c85bd7d3a", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "70e475ec-c528-432b-866d-2c3814c1acda": {"__data__": {"id_": "70e475ec-c528-432b-866d-2c3814c1acda", "embedding": null, "metadata": {"page_label": "432", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8a0648d2-63cd-497b-9e29-0d2a5e650c90", "node_type": "4", "metadata": {"page_label": "432", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "240ebf7232d8bcfad10bcc5a8e8b8565139c28adb0e10e12e0aa940d6af094f5", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d0dd3ff5-97a4-484c-9a42-1544cf50ba98": {"__data__": {"id_": "d0dd3ff5-97a4-484c-9a42-1544cf50ba98", "embedding": null, "metadata": {"page_label": "433", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8590d746-d655-47ad-a100-3d21b3be820b", "node_type": "4", "metadata": {"page_label": "433", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "bc05379e62110009e8784a80f4bc05111cb69ed8b08c5fb7178d416228f61b2c", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4eadee60-ef8f-419f-a5df-639b22f4d786": {"__data__": {"id_": "4eadee60-ef8f-419f-a5df-639b22f4d786", "embedding": null, "metadata": {"page_label": "434", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f55947e5-9e3f-4ed6-a9ee-19f40cef618d", "node_type": "4", "metadata": {"page_label": "434", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9fb262c5423a699b8ca76fdaa127c71dd8b6d07e4d1d6b95ef32c3d987a31ba6", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "15e55747-9a63-43d3-b03f-9dc3c1cdf465": {"__data__": {"id_": "15e55747-9a63-43d3-b03f-9dc3c1cdf465", "embedding": null, "metadata": {"page_label": "435", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6911cf87-d9c8-4f6f-869f-00dedd0c8633", "node_type": "4", "metadata": {"page_label": "435", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5a5c780e1136b1517a000d5ad169450e73f18960fc2e5b1a299d8eef2416bfcf", "class_name": "RelatedNodeInfo"}}, "text": "Simulation\nThe Verilog model of the pipeline in Example 6.6 was synthesized\nand simulated using the Altera Quartos II and ModelSim design and\nsimulation tools. Example 6.7 describes a test-bench for", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 198, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0572c031-6828-4456-a5dc-9cb450dec021": {"__data__": {"id_": "0572c031-6828-4456-a5dc-9cb450dec021", "embedding": null, "metadata": {"page_label": "436", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "34b60732-bb92-4e50-901a-42cb4940908a", "node_type": "4", "metadata": {"page_label": "436", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e668f8a36ab96c2678e90aa4d24859aadcaec8849607efbc3db29891806307cc", "class_name": "RelatedNodeInfo"}}, "text": "transfor ming the \ufb01ve vectors of the virtual object \u201chouse\u201d shown in\nFig. 6.24  by 55\u00b0. The simulation wavefor m is shown in Fig. 6.26 . For\nconvenience, the simulation data is shown in decimal.\nExample 6.7.  A test-bench to simulate the pipelined model in Example 6.6  is pr esented.\nSolution:  There are only \ufb01ve vectors in the object \u201chouse,\u201d and thus they are listed as\n\ufb01ve test vectors in the code. One may read the test vectors from a \ufb01le if there are many\ntest vectors.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 476, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bac6609d-3fb2-498b-8573-fae3301cb596": {"__data__": {"id_": "bac6609d-3fb2-498b-8573-fae3301cb596", "embedding": null, "metadata": {"page_label": "437", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54d10ea7-1df0-4280-9d72-50364112c6c4", "node_type": "4", "metadata": {"page_label": "437", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7614e0aae689d6c18e358ca221f1b6e5ccfadfa2b0f66e26439ec9044c6f887e", "class_name": "RelatedNodeInfo"}}, "text": "Table 6.14 presents the original and the computed coordinate\npoints captur ed from the simulation wavefor m in Fig. 6.26 . The new\ncoordinate values include a gain that is equal to 1.653 = 1/0.6048\nand, therefore, the rotated virtual object looks bigger, as shown in\nFig. 6.27 . In order to remove the gain, each of the coordinate values\nmust be multiplied by the constant 0.6048. This requir es an FPU,\nand thus this r escaling must be perfor med by CPU.\nTABLE  6.14  The Simulation Data Summary Obtained from the Simulation Wavefor m in\nFig. 6.26", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 548, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cbaaa184-6efd-43a7-ab38-865c4d209af7": {"__data__": {"id_": "cbaaa184-6efd-43a7-ab38-865c4d209af7", "embedding": null, "metadata": {"page_label": "438", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3c3b6c4b-3bf0-4e1c-ab45-7abb6b68e50c", "node_type": "4", "metadata": {"page_label": "438", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "acf75aa74941ecde37182ec8affb4253c15703840c352e8ad1619d5e7561a63d", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 6.26  A wavefor m for simulating the pipeline description in\nExample 6.6 ; values ar e in decimal.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 105, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "67a6ac54-3ddb-4893-8344-1b6373773daa": {"__data__": {"id_": "67a6ac54-3ddb-4893-8344-1b6373773daa", "embedding": null, "metadata": {"page_label": "439", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "77113889-baf8-480c-855d-79e147f41cc5", "node_type": "4", "metadata": {"page_label": "439", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9655aae0c464e58cfe0ee0c238bc83f9054cb9c1df91a63e480e1ea5a12237f5", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 6.27  The original \u201chouse\u201d object and its 55\u00b0 r otation. The\nnew object is shown enlar ged by 1.653 = 1/0.6048.\nThe new computed coordinate values without the gain and those\ncalculated using the transfor mation expressions in Eq. (6.14) are\ngiven in Table 6.15. The computed values are close, but not the\nsame as the calculated ones. The reason for this di\ufb00er ence is that\nthe algorithm presented here uses integer division, which results in\nmore rounding er rors than if FP division is used.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 499, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db583af1-8d7d-4552-82f0-677ae9b7b52c": {"__data__": {"id_": "db583af1-8d7d-4552-82f0-677ae9b7b52c", "embedding": null, "metadata": {"page_label": "440", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "876637c5-60c1-4351-8344-5983a67af204", "node_type": "4", "metadata": {"page_label": "440", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "277eb5ed9ea1b436621acaa8e3cc42e60f43d1ac88125876df79bee0cdc90457", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  6.15  The new Coordinate Values Computed Using the Iterative Rotation\nAlgorithm versus Calculated Using the T ransfor mation Expr essions in Eq. (6.14)\nThe CORDIC rotation pipeline may be implemented  as a simple 2-\nD graphic processor with two internal memory units: (1) to store a\nvirtual object\u2019s initial coordinate points as input and (2) to store the\ncomputed new coordinate points as output. The CORDIC processor\nwill be a co-processor much like a graphic processor unit (GPU).\nHowever, the co-processor, in this case, would perfor m the \ufb01xed\nCORDIC rotation task as outline earlier using its internal memories;\nthe co-processor would have no instructions to execute. The CPU\nwould start the co-processor by initiating the transfer of both the\ninitial and \ufb01nal coordinat e points of a virtual object between the\nmain (system) memory and each of the input and output internal\nmemory units. Once the co-processor is done computing the new\ncoordinate points and the new points are transfe rred to the main\nmemory, the co-processor will inform the CPU, which would then\naccess the new coordinat e points from the main memory and after\nmultiply each new coordinate point by the consta nt scaling factor\n0.6048 would display the rotated virtual object on the screen. For\nhow to calculate the throughput of the CORDIC processor refer to\nExercise 6.15. Memory design is presented in the next chapter and\nCPU initiated  transfers of large memory data are discussed in Chap.\n9.\n\u00a0\nReferences", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1493, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "49972ed5-b58a-438b-b03d-3eac0e2d34bc": {"__data__": {"id_": "49972ed5-b58a-438b-b03d-3eac0e2d34bc", "embedding": null, "metadata": {"page_label": "441", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b381c1ce-09f3-4916-889b-11d43307e5f7", "node_type": "4", "metadata": {"page_label": "441", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "01ef71ca342381c94c42b5a3ff17154de00596cc2971ad70c1e317efded5eafb", "class_name": "RelatedNodeInfo"}}, "text": "1. Intel Ar chitectur e Instruction Set Extensions P rogramming\nReference, www.intel.com .\n2. Steven L eibson and James Kim, Con\ufb01gurable pr ocessors: a new\nera in chip design, IEEE Computer , 2005, pp. 51-59.\n3. SPEC CPU2006 and SPECviewperf fr om the Standar d\nPerformance Evaluation Corporation, http://www .spec.or g/.\n4. B. W . Bomar, Implementation of micr oprogrammed contr ol in\nFPGAs, IEEE T ransactions on Industrial Electr onics , Vol. 49, No .\n2, Apr 2002, 415-422.\n5. Anantha Chandrak asan and R obert Br oderson, Minimizing\npower consumption in digital CMOS cir cuits, P roceedings of the\nIEEE, V ol. 83, No . 4, 1995, 498-523.\n6. J. Hennessy and D. P atterson, Computer Ar chitectur e: A\nQuantitative Appr oach , 5th ed., Mor gan K aufmann, 2012.\n7. Ray Andrak a, A survey of CORDIC algorithms for FPGA based\ncomputers, In: Proc. A CM/SIGD A 6th Inter national Symposium on\nField P rogrammable Gate Ar rays, 191-200, 1998.\n\u00a0\nExercises\nFor Exercises 6.1 to 6.3: Suppose the propagation delay of an 8-bit\nadder is 0.8 ns, adder/subtractor is 1.1 ns, 2-to-1 MUX is 0.3 ns, and\n4-to-1 MUX is 0.6 ns. Also, assume register setup time (\u03c4st), clock-\nto-q (\u03c4cq), and clock sk ew (\u03c4cs) are all 0.05 ns.\n6.1 Calculate the r equir ed maximum clock fr equency for\neach of the following data paths:\na. Single-cycle\ndata path in Fig. 6.2\nb. Multi-cycle data path in Fig. 6.3\nc. Pipelined data path in Fig. 6.4\n6.2 Calculate the total time r equir ed to compute the quantity\nA + B + C \u00b1 D by the data paths in Ex ercises 6.1 (a) and 6.1 (b).\n6.3 Estimate the speedup between the following data paths\nwhen generating N = 1000 quantities Ai + Bi + Ci \u00b1 Di for i =\n0, 1, 2, ..., 999. Ignor e the data r eading and writing delays.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1725, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cf59f6cc-a95e-4465-a28c-6a223a2931a7": {"__data__": {"id_": "cf59f6cc-a95e-4465-a28c-6a223a2931a7", "embedding": null, "metadata": {"page_label": "442", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7d8f5fc-2936-4457-be90-436652008428", "node_type": "4", "metadata": {"page_label": "442", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "120d26727615ebdf911f2929c793df87ee7cfb81a5c0f62a2e0c23b0b0fe680b", "class_name": "RelatedNodeInfo"}}, "text": "a. Ex ercise 6.1( a) vs. 6.1( c)\nb. Ex ercise 6.1( b) vs. 6.1( c)\n6.4 Suppose a new pr ocessor has 25% less capacitive load\nthan the old pr ocessor and operates with 20% higher clock\nfrequency . Deter mine the ratio of the dynamic powers\nconsumed by the two pr ocessors. Comment on the r esult\nobtained.\n6.5 Suppose the voltage sour ce for a new pr ocessor is 50%\nof that used to operate the older pr ocessor, its total capacitive\nload is 15% less, and it operates with 40% higher clock\nfrequency . Deter mine the ratio of the dynamic powers\nconsumed by the two pr ocessors. Comment on the r esult\nobtained.\n6.6 Show the r egister contents for multiplying 3-bit A_value\n= 6 with 3-bit B_value  = 5 using the multicycle unsigned\nmultiplier given in Fig. 6.15 .\n6.7 Design an 8-bit unsigned multiplier cir cuit modeled as\nfollows:\na. Use a schematic design tool (e.g., L ogicW orks) or all\nstructural HDL model to design to model the multiplier\ncircuit. Y ou may design a multifunction r egister to implement\nregisters A, B, and P in the data path.\nb. Use a hybrid HDL model. Use behavioral models for\nregisters A, B, and P and the mod-8 counter . Then combine\nthe A, B, P, counter and an adder to complete the design.\n6.8 Show the r egister contents for multiplying 4-bit 2\u2019s\ncomplement A_value  = 5 and B_value  = \u2013 2 using the 2\u2019s\ncomplement multiplier given in Fig. 6.21 .\n6.9 Show the r egister contents for multiplying 4-bit 2\u2019s\ncomplement A_value  = \u2013 5 and B_value  = \u2013 2 using the 2\u2019s\ncomplement multiplier given in Fig. 6.21 .\nFor Exercises 6.10 and 6.11: Use the standar d non-r eturn-to-zero\ninverted (NRZI) generator FSM (see Chap. 5 Exercise section) and\ndesign an NRZI conversio n system. Assume that the input stream is\nprocessed 16-bits at a time. Also, because no common clock is used\nbetween a source and a destination module and the bits are", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1859, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "41aa052a-4385-44f6-a356-86019e47dcdb": {"__data__": {"id_": "41aa052a-4385-44f6-a356-86019e47dcdb", "embedding": null, "metadata": {"page_label": "443", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c6521e71-f6d5-4c16-aefe-0c4cf1dc3c32", "node_type": "4", "metadata": {"page_label": "443", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7e2f62ef77c36bb5d6edd5331c9d7755a0d6cb4f79d516c3f71f9d56c631c72d", "class_name": "RelatedNodeInfo"}}, "text": "transmitted on a pair of twisted wires called D+ and D+, with D\u2013\nbeing the opposite of D+, we must prevent the data\nsynchr onization problem  between the source and destination\nmodules by making sure the NRZI output does not remain at 1 or 0\nfor several clock cycles. This is done by making sure that for every\nsix consecutive 1\u2019s at the input stream there is a transition at the\noutput. This will ensur e that an output stream can have maximum\nseven consecutive 1\u2019s or seven consecutive 0\u2019s. For example, for\ninput X = 1 1 0 0 0 1 1 1 1 1 1 1 0 0 1 1 (0xC7F3) processed, from\nright to left, the modi\ufb01ed NRZI generator must output Y = 1 1 1 0 1\n0 0 1 1 1 1 1 1 1 0 1 1 (or 0x1D3FB from right to left); for X =\n0xFFFF, Y = 0x3E03F; for X = 0xCFF6, Y = 0x123F8; and for X =\n0x0000, Y = 0xAAAA. The NRZI system consists of a data path and\na contr ol unit. Do the following:\n6.10 Design a data path that includes a 16-bit multifunction\n(parallel load and right shif t) input r egister, a standar d NRZI\nFSM, and a mod-17 counter that k eeps track of the input bits.\nDesign an F SM-based contr ol unit for a data path that\nimplements the NRZI and k eeps track of six consecutive 1\u2019s at\nthe input. (An 18-bit parallel-load and right-shif t register may\nbe used, if necessary, to captur e the output bits.)\n6.11 Design a data path that consists of a 16-bit multifunction input\nregister, a standar d NRZI F SM, a mod-17 counter (CNTR1) to\nkeep track of the pr ocessed input bits, and a mod-7 counter\n(CNTR2) that k eeps track of consecutive 1\u2019s at the input.\nDesign an F SM-based contr ol unit for a data path that\nimplements the NRZI and k eeps track of six consecutive 1\u2019s at\nthe input. (An 18-bit parallel-load and right-shif t register may\nbe used, if necessary, to captur e the output bits.)\n6.12 Design a micr oprogrammed contr oller for the data path in\nExercise 6.11.\n6.13 Calculate the new coor dinate points of the virtual \u201chouse\u201d\nobject in Fig. 6.24  rotated by 35\u00b0. Compar e your r esults with\nthose calculated using the e xpressions in Eq. (6.14).\n6.14 Calculate the new coor dinate points of the virtual \u201chouse\u201d\nobject in Fig. 6.24  rotated by \u2013 35\u00b0. Compar e your r esults with\nthose calculated using the e xpressions in Eq. (6.14).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2239, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9db1119f-9f59-4c77-8ff6-d3b2bba5dc3f": {"__data__": {"id_": "9db1119f-9f59-4c77-8ff6-d3b2bba5dc3f", "embedding": null, "metadata": {"page_label": "444", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "73cfcb29-04db-4dcb-a9d5-dd08f4c82c61", "node_type": "4", "metadata": {"page_label": "444", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "250f3dec9b2b67be445fa906be3956c1848f0036d11d96294bd9fd223b647c08", "class_name": "RelatedNodeInfo"}}, "text": "6.15 Suppose a 2-D graphic pr ocessor implements the seven-step\npipelined CORDIC r otation algorithm discussed in the te xt.\nAlso, assume the delay of an adder or a subtractor is 0.8 ns\nand r egister setup time ( \u03c4st), clock-to -q (\u03c4cq), and clock sk ew\n(\u03c4cs) are all 0.05 ns. What is the appr oximate maximum\nnumber of coor dinate points the pipeline can pr ocess within\n0.001 seconds? Ignor e delays associated with r eading and\nwriting coor dinate points.\n6.16 W rite a pr ogram in the language of your choice to implement\nthe CORDIC r otation pseudo -code described in the book.\n6.17 The following de\ufb01nes an e xponential function as a k-term\nTaylor series:\nEach term in the series can be computed from the previous term,\nas illustrated her e for the \ufb01rst four ter ms:\nUsing a combinational adder, a multiplier, a divider, and other\nmodules as necessary, do the following:\na. Draw a multicycle data path to compute ex for \ufb01ve ter ms\nfor a given x. Also, deter mine the minimum clock period in\nterms of the delays of modules used and, \u03c4st, \u03c4cq and \u03c4cs.\nb. Draw a minimum delay pipeline data path to compute ex\nfor \ufb01ve ter ms for a given x. Also deter mine the minimum", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1169, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "72a73888-0fc3-43bf-8ad4-dbd08b8c9b74": {"__data__": {"id_": "72a73888-0fc3-43bf-8ad4-dbd08b8c9b74", "embedding": null, "metadata": {"page_label": "445", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c47caf3d-9243-44d5-aeb9-5527f91885a4", "node_type": "4", "metadata": {"page_label": "445", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c83eaea0d19f7fea735ba666980296e8e5b5a0f352ca6184bd55cafc7123f056", "class_name": "RelatedNodeInfo"}}, "text": "clock period in ter ms of the delays of the modules used and\n\u03c4st, \u03c4cq, and \u03c4cs.\n6.18 Computer security (con\ufb01dentiality): Use Ex ercise 11.17 to\ndesign a str eam cipher with contr ol unit (also see Sec. 11.5.1 ).\n6.19 Computer security (con\ufb01dentiality): Use Ex ercise 11.18 and/or\nExercise 11.19 to understand the RS A encryption algorithm\n(Sec. 11.5.3 ).\n6.20 Computer security (con\ufb01dentiality): Use Ex ercise 11.20 to\nunderstand asymmetric versus symmetric ciphers (also see\nSec. 11.5 ).\n6.21 Computer security (integrity, understanding cryptography\nhash): Use Ex ercises 11.21 to 11.23 ( Sec. 11.6  and Sec. 11.7 ).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 617, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7442b19e-83e1-4d59-80a8-00f7af0de0df": {"__data__": {"id_": "7442b19e-83e1-4d59-80a8-00f7af0de0df", "embedding": null, "metadata": {"page_label": "446", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6cc4faff-b692-4a03-9146-49fa6020e04d", "node_type": "4", "metadata": {"page_label": "446", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "fc5eec289129e857b0b87bb0d341194591d894d0808744aa3283c8db11644169", "class_name": "RelatedNodeInfo"}}, "text": "CHAPTER 7\nMemory\n\u00a0\n7.1 Introduction\nA register is designed to store single value that is readily available\nwhen needed . Memory, on the other hand, is desig ned to store the\ncode and data of programs during execution. The storage\ntechnologies used to implement di\ufb00er ent types of memory requir e\nmuch less hardwar e than a latch or \ufb02ip-\ufb02op. However, memory\nrequir es mor e time to stor e (write) or r etrieve (r ead) data.\nThe storage size of memory is de\ufb01ned in terms of bytes, 8 bits\nper byte (B). Table 7.1 presents a list of commonly used memory\nstorage sizes , and Fig. 7.1  illustrates two logical views of 1024 B (1\nKB) memory . In Fig. 7.1(a), the memory is viewed as having 1024\nlocations, each with 1 B content. That is, a 1024 \u00d7 8 (i.e., 1024 by\n8) memory requir es a 10-bit address (1024 = 210) to identif y each\nof the 1 B (8 bits) content. In Fig. 7.1 (b), 1024  B memory is viewed\nas 512 \u00d7 16, with 512 locations, each with 2 B content. It requir es\na 9-bit address (512 = 29) to identif y each of the 2B (16 bits)\ncontent.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1038, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1cda061e-9891-4c9e-aff8-5c37d1ffeaba": {"__data__": {"id_": "1cda061e-9891-4c9e-aff8-5c37d1ffeaba", "embedding": null, "metadata": {"page_label": "447", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f883f8be-4211-4221-bd6b-bb053a70967a", "node_type": "4", "metadata": {"page_label": "447", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3846df3487c45f429569ae33baa09def20663ec3b84665832edaacbd93d2ab85", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  7.1 Examples of Memory Sizes\nFIGURE 7.1 Two logical views of a 1-KB memory with arbitrary\ncontents: ( a) 1K \u00d7 1B; ( b) 512 \u00d7 2B.\nThe perfor mance of a Von Neumann machine (Fig. 1.2 in Chap.\n1) directly depends on how fast data can be read or written to\nmemory . Over the years, as the speed of CPUs has increased at a\nhigher rate than that of memory, a quest for faster memory\ntechnologies and better memory architectur es and organizations\nhave helped bridge this speed gap. Pipelining has been used to\nincrease concur rency by overlapping memory operations and\nreduce avera ge read/wri te time. Parallelism has been used to\ndeliver more data in less time to improve the perfor mance of\nmultipr ocessor systems and r eal-time applications.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 747, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6924de96-0525-43ec-8123-25ae4377cf80": {"__data__": {"id_": "6924de96-0525-43ec-8123-25ae4377cf80", "embedding": null, "metadata": {"page_label": "448", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e99fd6fb-484c-4804-a046-f2f1085e445f", "node_type": "4", "metadata": {"page_label": "448", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f6ffd12b07050346f9799b87a524ba56fddb7f8e76fe009309af0d3e52bc3209", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.2 Memory cells: ( a) an SR AM cell; ( b) a DR AM cell; ( c) an\nnMOS pass transistor .\nThis chapter introduces commonly used memory technologies\nand their applications, and covers memory cell structur es, a cell\nschematic logic model, and the arrangements of memory cells\nwithin a memory chip to support various applicatio ns. The chapter\nalso covers memory organization, timing, and communication\nprotocols, including those of commonly used memory technologies\ntoday . Memory architectur es of moder n computer systems and an\nintroduction to programming practices for reducing memory tra\ufb03c\nand increasing perfor mance are also discussed and examples\nprovided. An example of the hardwar e description language (HDL)\nmodel for memory is also pr ovided.\n7.2 Memory T echnologies\nIn general, memory technologies are categorize d as read-only\nmemory (ROM) or random access memory (RAM). The hardwar e\nused to store 1 bit of data is called a memory cell. In a ROM, the\ncells ar e nonvolatile  and thus can r etain their contents even when\nthey are not power ed. Other nonvolatile memo ry technologies", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1103, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5006a7e7-8fbe-4d6b-a943-e95f09d79b36": {"__data__": {"id_": "5006a7e7-8fbe-4d6b-a943-e95f09d79b36", "embedding": null, "metadata": {"page_label": "449", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ddc19f2c-bad3-4786-a264-55c2dd89b554", "node_type": "4", "metadata": {"page_label": "449", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2b269a552151707114e120ed621f5ab030a53ef2b02ce24ab4f2fc146d941cca", "class_name": "RelatedNodeInfo"}}, "text": "used today are magnetic disks, \ufb02ash memory [1], and optical discs\n(e.g., CD-RO M) wher e data is organized and accessed in blocks.\nMagnetic disks ar e discussed in Chap. 9 .\nOn the other hand, the cells in a RAM are volatile  and would\nlose their content when not power ed. Both ROM and RAM are\nrandom access in the sense that the amount of time requir ed to\naccess the content of a location is the same. For this reason, ROM\nis sometimes called nonvolatile R AM (NVR AM).\n7.2.1 Read-Only Memories\nThe content of a ROM cell is \ufb01xed at logic 0 or 1. A programmable\nROM (PROM) uses fuse-based technologies that make them one-\ntime programmable; each cell can be programmed to logic 0 (e.g.,\nkeeping the fuse) or 1 (e.g., burning the fuse) . An ultraviolet\nerasable PROM (EPROM), not commonly used today, would erase\nits content when placed under an ultraviolet light source (e.g., for\n30 minutes). An electrically erasable PROM (EEPROM), which is\ncommon today, uses electrically rewritable ROM memory cells to\ntrap logic 0 or 1 values for a long time. EEPROM cells, however,\ncan only be programmed a certain number of times (e.g., typically\n100,000 minimum).\n7.2.2 Random Access Memories\nOn the other hand, RAMs are designed to function as the main\nstorage for programs and data during execution. A RAM cell is\ncalled static  if logic 1 is stored as a static charge, and it can be\nretained as long as the memory is power ed. The static-cell RAMs\nare called SRAMs. A RAM cell is called dynamic  if logic 1 is stored\nas a dynamic charge, and it can only be retained for a very short\ntime unless it is refreshe d, typically once every few milliseconds\n(ms). The dynamic cell R AMs ar e called DR AMs.\nSRAM versus DRAM Cells\nFigure 7.2 illustrates circuit examples for SRAM and DRAM cells.\nThe SRAM cell, which requir es two transistors and two cross-\ncoupled NOT gates, is much lar ger than the DR AM cell that r equir es\none transistor and a small capacitor . The schematic of an nMOS\npass transistor  is shown in Fig. 7.2 (c) with thr ee pins labeled a, b,\nand e. The e input acts like an enable signal. If e = 1, the nMOS", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2119, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "605d4dac-b739-4bf8-be5d-d96314fba0ff": {"__data__": {"id_": "605d4dac-b739-4bf8-be5d-d96314fba0ff", "embedding": null, "metadata": {"page_label": "450", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9b216d01-1019-437e-8d59-a6c0e7ec8dc9", "node_type": "4", "metadata": {"page_label": "450", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "405a032d1a7e2a202775974aefd499c4fa592482823a44efd13665e6d8ee3d0f", "class_name": "RelatedNodeInfo"}}, "text": "pass transistor conducts current in either direction from a to b or\nfrom b to a as if the pins a and b are connected by a wire.\nOtherwise, if e = 0, the transistor keeps the pins a and b\nelectrically isolated (high impedance, Z), with a very small amount\nof current \ufb02owing in either direction as if there is no connection\nbetween the two pins.\nIn Fig. 7.2(a), when  the cell is selected, the two pass transisto rs\nconnect d to q and \n  to \n. The cell content can now be either read\nor written as the q and \n  signal s. Otherwise, when the cell is not\nselected, the two pass transistors keep the two cross-coupled NOT\ngates isolated from the q and \n  signals. During this time, the cell\nretains its stor ed value d as long as the cell is power ed.\nDRAM cells operate di\ufb00erently. In Fig. 7.2(b), when the cell is\nselected and the memo ry is perfor ming a write operation, the\ncapacitor is charged to a voltage level representing logic 1.\nOtherwise, the pass transistor keeps the capacitor isolated and not\nconnected to the q signal. However, the isolated capacitor, if\ncharged to logic-1 voltage  level, retains its charge for only a short\ntime, typicall y a few milliseconds (ms). Therefore, the charge in the\ncapacitor must be refreshed periodically during a refresh cycle .\nOtherwise, the content would be lost over time due to a leakage\ncurrent, much like batteries left in a \ufb02ashlight that is turned o\ufb00\ndischar ge over time.\nThe capacitor can be charged to a voltage requir ed to represent\nlogic 1 in about \u03c4 = R \u2217 C seconds when the cell is selected. The R\nis the size of the equivale nt resistor of the transistor in ohms when\nthe cell is selected. The C is the size of the capacitor in farads. The\ncapacitor can dischar ge in about t = Rz \u2217 C secon ds, where Rz is\nthe size of the equivalent  resistor of the transistor when the cell is\nnot selected (i.e., the cell is isolated). However, Rz is much greater\nthan R.\n[The equation \n  de\ufb01nes how a capac itor is\ncharged. If the charging voltage source Vs = 5.0 V (V for volts), the\nvoltage level in the capac itor would reach 3.16 V in about t = 1RC\nseconds, 5.0(1 \u2013 e\u20131)V = 3.16 V. The 3.16 V is the voltage level for\nlogic 1 when  using the 0 to 5.0 voltage range. A capacitor would,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2239, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "09f49bf7-0eb4-4016-8bf9-c0cb5d598531": {"__data__": {"id_": "09f49bf7-0eb4-4016-8bf9-c0cb5d598531", "embedding": null, "metadata": {"page_label": "451", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8db5e1ca-33e8-4a25-95b3-3f15d34b6f60", "node_type": "4", "metadata": {"page_label": "451", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "092049bd8989eab4f53d9ad246a501e5fdacb0b05d10b13b719b20399cdc0641", "class_name": "RelatedNodeInfo"}}, "text": "however, be fully charged in about t = 5RC seconds. The equation  \n de\ufb01nes how a capacitor dischar ges [ 2].]\nA DRAM refresh cycle must be perfor med befor e the cells lose\ntheir contents. For example, the Micron 64MB DRAM [3], which is\norganized as a 128M \u00d7 4 memory and has 512 million (128M \u2217 4)\ncells, requir es every cell to be refreshed within 64 ms. Therefore,\nmany cells must be refreshed during each refresh cycle so that the\nDRAM can still be used for read/write operations  between each\nrefresh cycle. For instance, the Micron DRAM refreshes 64K\n(65,536) cells at the same time during a refresh cycle. This\nrequir es 8192 (512M/64K ) refresh cycles to refresh all the 512M\ncells once every 64 ms. This implies that each refresh cycle can\nstart once every 7.8 \u03bcs (64ms/8192 cycles) to refresh 64K cells at\nthe same time. The DRAM requir es 7.5 ns to read or write its\ncontent. Therefore, the DRAM can support more than 1000 (7.8\n\u03bcs/7.5 ns) r ead/write operations between each r efresh cycle.\nDuring a read operation, the charge in the capacitor is measur ed\nto determine the cell content as 1 or 0. If the capa citor\u2019s charge is\nat the logic-1 voltage level, some of its charge would be lost during\nthis read operation, and thus the cell must be refreshed again. This\nis done  by perfor ming a write operation after each read to restor e\nthe contents of the cells that wer e just r ead.\n7.2.3 Applications\nThere are many applicat ions for ROMs. For example, EEPROM is\nused to store a startup  (bootloader ) program that begins to\nexecute when the system  is power ed, or to store a con\ufb01guration\n\ufb01le for a ROM-based programmable logic device (PLD). EEPROM\ntechnologies are also used in the design of \ufb02ash memory, for\nexample, \ufb02ash drives. However, because data in a \ufb02ash drive is\norganized and accessed in blocks, like in magnetic disks and\noptical discs, \ufb02ash drives are also relatively slow. Many portable\ndevices today use \ufb02ash drives in place of disk drives.\nSRAMs requir e more hardware and thus are more expensive per\nbyte, but they are faster than equivalent DRAMs because they do\nnot requir e refresh and write-af ter-read cycles. Moder n computers\nuse DRAMs as main memory and SRAMs as cache memory to", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2219, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58894767-3d65-4b70-aeda-8c822727bdd7": {"__data__": {"id_": "58894767-3d65-4b70-aeda-8c822727bdd7", "embedding": null, "metadata": {"page_label": "452", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4bfe78b6-f161-4128-b770-63fab47693b7", "node_type": "4", "metadata": {"page_label": "452", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "468763422711e2a5af119900f5a54bc8afe3cb163fc220c656eab2acb01ff529", "class_name": "RelatedNodeInfo"}}, "text": "decrease the average time requir ed to access data. Cache memory\norganizations ar e discussed in Chap. 10 .\n\u00a0\n7.3 Memory Cell Array\nAll memori es internally use two-dimensional (2-D) cell\norganizations in order (1) to reduce the total number of signals\nrequir ed to select a set of target cells, and (2) to refresh multiple\ncells at the same time if the cells are dynamic. A 2-D organization\nwould requir e two selection signals per cell instead of only one that\nwould be needed if the cells were organized in one dimension.\nHowever, a 2-D organization requir es far fewer selection signals.\nFor example, consider a 128B memory that contains 1024 (128 \u2217\n8) cells. If the cells are organized in one dimension,  as illustrated in\nFig. 7.3(a), 1024 selection signals would be needed to select 1024\ncells, one at a time. The cells are said to be organized as a 1K \u00d7 1\n\u00d7 1 (i.e., 1K by 1 by 1) cell array consisting of 1024 rows, with one\ncolumn and one cell at each r ow-column intersection.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 987, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0c1e2620-ae68-4e3f-84c5-177b134ea99c": {"__data__": {"id_": "0c1e2620-ae68-4e3f-84c5-177b134ea99c", "embedding": null, "metadata": {"page_label": "453", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0596770-ce42-43c3-96e3-e911138fdaee", "node_type": "4", "metadata": {"page_label": "453", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1d0907147f0382b64f28bbcc46a694e7b3020669b4f1225bda5f0952c6379bc9", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.3 The inter nal or ganization of a 1024-cell memory : (a)\none-dimensional or ganization r equiring 1024 selection signals; ( b)\ntwo-dimensional or ganization r equiring only 64 selection signals.\nOn the other hand, as illustrated in Fig. 7.3 (b), a 32 \u00d7 32 \u00d7 1 cell\narray consists of 32 rows, 32 columns, and one cell at each row-\ncolumn inters ection. It requir es only 64 (32 + 32) selection signals\nto select, one at a time, 1024 (32 \u2217 32) cells. Likewise, a 1M \u00d7 1\nmemory would requir e 1M selection signals (a very large number)\nin one-dimensional organization versus only 2048 (2 \u2217 210)\nselection signals in a two-dimensional organization. Clearly, a two-\ndimensional or ganization is advantageous.\nA 32 \u00d7 32 \u00d7 1 cell array would also requir e only 32 refresh\ncycles, each one refreshing all the 32 cells in one row, versus 1024", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 843, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2058ba4a-60a1-455e-96e1-1da80e0e1b98": {"__data__": {"id_": "2058ba4a-60a1-455e-96e1-1da80e0e1b98", "embedding": null, "metadata": {"page_label": "454", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6e01e6c5-3eb1-4824-8a03-44742ec3fb63", "node_type": "4", "metadata": {"page_label": "454", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c4641930e365775d8143fbb84448a24a92ea9ee0708cc11fa465d2a9f4355220", "class_name": "RelatedNodeInfo"}}, "text": "refresh cycles, each one refreshing only one cell in a 1K \u00d7 1 \u00d7 1\ncell array. When one of the row-selection signals is asserted, all the\ncells in that row are selected at the same time. This is called a row\nactivation . Furthermore, because a row-selection signal is the\noutput of an address decoding circuit (not shown), the signal does\nnot have the requir ed fan-out to directly activate a large number of\ncells. Instead , the signal enables a transistor that allows a power\nsource to activate all the cells on that r ow.\nThe content of each cell on the activated row is deter mined\n(\u201csensed\u201d) as logic 0 or logic 1 using a special electr onic circuit\nknown as a sense ampli\ufb01er . The ampli\ufb01er compar es a cell\u2019s\nvoltage level with a reference voltage source, for example, 50% of\nthe voltage used to represent logic 1. During a read operation, if\nthe cell contains logic 0, it will pull down the reference voltage\nslightly, causing the sense ampli\ufb01er to detect logic 0; otherwise,\nthe voltage level for logic 1 in the cell will pull the reference\nvoltage slightly up, causing the sense ampli\ufb01er to detect logic 1.\nOnly one sense ampli\ufb01er per column is needed. The logic 0 or 1\noutput from the sense ampli\ufb01er is latched and is made available to\nthe tri-state bu\ufb00ers contr olled by the column-selection signals. In\nthe case of DRAMs, the output of the latch is also used to refresh\nthe target cell after each read. A more detailed discussion of sense\nampli\ufb01ers is outside the scope of this book and thus is referred to\nelsewher e.\n7.3.1 W ord Access\nFigure 7.4 illustrates the organization of a 512 \u00d7 2 (a 2-bit word)\nmemory . In the \ufb01gure, the 1024 cells are organized as two\nseparate 32 \u00d7 16 \u00d7 1 cell arrays, e\ufb00ectively creating a 32 \u00d7 16 \u00d7\n2 cell array. The cells are now accessed two at a time, one from\neach of the 32 \u00d7 16 \u00d7 1 cell arrays. For example, the assertion of\nthe row-0 and col-0 selection signals will select the cell at the\nintersection of row 0 and column 0, as well as the cell at the\nintersection of row 0 and column 16. The 32 \u00d7 16 \u00d7 2 cell array,\nwhich still consists of 32 rows and 32 columns, requir es, as in Fig.\n7.3, 32 r efresh cycles to r efresh a r ow of 32 cells at the same time.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2210, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f05f7c6e-258f-40e8-8c15-eaefed2c04cd": {"__data__": {"id_": "f05f7c6e-258f-40e8-8c15-eaefed2c04cd", "embedding": null, "metadata": {"page_label": "455", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6f63531a-ad63-4d98-9906-047a5ea1e7c7", "node_type": "4", "metadata": {"page_label": "455", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "bae1e63ed19dbd8f253f98361d546e775f63e6516a8da0e6ff587af5bd263fb6", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.4 A 1K cell or ganized as a 32 \u00d7 16 \u00d7 2 cell ar ray to cr eate\na 512 \u00d7 2 memory (shown for r ead operation).\n7.3.2 Burst Access\nA burst access refers to the memory\u2019s ability to transfer a burst of\ndata (one word each). A burst size may be small\u2014a few bytes\u2014or\nlarge\u2014the size of a large block (e.g., 4 KB) called  a page . Burst\naccessing is implemented by activating a row and then asserting\nthe column-selection signals one at a time and in some speci\ufb01ed\norder (e.g., sequentially)  to either read or write a set of target\ncells. Each burst access must be \ufb01rst preceded by a row activation\noperation. If a page access, or page mode access , expands", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 658, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8798d083-bd61-406f-95d6-34b1af422c11": {"__data__": {"id_": "8798d083-bd61-406f-95d6-34b1af422c11", "embedding": null, "metadata": {"page_label": "456", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "18171836-d597-40ba-80d3-ac3abbd45117", "node_type": "4", "metadata": {"page_label": "456", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "db38032b69a619d8d52ba1c96fa9a213914c0a81618f15c3edc2392ab0b1acf6", "class_name": "RelatedNodeInfo"}}, "text": "multiple rows, the memory may be enabled to automatically\nactivate each succeeding row when the access from the current\nrow is completed. A page mode access increases memory\ne\ufb03ciency  by reducing  the memory idle time, and at the same\ntime, it mak es a page transfer seamless.\nIn order to make memory even more e\ufb03cient, the cells can be\norganized into banks , each a cell array, as illustrated in Fig. 7.5 . In\nthe \ufb01gure, a 4K \u00d7 1 mem ory is designed using four banks, each a\n32 \u00d7 32 \u00d7 1 cell array. In this case, a row activat ion operation in\nanother bank can be started while the memory operation on the\ncurrent bank is still in progress. Therefore, this makes bank-access\nturn around time shorter  when memory is requir ed to perfo rm\noperations that involve di\ufb00er ent banks.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 779, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "586479bf-0dd9-4433-a238-3d5d3353c114": {"__data__": {"id_": "586479bf-0dd9-4433-a238-3d5d3353c114", "embedding": null, "metadata": {"page_label": "457", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "99f9bcfb-a2a1-4758-8f83-7b32e281b26c", "node_type": "4", "metadata": {"page_label": "457", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "84827c1e47c280b5982c71bb8f54b08fcac73cee77248a2092be518ea3733db1", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.5 The or ganization of a 4K \u00d7 1 memory into four banks,\neach a 32 \u00d7 32 \u00d7 1 cell ar ray.\nA multibank memory may be designed to support intermittent\nshort burst accesses from one bank while a block transfer is taking\nplace from another bank. In this case, an intermittent access would", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 291, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "23a5c9a1-b618-47d4-8cb4-48b9cca305dd": {"__data__": {"id_": "23a5c9a1-b618-47d4-8cb4-48b9cca305dd", "embedding": null, "metadata": {"page_label": "458", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ecb3515-d8ed-49c1-bbd0-4c28170f162c", "node_type": "4", "metadata": {"page_label": "458", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "96124f0a1ebb04e4e1a0c9a7af22b97a16eb36d09829248ba5974ebf91b6c5dd", "class_name": "RelatedNodeInfo"}}, "text": "momentarily interrupt an ongoing block transfer from one bank to\nallow a short burst access fr om another bank.\nMost modern memory chips support word access  and are also\nmultibank ed. They also support burst and page mode accesses. For\nexample, consider the Micron 512 Mb (million bits) DRAM memory\n[3]. It is available as a 128M  \u00d7 4 RAM with four banks, each a 8192\n\u00d7 4096 \u00d7 4 cell array; a 64M \u00d7 8 RAM with four banks, each a\n8192 \u00d7 2048 \u00d7 8 cell array; or a 8M \u00d7 16 RAM with four banks,\neach a 8912 \u00d7 1024 \u00d7 16 cell array. For instance, the Micron 128M\n\u00d7 4 RAM supports 1, 2, 4, or 8 burst word and 4096-bit page\ntransfers, wher e a wor d is 4 bits.\n\u00a0\n7.4 Memory Organization\nMemory organization refers to the internal components and their\norganization within a memory chip, using several memory chips to\ncreate a larger memory called a memory unit, and memory\ncommunication protocols. Three sets of signals\u2014 address bus,\ndata bus, and control bus\u2014are used to contr ol the operations of\na memory chip or unit. The address bus signals specify the address\nof a single memory locatio n, which could be the starting address of\na burst  or page access. They are used to select a set of target cells\nfor read or write operation. For a basic memory organization, the\ncontr ol bus is used to specif y read or write operatio ns, or neither in\ncase the data bus is also used to communic ate with other\ncomponents in the system.\nFigure 7.6 illustr ates the logical view of a 1K \u00d7 1 memory, its\nblock diagram as an SRAM, and its block diagram as a DRAM. The\nSRAM requir es a 10-bit address bus with signals labeled a0to a9; a\n1-bit data bus labeled d; and three active-low contr ol bus signals\nlabeled _ce (chip enable), _we (write enable), and _oe (output\nenable). The _ce, when asserted, selects the memory chip and,\ntherefore, a set of target cells to perfor m either a read operation if\n_we = 1 (not asserted) or a write operation if _we = 0 (asserted).\nThe _oe signal, when asserted, causes the data from the SRAM to\nappear on the data bus during a r ead operation.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2063, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aa7d8766-c9ba-4b99-a081-816d76c64da0": {"__data__": {"id_": "aa7d8766-c9ba-4b99-a081-816d76c64da0", "embedding": null, "metadata": {"page_label": "459", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8651660d-5f66-4ce3-8d46-8395ccb0208a", "node_type": "4", "metadata": {"page_label": "459", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3da7286f715d0f2666659a17c3bf42bade2086069948cba1745bfbd7bfdb72e6", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.6 Logical view and block diagram of 1K \u00d7 1 memory with\nactive-low contr ol signals: ( a) logical view; ( b) SRAM block diagram;\n(c) DRAM block diagram.\nA DRAM, which typically has many more cells and also requir es\nthe cells to be refreshed, has additional contr ol signals. The row\naddress strobe (ras) and column address strobe (cas) are used to\nspecif y a single memory address in two parts, a row address and a\ncolumn address, using the address bus. The _ras and _cas signals\nare also used to place the memory in a refresh cycle mode. The\nDRAM block diagram in the \ufb01gure has a 5-bit address bus labeled\na0 to a4, a 1-bit data bus also labeled d, and a 5-bit contr ol bus, all\nactive-low signals.\n7.4.1 Modern DRAMs\nA moder n DRAM chip is designed to operate synchr onously, and\nthe chip is called a synchr onous DRAM (SDR AM). The chip may\ncontain one or more pipelined data paths to increase memory\nbandwidth by pr ocessing multiple r ead/write r equests concur rently.\nTypically, a moder n DRAM chip uses the interface signals _ce,\n_ras, _cas, and _we as a 4-bit instruction, also called a memory\ncommand , to select and send row and column addresses, and an\naccess mode  (e.g.,  a single or burst access) to the chip.\nCommands are also used to perfor m other memor y tasks, such as\nto start a refresh cycle. Figure 7.7  shows  the data path of a moder n\nSDRAM consisting of two memory banks. It contains registers to", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1432, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9d3606d5-2363-4e51-bbbb-f2d49a8278cc": {"__data__": {"id_": "9d3606d5-2363-4e51-bbbb-f2d49a8278cc", "embedding": null, "metadata": {"page_label": "460", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "02951735-9752-42df-b6fa-00fb80db7bc4", "node_type": "4", "metadata": {"page_label": "460", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4e1c0a437c43bdf1775c738774951ec50aa194b0a2c5ca9cde33f41cc0d2ab88", "class_name": "RelatedNodeInfo"}}, "text": "load an access mode and row and column addresses. A bank\nnumber (0 or 1) is the same as one of the row address (e.g., the\nhighest or the lowest) bit. The column address is stored in a\ncounter and is incremented every clock cycle when the access\nmode indicates a burst or page transfer .\nFIGURE 7.7 An inter nal or ganization of an SDR AM with two banks. A\nsignal fr om the r ow addr ess selects one of the banks. Not all signal", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 427, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a7b2c025-a457-4c3c-8541-2f1303066ff8": {"__data__": {"id_": "a7b2c025-a457-4c3c-8541-2f1303066ff8", "embedding": null, "metadata": {"page_label": "461", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "51e483d4-fe6f-494b-91cb-a168a952baa3", "node_type": "4", "metadata": {"page_label": "461", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "baec8d852ab90e213761596883104374edb12fdd89a2e759b93aaf189ae33f8f", "class_name": "RelatedNodeInfo"}}, "text": "connections ar e shown [ 3].\nTable 7.2 presents a list of commands used in a Micron SDRAM.\nFor example, if command  = (0000)2, which implies _ce = 0, _ras =\n0, _cas = 0, and _we = 0, the SDRAM inputs an access mode using\nthe address bus, which is then loaded into the mode register, as\nshown in the \ufb01gure. If command  = (0011)2, a row address\n(including a bank numbe r) is loaded into one of the row-addr ess\nregisters identi\ufb01ed by the bank number . If command  = (0101)2, a\ncolumn address is loaded into the column address counter . The row\naddress is used to activat e a row in the target bank. The counter is\nused to generate column addresses if the access mode indicates a\nburst access.\nTABLE  7.2 Examples of Commands Used by a Micr on SDR AM", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 747, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd1c1002-6bcd-4a29-8032-e3d58424bc30": {"__data__": {"id_": "cd1c1002-6bcd-4a29-8032-e3d58424bc30", "embedding": null, "metadata": {"page_label": "462", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3a91f6fd-06e7-4d31-aee6-7a8cbc758a9a", "node_type": "4", "metadata": {"page_label": "462", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "63af839e99d5a5e73dc60e4a48eeedc915d2096103377034cf9a34dd348d9864", "class_name": "RelatedNodeInfo"}}, "text": "Over the years, the demands for greater memory bandwidth and\nvarious system requir ements have produced various memory\ntechnologies. Advanceme nts in memory chip internal organization\nand communication protocols have resulted in today\u2019s high-\nperfor mance SDRAMs. For example, while an SDRAM operates at\nthe speed of one data item per clock cycle, a double data rate\n(DDR, DDR2,  DDR3, etc.) SDRAM operates at the speed of two data\nitems per clock cycle; one data item is transfer red on the positive\nedge of the clock signal and another on the negative edge of the\nclock signal.\nAnother example is the Rambus proprietary technologies, such\nas RDRAM and XDR DRAM high-speed, point-to -point\ncommunication using pack ets [4]. In this case, a packet is a short\nburst of, for example, 1-bit wide data transmitted from a source\n(e.g., memory) to a destination module (e.g., a processor). Packet\ncommunications work similar to how people communicate with\nletters. Each letter (a packet) contains a source address, a\ndestination address, and a payload (content) that goes through\none or more (point-to -point) post o\ufb03ces befor e arriving at the\ndestination.\n7.4.2 SRAM Cell Model\nWhile a real memory cell cannot be modeled with logic gates, the\nbehavior of an SRAM cell can be modeled with logic gates to\nillustrate mem ory design and its operation. Figure 7.8(a) illustrates\na schematic logic model of an SRAM cell. It consists of an SR latch\n(without the clock) and three tri-state bu\ufb00ers. Two resistors that\nconnect the outputs of the input tri-state bu\ufb00ers to ground are\ncalled pull-down resistors. They cause the outputs to become 0\ninstead of high impedanc e (Z) when the tri-state bu\ufb00ers are not\nenabled. This makes the s and r inputs of the SR latch both 0,\ncausing the latch to retain its stored 1 or 0 value when the cell is\nnot selected. The model uses tri-state bu\ufb00ers to mimic the\nfunctions of the pass transistors used in Fig. 7.2(a). The SR latch\nbecomes electrically isolated when it is not selecte d, much like the\ncross-coupled NOT gates in a real SRAM cell. Figure 7.8(b) shows\nthe cell\u2019s block diagram,  and a pull-down tri-state bu\ufb00er and its\ntruth table ar e shown in Fig. 7.8 (c).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2197, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3dd24298-f384-4df1-9dc9-1e2433d9b022": {"__data__": {"id_": "3dd24298-f384-4df1-9dc9-1e2433d9b022", "embedding": null, "metadata": {"page_label": "463", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f88d829b-d4d1-4002-964f-e901c153bf51", "node_type": "4", "metadata": {"page_label": "463", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "cdc61f1f74577bbc3b5e1bc7035488f5809e284a819b484a68017c729a36f0db", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.8 A logic model of an SR AM cell: ( a) gate-level model; ( b)\nthe cell\u2019s block diagram; ( c) a pull-down tri-state bu\ufb00er and its\ntruth table.\n7.4.3 Internal Organization: SRAM Chip\nWhile a cell array is the core storage hardwar e, additional circuits\nare needed to translate a given memory address into one of many\nrow and column selection signals and route data in and out of cell\narray, typica lly using a bidirectional data bus. A bidirectional bus\nreduces the number of wir es requir ed to transmit data in and out of\nmemory .\nExample 7.1.  The design of 16 \u00d7 1 SRAM is presented. It requir es a 4-bit address bus, a\n1-bit bidir ectional data bus, and a 3-bit contr ol bus.\nSolution : The logical and block diagrams of the SRAM are shown in Fig. 7.9 with four\naddress bus signals labeled a3 to a0, a 1-bit bidirectional data bus signal labeled d, and\nthree active-low contr ol bus signals labeled _ce, _we, and _oe. The design detail and\nread/write operations ar e described ne xt.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 994, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7565eb2e-d9a0-4b46-9d3a-7691dc611dab": {"__data__": {"id_": "7565eb2e-d9a0-4b46-9d3a-7691dc611dab", "embedding": null, "metadata": {"page_label": "464", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2f1d47bb-1c96-4a6e-9f36-414ade1c369e", "node_type": "4", "metadata": {"page_label": "464", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a66061aac2b5d2134ab4d5463a3a79219436309c1b064206d9f056843707b248", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.9 Logical view and block diagrams of a 16 \u00d7 1 SR AM.\nFigure 7.10 illustr ates the internal organization of the SRAM\nusing a 4 \u00d7 4 \u00d7 1 cell array and two 2-to-4 decoders. The row\ndecoder translates the upper two address signals a3 and a2 into\nfour row-selection signals. The column decoder translates the\nlower two address signals a1 and a0 to four column-selection\nsignals. The row decoder may always be enabled to allow early row\nactivation, but the column decoder must be enabled when _ce = 0,\nas shown in the \ufb01gure. All the input signals are bu\ufb00er ed to avoid\npossible fan- out violations at the sour ce of the signals.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 631, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9ef6293e-d6a2-4ef5-b8f4-3bdfdc4ad282": {"__data__": {"id_": "9ef6293e-d6a2-4ef5-b8f4-3bdfdc4ad282", "embedding": null, "metadata": {"page_label": "465", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f58a1067-f3d2-4bce-9037-4f352d3e716e", "node_type": "4", "metadata": {"page_label": "465", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e459bb38acf2b2b07262187da360234953578da851c201ddec60626308482de5", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.10  The inter nal or ganization of a 16 \u00d7 1 SR AM using a 4\n\u00d7 4 \u00d7 1 cell ar ray.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 89, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a026b01d-98e1-46fa-8549-acbc33e3ea55": {"__data__": {"id_": "a026b01d-98e1-46fa-8549-acbc33e3ea55", "embedding": null, "metadata": {"page_label": "466", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ff393923-7299-47d2-a5e7-56c5981d8454", "node_type": "4", "metadata": {"page_label": "466", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "ea422d2f42cde2d16e18ac9b78d9215d39b02654ddd3cc0cf9dfcf3e8464f033", "class_name": "RelatedNodeInfo"}}, "text": "During a memory operation when _ce = 0, an active row-\nselection signal will enable all the four cells in the row associated\nwith a given memory address. This will enable all the output tri-\nstate bu\ufb00ers in each cell on that row, and will cause their 1-bit\ncontents to appear on the four data lines d0 to d3 within the cell\narray. An active column-selection signal enables one of the column\ntri-state bu\ufb00ers to pass d0, d1, d2, or d3 as d_out . Durin g a read\noperation when _we = 1, the d_out  is placed on the data bus if _oe\nis asserted. The single output tri-state bu\ufb00er is used to design a 1-\nbit bidir ectional data bus labeled d.\nA mem ory write operation works similar to the read operation,\nbut this time, the single input tri-state bu\ufb00er is enabled to route an\nincoming data d into the cell array. The tri-state bu\ufb00er reduces the\nSRAM\u2019s power consumption during a read operation. The _we, d,\nand asserted column-selection signal are used to generate si = d\nand ri = \n for a target cell in the activated row. The si and ri inputs\nfor the remai ning cells on that row will be zero, causing these cells\nto retain their 1-bit contents.\nExample 7.2.  The design of an 8 \u00d7 2 SRAM is presented. It requir es a 3-bit address bus,\na 2-bit bidir ectional data bus, and a 3-bit contr ol bus.\nSolution : Figure 7.11 shows the logical view and the block diagram of an 8 \u00d7 2 SRAM\nthat consists of eight locations, each one capable of storing a 2-bit value. Figure 7.12\nillustrates the internal organization of the SRAM that contains two 4 \u00d7 2 \u00d7 1 cell arrays, a\n2-to-4 row decoder, and a 1-to -2 column decoder .\nThe 8 \u00d7 2 SRAM still uses a 4 \u00d7 4 array of cells, as in Fig. 7.10,\nexcept that in this case, a 1-to-2 column decoder is used to select\none cell from each of the 4 \u00d7 2 \u00d7 1 cell arrays. Also, the memory\nhas two input and two output tri-state bu\ufb00ers. The 2-bit\nbidirectional data bus signals ar e labeled d1 and d0.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1921, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2fa85a0e-f4b9-4bcb-b098-f46aa5d3edb8": {"__data__": {"id_": "2fa85a0e-f4b9-4bcb-b098-f46aa5d3edb8", "embedding": null, "metadata": {"page_label": "467", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2207db1a-f0cf-433b-ba25-8e324887beb8", "node_type": "4", "metadata": {"page_label": "467", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5e3e5cfed7e0fe54cceb8485a011bfc0910fbf067c3211b1a2cf700215dd3f00", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.11  Logical view and block diagram of an 8 \u00d7 2 SR AM.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 62, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6033bcce-b187-4def-b2a8-04502d90f5ee": {"__data__": {"id_": "6033bcce-b187-4def-b2a8-04502d90f5ee", "embedding": null, "metadata": {"page_label": "468", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2cd99a0f-41ba-49ef-b66e-f1be7a24e7c4", "node_type": "4", "metadata": {"page_label": "468", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "17a23b817a543de109d39a4b8c5c29dc6d38e4132c8de9931d10c7f98e20241c", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.12  The inter nal or ganization of an 8 \u00d7 2 SR AM using two\n4 \u00d7 2 \u00d7 1 cell ar rays.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 92, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b3cca6bb-3acc-478e-91ea-05bdcac06509": {"__data__": {"id_": "b3cca6bb-3acc-478e-91ea-05bdcac06509", "embedding": null, "metadata": {"page_label": "469", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bab13340-ac85-4ad3-a4e9-69ce02d53a22", "node_type": "4", "metadata": {"page_label": "469", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "aa708e5348447aae3e79846029199f283c77fdece756deba5cbb4dd6035958f7", "class_name": "RelatedNodeInfo"}}, "text": "7.4.4 Memory Unit Design\nA single memory chip typically does not have su\ufb03cient storage\nspace to support a comp lex digital system such as a computer .\nProcessors operate on multiple data bits (e.g., 16-, 32-, or 64-bits)\nat the same time, and several GB of storage space may be\nnecessary to store program instructions and data, each as a\nmemory data item, during execution. A memory unit refers to the\nphysical organization of the storage space, known as the main\nmemory that may be accessed by one or more processors. When\nthere is more than one processor, each processor must take turns\naccessing the memory unit, which typically is designed using one\nor more memory modules (e.g., memory cards). Each module\nstores multiple bytes, generally 4B or 8B, per memory addr ess.\nThe internal organization of a memory unit depend s on how data\nis distributed among the many individually referenced storage\nspaces (i.e., cells). In one organization, data from several\nconsecutive addresses may be stored in one memory module, and\nin another organization, they may be stored in di\ufb00erent modules\nand/or in di\ufb00er ent banks if multibank cell organizat ions are used. In\nSec. 7.6, we will present several organizations of data storage in\nmemory . In the remaining sections and chapters, the terms\nmemory  and main memory  may be used to mean one or more\nmemory units.\nMemory Module\nA mem ory module organized as a memory card is either a single\ninline memor y module (SIMM), which is not very common today, or\ndual inline memory modu le (DIMM). While a SIMM card has pins on\none side, a DIMM is small er and has half the pins on one side and\nhalf on the other side of the card. Figure 7.13 illustrates an\nexample 16 \u00d7 8 SIMM using eight 16 \u00d7 1 memory chips. Address,\ndata, and contr ol bus signals connect to all the memory chips for\nsimultaneous read/write access. Bu\ufb00er gates prevent fan-out\nviolation at the sour ce of the bus signals.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1927, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6f4513fb-1ed3-4241-a9f2-81897b5c44c0": {"__data__": {"id_": "6f4513fb-1ed3-4241-a9f2-81897b5c44c0", "embedding": null, "metadata": {"page_label": "470", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2901d76f-ddfb-493e-9aff-0917fb98d9b8", "node_type": "4", "metadata": {"page_label": "470", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e4a47888c61e91b65b4f5b74fb9d339cf0fc8625b57d5bc2972d77ea87a94925", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.13  A 16 \u00d7 8 SIMM.\nA small outline DIMM (SODIMM) is about half the size of regular\nSDRAM DIMMs. For examples of memory modules, refer to [5].\nError correction code (ECC) SDRAMs implement a Hamming coding\nscheme to detect and correct a single-bit memory error. For\nexample, a 64-bit ECC SDRAM module uses eight parity bits to\nstore a 64-bit data as a 72-bit Hamming code.\nMemory Unit\nComputers are typically built with several memory expansion slots\nto install one or more memory cards, one per slot. Assuming that\nonly 2-GB and 4-GB DIMMs are available, a 1G \u00d7 64 memory unit is\ndesigned using either four 2-GB DIMMs or two 4-GB DIMMs,\ndepending on how many memory e xpansion slots ar e available.\nExample 7.3.  The design of a 64 \u00d7 4 (32 B) memory unit using 16 \u00d7 4 memory modules\nis presented, wher e a module uses 16 \u00d7 1 memory chips.\nSolution : Figure 7.14  shows the logical view and block diagram of a 64 \u00d7 4 memory unit\nwith six address lines labeled a5 to a0 and four data bus lines labeled d3 to d0. The\nmemory unit requir es four (64/16) modules each to store data from one-fourth of the\naddress space. Two of the six address signals are used to identif y a target memory\nmodule that will perfor m a read or write operation. The remaining four address signals", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1278, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "545e7709-837e-4b59-a9e6-139829703f28": {"__data__": {"id_": "545e7709-837e-4b59-a9e6-139829703f28", "embedding": null, "metadata": {"page_label": "471", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8168aa4d-837f-479a-b375-578222b42bd0", "node_type": "4", "metadata": {"page_label": "471", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7c33d9d459040af8c4b682012f77dd157871909122deba5eea5327a75abd67ce", "class_name": "RelatedNodeInfo"}}, "text": "are used to identif y a 4-bit target memory content from the selected memory module. For\nexample, the address bits a5 and a4 can be used to divide the memory address space\ninto four data regions of size 16 each, as shown in Fig. 7.14 (a). The data from each region\nis stor ed in one memory module.\nFIGURE 7.14  A 64 \u00d7 4 memory unit: ( a) logical view divided into\nfour data r egions; ( b) block diagram.\nThe memory  unit requir es a 2-to-4 decoder to translate the\naddress bits a5 and a4 to four chip enable signals _ce0 to _ce3, one\nfor each of the memory modules, as illustrated in Fig. 7.15. The\ndecoder itself is enabled when a master chip enable (i.e., _ce) is\nasserted. The address lines a3 to a0 and the remaining contr ol\nsignals, _we and _oe if SRAM or _ras, _cas, _we, and _oe if DRAM or\nSDRAM, are used to perform a read or write operation. Only the\nenabled memory module can transfer data using the 4-bit data\nbus.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 926, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fada4697-ad14-4f5a-a882-8578f1ad3d11": {"__data__": {"id_": "fada4697-ad14-4f5a-a882-8578f1ad3d11", "embedding": null, "metadata": {"page_label": "472", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6a928a86-1137-4139-a6e0-a1e6545a6e0c", "node_type": "4", "metadata": {"page_label": "472", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5e6feaddc02c3f27d4fc8604523a4c53033007e6d3786606c0da619c71eee13e", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.15  A 32- B memory or ganized as a 64 \u00d7 4 memory unit.\nThe internal organization of the 64 \u00d7 4 memory unit in Fig. 7.15\nstores each region\u2019s data, shown in Fig. 7.14(a), in one memory\nmodule. Other data storage organizations are presented in Sec.\n7.6.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 260, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c4415407-70c8-48cb-8c32-1c8e0eebfae0": {"__data__": {"id_": "c4415407-70c8-48cb-8c32-1c8e0eebfae0", "embedding": null, "metadata": {"page_label": "473", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "423e1ad4-1533-4ac6-93d8-cc2a3d18ec43", "node_type": "4", "metadata": {"page_label": "473", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "dfb49772401148e1a412695cbc13ca4beb68c045100fae2af33172d2feacdfb5", "class_name": "RelatedNodeInfo"}}, "text": "7.5 Memory Timing\nA memory -timing diagram precisely illustrates memory\ncommunication protocol. It speci\ufb01es the timing of SRAM or DRAM\ncontr ol signa ls or the timing of SDRAM commands . The total time\nrequir ed to select target cells and perfor m a read or write\noperation is called a memory access time . A memory cycle\nincludes both an access time and a data transfer time .\nThe access time is directly proportional to the size of the\nmemory cell array, which deter mines the size of the row and\ncolumn decoders inside the memory chip. The decoders in turn\ndeter mine the time requir ed to activate a target row and access\ntarget cells. Moreover, the decoders are multilevel and thus have\nlong propagation delays. In addition, while the communication\nprotocols of a memory unit, module, or chip are the same, the\nprotocols di\ufb00er with each memory technology .\n7.5.1 SRAM\nFigure 7.16 illustrates an SRAM read cycle from the memory point\nof view. A memory -timing  diagram can also be draw n from the CPU\npoint of view that will be discussed in Chap. 9 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1054, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f9838ca-4eac-4278-aaac-a05eaf61dc85": {"__data__": {"id_": "1f9838ca-4eac-4278-aaac-a05eaf61dc85", "embedding": null, "metadata": {"page_label": "474", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aea1591d-b6bd-437c-b8d2-309d7aabbc42", "node_type": "4", "metadata": {"page_label": "474", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "242382d611d8ad105579ed68ff0da5c4c660a9896a5f4be324603b6dd77b363b", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.16  An SR AM read cycle fr om the memory point of view .\nAt the start of a memory read cycle, a memory address is placed\non the address bus prior to or at the same time that the _ce signal\nis asserted.\nThe _oe signal is used with the _ce to control one or more output\ntri-state bu\ufb00ers (e.g., Fig. 7.12). In order to minimize the duration\nof a read cycle, the _oe can be asserted at any time within a\nmaximum time after the _ce is asserted, as illustrated  in the timing\ndiagram. The _oe allows the data bus to be used only when data\nfrom the cell array is available and not before. The _ce is\ndeasserted last because it would disable the output tri-state\nbu\ufb00er(s) as well as the column decoder .\nA memory write cycle is similar to a read cycle, except that data\nmust be placed on the data bus at the same time that _ce is\nasserted or within a maximum delay after _we is asserted to\nminimize the time the data bus is used. Figure 7.17 illustrates an\nSRAM memory write cycle.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 982, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "627cc5b8-ac42-42b2-a61e-be07852220ad": {"__data__": {"id_": "627cc5b8-ac42-42b2-a61e-be07852220ad", "embedding": null, "metadata": {"page_label": "475", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d7828f60-d38a-45b5-9bb1-c2cb95111bf7", "node_type": "4", "metadata": {"page_label": "475", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8c27efc31bfacd008ffe89c54e18be7634b46c13269c97d2e13fd8d104aa1915", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.17  An SR AM write cycle fr om a memory point of view .\nA mem ory cycle is initiated by CPU and typically takes multiple\nCPU clock cycles to complete.\n7.5.2 DRAM\nThe read and write cycles of a DRAM requir e that the target\nmemory address be issued in two parts as row and column\naddresses using the address bus. This reduces the size of the\naddress bus, and can reduce the total time requir ed to complete a\nburst access.  That is, while a row is still activated, multiple column\naddresses can be applied in sequence to either read or write\nmultiple data values quickly . Figure 7.18 illustrates DRAM read and\nwrite cycles fr om the memory point of view .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 664, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d37a05fb-b2ab-4e99-8605-8ff628cb724a": {"__data__": {"id_": "d37a05fb-b2ab-4e99-8605-8ff628cb724a", "embedding": null, "metadata": {"page_label": "476", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f17cb0b0-7402-4b3c-88f0-eab703f511bb", "node_type": "4", "metadata": {"page_label": "476", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4fbd17b033b638e256a4ef83a737da82ce9530db9ac55afc794ab646ccaf4c4f", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.18  DRAM read and write cycles fr om the memory point of\nview: (a) read cycle; ( b) write cycle.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 105, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0188cb5c-7008-474e-90e9-75a66ba06272": {"__data__": {"id_": "0188cb5c-7008-474e-90e9-75a66ba06272", "embedding": null, "metadata": {"page_label": "477", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "369c9a57-5b38-4d7f-8eff-7888a9f14c6f", "node_type": "4", "metadata": {"page_label": "477", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "992d4b85883ecde324f8d58c1399f941dd59e44704e0d0ace364d708f53fbcef", "class_name": "RelatedNodeInfo"}}, "text": "A DRAM read or write cycle starts by issuing a row address and\nasserting the _ce signal. Next, the _ras signal is asserted so the\nDRAM can load the row address into an internal register and\nactivate a target row. Next, a column address is issued and the\n_cas is asserted . This selects one or more target cells on the\nactivated row. The _oe and _we signals function as described\nearlier for SR AMs.\nIn addition to the read and write cycles, DRAMs requir e refresh\ncycles to restor e the content of each cell. A cas-before-ras\nrefresh  cycle, for example, requires the assertion of the _cas\nsignal befor e _ras to switch the DRAM into a refresh mode. DRAMs\nare used to build SDRAMs with standar d communication protocols\nthat have simpli\ufb01ed the way computers are designed. This,\ntherefore, has helped r educe the cost of computers.\n7.5.3 SDRAM\nIn addition to standar dized communication protocols, SDRAMs\nimplement di\ufb00er ent refresh cycles, including the normal and\npartially powered-down modes [3]. A memory  cycle starts with a\nrow-activation command followed by one or more read/write\ncommands for the same r ow.\nFigure 7.19 illustr ates a hypothetical SDRAM timing diagram for\ntwo consecutive r ead cycles fr om the same r ow with burst size = 4.\nIt is assumed that one SDRAM bus clock cycle is required to enter a\nburst size, three clock cycles to activate a row, and two clock\ncycles to complete a read or write access. Each data value takes\none clock cycle to be transmitted out of SDRAM. Further more,\nbecause an SDRAM\u2019s data path is pipelined, another read cycle for\nthe same row may start while the data for the previous cycle is\nbeing transfer red.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1658, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3eff63f7-1679-42ff-b746-07fac5648cbf": {"__data__": {"id_": "3eff63f7-1679-42ff-b746-07fac5648cbf", "embedding": null, "metadata": {"page_label": "478", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "991a181a-fc94-4561-9218-eeaa28590844", "node_type": "4", "metadata": {"page_label": "478", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "abb6ff23a131540bd4b0e80fa360e742df65dd7610ef12a68c7b8921bf55949c", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.19  A hypothetical SDR AM access illustrating two\nconsecutive r ead cycles with burst size = 4. Assume 1 clock cycle\nto enter a burst size, 3 clock cycles to activate a r ow, and 2 clock\ncycles to complete a r ead or write access.\nSpeci\ufb01cally, in Fig. 7.19 , a burst size of four is issued on the \ufb01rst\nclock cycle (burst type is not shown), followed by a row activation\ncommand on the second  clock cycle, which also requir es a row\naddress. The target row will be activated by the end of the fourth\nclock cycle. On the \ufb01fth clock cycle, a read command is issued for\ncolumn address x, and thus the four data values associated with\ncolumn addr esses x to x + 3 appear on the data bus starting at the\nseventh clock cycle for three more clock cycles. The column\naddresses x + 1 to x + 3 are generated internally. The second read\ncommand (from the same row) is issued at the ninth clock cycle.\nIts four data values appea r on the data bus starting  at the eleventh\nclock cycle as y to y + 3; howeve r, only the data for address y is\nshown in the \ufb01gur e.\nFigure 7.20  illustrates a hypothetical SDRAM timing diagram with\ntwo consecutive read cycles with burst size = 1 followed by two\nconsecutive write cycles also with burst size = 1 for the same row.\nNote that because the SDRAM data path is pipelined, consecutive\nread or consecutive write  commands with burst size = 1 can be\nissued every clock cycle.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1409, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b8096c11-7a9d-43a5-9792-034d20e4579c": {"__data__": {"id_": "b8096c11-7a9d-43a5-9792-034d20e4579c", "embedding": null, "metadata": {"page_label": "479", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fcd26150-6916-40e5-83cb-82af0c2ab6ad", "node_type": "4", "metadata": {"page_label": "479", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "33a49c2e845a2a1505b53c374238b8c63984a3cbe46be3768ecfa41f0d1752a3", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.20  A hypothetical SDR AM access illustrating two\nconsecutive r ead and then two consecutive write cycles, each with\nburst size = 1. Assume one clock cycle to enter a burst size, thr ee\nclock cycles to activate a r ow, and two clock cycles to complete a\nread or write access.\n7.5.4 DDR SDRAM\nDDR SDRAMs are designed to double the e\ufb00ective bandwidth of\nSDRAMs. In this case, data is transmitted on every positive edge\nand every negative edge of the clock. Figure 7.21 illustrates a\nhypothetical DDR SDRAM timing diagram with three read cycles for\nthe same row with burst size = 4. As illustrated in the \ufb01gure, the\nfour data values of each read cycle are transfer red in two clock\ncycles for a total of 6 clock cycles versus 12 in a SDR AM. Ther efore,\nDDR e\ufb00ectively doubles peak memory bandwidth , which is\nde\ufb01ned as the maximum memory bandwidth when data bus is\nutilized 100% of the time (i.e., zer o idle time).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 922, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e3ce7ec-f105-43d9-862f-a4353a17947f": {"__data__": {"id_": "8e3ce7ec-f105-43d9-862f-a4353a17947f", "embedding": null, "metadata": {"page_label": "480", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8e55505c-1397-4d23-bd25-4a9d56830c6f", "node_type": "4", "metadata": {"page_label": "480", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4dd794f81eb58c4dd2b8a1008b52e6eef4502631b9a89250293908348a962046", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.21  A hypothetical DDR SDR AM timing diagram illustrating\nthree burst r ead cycles with burst size = 4. Assume one clock cycle\nto enter a burst size, thr ee clock cycles to activate a r ow, and two\nclock cycles to complete a r ead or write access.\n\u00a0\n7.6 Memory Architecture\nMemory architectur e refers to various ways that data can be stored\nin (i.e., distributed to) two or more memory units, two or more\nmemory modules, or two or more memory banks (cell arrays) in\norder to increase e\ufb03cienc y and thus achieve higher bandwidth. For\nexample, in a two-processor system wher e each processor\ncommunicates with its own dedicated memory unit, it is more\ne\ufb03cient if the data accessed by each processor is stored in a\nmemory unit assigned to the processor . Moreover, the data in each\nof the memory units can be organized in ways to optimize and\nincrease its bandwidth to satisf y the data rate requir ed by the\nprocessing cor es in each of the pr ocessors.\n7.6.1 High-Order Interleaving\nA high-order interleaving technique divides the total logical\nmemory space into two or more continuous data regions. The data\nof each region is stored in separate memory modules, or even\nseparate memory units. For example, consider the two-way high-", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1241, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9c1c8fb9-2422-42f5-aed3-ebb6dfeab60e": {"__data__": {"id_": "9c1c8fb9-2422-42f5-aed3-ebb6dfeab60e", "embedding": null, "metadata": {"page_label": "481", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9a6a6d4f-d617-41ae-be02-13fcdff0b31e", "node_type": "4", "metadata": {"page_label": "481", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c083449bea43aa0f660effb85d82f28667d68e07aafb9aefc794bdab20fd07fc", "class_name": "RelatedNodeInfo"}}, "text": "order interleaving of 1 GB data to two memory units, as illustrated\nin Fig. 7.22 . In this case,  the two data regions are identi\ufb01ed by byte\naddresses 0 to 512M \u2013 1 (the top half, starting from address 0) and\n512M to 1G \u2013 1 (the bottom half).\nFIGURE 7.22  A two -way high- order memory interleaving of 1 GB\ndata.\nIn a k-way high- order interleaving, the k most signi\ufb01cant address\nbits are used to partition the logical memory space into 2k regions.\nFor instance, the memory  organization in Fig. 7.15  is an example of\na four -way high- order interleaving of 32B memory space, or ganized\nas a 64 \u00d7 4 memory unit, into four regions, referenced by byte\naddresses 0 to 15 (region 0), 16 to 31 (region 1), 32 to 47 (region\n2), and 48 to 63 (region  3). Data of each region, as shown, is\nstored in a separate memory module.\n7.6.2 Low-Order Interleaving\nConsider a multibank memory organization. A low-order (or \ufb01ne)\ninterleaving, also commonly known as simply interleaving, stores\nthe \ufb01rst data item in one memory bank, the next sequentially\naccessed data item in another memory bank, and so on, and then\nit repeats. For example, assuming that each data item is stored as\na 4B word, a four-way (low- order) interleaving stores word 0 in\nbank 0, word 1 in bank 1, word 2 in bank 2, word 3 in bank 3, and", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1297, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e66973f2-ad3b-4787-86c8-bb5bde4ca951": {"__data__": {"id_": "e66973f2-ad3b-4787-86c8-bb5bde4ca951", "embedding": null, "metadata": {"page_label": "482", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c7a8b548-9bbd-4641-bb40-b395f555a252", "node_type": "4", "metadata": {"page_label": "482", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "db268bdb2e9c34efa7036e3a0559c4ccd649a8ddf6615036e72c381b4a98427d", "class_name": "RelatedNodeInfo"}}, "text": "then starts over and stores word 4 in bank 0, word 5 in bank 1, etc.\nThis is illustrated in Fig. 7.23 for a 512-MB memory  space,\norganized as a 128M \u00d7 4B memory module, using four-bank\nmemory chips. In this case, each four consecutive ly accessed 4B\nwords ar e stor ed in four di\ufb00er ent banks.\nFIGURE 7.23  A four -way low- order interleaving of 512 MB data in a\nfour-bank memory chips.\nFigure 7.24 illustrates the timing diagram of a hypothetical two-\nbank DDR SDRAM with interleaved data storage. In this case, the\namount of data accessed  is doubled from four in Fig. 7.21 to eight\nin Fig. 7.24, e\ufb00ectively doubling the peak bandwidth of the\nmemory without changing the internal clock frequency of the\nSDRAM. Twice as many data items must now be transmitted to a\ndestination module using either a twice-as-wide data bus or a\ntwice-as-fast bus clock. This is how DDR2, DDR3, etc., SDRAMs are\ndesigned, each doubling the size of data accessed.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 945, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c0ea336a-0b24-44fd-9f8f-275e21ddd10f": {"__data__": {"id_": "c0ea336a-0b24-44fd-9f8f-275e21ddd10f", "embedding": null, "metadata": {"page_label": "483", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bc43cce8-c2ec-492a-8b09-2de27968178d", "node_type": "4", "metadata": {"page_label": "483", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e5a226ef1ed41e2ef48aabb996b7611cb2888dbc05f052715d58fda884f55cd0", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 7.24  Illustrating a hypothetical two -bank interleaved\n(DDR2) SDR AM timing diagram. Assume one clock cycle to enter a\nburst size, thr ee clock cycles to activate a r ow, and two clock\ncycles to complete a r ead or write access.\nFine interleaving may also be used with memory modules to\nfurther increase bandwidth. For example, consider a memory unit\nwith two \ufb01ne interleaved memory modules. In addition, suppose\nthe memory  modules are made of two-bank DDR SDRAM (i.e.,\nDDR2) chips. In this case, the memory unit would be capable of\ndelivering twice as much data as compar ed to that shown in Fig.\n7.24. That is, with each memory module capable of delivering four\ndata items per SDRAM clock cycle\u2014two on the rising edge (e.g., x\nand x + 1) and two on the falling edge (e.g., x + 2 and x + 3)\u2014the\nmemory unit would deliver eight data items (four from each\nmodule) per clock cycle, therefore doubling the bandwidth of one\nmodule.\n7.6.3 Multichannel\nA multichann el memory refers to memory architec ture with two or\nmore commu nication channels with the rest of the system [6, 7].\nFor example, Fig. 7.25 illustrates the architectu re of two systems\nwith a CPU and a digita l signal processor (DSP) communicating\nwith a single- or dual-channel memory . An inter connection network,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1286, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "056abce1-ea9e-4977-b12f-30027c4f3154": {"__data__": {"id_": "056abce1-ea9e-4977-b12f-30027c4f3154", "embedding": null, "metadata": {"page_label": "484", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4b4643d8-a99b-45b6-9d55-89b9bd53f0b4", "node_type": "4", "metadata": {"page_label": "484", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "eece2a7d1c27e7f30d368fd3569419788a6bc33be5b7b9ccda9b2150455d66ba", "class_name": "RelatedNodeInfo"}}, "text": "as a set of buses or point-to -point connections (discussed in Chap.\n9), is used to interconnect  the CPU and the DSP with the memory .\nIn this case, each channel potentially can serve a di\ufb00er ent\nprocessing unit.\nFIGURE 7.25  Illustrating single- and dual-channel memory\narchitectur e.\nIn the single-channel architectur e, the CPU and the DSP must\ntake turns accessing the memory . In the dual-channel architectur e,\nhowever, the two processors can simultaneou sly access the\nmemory, each from a di\ufb00er ent channel, provided that their\nrespective data is not stor ed in the same memory unit.\nA multichannel memory unit becomes more e\ufb03cient (i.e., less\nidle time) when larger burst sizes are used to deliver the same\namount of data. In another words, each channel may continuously\ndeliver data using larger and more e\ufb03cient burst sizes without\nactually delivering too much data for a destina tion module to\nhandle. This makes multichannel memory architectur e more\nsuitable for real-time systems wher e continuous delivery of data is\nimportant.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1043, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "35ac07cb-2bd1-47c7-85bf-49de7a6a988f": {"__data__": {"id_": "35ac07cb-2bd1-47c7-85bf-49de7a6a988f", "embedding": null, "metadata": {"page_label": "485", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "035ddaae-0770-4fa2-aa78-8cbff94e1822", "node_type": "4", "metadata": {"page_label": "485", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0340c47ae558243888ca4874b9fc91b0e1f7266ebc5c2835ca58654959686f47", "class_name": "RelatedNodeInfo"}}, "text": "Example 7.4. Consider a 64-bit single-channel and 32-bit dual-channel memory\norganization as illustrated in Fig. 7.25 . Assume the memory units are designed using DDR\nSDRAM modules. We would like to deter mine the e\ufb03ciency of a channel when the CPU\naccesses 128 B data using four separate burst read cycles from the same row as\nillustrated in Fig. 7.21 . Assume each r ead delivers 32 B data.\nSolution : Equation (7.1)  de\ufb01nes memory e\ufb03ciency .\nIn order to access 32 B from the single-channel memory, the\nburst size must be 4 (32 B/64 b). As illustrated in Fig. 7.21, it takes\nsix clock cycles befor e the \ufb01rst data item appears on the bus and\ntwo cycles per 32 B for a total of eight (2 \u2217 4) cycles to access 128\nB (4 \u2217 32 B). Therefore, the memory e\ufb03cien cy is 57%, as\ncalculated ne xt:\nOn the other hand, in order to access 32 B from one of the\nchannels in the dual-channel memory, the burst size must be 8 (32\nB/32 b). Again, it takes 6 clock cycles befor e the \ufb01rst data item\nappears on the bus, as in the single-channel memory, and 4 cycles\nper 32 B for a total of 16 (4 \u2217 4) cycles to access 128 B. In this\ncase, the channel e\ufb03ciency incr eases to 73%, as calculated ne xt:\n\u00a0\n7.7 Design Example: Multiprocessor\nMemory Architecture\nAs discussed earlier a low-order memory interleaving is used to\nincrease memory bandwidth by accessing multiple banks or\nmultiple modules in parallel. On the other hand, a high- order\nmemory interleaving is used to partition a memory space into", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1482, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "863116a6-9bb1-4352-979f-fec0fd2c9cec": {"__data__": {"id_": "863116a6-9bb1-4352-979f-fec0fd2c9cec", "embedding": null, "metadata": {"page_label": "486", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6411c440-2548-486c-8860-a1a673ea6408", "node_type": "4", "metadata": {"page_label": "486", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1474a469dda40be8633ed3e59a5f2c488e436462f0e57ec5c7a052325e859843", "class_name": "RelatedNodeInfo"}}, "text": "multiple regions and store the data of each region in a separate\nmemory module or memory unit.\n7.7.1 UMA versus NUMA\nA multiprocessor system with nonunifor m memory  access (NUMA)\narchitectur e is shown in Fig. 7.26(a). In this case, a memory unit is\nassigned to each processor, creating a processing node. An\ninterconnection network  interconnects the processing nodes,\ncreating a shar ed memory system.\nFIGURE 7.26  NUMA and UMA system ar chitectur es: (a) a NUMA\nsystem ar chitectur e with shar ed but locally distributed memory\nunits; ( b) an UMA system ar chitectur e with a shar ed global memory\nunit.\nEach processor has a shorter connection to its local memory unit\n(or simply local memory ) and longer connection to a remote\nmemory , another processor\u2019s local memory . Therefore, the\nduration of a memory read/write cycle, called memory latency , is\nshorter when  memory accesses are from local memory and longer\nwhen they are from remote memory . Therefore, read/write memory\ncycles in a NUMA system are nonunifor m; some are short, requiring\nfewer clock cycles, and some are long, requiring many clock\ncycles.\nOn the other hand, in a unifor m memory access (UMA)\narchitectur e multipr ocessor system ( Fig. 7.26 (b)), all the pr ocessors", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1247, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92e8c10e-3c3c-416a-9f6f-8abd475d6cdd": {"__data__": {"id_": "92e8c10e-3c3c-416a-9f6f-8abd475d6cdd", "embedding": null, "metadata": {"page_label": "487", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "efcef797-7eb8-4574-b0e7-e8bc1c4fd321", "node_type": "4", "metadata": {"page_label": "487", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7d827e1defd3cec3126eeab105e9041b2bc17ebb2ab1a18437a98a78df9ec738", "class_name": "RelatedNodeInfo"}}, "text": "communicate with a single memory unit that may, in addition, be\norganized as multi-chann el. However, among memory accesses,\nthere is less variation in memory latencies; they are all about the\nsame (unifor m). Moreover, in both the NUMA and UMA systems,\nmemory units may be low-order interleaved to better serve the\nprocessing cor es in each of the pr ocessors.\nThe Silicon Graphics\u2019 SGI Altix 4700 system, for example, is a\nNUMA system that can support 512 to 1024 processors and up to\n128 TB shared memory [8]. However, the architec ture in many\nsmaller systems today is also NUMA, such as the AMD Quad FX\nplatfor m with two dual-cor e processors [ 9].\n7.7.2 A NUMA Application\nA low-order interleaving would also work with two or more memory\nunits, called node interleaving , if two or more process ors in a\nNUMA system cooperate to complete a task. For example, if two\nprocessors are perfor ming an image-pr ocessing task, wher e one\nprocessor produces intermediate results to be processed by the\nsecond processor, it would be advantageous for the \ufb01rst processor\n(P0) to read the image data elements from its local memory unit\n(M0) but write the results to the second processor\u2019s (P1\u2019s) memory\nunit (M1). This can be done by creating, for example, an array of\nstructur es, each with two data items. For example, consider the\nfollowing program code that de\ufb01nes an example data structur e\nnamed \u201cfoo_t \u201d with two elements a and b. Suppose P0 operates on\nthe a eleme nts and generates the b elements and P1 modi\ufb01e s the\nb eleme nts. With node interleaving, all the a elements of the array\nwould be stored in M0, and all the b eleme nts would be stored in\nM1.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1659, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f3c926fa-742f-48c1-a8de-b865088d2931": {"__data__": {"id_": "f3c926fa-742f-48c1-a8de-b865088d2931", "embedding": null, "metadata": {"page_label": "488", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1b163fef-8a3d-4398-9b58-41d3bae4e656", "node_type": "4", "metadata": {"page_label": "488", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9d92eb07fafa6f4efe859cc245beb1b1ecab05ea0fd65658aaefcea41045282c", "class_name": "RelatedNodeInfo"}}, "text": "In this case, P0 would read the a image  elements from its local\nmemory (M0) with shorter latency and write the computed b image\nelements to M1, P1\u2019s local memory, with longer latency . P1 would\nthen read the b image elements from its local memory (M1) with\nshorter laten cy. [As we will see in Chap. 10, P1 may access some\nrecently computed b elements from P0\u2019s cache memories with\nlonger latency . However, in order to simplif y, P0 is assumed to\nwrite all the b elements to M1 with longer latency and P1 to read\nall the computed b elements from M1 with shorter latency . A more\naccurate analysis of the latencies would requir e a program\nexecution simulation environment. In addition, with cache\nmemories, it is very likely that the longer memory latency requir ed\nto write the computed b elements in M1, for the most part, would\nbe done in the backgr ound and the delay would not increase the\naverage memory latency for the program.] Once, P0 computes one\nor more of the b image elements, both P0 and P1 would operate in\nparallel (at the same time) and access the image elements from\ntheir respective local memories with shorter  latency . This,\ntherefore, results in a reduced execution time for the program in a\nNUMA system. On the other hand, because in an equivalent UMA\nsystem, both P0 and P1 would access the same memory unit, the\naverage memory latency for the program would be relatively\nlonger . This in turn would increase the program\u2019s total execution\ntime in a UMA system.\n\u00a0\n7.8 HDL Models\nExample 7.5  descri bes a combined behavioral and structural model\nof a memory unit. Memory modules ar e modeled using SR AM chips.\nThe memory unit implements high- order interleaving, similar to the\none shown in Fig. 7.15. The SRAM chip HDL model implements\nbidirectional data lines. It also implements a simpli\ufb01ed memory\ncommunication protocol; that is, the memory read/write contr ol\nsignals, when asserted or deasserted, ar e done at the same time. A\nmore accurate model of the protocol would requir e generating\nmemory control signals with precise timings, such as those shown\nin Figs. 7.16 and 7.17. This would requir e the memory chip (e.g.,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2154, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a88836dd-8642-4996-9940-6beeeac7ddc1": {"__data__": {"id_": "a88836dd-8642-4996-9940-6beeeac7ddc1", "embedding": null, "metadata": {"page_label": "489", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "93ba3609-f944-449e-8706-3ec5a2be44d5", "node_type": "4", "metadata": {"page_label": "489", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "6cb4062535a3f524fd9dd1c97bee6f176f83ffe0c2c7f7351a9ec10602b55920", "class_name": "RelatedNodeInfo"}}, "text": "Fig. 7.10) either to be modeled using a schematic design tool or\nthe HDL model (structural or behavioral) that includes signal timing\ndelays.\nExample 7.5. The design and simulation of a 64 \u00d7 8 memory unit using four 16 \u00d7 8\nmemory modules  is illustrated. A memory module is structurally modeled using two 16 \u00d7\n4 SRAM chips with bidirectional data lines. Note the use of the keywor d \u201cinout\u201d to declar e\nthe variable data as bidirectional data lines. Also, note that in the SRAM chip model , the\nassign statement makes data high impedance (Z) when memor y is not in the read mode.\nWhen writing to the memory unit (i.e., _ce = 0, _we = 0, and _oe = 1), data will be an\ninput. When reading from the memory unit (i.e., _ce = 0, _we = 1, and _oe = 0), data will\nbe set to the memory content identi\ufb01ed by the 4-bit adrs.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 814, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2b6c1b23-108b-42d8-96ab-9f14654071f3": {"__data__": {"id_": "2b6c1b23-108b-42d8-96ab-9f14654071f3", "embedding": null, "metadata": {"page_label": "490", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "45148a1b-3c36-47d9-8177-a98e37f9a188", "node_type": "4", "metadata": {"page_label": "490", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "6832b30cad3f4f5bd8314f8248941ce540983716d577d33be4e0131434a7abeb", "class_name": "RelatedNodeInfo"}}, "text": "Simulation T est-Bench:\nA simu lation test model is shown here. In this case, an \u201cassign \u201d\nstatement is used to place an 8-bit value as content  on the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 151, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ff76df9e-8ec4-4f61-9c81-8a5be4588a84": {"__data__": {"id_": "ff76df9e-8ec4-4f61-9c81-8a5be4588a84", "embedding": null, "metadata": {"page_label": "491", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66000ee8-8c66-4867-aced-a77715019147", "node_type": "4", "metadata": {"page_label": "491", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f157168457758e81c640a3fe2e31c3157a7cb3aaa9fb4901780a673c839c0d87", "class_name": "RelatedNodeInfo"}}, "text": "bidirectional data lines when the memory unit is writing (i.e., _ce =\n0, _we = 0, and _oe = 1). Four test cases are simulated: two\nmemory write cycles followed by two memory read cycles. The test\nvectors simulate simpli\ufb01ed memory read/write cycles. A write cycle\nbegins with a target address adrs, a data value  as content , and the\nactivation of the contr ol signals for a write. The control signals are\ndeasserted at the end of the write cycle. A read cycle begins with\nan address adrs and the activation of the read contr ol signals,\nwhich ar e then deasserted at the end of the r ead cycle.\nThis is similar to how a CPU accesses memory as it executes\nload and store instruction s. A write cycle is initiated  by a executing\na store instruction, which  provides a memory address and a value\n(i.e., a regist er content) to be stored in memory . A read cycle is\ninitiated by a load instruction, which only provides a memory\naddress and saves the retrieved memory content in a register .\nBecause the CPU also executes arithmetic and other types of\ninstructions and therefore does not access memory all the time, in\nthe test-bench, this is simulated with some random delays\nbetween each memory r ead/write cycle.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1211, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "32371bbc-973c-463c-8ee9-f2dfbaec0e23": {"__data__": {"id_": "32371bbc-973c-463c-8ee9-f2dfbaec0e23", "embedding": null, "metadata": {"page_label": "492", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "84b500fa-5242-492b-8a71-804751986660", "node_type": "4", "metadata": {"page_label": "492", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4da19eebe167138bfd88083a5655595e8393971a5b59fa00601bd51c5dbea843", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e8ca6b5c-ece0-440d-ac19-0f5353ac58fc": {"__data__": {"id_": "e8ca6b5c-ece0-440d-ac19-0f5353ac58fc", "embedding": null, "metadata": {"page_label": "493", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7149c17e-c002-40c6-a76b-6cd9990a969a", "node_type": "4", "metadata": {"page_label": "493", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "dde1fb5844327fd4c8f29c579323c5156c5f8412e16e77b809925a1664c2f8f7", "class_name": "RelatedNodeInfo"}}, "text": "Simulation Result:\nAs expected, the memory data lines indicated as data become high\nimpedance (Z) when memory is not accessed.\n\u00a0\nReferences\n1. Flash Memory : An Overview,\nhttp://www .spansion.com/Support/T echnicalDocuments/P ages/T", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "461192ca-f068-475a-b5ff-2e940567c183": {"__data__": {"id_": "461192ca-f068-475a-b5ff-2e940567c183", "embedding": null, "metadata": {"page_label": "494", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8b9c5aa3-5dad-42d2-bff5-8ceb2b237026", "node_type": "4", "metadata": {"page_label": "494", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "34dbe812e970049bc464545446bc646b0bee319d78178037e134d396896a9f0a", "class_name": "RelatedNodeInfo"}}, "text": "echnicalDocuments.aspx .\n2. C. R. Nave, HyperPhysics, Geor gia State University,\nhttp://hyperphysics.phy -astr.gsu.edu/ .\n3. Memory chips fr om Micr on,\nhttp://www .micr on.com/pr oducts/dram/ .\n4. Memory fr om R ambus, http://www .rambus.com/ .\n5. Memory modules, http://www .newegg.com/ .\n6. Gomony MD, Ak esson B, Goossens K. Ar chitectur e and optimal\ncon\ufb01guration of a r eal-time multi-channel memory contr oller,\nDesign, Automation & T est in Eur ope Confer ence & Exhibition\n(DATE), 2013, 1307\u20131312.\n7. Siqueira HM, Silva IS, Kr eutz ME, Cor rea EF . DDR SDR AM\nmemory contr oller for digital TV decoders, Symposium on\nComputing System Engineering (SBESC) , 2011, 78\u201382.\n8. NUMA SGI Altix 4700 system, http://www .sgi.com/pr oducts/ .\n9. AMD Quad FX Platfor m, http://support.amd.com/ .\n\u00a0\nExercises\n7.1. Draw the logical view and the block diagram of a 128 KB\nmemory . Also indicate the number of memory locations and\nnumber of addr ess lines r equir ed for the following:\na. One byte wide\nb. Two bytes wide\n7.2. Show the cell ar ray or ganizations for the following memory\nsizes:\na. 128 \u00d7 1\nb. 64 \u00d7 2\nc. 32 \u00d7 4\n7.3. Using the SR AM cell model in Fig. 7.8 , design a 32 \u00d72 SR AM\n(no need to draw every cell).\n7.4. Using the cell model in Fig. 7.8 , design a 16 \u00d7 4 SR AM (no\nneed to draw every cell).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1307, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4379236e-a169-4ae2-bcba-0241d1deba65": {"__data__": {"id_": "4379236e-a169-4ae2-bcba-0241d1deba65", "embedding": null, "metadata": {"page_label": "495", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1c550740-0641-456a-ba04-019a592cffd7", "node_type": "4", "metadata": {"page_label": "495", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "08f48776bdea451f69eda7d8a2eb9de301a3cb43728decaf377644cc8c2319d1", "class_name": "RelatedNodeInfo"}}, "text": "7.5. Design a 256- B memory or ganized as a 128 \u00d7 16 memory\nunit using memory modules with 32 \u00d7 4 SR AM chips.\n7.6. Design a 256- B memory or ganized as a 128 \u00d7 16 memory\nunit using memory modules with 16 \u00d7 8 SR AM chips.\n7.7. Design a 256- B memory or ganized as a 128 \u00d7 16 memory\nunit partitioned into 128- B ROM space for the lower addr esses\nand 128- B RAM space for the upper addr esses. Design the\nmemory unit using 64 \u00d7 8 ROM chips and memory modules\nwith 32 \u00d7 8 SR AM chips.\n7.8. R esear ch and write a short paper on each of the following\nmemory technologies:\na. Rambus RDR AM\nb. Rambus XDR\nc. Rambus XDR2\nd. EDO DR AM\n7.9. Draw an SDR AM timing diagram for a r ead cycle followed by a\nwrite cycle, both with burst size = 4. Assume that it tak es one\nclock cycle to enter a burst size, four clock cycles to activate a\nrow, and thr ee cycles to complete a r ead or write access.\n7.10. Consider a 32-bit data bus SDR AM. Given that the clock\nfrequency of the bus is 200 MHz, what is the peak memory\nbandwidth in megabytes per second (MBs)?\n7.11. Consider a 64-bit data bus SDR AM. Given that the clock\nfrequency of the bus is 200 MHz, what is the peak memory\nbandwidth in megabytes per second (MBs)?\n7.12. Consider a 32-bit data bus DDR SDR AM. Given that the clock\nfrequency of the bus is 200 MHz, what is the peak memory\nbandwidth in megabytes per second (MBs)?\n7.13. Consider the SDR AM timing diagram in Fig. 7.19 . Suppose\nthere are four memory r ead cycles, as follows, wher e the data\nbus is 32 bits:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1514, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "21f03c25-641a-4bba-8816-2ba018b7e1c6": {"__data__": {"id_": "21f03c25-641a-4bba-8816-2ba018b7e1c6", "embedding": null, "metadata": {"page_label": "496", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "89d81dc7-cd2f-49f9-9e84-67cb5d75ff77", "node_type": "4", "metadata": {"page_label": "496", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c547785905d8dfa687e736c67316cdb925dab375f87aa0867e506654afabc63d", "class_name": "RelatedNodeInfo"}}, "text": "a. Draw the timing diagram.\nb. Deter mine memory e\ufb03ciency . Ignor e row deactivation time.\n7.14. Consider the DDR SDR AM timing diagram in Fig. 7.21 .\nSuppose ther e are four memory r ead cycles, as follows, wher e\ndata bus is 32 bits:\na. Draw the timing diagram.\nb. Deter mine memory e\ufb03ciency . Ignor e row deactivation time.\n7.15. Consider a 64- B memory unit high- order interleaved into four\n16 \u00d7 8 memory modules, but data is low- order interleaved\nwithin each module. Suppose each module is made of eight\nSDRAM chips, each with four banks and or ganized as a 2 \u00d7 2\n\u00d7 1 cell ar ray. Show/describe how a 2-bit burst data would be\nstored in the memory unit.\n7.16. Consider a four -channel memory designed using 400 MHz\nDDR SDR AM modules. What is the peak bandwidth of the\nmemory if each channel is 64 bits (8 B) wide?\n7.17. Consider a NUMA system with local memory latency = 1 \u03c4 and\nremote memory latency = 4 \u03c4. If a pr ogram e xecution r esults in\n80% local accesses and 20% r emote accesses, what is the\naverage memory latency? Compar e your r esult with an\nequivalent UMA system with 4 \u03c4 average memory latency .\n7.18. Show/describe how physically the elements of an ar ray[8][8]\nof type \u201c foo_t\u201d would be stor ed in a two -node interleaved 128\n\u00d7 32 memory units M0 and M1.\n7.19. Computer security (memory authentication): Select Ex ercise\n11.24 and/or 11.25 (also see Sec. 11.9). Note, the details of\ncache memory ar e cover ed in Chap. 10 . However, her e, \ufb01rst\ndeter mine the number of blocks in memory, and then assign\neach block a block addr ess starting with 0.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1574, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7498755c-9f12-487f-acbe-0ed835edc8df": {"__data__": {"id_": "7498755c-9f12-487f-acbe-0ed835edc8df", "embedding": null, "metadata": {"page_label": "497", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "842a3793-e6f7-4ecf-8bf8-5a0c18eefac7", "node_type": "4", "metadata": {"page_label": "497", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d45a062da45fdeb6582f0d4972ef14b772367c18c36379617081aab4371251c0", "class_name": "RelatedNodeInfo"}}, "text": "CHAPTER 8\nInstruction Set Architecture\n\u00a0\n8.1 Introduction\nThe precedi ng chapters cover ed digital design concepts and\ntechniques as well as memory organization and architectur e. In this\nchapter, we discuss data paths for CPU. Unless explicitly stated, the\nterms CPU and processor  are both used to refer to a processing core.\nMulticor e processors will be discussed in Chap. 10 .\nAn instruction set architecture  (ISA) refers to a single-cycle,\nmulticycle, or pipelined data path that executes a program. In this\ncase, a data path is capab le of executing many di\ufb00er ent instructions,\neach requiring a set of data path operations. The data path fetches\nan instruction from memory; decodes the instruction by generating\nthe necessar y data path contr ol signals; executes the instruction by\nperfor ming data path operations, which additionally may requir e\nretrieving data from memory, accor ding to those contr ol signals; and\nstores (writes back) the computed result (if any) or data read from\nmemory in a r egister . Register content may be stor ed in memory .\nIn general, each di\ufb00er ent CPU has its own set of unique\ninstructions. However, some Intel and AMD processors execute the\nsame set of instruction s. For example, X86 refers to a 32-bit\ninstruction set in both Intel and AMD processors.  Other commonly\nknown instruction set examples are Intel\u2019s  IA-64 (Itanium", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1374, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d9426d67-62ce-4748-9188-03cd1c3a57b9": {"__data__": {"id_": "d9426d67-62ce-4748-9188-03cd1c3a57b9", "embedding": null, "metadata": {"page_label": "498", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "65d10e17-d380-44d4-ac81-bfa62bfb7b23", "node_type": "4", "metadata": {"page_label": "498", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f89d7e419e6a9bf3936d1d7471b18c848ded51798fd70fcd99380994f28bf24e", "class_name": "RelatedNodeInfo"}}, "text": "Architectur e), AMD\u2019s X64 (64-bit instruction set), MIPS, Sparc, and\nARM. While each instruct ion set is di\ufb00er ent, the instructions in each\nset are complete for developing any type of software, including\nsystems sof tware, stand-alone, and online application sof tware.\nWith the increases in transistor count, moder n CPUs implement\npipelining and instruct ion-level parallelism (ILP) to increase\nperfor mance as was brie\ufb02y discussed in Chap.1. A pipelined data\npath in this case is also called an instruction pipeline . The\ne\ufb03ciency of the data path increases as the stages of the pipeline are\nkept busy operating on multiple instructions concur rently. This\nincreases instruction throughput, the number of instructions\nexecuted per second, and r educes a pr ogram\u2019s total e xecution time.\nHowever, as data-dependent instructions go through the pipeline\nstages, additional hardwar e is needed to stall the pipeline, if\nnecessary, and make sure data-dependency relationships are not\nviolated. This, in turn, can reduce pipeline e\ufb03ciency unless certain\nhardwar e is used and compiler optimizations are perfor med to\neliminate or r educe such data dependencies.\nIn addition, branch instructions change execution \ufb02ow, introducing\nbubbles that also decrease pipeline e\ufb03ciency . However, moder n\nCPUs implement branch pr ediction mechanisms to minimize this.\nWith ILP, an instruction pipeline is made of multiple parallel\npipelines that execute several instructions at the same time. Which\nset of instructions can execute at the same time is program\ndependent and is deter mined either statically  by compiler (i.e., in\nsoftware) or dynamically  in hardwar e. ILP also reduces a program\u2019s\ntotal execution time. However, as was discussed in Chap. 1, only a\nlimited numb er of independent instructions in each program can be\nexecuted during each pipeline cycle. In addition, because instructions\nand data must come from memory, many moder n CPUs (e.g., Intel\nCore i7) implement multi threading  so they can switch to executing\nanother program (thread) if the CPU must wait to receive instructions\nor data. While this does not reduce a program\u2019s total execution time,\nit helps to increase the overall e\ufb03ciency of the processor, which\nwould perfor m mor e tasks and idle less.\nIn this chapter, we start by pr oviding some backgr ound infor mation\nand examine di\ufb00er ent instruction set architectur es, and then, in\norder to provide a better  understanding of instruc tion set and data\npath design, we begin the discussion with a simple high-level\nlanguage code example. Using this example, an instruction set and a", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2605, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8fd6c89b-843f-4d4c-8f60-723b499dd58d": {"__data__": {"id_": "8fd6c89b-843f-4d4c-8f60-723b499dd58d", "embedding": null, "metadata": {"page_label": "499", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6406d3d2-d9e4-41e6-bf26-4c433a70ab1f", "node_type": "4", "metadata": {"page_label": "499", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7f506367cc1ce29975d1437fab24c41cbe862adba7ae42e52692f528afd0bb7e", "class_name": "RelatedNodeInfo"}}, "text": "single-cycle data path are presented. A hardwar e description\nlanguage (HDL) description for the single-cycle data path is\npresented. Execution simulation results for both a single-cycle and\npipelined data path for the example program are presented, and\nperfor mance parameters ar e discussed.\nThe chapter then presents reduced instruction set computer (RISC)\narchitectur e and its advantages. It provides an introduction to RISC\ncompiler optimization, as well as techniques used to improve\ninstruction throughput. Speci\ufb01cally, we use examples to illustrate\nways to increase pipeline clock frequency, branch prediction\ntechniques, ILP, and multi threading. An introduction to multithr eaded\nprograms using an e xample is also pr ovided.\n8.1.1 Type of Instructions\nA processor is typically designed for general-purpose programming.\nHowever, for better perfor mance and some real-time applications, it\nis often necessary for computer systems to use special-purpose\nprocessors, such as a graphic processing unit (GPU) and digital signal\nprocessor (DSP). Each special-purpose processor has a set of\ninstructions designed to e\ufb03ciently perfor m compu ter graphics (e.g.,\nobject rotation), signal processing (e.g., audio compr ession), etc.\nDSPs are typically used in embedded systems, like cell phones and\ndigital cameras, for signal and image processing tasks. Moder n\nprocessors may also include certain special-purpose instructions,\nsuch as the single instruction multiple data (SIMD) (Chap. 1)\ninstruction sets and computer security related instructions of the\nIntel and AMD pr ocessors.\nInstructions that perfor m arithmetic and logic computations are\ngenerally referred to as data-manipulation  instructions for\nperfor ming calculations on data. Others are referred to as program-\n\ufb02ow control  instructions , such as conditional and unconditional\nbranch (or jump) instruc tions, and data-movement  instructions,\nsuch as those used for reading and writing memory . The program-\n\ufb02ow control instructions alter a program\u2019s execution path, and are\nnecessary in the execution of high-level language statements, such\nas \u201cif-else,\u201d \u201cfor-loop,\u201d \u201cwhile-loop,\u201d and subroutin e procedur e calls.\nThe latter requir es saving  a return address and state (i.e., register\ncontents) of the processor, either in a special set of registers inside\nthe processo r (e.g., Sparc\u2019s register windows) or in memory (e.g.,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2396, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "24233e7a-214e-415b-b253-e133e3cbbc10": {"__data__": {"id_": "24233e7a-214e-415b-b253-e133e3cbbc10", "embedding": null, "metadata": {"page_label": "500", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "abf16e74-d0f3-4d72-97bd-8d89ab7da461", "node_type": "4", "metadata": {"page_label": "500", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "cc15a484c604133f4ec0105efb939761f406c797d8156bb7ddb95b7c0be6d625", "class_name": "RelatedNodeInfo"}}, "text": "memory stack). (For more information on register  windows, refer to\nExercise 9.14 in Chap. 9 .)\n8.1.2 Program Translation\nAs shown in Fig. 8.1 , a software program is typically written in a high-\nlevel langua ge, such as C/C++ or Java, and is translated by a\ncompiler into assembly instructions (C/C++) or bytecode (Java). A\nbytecode is converted to instructions at run time. An assembly\ninstruction is de\ufb01ned by its mnemonic , an easy-to-remember\noperation-code (op-code ) name, such as ADD for addition and SUB\nfor subtraction. For more information on mnemonics and assembly\nlanguage conventions, refer to IEEE Standar d for Microprocessor\nAssembly Language [ 1].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 665, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5532232b-fb9d-4d44-b830-eeacc868bc9b": {"__data__": {"id_": "5532232b-fb9d-4d44-b830-eeacc868bc9b", "embedding": null, "metadata": {"page_label": "501", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "100cbee8-e244-4286-a1eb-818a810949ef", "node_type": "4", "metadata": {"page_label": "501", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3482b35eaa638b4da819918fec108b6ec455a844a5b38ecb648095a50278d158", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 8.1 Basic pr ogram translation and e xecution pr ocess.\nUnique binary numbers are assigned to each mnemonic op-code\nby assembler , and are used to translate instructions to binary,\ncreating an object code  that would be saved as a \ufb01le on disk. Two or\nmore object \ufb01les (if any) are linked to create an executable program\n\ufb01le (e.g., an.exe \ufb01le in a Windows envir onment). The linker program", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 395, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d679a408-a5c1-4d39-8f5c-00e8bff2682a": {"__data__": {"id_": "d679a408-a5c1-4d39-8f5c-00e8bff2682a", "embedding": null, "metadata": {"page_label": "502", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "670edbce-c53d-43c5-b053-054f9a19acb3", "node_type": "4", "metadata": {"page_label": "502", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f32c037a98e33a97dc729d690dfec2724a3a7b41e7c67e4efb8e54f1bd2fa57d", "class_name": "RelatedNodeInfo"}}, "text": "links object codes of static (e.g., math) library functions if such\nfunctions are called in the program. In addition, not shown in Fig. 8.1,\na program may include some dynamically linked codes (i.e., DLLs)\nthat are linked during run time. The OS loader program loads an\nexecutable code (genera lly not in its entirety) into memory for\nexecution.\n8.1.3 Instruction Cycle\nFigure 8.2 illustrates an instruction execution data path, also called\nan instruction cycle , with four circuit modules labeled fetch,\ndecode, execute, and write back. The data path may be implemented\nas single-cycle, multicycle, or pipelined. Instructions are fetched from\nthe instruction memory  (IM) and data read from or written to the\ndata memory  (DM). Because the clock frequency used to operat e a\nmoder n processor is higher than that used to operate synchr onous\ndynamic random access memory (SDR AM), the IM and DM are\norganized to operate as fast cache memories built from static\nrandom access memory (SRAM) technology . Instructions and data are\ncopied from SDRAMs to these cache memories during program\nexecution. Therefore, the cache memories increase the overall\nperfor mance of the system by keeping the frequently executed\ninstructions (e.g., those forming a loop) or frequen tly accessed data\ninside the processor . Cache memory organization is discussed in\nChap. 10 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1357, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ae8cc53-18d1-4f12-84a3-05de4e4eb765": {"__data__": {"id_": "7ae8cc53-18d1-4f12-84a3-05de4e4eb765", "embedding": null, "metadata": {"page_label": "503", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "736737ac-cf65-4ac1-bffa-05d0b96508ea", "node_type": "4", "metadata": {"page_label": "503", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2dc860ed2347b18f98f77c8a56035ee7e52875987d86ba176b71653a3d74865c", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 8.2 An instruction data path with instruction memory (IM) and\ndata memory (DM).\n\u00a0\n8.2 Types of Instruction Set Architecture\nOver the years, ISA developments are guided by advancements in\nintegrated chip (IC) technologies and computer architectur e\nconcepts, such as pipelining. In addition to an op-code, an instruction\nincludes a set of operands  that are speci\ufb01ed explici tly, implicitly, or\nboth. The operands are grouped into input operan ds and, typically,\none output operand. An input operand speci\ufb01es either a constant\nvalue, also called an immediate data such as the number 9, or a\nregister or memory conte nt. An output operand is either a register\nnumber or a memory address. Addressing modes  de\ufb01ne the many\nways input operands are interpr eted to identif y a target data used in\nthe e xecution of the instruction.\n8.2.1 Addressing Modes\nTable 8.1 lists examples of how various addressing modes are\ndeclar ed. In the table, parentheses are used to distinguish a memory\naddress from an immedia te value. These notations are used by the\nassembler to translate an instruction to its equivalent binary,\ntypically called a machine instruction . An immediate (I) operand is\na 2\u2019s complement numbe r and is immediately available to be used in\nthe execution of the instruction. A direct (D) operand is a memory\naddress, and the data must come from memory . An indexed (X)\noperand de\ufb01nes the address of the next array element in memory .\nThere are other addressing mode examples, and their coverage is\nreferred to elsewher e.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1534, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7e5c9cfc-fdc4-4641-8114-e46095bc664d": {"__data__": {"id_": "7e5c9cfc-fdc4-4641-8114-e46095bc664d", "embedding": null, "metadata": {"page_label": "504", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f7da4d14-98f4-40f0-9829-111623ee3192", "node_type": "4", "metadata": {"page_label": "504", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "dfbe82da2e9827c1e1ef5f80185edb78373e8e009b32b6c1c486e86599c20c33", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  8.1 Examples of A ddressing Modes\nTable 8.2 illustr ates several instruction examples with explicit\nand/or implicit operands; however, the instructions  do not all belong\nto a single processor . Each instruction computes the sum of two data\nvalues and stores the sum in a register . The \ufb01rst instruction in the\ntable has no explicitly listed operands. In this case, the source for the\ntwo data values and the destination to store the computed sum is a\nhardwar e stack within the data path. The second instruction includes\nonly a single explicitly declar ed immediate data operand, 9. In this\ncase, a regist er that implicitly is known to the instru ction is used both\nas a data source register and as the destination register to store the\ncomputed sum.\nThe third instruction example includes two explicitly declar ed\noperands: the register R1 and the immediate value \u22129. In this case,\nR1 is also used to store the computed sum. That is, the instruction\nperfor ms R1 \u2190 R1 + \u22129. In the fourth example, the second operand\nis a memory  address, and the instruction perfor ms R1 \u2190 R1 + M[9]\nwher e M[9] indicates the content of memory address 9. In the \ufb01fth\nexample, the second and third operands specif y the address of the\nnext data item in memory as R2 + 9, and the instruction perfor ms R1\n\u2190 R1 + M[R2  + 9]. In the sixth example, the two input operands are\nboth register  contents, and the \ufb01rst register is also used as the\ndestination register number; the instruction perfor ms R1 \u2190 R1 + R2.\nIn the seventh example, a destination register is explicitly declar ed\nand may or may not be the same as one of the two input operand\nregister numbers. The instruction perfor ms R3 \u2190 R1 + R2.\n8.2.2 Instruction Format", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1716, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5e2e438b-41d1-4307-9757-944d1537cf08": {"__data__": {"id_": "5e2e438b-41d1-4307-9757-944d1537cf08", "embedding": null, "metadata": {"page_label": "505", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eb0f707e-ad1e-42f4-8325-a2bfa4f61df0", "node_type": "4", "metadata": {"page_label": "505", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5c92c1fbdbd45c8b60cbcd0b5186e6028209fa899d69a10f90e5c15481e973ce", "class_name": "RelatedNodeInfo"}}, "text": "An instruction format is used to convert a mnemonic assembly\ninstruction to a machine instruction. The format indicates the number\nof bits requir ed to specif y an op-code, an addressing mode, a source\nregister (if any), a destination register (if any), a n-bit immediate\ndata value (if any), and a memory address (if any). Figure 8.3\nillustrates the format used for each of the instruct ions listed in Table\n8.2.\nFIGURE 8.3 Examples of instruction for mats for the eight instruction\nexamples listed in Table 8.2 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 514, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "02ecf6f2-5697-482c-8277-326049b790f1": {"__data__": {"id_": "02ecf6f2-5697-482c-8277-326049b790f1", "embedding": null, "metadata": {"page_label": "506", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f1c9b2d8-71dd-40d9-87a7-86d6d9732b21", "node_type": "4", "metadata": {"page_label": "506", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3fc52c833fd5a102eaffff752676e085331ecf107410956d05747bb9852851e3", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  8.2 A List of Instruction Examples with Implicit and/or Explicit Operands\nFor example , with 8-bit op-codes, 16 registers, and a 16-bit\nimmediate data, the instruction 3 (ADD, r1, \u22129) in Table 8.2  becomes\na 4B instruct ion, deter mined as follows, assuming that the op-code\nfor ADD is (000000001)2 and the register-immediate (RI) addressing\nmode is encoded as (1000)2:\nThe size and the number of di\ufb00er ent instruction formats depend on\nthe type of ISA. In general, ISAs are classi\ufb01 ed as Stack-IS A,\nAccumulator -ISA (Acc-IS A), CISC-IS A, and RISC-IS A, discussed ne xt.\n8.2.3 Stack-ISA\nA processor with a Stack-IS A uses a hardwar e stack that operates in\na last-in and \ufb01rst-out (LIFO) order; the last value stored is also the\n\ufb01rst value retrieved. Data read from memory is pushed onto the\nstack. Data used in a computation or stored back into memory is\npopped from the stack. The result of a computation is always pushed\non the stack.\nA Stack-IS A has the advantage of using the shortest instructions\nfor a majori ty of instructions. Therefore, a Stack-IS A is an ideal", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1080, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c09093b2-e109-4083-b60b-5f7b1a692872": {"__data__": {"id_": "c09093b2-e109-4083-b60b-5f7b1a692872", "embedding": null, "metadata": {"page_label": "507", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "666f0c95-b46e-40f2-8ee1-38bd8dac9683", "node_type": "4", "metadata": {"page_label": "507", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "469f07ff2afb4b3240b7974437572e2705b094670cfda3af2963976dce5a7b43", "class_name": "RelatedNodeInfo"}}, "text": "architectur e to design a processor with limite d I/O pins. The\nprocessor would operate like an Hewlett-P ackard (HP) calculator,\nrequiring a math stateme nt to be \ufb01rst ordered into reverse polish\nnotation . For example, to calculate 2(3 + 4) in an HP calculator, one\nmust enter 3, then 4, then +, then 2, and then *. Consider the\nfollowing high-level language pr ogram statement:\nA = B * (C + D);\nIn order to execute the statement in a Stack-IS A processor, the\ncompiler must \ufb01rst translate the statement to the reverse polish\nnatation C D + B * = A. The compiler then conve rts the notation to\nthe following Stack-IS A example assembly program. Note that the\narithmetic instructions ADD and MULT requir e no operands, making\neach a very short instruction. The PUSH and POP, each a data\nmovement instruction, requir e only one operand. In general, program\ncontr ol-\ufb02ow instructions, such as branch and subroutine calls, also\nrequir e a single operand.\nFigure 8.4 illustrates the execution  of the previous program by a\nStack-IS A processor . In the illustration, it is assumed that (B) = 2, (C)\n= 3, and ( D) = 4. The \ufb01gure shows the content of both a logica l stack\nand a har dwar e stack as the instructions e xecute.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1220, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "56c2b184-4e3b-4ede-92d1-a620a18d4db9": {"__data__": {"id_": "56c2b184-4e3b-4ede-92d1-a620a18d4db9", "embedding": null, "metadata": {"page_label": "508", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e4bbd617-a4b4-4b02-9988-912468ed8fa8", "node_type": "4", "metadata": {"page_label": "508", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1bb986f5235f29148f7b2b7268396daeb6acbba8a5fee9a0f64a3329a65c2070", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 8.4 An illustration of stack content when computing the\nreverse polish notation C D + B * = A; it is assumed that (B) = 2, (C)\n= 3, and (D) = 4.\nA Stack-IS A has the disadvantage of not being able to reuse\nmemory content in a futur e computation. Once memory content is\npopped from the stack, it is no longer available inside the processor .\nFor example, consider the program statement \u201cA = (B + C) * (B +\nD);\u201d that requir es the variable B to be pushed twice on the stack,\nthus incr easing memory tra\ufb03c.\n8.2.4 Accumulator-ISA\nAn Acc-ISA is the simplest architectur e and requires less hardwar e.\nThe data path contains a special source and destination register\ncalled accumulator  (ACC). The register is used as both an implicit\ninput operand and an implicit output register name. For example,\nagain consider the high-level program statement \u201cA = B * (C + D);\u201d\nand its Acc-IS A example assembly program given next. As opposed\nto a Stack-IS A, arithmetic instructions in the Acc-ISA can directly\noperate on memory data; thus, when compar ed to a Stack-IS A, an\nAcc-IS A reduc es the total number of instructions requir ed to translate\na high-level language pr ogram into an assembly pr ogram.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1199, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c483ceb8-abc5-4f08-8104-aa519ecdf310": {"__data__": {"id_": "c483ceb8-abc5-4f08-8104-aa519ecdf310", "embedding": null, "metadata": {"page_label": "509", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7ca4ae93-a141-48f1-9c40-4a9ae36cf277", "node_type": "4", "metadata": {"page_label": "509", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "493786e68960799eced004a27a3c8872057dac81112ae4a2e9b6ee167b3faa82", "class_name": "RelatedNodeInfo"}}, "text": "However, the disadvantage of an Acc-IS A is that the register ACC,\nlike a hardwar e stack, may become a bottleneck. The content of ACC\nmay need to be stored in memory so ACC becomes available to be\nused in the ne xt computation. F or example, consider the computation\nof A = (C + D) * (E \u2212 F), wher e C + D and E \u2212 F must be computed\n\ufb01rst befor e their results can be multiplied. In this case, once C + D is\ncomputed, the sum in the ACC must be stored in a temporary\nmemory location befor e E \u2212 F can be computed. An Acc-IS A may also\ninclude other registers, such as an index register to access an array\nelement in memory and a link register to save a subroutine return\naddress.\n8.2.5 CISC-ISA\nA comple x instruction set computer (CISC) ISA is an improvement\nover the Acc-IS A by increasing the number of working registers in the\ndata path. Each arithmet ic instruction can now include one or two\nexplicitly declar ed register operands. Like an Acc-IS A, arithmetic\ninstructions of a CISC-IS A can reference data in memory directly. In\naddition, a CISC-IS A typically implements many addressing modes,\nrequiring many instruction for mats of various sizes.\nThe input operands for arithmetic instructions could be an\nimmediate data, register,  or memory content. However, only one of\nthe operand s can be an immediate value or memory content.\nTypically, a CISC-IS A processor implements many simple and comple x\ninstructions. Therefore, a high-level language program translated into\nCISC instructions would requir e the least number of instructions.\nHowever, some comple x instructions may requir e more time to\nexecute. The following is a CISC-IS A example assembly program to\ncompute the statement \u201c A = B * (C + D);\u201d:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1719, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "94813b11-2a25-45a0-a680-33beac5c0589": {"__data__": {"id_": "94813b11-2a25-45a0-a680-33beac5c0589", "embedding": null, "metadata": {"page_label": "510", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "69adc5c1-3549-44d2-94bb-77e5e38305d7", "node_type": "4", "metadata": {"page_label": "510", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "cdb15f67d50a83fc05d7f1d6ad967c4a0ef532a464b0c8f38e04f326d969ce7b", "class_name": "RelatedNodeInfo"}}, "text": "Because there are more registers to choose from, the statement \u201cA\n= (C + D) * (E \u2212 F);\u201d can easily be computed using a register (e.g.,\nR1) to compu te C + D and another register (e.g., R2) to compute E \u2212\nF, and then the contents of the two registers would be multiplied to\ngenerate the \ufb01nal product. However, even with having more working\nregisters in a CISC-IS A, the number of available registers is still very\nsmall when compar ed to the number of variables  in a typical high-\nlevel languag e program. Also, depending on the size of each high-\nlevel program statement, there could be many intermediate results\n(e.g., C + D and E \u2212 F) that must be saved either  in registers inside\nthe processor or in memory . Therefore, similar to the Acc-IS A, an\nintermediate result in one of the registers may still need to be stored\nin memory to fr ee up a r egister for the ne xt computation.\n[A CISC-IS A compiler, as opposed to the Stack-IS A or Acc-IS A\ncompilers, needs to implement a register selection policy to minimize\nmemory accesses when all the registers contain intermediate results.\nA register allocation policy, such as least recently used  (LRU), is\nused to free up a register by storing its content, if intermediate, in\nmemory . On the other hand, if the LRU register content is a memory\ndata, it is discar ded.]\n8.2.6 RISC-ISA\nAs stated earlier, typicall y, the data path of a CSIC-IS A implements\nmany di\ufb00er ent addressing modes. On the other hand, the designers\nof a RISC ISA believed (correctly) in having simpler instructions to\nimplement a simpler and more e\ufb03cient data path. Alpha, MIPS, and\nSparc are examples of processors that were designed from the\nbeginning as a RISC-IS A processor .\nA RISC-IS A, also known as load/store architecture , uses only two\ninstructions (e.g., LD and ST) to access memory . No arithmetic\ninstructions can operate directly on data in memory . A memory data\nmust be loaded into a register befor e it can be used in a", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1963, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5b0d7e6-9052-4b44-b559-f04b13dbb6c3": {"__data__": {"id_": "c5b0d7e6-9052-4b44-b559-f04b13dbb6c3", "embedding": null, "metadata": {"page_label": "511", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d9b9ff1c-5951-473f-8c82-5dd6106d763e", "node_type": "4", "metadata": {"page_label": "511", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8435bc1300312cb6fd5f15f44ba133a5674f1da8737a80f0d0b2ef55a7dd36b1", "class_name": "RelatedNodeInfo"}}, "text": "computation. The following is an example of a RISC-IS A assembly\nprogram to compute the statement \u201c A = B * (C + D);\u201d:\nThe assembly program uses \ufb01ve registers to keep three memory\ncontents and two intermediate results (i.e., C * D and B * (C + D))\ninside the processor . Usually, there are more such registers in a RISC-\nISA processor than there are in a typical CISC-IS A. The reason for this\nis to keep more data in registers and thus increase the processor\nthroughput.\n\u00a0\n8.3 Design Example\nThe design of a simple Acc-IS A CPU is presented. However, the\nobjective here is not to create a complete set of instructions, but\nrather, to provide a top-d own design methodology that starts from a\nsimple e xample high-level language code and includes the following:\n\u2022 Instruction set design (the list of instructions necessary to\ntranslate an e xample high-level language pr ogram code to its\nequivalent assembly language pr ogram)\n\u2022 Assembly language pr ogram code listing\n\u2022 Binary e xecutable code (machine instructions)\n\u2022 Data path design\n\u2022 HDL model\n\u2022 Simulation\n8.3.1 Acc-ISA Instruction Set Design", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1099, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db85380f-1df5-4ad7-ae36-fb3fe78d123d": {"__data__": {"id_": "db85380f-1df5-4ad7-ae36-fb3fe78d123d", "embedding": null, "metadata": {"page_label": "512", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c65ab96-cbb7-43b0-aa19-9a77363bae87", "node_type": "4", "metadata": {"page_label": "512", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "39f820eb1db8fdc55b33dc952dc2c7233ced4e3e037f9914548481091dc91b3a", "class_name": "RelatedNodeInfo"}}, "text": "Example 8.1 presents a high-level program code that sums the\nelements of an array using a for-loop. We would like to create a set of\nAcc-IS A instructions to compile the code and generate an equivalent\nassembly pr ogram.\nExample 8.1.  A program code listing that sums the elements of an ar ray with size 8:\nA close examination of the example code reveals  that we would\nneed to create arithmetic  instructions (e.g., add and compar e); data\nmovement instructions, including array indexing; and program\ncontr ol-\ufb02ow instructions (e.g., jump and jump greater than). For array\nindexing, the data path must contain another register (X) that would\nhold the next index for the array. Table 8.3 lists the instruction set\nrequir ed to translate the example program code  to an equivalent\nassembly language program. In the table, a program pointer  (PP),\nalso called a program counter  (PC), holds the address of the next\nexecuting instruction. Here, integer numbers starting from 0 are\narbitrarily assigned to the op-codes. The op-code 0 is named no-\noperation (NOP). A NOP instruction, while not used here, is necessary\nto design a high-perfor mance RISC pr ocessor .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1160, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4f7e6e3b-3daf-4c23-8e2f-0e7027ddbdf4": {"__data__": {"id_": "4f7e6e3b-3daf-4c23-8e2f-0e7027ddbdf4", "embedding": null, "metadata": {"page_label": "513", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0f8b2fe2-08c0-4d3c-a756-3a7feb069186", "node_type": "4", "metadata": {"page_label": "513", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e996ad40dbd03ce66050a9adb87155b99037ef9ec68d02b8a6284529243ba686", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  8.3 Example  Acc-IS A Instruction Set That Translates a High-L evel Program into an\nEquivalent Assembly Language P rogram\nAcc-ISA Example Assembly Program\nBecause there are no compilers for the example Acc-IS A processor,\nthe code in Example 8.1 must be manually convert ed to an assembly\nprogram\u2014for example, the one shown in Example  8.2. Each line in\nthe Acc-IS A assembly language program contains four \ufb01elds: an\noptional label \ufb01eld, an op-code \ufb01eld, an operand \ufb01eld (if any), and an\noptional comment \ufb01eld. The label \ufb01eld may include a jump address,\nsuch as the L1 and L2 in Example 8.2.\nThe \u201c.code\u201d and \u201c.data\u201d are called assembler directives  and are\nused to separate the instructions and data in the program,\nrespectively . This is necessary if the processor data path requir es\nthat instructi ons and data be stored in separate memory sections\nduring execution. For high perfor mance, this allows instructions to be\nstored in an IM and data in DM inside the processor, as illu strated in\nFig. 8.2 . The \u201cRB,\u201d which here stands for reserve byte, is an example\nof a pseudo-instruction . The pseudo -instruction \u201cRB\u201d is interpr eted", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1144, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1615df39-9797-4402-aec9-dcc65526691f": {"__data__": {"id_": "1615df39-9797-4402-aec9-dcc65526691f", "embedding": null, "metadata": {"page_label": "514", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0d34336b-26aa-44a0-8e8b-bb9957e8f982", "node_type": "4", "metadata": {"page_label": "514", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e2352b81fa6004d6dd9e07ef952aa9c037e7b8aa5eebe6f8c9c24d0393891fb2", "class_name": "RelatedNodeInfo"}}, "text": "by the assembler for allocating memory addresses to each of the\nvariables sum and i and data structur e array in the pr ogram.\nExample 8.2. The listing of an Acc-IS A assembly language program for the program in\nExample 8.1:\nThe program  in Example 8.2 uses an arbitrary syntax. However, for\nan example of a speci\ufb01c  syntax, refer to the Microsoft assembler\n(MASM) [ 2].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 370, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7b8af254-ac8b-4e5c-a07e-5da58354b5d5": {"__data__": {"id_": "7b8af254-ac8b-4e5c-a07e-5da58354b5d5", "embedding": null, "metadata": {"page_label": "515", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7bff352-15f2-4592-9a94-07b0fcd592c1", "node_type": "4", "metadata": {"page_label": "515", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "10833e51b28232106c6d8f9bf544b4c653bb482a4119cd2a60227251b0647b7d", "class_name": "RelatedNodeInfo"}}, "text": "Code and Data Memory Spaces\nFigure 8.5 illustrates how program\u2019s code and data are typically\nstored in virtual memory  during execution. The range for a virtual\naddress deter mines the maximum program size in bytes. For\nexample, with 32-bit user virtual addresses, user programs can be a\nmaximum of 4 GB.\nFIGURE 8.5 A program\u2019s code and data in virtual memory addr ess\nspace.\nThe amount of the virtual  memory address space that is allocated\nto run a program is typically divided into program code and program\ndata regions , as illustrated in Fig. 8.5. Virtual memory systems are\ncover ed in Chap. 10. However, here we will as sume Fig. 8.5\nrepresents the way our sample pr ogram is stor ed in memory .\nPentium IV Example Assembly Program", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 738, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8017e25b-1acf-4405-be30-e051965e5a0b": {"__data__": {"id_": "8017e25b-1acf-4405-be30-e051965e5a0b", "embedding": null, "metadata": {"page_label": "516", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25db3167-9976-4578-85d8-d9c3fa348fe7", "node_type": "4", "metadata": {"page_label": "516", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "37cddc6aaad8d64c6a95b8f056a827e55255b263302e5712bdd3b8938d3a65d7", "class_name": "RelatedNodeInfo"}}, "text": "Example 8.3 presents Intel Pentium IV assembly code for the\nprogram in Example 8.1. It is generated by using the \u201cgcc\u201d compiler\nin CygW in, a Linux utility for the Windows envir onment [3]. In the\nlisting, integer data types are 4B, and the rightmost listed operand in\neach instruction indicates destination. In the program, registers are\npre\ufb01xed with the symbo l \u201c%\u201d. The register %ebp is called a base\npointer and holds the starting memory address for the program\u2019s\ndata region. Also, in order to avoid cache and mem ory misalignments\nand achieve better perfor mance [4], larger data structur es are\nallocated \ufb01rst. However, with the availability of large main memory,\ndata structur es may be declar ed larger than necessary (i.e., padded)\nto achieve better cache  perfor mance [5]. In the code, the data\naddress %ebp \u2212 40 is assigned to the array, %ebp \u2212 44 to the i, and\n%ebp \u2212 48 to the sum. The load e\ufb00ective address (\u201cleal\u201d) instruction\nloads a memory addr ess (not memory content) into a r egister .\nExample 8.3.  A Pentium IV assembly code for the sample pr ogram given in Example 8.1:\nSparc Example Assembly Program\nExample 8.4 presents a gcc compiler generated AltraSpar c II\nassembly language program for the code in Example 8.1. For this\nexample, the gcc compiler was used on a virtual Aurara SPARC Linux\nsystem, cr eated on the V irtutech Simics Envir onment [ 6].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1378, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2cfe2d10-3391-44aa-bf4e-f1f389649146": {"__data__": {"id_": "2cfe2d10-3391-44aa-bf4e-f1f389649146", "embedding": null, "metadata": {"page_label": "517", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c32bb3b7-6bb2-4aba-9aa6-b08e856a7fdc", "node_type": "4", "metadata": {"page_label": "517", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1b747e3c8279de33378a681424a135498688393bef1585182bea4692355a9756", "class_name": "RelatedNodeInfo"}}, "text": "The AltraSpar c is a RISC-IS A processor, and thus, the arithmetic\ninstructions do not access memory; they only operate on register\ncontents and immediate data values. Only the load (\u201cld\u201d) and store\n(\u201cst\u201d) instructions access memory . Registers are pre\ufb01xed with the\nsymbol \u201c%,\u201d and register %fp, which stands for frame pointer, like\nthe Intel\u2019s base pointer, holds the starting address for the memory\ndata region. Because the Sparc processor automatically executes the\ninstruction that follows a branch instruction, such as \u201cbg\u201d and \u201cb,\u201d a\nnonoptimized code must include a NOP instruction following each\nbranch instruction.\nAs expected, the RISC program in Example 8.4 has more\ninstructions (19) as compar ed to 11 for the CISC program in Example\n8.3.\nExample 8.4. A Sparc assembly code for the sample program given in Example 8.1. The\ncode, however, is not optimized.\nExecutable Codes", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 885, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "385c0983-676c-4905-a241-c5a961a86178": {"__data__": {"id_": "385c0983-676c-4905-a241-c5a961a86178", "embedding": null, "metadata": {"page_label": "518", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "156554be-74af-486b-ac06-bdeef59d7ee2", "node_type": "4", "metadata": {"page_label": "518", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "14ec4601da5da869a33d61f8a1ad36cfab71c7fed327caf91ca6a1d14cc132f0", "class_name": "RelatedNodeInfo"}}, "text": "An assembly language program is translated to its equivalent binary\ncode by an assembler, typically, through a two-pass process. During\nthe \ufb01rst pass, an assemb ler assigns a memory address to each label\nin the code and data sections. The instructions listed in Table 8.3 are\nrepresented in binary using one of the three instruction formats\nshown in Fig. 8.6. For simplici ty, each instruction is made of an 8-bit\nop-code and an 8-bit data or address operand (if any). The \u201cNOP \u201d\nand \u201cMVX\u201d instructions do not have operands; thus, the operand \ufb01eld\nin these two instructions is set to 0.\nFIGURE 8.6 The instruction for mats for the A cc-IS A example\nprocessor .\nExample 8.5 lists a typical output of an assembler using the\nprogram in Example 8.2. The listing uses an arbitrary syntax. For\nsimplicity, the example Acc-IS A processor is assumed to be a 16-bit\nmachine. It is also assumed that a program\u2019s code and data address\nspace is 256B, with program codes starting at address 0 and data\nspace starting at address 0xFF (a base address), as was shown in\ngeneral in Fig. 8.5 .\nExample 8.5. The manually assembled output for the assembly program in Example 8.2.\nThe array starts at data addr ess 0xF0 for 16B, i at 0xEE for 2B, and sum at 0xEC for 2B.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1249, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b44d221e-978e-487c-969a-74eeca14e585": {"__data__": {"id_": "b44d221e-978e-487c-969a-74eeca14e585", "embedding": null, "metadata": {"page_label": "519", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "de2cd7cb-307d-4c8b-baa6-45cf223d51df", "node_type": "4", "metadata": {"page_label": "519", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a338f195a1ee950e2ba9a2c384d92c1cdce2a12d218e39da89775eb1235c4fb7", "class_name": "RelatedNodeInfo"}}, "text": "Example 8.6 is the assembler output for the Intel program in\nExample 8.3. The Intel\u2019s Pentium family of processors executes CISC\ninstructions of di\ufb00er ent sizes. For example, \u201cmovl\u201d is a 7B\ninstruction, and \u201cjg\u201d is a 2B instruction.\nExample 8.6.  The output of the assembler for the Pentium IV program in Example 8.3. The\nnumbers 0x\ufb00\ufb00\ufb00d0, 0x\ufb00\ufb00\ufb00d4, and 0x\ufb00\ufb00\ufb00d8 are the 2\u2019s complement  representations of \u221248,\n\u221244, and \u221240, r espectively .\nExample 8.7 is the output of the assembler for the AltraSpar c II\nprogram in Example 8.4. Because Sparc is a RISC-IS A, all the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 565, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b8492d4-ecea-46a0-b1eb-8c2b8fedf816": {"__data__": {"id_": "0b8492d4-ecea-46a0-b1eb-8c2b8fedf816", "embedding": null, "metadata": {"page_label": "520", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e91a7fb-ff60-4e67-83bf-b265686eccb8", "node_type": "4", "metadata": {"page_label": "520", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e011c543740f56e7ffe2d81760d0403af60be05fee387e3d34da525df6008f14", "class_name": "RelatedNodeInfo"}}, "text": "instructions ar e the same size for e\ufb03cient implementation.\nExample 8.7.  The output of the assembler for the AltraSpar c II pr ogram in Example 8.4:\n8.3.2 Acc-ISA Processor: Single-Cycle\nFigure 8.7  illustrates a single-cycle data path for the example Acc-IS A\nprocessor . It consists of fetch, decode, execute, and write-back units.\nDuring each clock cycle , an instruction is fetched, decoded, and\nexecuted, and the result (if any) is written back to register ACC, X, or\n1-bit status register (SR). The instructions are assumed already\nloaded into the IM (instru ction cache memory) and data into the DM\n(data cache memory).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 627, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a61a4895-5d80-427e-8542-e0236e71f4a8": {"__data__": {"id_": "a61a4895-5d80-427e-8542-e0236e71f4a8", "embedding": null, "metadata": {"page_label": "521", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9a18ad38-e308-464a-93d5-c528abcab29b", "node_type": "4", "metadata": {"page_label": "521", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b462b432f9455af6e18484fbbdfc2f167e09b58ca07caedcff7daca950500390", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 8.7 The A cc-IS A single-cycle data path to e xecute the\nprogram in Example 8.2.\nAlso, during each clock cycle, the PP register either loads the\noutput of the adder, if the next instruction is the next sequential\ninstruction in the program , or the output of the multiple xer (MUX), if\nthe next instruction is a result of a jump instruction, either \u201cJGT\u201d or\n\u201cJMP.\u201d In the \ufb01gure, it is assumed that PP retains byte addresses, but\nIM inputs a wor d addr ess to output the ne xt 16-bit instruction.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 502, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3aafee90-d0a1-43d6-a631-c53dd8356493": {"__data__": {"id_": "3aafee90-d0a1-43d6-a631-c53dd8356493", "embedding": null, "metadata": {"page_label": "522", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "19cf6f4f-c7cc-49fe-9350-5a1712807e27", "node_type": "4", "metadata": {"page_label": "522", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "04cc4f4dd6fa10f3bdf86d42294b874e0caaf178626622ce87b863f508ded6d7", "class_name": "RelatedNodeInfo"}}, "text": "The decode unit contains a combinational circuit that inputs an op-\ncode and generates all the contr ol signals necessary to execute the\ncurrent instru ction. It also contains the ACC, X, and SR. In general, an\nSR is multibit register with a bit allocated for each condition, such as\nequal-to (E), less-than (L), not-equal-to (NE), arithmetic output is zero\n(Z), carry-out bit (C), arithmetic over-\ufb02ow (O), and many other\ncondition bits related to the state of the processor . The decode unit\nforwar ds all the contr ol signals, the single immedia te data operand (if\nany), and the content of the r egisters to the e xecute unit.\nThe e xecute unit contains all the components necessary to e xecute\nan instruction. MUXs are needed when there are multiple data\nsources for a module. For example, the adder/comparator (Add/Cmp)\nmodule either computes a sum or compar es its inputs and outputs\nthe greater -than-\ufb02ag (gtf) signal. The module inputs both ACC and\neither an immediate or a dir ect memory operand. Ther efore, a MUX is\nneeded to choose eithe r the operand when the operand is an\nimmediate data or M[ope rand] when the operand is an address and\nindicates memory content. Likewise, another MUX is used to select\neither a direct addressin g or the quantity X + operand for index\naddressing. (Refer to the Exercises section in Chap. 3 for how to\ndesign a comparator .)\nThe write-bac k unit consists of a MUX. It is used to choose one of\nthe several possible results generated by the execute unit. The result\nof executing \u201cLD\u201d and \u201cADD\u201d instructions is stored (written back) in\nthe ACC; the result of executing \u201cMVX \u201d instruction is stored in the X\nregister, and the result of executing \u201cCMP,\u201d which  is a 1-bit greater\nthan \ufb02ag gtf, is stored in the 1-bit SR. Executing a \u201cJMP\u201d instruction\ncauses the ne xt instruction addr ess to be loaded into PP .\nSimulation\nExample 8.8 presents the HDL model of the single-cycle Acc-IS A data\npath illustrated in Fig. 8.7 . For simplicity, the IM and DM are assumed\nto be 64B each, organized as a 32 \u00d7 16 memory . In a real processor,\nboth IM and DM are organized as cache memories (Chap. 10). Since\nthe processor is a single-cycle data path, an instruction is executed\nwithin one clock cycle.\nExample 8.8.  An HDL behavioral description of the example single-cycle Acc-IS A data path\nincludes two \u201cinitial\u201d blocks to initialize IM with program instructions and DM with the array\nelements. The DM is initialized with eight values, 100 to 107. An extra \u201cJMP 0x1A \u201d instruction", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2517, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2439603d-d4e8-4b4a-a893-54c386e60f99": {"__data__": {"id_": "2439603d-d4e8-4b4a-a893-54c386e60f99", "embedding": null, "metadata": {"page_label": "523", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0fd90f61-f53a-487c-b20d-52ca821bf0d2", "node_type": "4", "metadata": {"page_label": "523", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "09503343205514ab4adb3391178fa860ba136fbfbb7bcb5c88a35713a945e9ce", "class_name": "RelatedNodeInfo"}}, "text": "is inserted at the end of the program to create an in\ufb01nite loop for simulation purposes. The\ndescription consists of two major code sections discussed ne xt.\nDecode and execute units \u2014This combi ned behavio ral description\nimplicitly describes the contr ol signals requir ed to execute each\ninstruction. The code also describes all the necessary combinational\ncircuits requir ed to create the data path. However, the HDL model\ndoes not explicitly describe any computing circuit module; their\nimplementation details are left for the Altera\u2019s synthesis tool to\ndeter mine.\nFetch and write-back units \u2014These units update the state of the\nprocessor by changing the contents of registers PP, ACC, X, and SR.\nThus, their descriptions are combined, but each could also be\ndescribed separately . The combined unit includes the behavioral\ndescriptions of the adder and the MUX used in the fetch unit and the\nMUX used in the write-back unit, as illustrated in Fig. 8.7 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 960, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6afdfe52-0695-4cd9-881f-5ba7916422b2": {"__data__": {"id_": "6afdfe52-0695-4cd9-881f-5ba7916422b2", "embedding": null, "metadata": {"page_label": "524", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b33af683-9391-4dcb-8622-ca9001200c6f", "node_type": "4", "metadata": {"page_label": "524", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "70234410fe315dadbff647ed4c802bf905b240f9a1f87b8f024bcd72f21e0234", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "21bc51cd-3465-43d5-8ee2-3226940cd88c": {"__data__": {"id_": "21bc51cd-3465-43d5-8ee2-3226940cd88c", "embedding": null, "metadata": {"page_label": "525", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3ae7dede-bc1b-4d1d-afe0-c1da08e70dc0", "node_type": "4", "metadata": {"page_label": "525", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2481d97b31be7d27872dfaf9c6878d34cfcee00a651decd4ce6a654c124dbec3", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11df4f14-db1c-4a10-a6e9-7505fec69361": {"__data__": {"id_": "11df4f14-db1c-4a10-a6e9-7505fec69361", "embedding": null, "metadata": {"page_label": "526", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "57405947-f0a7-4856-9007-b0da7f4564ea", "node_type": "4", "metadata": {"page_label": "526", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a36c4f0dc3e9ad036ca09c4b8014e9c1f87397a8fa290b436867adc476897dd6", "class_name": "RelatedNodeInfo"}}, "text": "Figure 8.8 show s the simulation  wavefor m illustrating the\nbeginning of the program  execution after an asynchr onous reset. The\nwavefor m lists each instruction in hex and the contents of ACC, X,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 198, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bad3e458-b8ae-416b-a622-ae35a6b9f9db": {"__data__": {"id_": "bad3e458-b8ae-416b-a622-ae35a6b9f9db", "embedding": null, "metadata": {"page_label": "527", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "71840c48-b07e-40bb-8bce-82b568750df7", "node_type": "4", "metadata": {"page_label": "527", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2ba02dc4019ea5e858d6acb4851a02d23a13920aaee634deadbe2bf703d00a4d", "class_name": "RelatedNodeInfo"}}, "text": "and SR registers in decimal. Figure 8.9 shows the ending of the\nsimulation wavefor m when SR bit becomes 1. As expected, the \ufb01gure\nshows ACC = 828, the \ufb01nal sum of the array elements. The program\nexecution continues in a loop with the \u201cJMP 0x1A \u201d (0x051A)\ninstruction.\nFIGURE 8.8 The e xample A cc-IS A single-cycle pr ocessor simulation\nwavefor m; illustrating the beginning section of the wavefor m.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 401, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6710487f-18b0-4c14-ac11-b08080ab1076": {"__data__": {"id_": "6710487f-18b0-4c14-ac11-b08080ab1076", "embedding": null, "metadata": {"page_label": "528", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "945f44c0-15d0-4061-b5ae-17dc69e978ca", "node_type": "4", "metadata": {"page_label": "528", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e31e135724142535ba3d79c680e926ee5755ef02bb76d7fec5875e42c46df3fe", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 8.9 The e xample A cc-IS A single-cycle pr ocessor simulation\nwavefor m; illustrating the ending section of the wavefor m with the\n\ufb01nal sum = 828 \n .\n8.3.3 Acc-ISA Processor: Pipelined\nFigure 8.10 illustrates a block diagram of a four-staged instruction\npipeline for the example Acc-IS A, and Fig. 8.11 illustrates its detailed\ncircuit. All the contr ol signals to execute an instruction are generated\nin the decode stage and, along with the register contents, are fed to\nthe execute stage. Those contr ol signals that are needed in the write-\nback stage are forwar ded from the execute stage, along with the\ncomputed results. The write-back stage then selects and passes one\nof the computed results (if any) to the decode stage. The write-back\nstage also forwar ds the selected result to the execute state for\npossible use in the e xecution of the ne xt sequential instruction.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 885, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "610ca292-f2b3-41c5-a699-81a98d74adcd": {"__data__": {"id_": "610ca292-f2b3-41c5-a699-81a98d74adcd", "embedding": null, "metadata": {"page_label": "529", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "63b8cf5c-7a4b-4de1-bc36-d233578870e9", "node_type": "4", "metadata": {"page_label": "529", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "6304897633adbd6d13460e025ca7a2365c816c5d46c67129129dd9463674e9a7", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 8.10  Illustrating a four -stage pipelined instruction data path.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 72, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4823058b-3475-4ef9-8b42-eb6aa834dba6": {"__data__": {"id_": "4823058b-3475-4ef9-8b42-eb6aa834dba6", "embedding": null, "metadata": {"page_label": "530", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1cca56ee-b6c6-4988-bf86-c4be660596c0", "node_type": "4", "metadata": {"page_label": "530", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "81823db8eaa06e9e0507c176c0b2a59c18a94767a3e1070c0a34b786f1e36d94", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 8.11  The pipelined data path of the e xample A cc-IS A\nprocessor .vsd.\nThe control signals ex, esr, and eacc from the write-back stage are\nused in the decode stage  to store a newly comput ed result into one\nof the registers ACC, X, or SR, and also in the execute stage to\nchoose a newly compu ted result. This is done by using three\nadditional MUXs, labeled MUX5, MUX6, and MUX7. The MUXs use the\ncontr ol signals ex, esr, and eacc from the write-back stage to form a\nforwarding unit and thus increase pipeline throughput. As\nillustrated in the \ufb01gure, each MUX chooses between a register\u2019s", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 598, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "564e5df2-3d22-4626-bd80-264b8ebe5361": {"__data__": {"id_": "564e5df2-3d22-4626-bd80-264b8ebe5361", "embedding": null, "metadata": {"page_label": "531", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f0a17c75-01ed-4d00-8be1-450e1af02ab4", "node_type": "4", "metadata": {"page_label": "531", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1f42d1d1bce36cb858fc16be0974f0dc1c1eb2bfb3466fc6177d6e667ef26db0", "class_name": "RelatedNodeInfo"}}, "text": "current content and a newly computed result from the write-back\nstage that is not yet stored in the respective register . This enables\nthe processo r to use a newly computed result from the write-back\nstage in the execution of a data-dependent instruction that follows\nwithout waiting \ufb01rst for the result to be stored in a register . The\ncomple xity of a forwar ding unit depends on the comple xity of the\nspeci\ufb01c ISA. The functions  of a forwar ding unit are discussed in more\ndetail later in this section.\nSimulation\nFigure 8.12  shows the simulation wavefor m illustrating the beginning\nof the program execution after an asynchr onous reset. The wavefor m\nlists each instruction in hex and the contents of ACC, X, and SR in\ndecimal. While the wavefor m illustrates the instructions are moving\nfrom one stage to the next, the information passed  from one stage to\nthe next is di\ufb00erent. The write-back is also known  as the instruction\nretire stage . It indicates the completion of executing an instruction.\nA pipeline operates with the e\ufb03ciency of 100% when all the stages\nare busy and concur rently e xecuting instructions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1126, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f9386916-9617-4dab-998a-966caaa3b47f": {"__data__": {"id_": "f9386916-9617-4dab-998a-966caaa3b47f", "embedding": null, "metadata": {"page_label": "532", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1a1fa406-74d1-460f-833b-b99c5971c1c4", "node_type": "4", "metadata": {"page_label": "532", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "69f1d0b1f258328ca34103152ab5ccbb61534ea96cdef1e7dd55ec43b22b3d08", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 8.12  A simulation wavefor m for the e xample A cc-IS A\npipelined data path; illustrating the beginning section of the\nwavefor m. The stages ar e displayed top to bottom.\nFigure 8.13  shows the ending of the simulation wavefor m when the\n1-bit content of SR becomes 1. Note that each time a jump\ninstruction (\u201cJMP\u201d or \u201cJGT\u201d) executes, the pipeline starts over. This is\ncalled a pipeline \ufb02ush . For example, as illustrate d in Fig. 8.13 , when\nthe unconditional instruction 0x0506 (\u201cJMP 6\u201d) executes or the\nexecution of the conditional instruction 0x041A (\u201cJGT 0x1A \u201d) results\nin a jump, it causes a pipeline \ufb02ush and thus decreases the e\ufb03ciency\nof the pipeline. In this case, when there is a pipeline \ufb02ush, no\ninstructions retire for three clock cycles as illustrated by the write-\nback stage (inst_WB) in the \ufb01gure. The \ufb01gure shows the content of\nACC = 828 as the \ufb01nal sum of the array elements. The program\nexecution continues in a loop with a \u201c JMP 0x1A \u201d instruction.\nFIGURE 8.13  A simulation wavefor m for the e xample A cc-IS A\npipelined data path; illustrating the ending section of the wavefor m\nwith \ufb01nal sum = 828.\nForwarding and Hazard Units", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1160, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "64011947-dd46-477c-b5f3-0defc26b68a2": {"__data__": {"id_": "64011947-dd46-477c-b5f3-0defc26b68a2", "embedding": null, "metadata": {"page_label": "533", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1407516d-237d-466c-acfb-04980df71270", "node_type": "4", "metadata": {"page_label": "533", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a34364cb8f213a7639740028c7dfe209eab4c2349ab61d18023f7a1cb41e7afc", "class_name": "RelatedNodeInfo"}}, "text": "A forwar ding unit, which forwar ds a newly generated result from the\nwrite-back stage to the execute stage, was brie\ufb02y discussed earlier\nfor the example Acc-IS A pipelined processor . Here, the discussion is\nmore gene ral. Conside r the following two data-dependent\ninstructions fr om Example 8.2, the A cc-IS A example pr ogram:\nThe LD instruction loads a memory data into the ACC, and the ADD\ninstruction increments the content of the ACC. Figure 8.14 illustrates\ntwo pipeline charts for executing the two instructions in sequence. In\nFig. 8.14(a), the processor uses a forwar ding unit to forwar d the\nnewly read memory data (M[i]), not yet stored in the ACC, to the\nexecute stage to be used in the e xecution of the ADD instruction.\nFIGURE 8.14  Illustrating the e\ufb00ect of a forwar ding unit; (a) a pipeline\nchart with a forwar ding.vsd.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 841, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c22b4bf5-0843-478a-abdc-b224ae71614e": {"__data__": {"id_": "c22b4bf5-0843-478a-abdc-b224ae71614e", "embedding": null, "metadata": {"page_label": "534", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c24817e2-c8ed-4e22-aef7-0dab7f7a0f6d", "node_type": "4", "metadata": {"page_label": "534", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1c0947a231e29cfbd0d7b34f6cd508d0303e4fd98a2d017d329ff06f1b346683", "class_name": "RelatedNodeInfo"}}, "text": "On the other hand, the chart in Fig. 8.14(b) illustrates the\nexecution of the same two instructions without a forwar ding unit. In\nthis case, when the LD instruction is executing, the ADD instruction is\ndecoding. When the LD instruction moves to the write-back stage,\nthe execution of the ADD instruction must be stalled until the ACC is\nupdated with the M[i]. Therefore, the execution of the ADD\ninstruction would be stalled for two clock cycles, as illustrated with\nbubbles in the \ufb01gur e.\nPipeline stalling is implemented by a hazard unit that delays and\nprevents a data-dependent next instruction (i.e., ADD) from moving\ninto the execute stage by executing an implicit NOP instruction\nduring that clock cycle. Once the ACC is updated with the new value,\nthe dependent instruction (i.e., ADD) is allowed to move into the\nexecute stage for e xecution.\nBecause the execution unit in this case consists of only one stage\n(i.e., \u201cExecute,\u201d in Fig. 8.14), the processor either requir es a\nforwar ding unit or hazar d unit, but not both. Figure 8.15 illustrates\nthe Acc-IS A pipelined data path with a hazar d unit, and Example 8.9\npresents an HDL model for the hazar d unit. The MUX4, MUX5, and\nMUX6 that were used to implement a forwar ding unit in Fig. 8.11 are\nnow r emoved fr om the data path in Fig. 8.15 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1308, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a4b08d12-90d1-4be8-a4dc-30e300bf6ac8": {"__data__": {"id_": "a4b08d12-90d1-4be8-a4dc-30e300bf6ac8", "embedding": null, "metadata": {"page_label": "535", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a898ea-f146-4897-83e4-70afc781587c", "node_type": "4", "metadata": {"page_label": "535", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e24a3be29d8e080a410c5a8d289ebc82180d4f1ab87fe62a04db2e69c198811f", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 8.15  The e xample A CC-IS A pipelined data path with a hazar d\nunit.vsd.\nExample 8.9. The HDL code section describes the hazar d unit for the Acc-IS A pipelined\nprocessor in Fig. 8.15  using explicitly declar ed register contr ol signal names. The hazar d unit\ncompar es the register contr ol signals ex, eacc, and esr from the write-b ack stage with those\nin the execute stage. If each pair of contr ol signals (e.g., eacc in the execute stage with the\neacc in the write-back stage) are the same, the hazar d unit located in the decode stage\ndelays the execution of the current instruction. Speci\ufb01cally, the hazar d unit asserts the\nhazar d signal and synch ronously resets (clears) the pipeline register that passes the register", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 738, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dc4d7294-bff5-44e6-9f51-58826b9c691a": {"__data__": {"id_": "dc4d7294-bff5-44e6-9f51-58826b9c691a", "embedding": null, "metadata": {"page_label": "536", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ce9e5ecf-03e3-4a83-baf4-70b34a051c1f", "node_type": "4", "metadata": {"page_label": "536", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "16936d3960777a4fd1f99bc99c874571dc126f59213c88691f240bbc7991dd4e", "class_name": "RelatedNodeInfo"}}, "text": "contr ol signals for the current instruction from the decode stage to the execute stage, as\nshown in the \ufb01gur e.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 112, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "20b678e7-2421-4200-b2d8-24b53095d9a4": {"__data__": {"id_": "20b678e7-2421-4200-b2d8-24b53095d9a4", "embedding": null, "metadata": {"page_label": "537", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0fbb9971-95f9-4188-abea-c208c994e6fa", "node_type": "4", "metadata": {"page_label": "537", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "794a9cf29fd380c141c6017f8621845fb46142c7ec67a00227c09de4c30f4f6a", "class_name": "RelatedNodeInfo"}}, "text": "In general, an execution unit is made of two or more stages to\nbetter distribute the requir ed hardwar e into several stages and\nminimize the clock period of the pipeline. In such cases, a pipelined", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 198, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7c5b449b-ae1c-49a7-bad6-4aa3b95976c9": {"__data__": {"id_": "7c5b449b-ae1c-49a7-bad6-4aa3b95976c9", "embedding": null, "metadata": {"page_label": "538", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "916fe532-6486-4cef-83b4-919fffe60fc2", "node_type": "4", "metadata": {"page_label": "538", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4a457c712c905a48433054a97046249e0dc93bc6189195e101c7bebf521706e1", "class_name": "RelatedNodeInfo"}}, "text": "data path requires both a forwar d unit and a hazar d unit, as will be\ndiscussed in Sec. 8.3.4  for a RISC processor . In addition, because a\ntypical CISC or RISC ISA uses not one but several general-purpose\nregisters, forwarding and hazar d units must be able to check data\ndependency among several di\ufb00er ent registers.\nPerformance Analysis\nThe perfor mance of a processor is often measur ed in terms of cycles\nper instruction  (CPI). It is calculated as the total number of clock\ncycles used to execute  a program divided by the number of\ninstructions in the pr ogram (see Eq. (8.1) ).\nFigure 8.16 illustrates a pipeline chart for the example Acc-IS A\nprogram. As illustrated in the chart and summarized in Table 8.4, it\ntakes 6 clock cycles (labeled i through vi in the chart) to execute the\ninstructions befor e the for-loop and 12 clock cycles to execute each\niteration of the for-loop. Finally, two clock cycles (labeled I and II) are\nrequir ed to exit the for-loop. The program has three instructions\nbefor e the for-loop, 10 instructions in the body of the for-loop, and\ntwo instructions (\u201c CMP\u201d and \u201c JGT\u201d) to e xit the for -loop.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1139, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6f69bd6c-f930-42b4-9bd5-04f23ae6c922": {"__data__": {"id_": "6f69bd6c-f930-42b4-9bd5-04f23ae6c922", "embedding": null, "metadata": {"page_label": "539", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "49896b79-db0f-49b9-8b7c-eaf9691848d6", "node_type": "4", "metadata": {"page_label": "539", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b455d8342dc1e6ccbfe559edda353294da614ec3b9ebe853bf50ff9450a4d399", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 8.16  A pipeline chart illustrating the e xecution of the A cc-IS A\nprogram in Example 8.2.\nTABLE  8.4 Data fr om the P ipeline Chart in Fig. 8.16\nEquation (8.2) presents N, the total number of pipeline clock\ncycles, and n, the total number of instructions using m for-loop\niterations.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 292, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "77290d70-a63f-455e-bcbe-0d09bab23d5d": {"__data__": {"id_": "77290d70-a63f-455e-bcbe-0d09bab23d5d", "embedding": null, "metadata": {"page_label": "540", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2d3f0628-dde2-4485-b3b9-1199128e2e49", "node_type": "4", "metadata": {"page_label": "540", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "99568583d220c53ebb5155afaca6e08a313b8dc2005ee09522461d4ac75ac987", "class_name": "RelatedNodeInfo"}}, "text": "For m = 8 iterations, the CPI of the example program is calculated\nas follows:\nEquation (8.4) presents the CPI for the example  program as m\napproaches in\ufb01nity (\u221e). The CPI is larger than 1 due to executing m\n\u201cJMP\u201d instruc tions and one \u201cJGT\u201d instruction that results in a jump,\nwher e each causes a pipeline \ufb02ush. However, even  though the CPI of\na single-cycle  processor is always 1, a single-cycle data path requir es\na much longer clock perio d than an equivalent pipeline data path, as\nwas discussed in Chap. 6 .\nIn Eq. (8.4), the CPI is a lower-bound  (the lowest value). If CPI is\n1.0 for a program, the corresponding pipeline chart will have no\nbubbles, indicating 100% e\ufb03ciency . The CPI limit of 1.2, which is\ngreater than 1.0, indicate s the e\ufb03ciency of the pipeline is less than\n100% and, at best, it takes, on average, the duration of 1.2 clock\ncycles to execute each instruction. A CPI value  can be used to\nestimate the execution time of n instru ctions, as given in Eq. (8.5),\nwher e \u03b2 is the period of the clock signal in seconds.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1048, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "64121040-8c89-4803-90f1-acd379fcc38f": {"__data__": {"id_": "64121040-8c89-4803-90f1-acd379fcc38f", "embedding": null, "metadata": {"page_label": "541", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ddece4a9-0bf7-4695-ae96-f420ac79d310", "node_type": "4", "metadata": {"page_label": "541", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "16914edd496b9706a1bc6be958433ac887e8b05eafea3b6bb79416f60994388a", "class_name": "RelatedNodeInfo"}}, "text": "Achieving CPI = 1.0 is a di\ufb03cult task due to presence of data-\ndependency r elationships among the instructions, branch instructions\nin the program, and latency to access instructions or data from a\ncache or memory . However, while a forewar ning unit can resolve\nsome data dependencie s among instructions, there are other\ntechniques to impr ove CPI that will be discussed later .\n8.3.4 RISC-ISA Processor\nFigure 8.17 illustrates a block diagram of a \ufb01ve-stage RISC-IS A\ninstruction pipeline. The DM (as data cache) is now placed in its own\nseparate stage. This is similar to the \ufb01ve-stage data path used in an\ninitial MIPS processor . The execute stage is now responsible for all\nthe arithmetic operations and memory address calculations, but not\nfor accessing data from cache that is perfor med in the DM stage. An\narithmetic result is now passed unchanged from the DM to the write-\nback stage. The \ufb01ve-stage data path is more suitable for a RISC-IS A\nbecause data items must \ufb01rst be loaded into registers befor e they\ncan be used by an arithmetic instruction in the execute stage.\nHowever, all the arithmet ic direct (D) and indexed (X) instructions in\nthe example Acc-IS A must now be converted into register -register\narithmetic instructions. The data path has the advantage of\nsimplif ying the comple xity of each stage and achieving a more\nunifor m propagation delays among the \ufb01ve stages.\nFIGURE 8.17  A \ufb01ve-stage RISC-IS A pipelined data path.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1453, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a1352bdc-784b-436d-a41c-38577d4ac776": {"__data__": {"id_": "a1352bdc-784b-436d-a41c-38577d4ac776", "embedding": null, "metadata": {"page_label": "542", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "320a33ac-d9e3-4da1-a7a2-8249cb518f58", "node_type": "4", "metadata": {"page_label": "542", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5976d04abda00f4708a0d9091bf962df46780d87153966e9607321cc83c2dbd2", "class_name": "RelatedNodeInfo"}}, "text": "Program Example\nExample 8.10 presents a RISC-IS A assembly program corresponding\nto the high-level language program code in Example 8.1. In the\nprogram, it is assumed that register R0 is always 0, and registers R1\nthrough R4 are general-purpose registers. However, no code\noptimizations ar e perfor med.\nExample 8.10.  A RISC-I SA assem bly program for the example program in Example 8.1; no\ncompiler optimization is perfor med.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 428, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "53ad5dd7-f435-4607-8d03-bc3069d9554a": {"__data__": {"id_": "53ad5dd7-f435-4607-8d03-bc3069d9554a", "embedding": null, "metadata": {"page_label": "543", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b33a3dc7-3f20-4d4e-8352-12f945155105", "node_type": "4", "metadata": {"page_label": "543", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "db98cf9e66f4180d033320ae482ea6a657b3e18881306fd8695637c91e86d6fa", "class_name": "RelatedNodeInfo"}}, "text": "Compiler Optimization\nBecause the DM cache resides in a separate stage, the RISC-IS A data\npath must implement a forwar ding unit as well as a hazar d unit. This\nis because the \u201cLD R3, R1, (array)\u201d and \u201cADD R4, R2, R3\u201d instructions\nare data dependent, and therefore there is a one-cycle delay for the\nnew content of R3, read from DM, to be forwar ded to the execute\nstage, as illustrated in Fig. 8.18 . At the time when instruc tion \u201cLD R3,\nR1, (array)\u201d is in the execute stage, instruction \u201cADD R4, R2, R3\u201d is in\nthe decode stage. When the \u201cLD\u201d instruction moves to the DM stage,\nthe hazard unit must prevent the \u201cADD\u201d instruction from moving to\nthe execute stage by inserting a bubble (an implicit NOP instruction),\nas shown in the \ufb01gur e.\nFIGURE 8.18  Illustrating RISC data dependency between an LD and\nADD instruction.\nHowever, it is occasional ly possible for the compiler to optimize\nprograms and eliminate bubbles due to memory load instructions,\nsuch as the one shown in Fig. 8.18 . In this case, the compile r may be\nable to rearrange and delay the execution of some or all instructions\nthat depend on LD instructions. Example 8.11 presents an optimized\ncode wher e instruction \u201cADD R1, R1, 1\u201d is moved between\ninstructions \u201cLD R3, R1, (array)\u201d and \u201cADD R4, R2, R3\u201d in Example\n8.10; thus, the execution of instruction \u201cADD R4, R2, R3\u201d is delayed\nby one cycle, eliminating one bubble.\nExample 8.11.  Program in Exam ple 8.10 optimized by compiler to delay the execution of\ninstruction \u201c ADD R4, R2, R3\u201d by one clock cycle:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1531, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f2ab7693-ead7-4e4f-8999-4ba212554a01": {"__data__": {"id_": "f2ab7693-ead7-4e4f-8999-4ba212554a01", "embedding": null, "metadata": {"page_label": "544", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e488a99a-0ce9-4ed5-aac2-2705841e6c86", "node_type": "4", "metadata": {"page_label": "544", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4294eb691fcf436fd1919009e2de28e194d22ac1331643f0b82e9737c7da14d9", "class_name": "RelatedNodeInfo"}}, "text": "The compiler optimization must be done with care so that the\nprogram is not modi\ufb01ed incor rectly. The program may generate\ninvalid outpu ts, or may even fail to execute due to an out-of-bounds\ndata access. For instance, in Example 8.10, moving  both the \u201cLD R2,\n(sum)\u201d and \u201cLD R3, R1, (array)\u201d instructions to befor e the \u201cJGT\u201d\ninstruction would not be a correct compiler optimization step in order\nto eliminate the one-cycle delay r equir ed to e xecute the \u201c ADD R4, R2,\nR3\u201d instruction. The reason for this is that after the last iteration, the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 547, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0fec8412-8e4d-4a8c-bb63-c5c9a166c74f": {"__data__": {"id_": "0fec8412-8e4d-4a8c-bb63-c5c9a166c74f", "embedding": null, "metadata": {"page_label": "545", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8b74abb4-f08b-45f7-8337-08ec26f954c3", "node_type": "4", "metadata": {"page_label": "545", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d990e4801e470e2a76f7cbd27a5d05ae7f187859a1471082e63bab71c05ca4c2", "class_name": "RelatedNodeInfo"}}, "text": "\u201cLD R3, R1, (array)\u201d instruction, if placed befor e the \u201cJGT,\u201d will try to\naccess array[8] , which refers to an element outside the array\nboundary . The array in Example 8.1 has eight elements array[0]  to\narray[7] .\nPerformance Analysis\nThe RSIC data path in Fig. 8.17 contains \ufb01ve pipeline stages versus\nfour in its equivalent pipelined Acc-IS A data path shown in Fig. 8.10.\nThe execute stage in the Acc-IS A data path, which contains the data\ncache and thus has the longest propagation delay, is divided into two\nstages (execute and DM) in the RISC data path, each with a smaller\npropagation delay . This reduction in the propaga tion delay of the\nlongest stage enables RISC processors to use a faster clock, thus\nincreasing the pr ocessor thr oughput.\nIn addition, as illustrate d by Example 8.11, with the compiler\noptimization, it is of ten possible to further impr ove a RISC\u2019s CPI for an\narbitrary program by overlapping a one-cycle delay cache access\nwith the execution of another instruction (i.e., \u201cADD R1, R1, 1\u201d).\nInstructions \u201cADD R1, R1, 1\u201d and \u201cLD R3, R1, (array)\u201d are data\nindependent, and thus moving the \u201cADD R1, R1, 1\u201d instruction from\nwher e it was in Examp le 8.10 to befor e the \u201cADD R4, R2, R3\u201d\ninstruction in Example 8.11 does not alter the correctness of the\noriginal program\u2014only the order in which the instructions execute\nchanges. \u201cADD R1, R1, 1\u201d is executed earlier, and the execution of\n\u201cADD R4, R2, R3\u201d is delayed by one cycle to allow  time for the \u201cLD\nR3, R1, (array)\u201d instruc tion to load data from DM. The newly\naccessed data is then forwar ded to the execute stage, wher e \u201cADD\nR4, R2, R3\u201d is e xecuted ne xt.\nAs will be discussed in Chap. 10, if the target data is not in DM (a\ncache), it must be copied from a lower -level cache or the main\nmemory requiring multiple CPU clock cycles. However, in the\nfollowing section, we will further discuss multithr eading to improve\nthe e\ufb03ciency of a pipeline when data is not in cache.\n\u00a0\n8.4 Advanced Processor Architectures", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2003, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b6591875-e708-486e-8816-df5f8940fec6": {"__data__": {"id_": "b6591875-e708-486e-8816-df5f8940fec6", "embedding": null, "metadata": {"page_label": "546", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "97988f04-df17-4b95-9e25-857aa86ce61c", "node_type": "4", "metadata": {"page_label": "546", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "474679ee77d2959710c7ce3eec9ada7af0a527b417f07dea56cde70ed68a1497", "class_name": "RelatedNodeInfo"}}, "text": "While the RISC pipeline improves instruction throughput, additional\nperfor mance increases would come from reducing the pipeline clock\nperiod. One way to do this is to physically divide the data path of one\nor more pipeline stages  into smaller sub-data paths, creating a\ndeeper pipeline , one with many stages. Because each of the\nsmaller stages will have a shorter propagation delay, a deep pipeline\nwould operate with a faster clock, thus increasing instruction\nthroughput.\nIf the data path of a pipeline stage is physically undividable (e.g.,\ncontains a memory), the stage is modi\ufb01ed to include two or more\ncopies of the undividable  hardwar e. All the copies would operate in\nparallel but overlap, creating parallelism within the stage called\nsuperpipelining . While the propagation delay of a superpipeline d\nstage remains about the same as that of the original stage, the\nstage, now with duplicate  copies, is able to gene rate outputs more\nfrequently . However, deep pipelining (including superpipelining)\nincreases power consumption.\nWhile deep pipelining improves instruction throughput, program\n\ufb02ow contr ol (i.e., conditio nal and unconditional) instructions reduce\npipeline e\ufb03ciency, increasing CPI and thus reducing throughput.\nModer n processors also implement branch prediction  mechanisms\nto minimize pipeline \ufb02ush and ther efore incr ease e\ufb03ciency .\nIn addition, modern processors increase the instruction throughput\nby using instruction level parallelism (ILP). The processor, in this\ncase, is often referred to as superscalar  because each stage\ncontains additional resour ces and is able to execute multiple\nindependent instructions in parallel. For a single program, the\ne\ufb03ciency of an ILP pipeline, even with perfect branch prediction, is\ntypically less than 100%. That is, a pipeline that implements k-\ninstruction ILP would sometimes execute one, two, etc. up to k\ninstructions due to data-dependency relationships among\ninstructions, and sometimes would execute no instructions at all due\nto time lost for accessin g data from caches or the main memory .\nTherefore, some or all of the data path resour ces will remain idle for\none or more clock cycles, unless the pipeline is equipped to execute\nmultiple programs (threads) simultaneously . In this case, the pipeline\nis said to implement multithr eading .\nIn the following sections,  we will further explor e deep pipelining,\nbranch prediction, statically and dynamically scheduled ILP, and\nmultithr eading.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2484, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6d10261c-a581-441f-a135-9d03b4c6c9f8": {"__data__": {"id_": "6d10261c-a581-441f-a135-9d03b4c6c9f8", "embedding": null, "metadata": {"page_label": "547", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1315fe7d-28da-4bea-832f-ab262e1459a1", "node_type": "4", "metadata": {"page_label": "547", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5346987f17030ccdb29e1af4b71df405e941254b85e9bfd0e12536f9a17eb323", "class_name": "RelatedNodeInfo"}}, "text": "8.4.1 Deep Pipelining\nFigure 8.19(a) displays an original four-stage pipeline wher e stage 3\nhas the longest propagation delay, indicated by 2\u0394 + \u0394clocking , wher e\n\u0394clocking  = \u03c4st + \u03c4cq + \u03c4cs; the \u03c4st, \u03c4cq, and \u03c4cs stand for setup time,\nclock-to -q time, and clock skew, respectively . In Fig. 8.19(b), the\nhardwar e of stage 3 (e.g., a multilevel MUX, CLA adder,\ncombinational divider, etc.) is shown divided into two smaller\nmodules, each with a smaller pr opagation delay .\nFIGURE 8.19  Deeper pipeline design: ( a) original four -stage pipeline\nwith dividable stage 3; ( b) original pipeline converted into \ufb01ve\nstages, r educing the clock period.\nFor example, for simplicity, consider stage 3 to include one 2-level\n4-to-1 MUX, designed using three 2-to-1 MUXs (Chap. 3). The 4-to-1\ncan be divided into two parts and organized to operate as two\nseparate stages. The propagation delay of each of the two stages will\nbe approxima tely one-hal f the propagation delay of the original stage\n3 in Fig. 8.19(a). The new pipeline will have \ufb01ve stages and will\noperate with a shorter clock period \n  The only extra\nhardwar e used in this case is one mor e pipeline r egister .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1174, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e622b7a3-bfea-4147-8e2a-5cce5fbdd2c2": {"__data__": {"id_": "e622b7a3-bfea-4147-8e2a-5cce5fbdd2c2", "embedding": null, "metadata": {"page_label": "548", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "705816f0-fcd6-4b23-b2b5-b29e3eee70ab", "node_type": "4", "metadata": {"page_label": "548", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "33f8bb9d391a2538bf0ad2c074b3302194646c4772824b13d9360d3759bd2790", "class_name": "RelatedNodeInfo"}}, "text": "On the other hand, Fig. 8.20(a) illustrates a four-stage pipeline\nwher e the data path of stage 3 cannot be divided into smaller stages.\nFor example, suppose stage 3 in the \ufb01gure is a DM stage. In this\ncase, the memory can be organized to operate as a two-way low-\norder (\ufb01ne) interleaving (Chap. 7) that keeps the content of even\nmemory addresses in one memory module and that of odd addresses\nin another module. As long as consecutive memory accesses are\nfrom alternating even and odd addresses, the operations of the two\ninterleaved memory accesses can be overlapped, creating\nsuperpipelining. This is illustrated with two modules in Fig. 8.20 (b). In\ngeneral, any pipeline stage can be superpipelined.\nFIGURE 8.20  Superpipelining design: ( a) original four -stage pipeline\nwith undividable stage 3; ( b) superpipeline or ganization of stage 3.\nTable 8.5 illustrates a superpipelining chart using the data path\nshown in Fig. 8.20 (b). The two identical undiv idable modules in stage\n3 are labeled M3a and M3b. Using a clock cycle with period \u03c4 = \u0394 +\n\u0394clocking , at time 3\u03c4, instruction I1 enters stage 3 and is executed", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1123, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "10de2dea-d32b-4d70-b1b0-b0a534c26248": {"__data__": {"id_": "10de2dea-d32b-4d70-b1b0-b0a534c26248", "embedding": null, "metadata": {"page_label": "549", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76c30e17-ae9c-4b60-9567-c1825ec9db78", "node_type": "4", "metadata": {"page_label": "549", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2a1cb3be34f43d3445bdfdafd33a397b04a97e990fe7cd67e496bd595aed586f", "class_name": "RelatedNodeInfo"}}, "text": "using M3a, which will take two clock cycles, or about 2\u03c4, to complete.\nNote \u0394 also includes the delay of the MUX.\nTABLE  8.5 Illustrating Superpipelining of Stage 3 in Fig. 8.20 (b) with Two Identical Modules\nLabeled M3a and M3b\nBecause the pipeline contr oller takes turns and uses M3a and M3b\nalternately, one clock cycle later and at time 4\u03c4 when I2 enters stage\n3, the pipeline contr oller selects M3b, which also takes 2\u03c4 to\ncomplete. Therefore, one result is available from stage 3 every clock\ncycle even though M3a and M3b each requir es two clock cycles to\ngenerate a r esult.\nAt time 5\u03c4, the output from M3a is fed to stage 4, allowing I1 to\ncontinue execution. At time 6\u03c4 (the next cycle), the output of M3b is\nfed to stage 4, allowing I2 to continue execution. This enables the\npipeline to e xecute one instruction per \u03c4, as illustrated in the table.\nDeep pipelin ing enables the use of a faster clock to improve\nperfor mance. In Fig. 8.19(a), the original clock perio d \u03c4old = 2\u0394 +\n\u0394clocking  is reduced to \u03c4new = \u0394 + \u0394clocking  in Fig. 8.19(b),\napproximately doubling the clock frequency . In Fig. 8.20(b), the\noriginal clock period, 2\u0394 + \u0394clocking  in Fig. 8.20(a), is also e\ufb00ectively\nreduced appr oximately to \u0394 = \u0394clocking .\nA deep  pipel ining (includ ing superpipelining), however, increases\nthe number of bubbles each time the pipeline restarts. In Fig. 8.20 (b),\none more bubble is introduced at time 4\u03c4 due to super pipelining as if\nthe pipeline has \ufb01ve stages instead of four stages in the original", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1520, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e304d41f-84d3-4479-a81e-b5e76b3fcfba": {"__data__": {"id_": "e304d41f-84d3-4479-a81e-b5e76b3fcfba", "embedding": null, "metadata": {"page_label": "550", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "82edef89-8d0a-4563-896f-4d6c4bb990d2", "node_type": "4", "metadata": {"page_label": "550", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4b3409c524d25e73778b7ad95f8df35cc7fcb7f1c4159c2955f5189f92b93bdb", "class_name": "RelatedNodeInfo"}}, "text": "pipeline in Fig. 8.20(a). As a deep instruction pipeline increases\nconcur rency by operating on many more instruct ions at the same\ntime, there are certain limitations, as follows, on how deep an\ninstruction pipeline should be:\n\u2022 Deep pipelining (including superpipelining) not only incr eases\nthe amount of har dwar e, but also incr eases clock fr equency .\nWhen the amount of har dwar e and/or clock fr equency of a\npipeline incr ease, so will the amount of power consumption\n(Chap. 6 ). Ther efore, ther e is a limit for how deep a pipeline can\nbe.\n\u2022 Deep pipelining (including superpipelining) beyond a certain\nlimit can also be counterpr oductive as it e xecutes jump/branch\ninstructions. Any change in pr ogram \ufb02ow would cause a pipeline\n\ufb02ush, which would, in this case, intr oduce mor e pipeline bubbles\nand ther efore reduce pipeline e\ufb03ciency and its perfor mance.\n8.4.2 Branch Prediction\nBranch pr ediction means deter mining the dir ection of pr ogram \ufb02ow in\nadvance of executing a conditional or unconditional instruction. The\ntarget jump/ branch address is deter mined early in the pipeline so\nthat the fetch stage can start fetching instructions starting at a\ntarget address, thus minimizing the number of pipeline bubbles if\nthere is a change in pr ogram \ufb02ow .\n[Note that for simplicity, a jump and a branch instruction is treated\nthe same here. However, in general, they are implemented\ndi\ufb00er ently. A branch address is typically computed as a short\ndistance (a displacement) from the current content of the PP,\nwher eas a jump address is deter mined as an absolute address (not\nrelative to PP). In general, a branch instruction is used when a jump\ndistance is short\u2014for example, in the implementat ion of a for-loop\u2014\nand a jump instruction is used for a long jump \u2014for example, a\nsubroutine call. In the following sections, the terms \u201cjump\u201d and\n\u201cbranch\u201d are used interchangeably, both causing a change in\nprogram \ufb02ow .]\nWhen the current instruction is a jump (e.g., \u201cJGT\u201d or \u201cJMP\u201d), the\nearliest time that the direction of program \ufb02ow can change in Fig.\n8.11 or in Fig. 8.17 is when the instruction is in the write-back stage.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2142, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b3c4aa5c-0c85-4664-963c-120ce7fa4529": {"__data__": {"id_": "b3c4aa5c-0c85-4664-963c-120ce7fa4529", "embedding": null, "metadata": {"page_label": "551", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bb1a5010-11a0-4661-bc33-678098c178a6", "node_type": "4", "metadata": {"page_label": "551", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "969a77c607dfb9d740f0503d055d787fa9efa56e34554281c5b7eaa1e43b7c9b", "class_name": "RelatedNodeInfo"}}, "text": "For example,  in the Acc-IS A data path, when the \u201cJMP\u201d instruction is\nin the execute stage (e.g., clock cycle 15 in Fig. 8.15), on the next\nclock cycle, as \u201cJMP\u201d moves to the write-back stage, the content of\nPP also changes to the target address L1, causing the fetch stage to\nfetch the \u201cCMP 7\u201d instruction. Branching \ufb02ushes the pipeline,\ndiscar ding all the instructions that were partially executed\n(processed), and the program execution continues from the branch\naddress. However, with additional har dwar e, branch dir ections can be\npredicted to r educe pipeline bubbles and impr ove e\ufb03ciency .\nStatic Branch Prediction\nStatic or default branch  prediction can be used by itself or in\nconjunction with dynamic branch prediction. Consider a branch\ninstruction, such as \u201cJGT L2\u201d in Example 8.11, wher e L2 > PP is a\nforward branching  address. In this case, using \u201cNot Taken\u201d as the\ndefault branc h decision for this instruction would be correct as long\nas the for-loop is executing. The processor will mispr edict the branch\ndirection only once when the for -loop e xits.\nLikewise, when the conditional instruction causes backward\nbranching , for example, during the execution of a \u201cdo-while\u201d  wher e\nthe condition statement is at the bottom of the loop, using \u201cTaken\u201d as\nthe default branch decisio n in this case would also be correct as long\nas do-while is executing.  The processor will mispr edict the branch\ndirection again only once when do -while e xits.\nTypically, the rules of static predictions are taken into account\nduring program compilation for optimal execution. For example, the\ncondition \u201ci < 8\u201d in Exam ple 8.1 would be compiled to \u201cCMP 7\u201d and\n\u201cBGT L2\u201d as they were listed in Examples 8.2 and 8.11. Likewise, the\ncondition is compiled to similar instructions in Example 8.3 (Pentium\nprocessor) and in Example 8.4 (Spar c processor).\nThe earliest time that static branch prediction can be perfor med is\nwhen a branch instructio n is in the decode stage and its op-code is\nknown. However, this will result in a one-cycle delay necessary to\nperfor m static branch prediction. For example, if the pipeline\nimplements only the static branch prediction described above (i.e.,\nno dynamic branch predictor), the one-cycle delay may be\noverlapped with the execution of another instruction selected by the\ncompiler .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2329, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cb7ce942-d179-4734-bc3a-ca5c8340beaf": {"__data__": {"id_": "cb7ce942-d179-4734-bc3a-ca5c8340beaf", "embedding": null, "metadata": {"page_label": "552", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3e12be2f-9b8c-46d2-a033-33452c432501", "node_type": "4", "metadata": {"page_label": "552", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f859d852520a7c954ddcdef07d65969b8c66d5c63abfc745e734c9574a304783", "class_name": "RelatedNodeInfo"}}, "text": "Consider the unconditional jump instructions \u201cJMP L1\u201d in Example\n8.11. It is possible to utilize this one-cycle delay by yet another\ncompiler optimization step, as illustrated in Example 8.12. In order to\nutilize the one-cycle delay and execute a useful instruction during\nthat clock cycle, the comp iler can move an instruction from the body\nof the for-loop (e.g., \u201cST (i), R1\u201d) to after the \u201cJMP L1\u201d instruction. The\npipeline, however, must be modi\ufb01ed to always execute the\ninstruction that follows an unconditional jump/branch instruction.\nExample 8.12.  A RISC-I SA assembly program for Example 8.1 optimized for static branch\nprediction for the \u201cJMP\u201d instruction. Instruction \u201cST (i), R0, R1\u201d in Example 8.11 is moved to\nafter the \u201cJMP L1\u201d instruction in order to eliminate the one-cycle delay that would be\nnecessary to statically pr edict the branch dir ection for the \u201c JMP L1\u201d instruction.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 898, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ce7edab5-04d9-4518-9e73-9f5e1838ff62": {"__data__": {"id_": "ce7edab5-04d9-4518-9e73-9f5e1838ff62", "embedding": null, "metadata": {"page_label": "553", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dc9c0258-3bad-4846-bbf1-a50297705b5e", "node_type": "4", "metadata": {"page_label": "553", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4ae6cbdfae20681b81f68ead24e55076350ff92fc9ee8e06b0542cae87288da6", "class_name": "RelatedNodeInfo"}}, "text": "In those cases wher e the compiler is unable to move an instruction\nto after an unconditional jump/branch instruction, a no-op (NOP)\ninstruction must be inserted, as was illustrated in the unoptimized\nExample 8.4 AltraSpar c II program. Note that the Sparc program also\nincludes a NOP instruction  after the conditional instruction \u201cgt.\u201d This\nis because the Sparc processor also executes the instruction that\nfollows a conditional branch instruction and therefore provides\ncompilers the option to further optimize the code when possible.\nDynamic Branch Prediction\nIt is simple to predict a branch decision as \u201cTaken\u201d for an\nunconditional jump/bran ch (e.g., \u201cJMP\u201d) instru ction when the\ninstruction always branches and changes program \ufb02ow. On the other\nhand, the prediction of \u201cTaken\u201d or \u201cNot Taken\u201d for a conditional\nbranch instruction (e.g., \u201cJGT\u201d) is data depende nt, and it can be\nharder to always predict it correctly, especially when the conditional\nbranch instruction contr ols an \u201cif-else\u201d statement within a loop. That\nis, depending on the state, true or false, the \u201cif\u201d condition evaluates,\neither the \u201cthen \u201d or the \u201celse\u201d section of the code will execute. The\nstatic branch predictor described earlier works well with backwar d\nbranching used in the execution of \u201cfor-loop\u201d and \u201cdo-while\u201d\nstatements. However, good forwar d branch prediction is also\nnecessary to impr ove pipeline e\ufb03ciency .\nModer n processors typically implement dynamic branch prediction\nmechanisms that collect and use branch history data for each\nconditional/unconditional branch instruction that executes. Initially,\nwhen the execution of a program starts and there is no branch\nhistory data,  the rules of static branch prediction  may be used the\n\ufb01rst time that a conditional/unconditional branch instruction\nexecutes. For best perfor mance, the branch history data and\nprediction logic ar e kept in the fetch stage.\nBefor e we discuss dynam ic branch prediction techn iques, Table 8.6\nillustrates the execution of two iterations of the \u201cfor-loop\u201d in Example\n8.11. However, the following assumption is made:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2093, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f334e8b-4d41-4fc4-9da4-87cf84620924": {"__data__": {"id_": "3f334e8b-4d41-4fc4-9da4-87cf84620924", "embedding": null, "metadata": {"page_label": "554", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "885419e6-71b8-4db3-8eff-cf9ff319d571", "node_type": "4", "metadata": {"page_label": "554", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9622eb6828b3dda4f1d1746025597d7cd1f96cad6e99088bac7f0541d2a1f8d3", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "faf74b75-a920-416b-b6ba-76c9e6869f49": {"__data__": {"id_": "faf74b75-a920-416b-b6ba-76c9e6869f49", "embedding": null, "metadata": {"page_label": "555", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76b785d8-9237-4b49-84b8-a424901da45c", "node_type": "4", "metadata": {"page_label": "555", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "dfcce5d136dc540326bb797a2b7dfa119455843b894bf1031a7e069fddfaba7f", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  8.6 Program Ex ecution for T wo Iterations Using a RISC P ipeline\nThe RISC pipeline in Fig. 8.17 implements both static and dynamic\nbranch prediction logic. The static branch predictor discussed earlier\nis implement ed in the decode stage, and a \u201cperfect\u201d dynamic branch\npredictor is implemented in the fetch stage. Note that in this case,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 346, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5fb882ba-6dc1-4993-92c8-1d7da5a4426a": {"__data__": {"id_": "5fb882ba-6dc1-4993-92c8-1d7da5a4426a", "embedding": null, "metadata": {"page_label": "556", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "26427d66-bb77-49a5-a0fb-0e7562f29675", "node_type": "4", "metadata": {"page_label": "556", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2944ccfe445506d9521e2a62779230ee81c999d97a184b523d73fc9b19e10538", "class_name": "RelatedNodeInfo"}}, "text": "there is no need for the compiler to optimize the code to utilize the\none-cycle delay r equir ed to complete a static branch pr ediction.\nFor the conditional jump instruction \u201cJGT L2\u201d at clock cycle 6, the\nstatic predict ion decision is \u201cNot Taken\u201d (no jump) , and the program\nexecution continuous with the next sequential instruction \u201cLD R2,\n(sum)\u201d. When the execution of \u201cJGT L2\u201d instruction completes at\nclock cycle 9, the dynamic predictor is also updated with the branch\ndecision \u201cNot Taken.\u201d For the unconditional jump instruction \u201cJMP L1\u201d\nat clock cycle 13, the static prediction decision is \u201cTaken\u201d (jump), and\nthe execution  starts at the jump address L1 with the instruction \u201cLD\nR1, (i)\u201d result ing in one pipeline bubble at cycle 14. At clock cycle 16,\nwhen instruc tion \u201cJMP L1\u201d retires, the dynamic  predictor is also\nupdated with the branch decision \u201cTaken.\u201d For the \u201cJMP L1\u201d\ninstruction at cycle 23, the dynamic branch predictor predicts\n\u201cTaken\u201d and the program execution continues with instruction \u201cLD\nR1, (i)\u201d with no additional pipeline bubbles at cycle 24.\nThe program  executes without additional branch-r elated stalls until\nafter the last iteration, when the execution of the \u201cJGT L2\u201d instruction\nfor the last time results in a mispr ediction at cycle 29. The jump\ncauses a pipeline \ufb02ush, introducing three pipeline bubbles. The\nprogram execution contin ues with the \u201cIx\u201d instruction after the for-\nloop.\nFigure 8.21 illustrates a \ufb01nite state diagram (FSD) for\nimplementing a 1-bit dynamic branch predictor . As illustrated in Table\n8.6, when the \u201cJGT L2\u201d instruction executes for the \ufb01rst time, the\nstatic branch  predictor in the decode stage would correctly predict\n\u201cNot T aken\u201d because L2 > PP indicates a forwar d branch addr ess. The\n\u201cNot T aken\u201d decision at clock cycle 8 will be used to initialize the 1-bit\npredictor to the \u201cPredict Not Taken\u201d state during cycle 9. For the rest\nof the iterations, the \u201cNot Taken\u201d would be predicted correctly by the\n1-bit predictor . After the last iteration, the execution of \u201cJGT L2\u201d\ninstruction for the last time (e.g., at cycle 29 for two iterations of the\nfor-loop) will result in a mispr ediction and the state of the 1-bit\npredictor will change to \u201c Predict T aken.\u201d", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2238, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66ae7106-7aa4-4730-b9b4-222f555849db": {"__data__": {"id_": "66ae7106-7aa4-4730-b9b4-222f555849db", "embedding": null, "metadata": {"page_label": "557", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d5849112-bb6a-4bf1-9f92-33f624f2fda0", "node_type": "4", "metadata": {"page_label": "557", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "92ceacfa20b55b92b50895e9c5f944c7f7f20430d3a83098bde711c2989a1aa8", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 8.21  FSD for a 1-bit dynamic pr edictor .\nIf the for-loop executes only once, the 1-bit dynamic predictor\nwould predict correctly as expected, illustrated in Table 8.6 . However,\nsuppose the for-loop in Example 8.11 executes as an inner loop and\ntherefore would execute multiple times. The second time that the for-\nloop executes, the 1-bit predictor, which is now in the \u201cPredict Taken\u201d\nstate, will cause a mispr ediction when instruction \u201cJGT L2\u201d executes\nat the start of the for-loop, and the state of the predictor will change\nto \u201cPredict Not Taken.\u201d The 1-bit predictor will cause another\nmispr ediction at the end of the for-loop, resulting in two\nmispr edictions for each time that the for-loop executes. Therefore,\nthe 1-bit pr edictor will perfor m worse than the static pr edictor alone.\n2-Bit Dynamic Predictor\nFigure 8.22  illustrates the FSD used for a 2-bit dynamic predictor [7].\nAgain, consid er the for-loop in Example 8.11 executing as an inner\nloop. During the \ufb01rst time that the for-loop executes, the state of the\n2-bit predictor FSD for the \u201cJGT L2\u201d instruction would be initialized to\n\u201cPredict Not Taken.\u201d The predictor will remain in this state until after\nthe last iteration when the for-loop exits, and the 2-bit predictor will\nmispr edict, causing the state of the predictor to change to \u201cPredict\nLikely Not T aken.\u201d", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1351, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0d4e2453-cf83-4d6a-88c8-d4d315c2bcb1": {"__data__": {"id_": "0d4e2453-cf83-4d6a-88c8-d4d315c2bcb1", "embedding": null, "metadata": {"page_label": "558", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "70e058ad-160b-4b1c-844a-91825cfee09b", "node_type": "4", "metadata": {"page_label": "558", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b3ec090499d5985d98f77766c8802b9c35e0ed79985fdca2c8d8855fee1cd92e", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 8.22  Illustrating two 2-bit dynamic branch pr ediction\nalgorithms [ 7].\nThe next time that the for-loop executes, the dynamic predictor,\nbeing in the \u201cPredict Likely Not Taken\u201d state, will correctly predict\n\u201cNot Taken\u201d for the \u201cJGT L2\u201d instruction in the \ufb01rst iteration. When\n\u201cJGT L2\u201d in the \ufb01rst iteration completes execution and it is\ndeter mined that the \u201cNot Taken\u201d prediction was correct, the state of\nthe 2-bit FSD correctly changes to the \u201cNot Taken\u201d state, with no\nmispr ediction, as if the for-loop was executing for the \ufb01rst time. The\n2-bit predictor will cause one mispr ediction at the end of the for-loop,\nresulting, as expected, in only one mispr ediction each time the \u201cfor-\nloop\u201d e xecutes.\nFigure 8.23 illustrates the data path of a 2-bit dynamic branch\npredictor implemented in the fetch stage. It includes a branch\nhistory table  (BHT) that for each branch instruction it holds a\nbranch instruction address  (BIA), a branch target address\n(BTA), and a 2-bit current state  (CS) of a 2-bit dynamic predictor .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1035, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fc8c2022-741a-4542-9447-1fc152e581ae": {"__data__": {"id_": "fc8c2022-741a-4542-9447-1fc152e581ae", "embedding": null, "metadata": {"page_label": "559", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3bb9769c-a324-4150-b291-328b0f3e25d0", "node_type": "4", "metadata": {"page_label": "559", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "690a5c95c162e29b5044831d5a7a0e6d0cebf6bfbd4dc1ed0f93643a7dfceb2f", "class_name": "RelatedNodeInfo"}}, "text": "The 2-bit storage space used for each CS in the table represents the\ntwo \ufb02ip-\ufb02ops that would be requir ed otherwise to implement a \ufb01nite\nstate machine (FSM). The table holds the history for the branch\ninstructions that are executed recently depending on the size of the\ntable. During  the execution of a program, the lower bits of PP are\nused to access the table. For example, with 10-bits, the table can\nhold 1K entries; however, not all entries will be branch instructions.\nFIGURE 8.23  Partial illustration of 2-bit dynamic branch pr ediction\nlogic placed in the fetch stage.\nEach time that the conte nt of the PP matches with a BIA in the\nBHT, it identi\ufb01es a jump/branch instruction. The 2-bit CS read from\nthe table is used to predict the direction of the branch. If, for\nexample, the CS indicates \u201cPredict Taken\u201d or \u201cPredict Likely Taken,\u201d", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 845, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6febec43-c48e-421d-960f-4e3c6a991303": {"__data__": {"id_": "6febec43-c48e-421d-960f-4e3c6a991303", "embedding": null, "metadata": {"page_label": "560", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7a129958-1750-40f8-be0b-7b4be9c8ddbb", "node_type": "4", "metadata": {"page_label": "560", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "dd44361ee5a97287663c575ba98e2f4bcf9d9c6a0c51697f4e2d9171f5da577a", "class_name": "RelatedNodeInfo"}}, "text": "then \u201cTaken\u201d is predicted and the content of the PP is replaced with\nthe BTA saved in the table. The next instruction that is fetched is the\none at address BTA stored in PP. On the other hand, if the CS\nindicates \u201cPredict Not Taken\u201d or \u201cPredict Likely Not Taken,\u201d then \u201cNot\nTaken\u201d is predicted and the program execution continues from the\nnext instruction.\nIf the content of PP does not match a BIA stored in the table, it\nindicates that there is no history for the current branch instruction in\nthe table. In this case, on the next clock cycle, the static prediction is\napplied. Once the branch instruction executes and the decision\n\u201cTaken\u201d or \u201cNot Taken\u201d is deter mined as the initial value of the 2-bit\nCS, the BIA, BTA, and CS for the instruction are enter ed at an index\ndeter mined from the BIA in the table as the instruction retires. The\nCS \ufb01eld in the table entry is then updated each time the branch\ninstruction e xecutes and r etires.\nIt has been shown that using a 2-bit predictor (a four-state FSD) is\nas good as, or even better, than using a predictor  with more states\n[8]. Because a 2-bit branch predictor works independent of\npreviously executed branch instructions, it is called a local\npredictor .\nIt has also been shown that, for some programs, branch decisions\nare not always independent, and in some cases, there are\ncorrelations between the decisions made by recently executed\nbranch instructions and the decision that will be made when a\ncurrent branch instruction e xecutes.\nBranch Correlation-Based Prediction\nFor \u201cif-else\u201d statements that execute repeatedly (e.g., within a loop),\nit has been shown that a branch prediction algorithm works better\nwhen one uses a separate  2-bit predictor for each possible execution\npath [8, 9]. For instance, consider the following for-loop with three if-\nelse statements. Also, assume the compiler translates the conditional\nstatement of each \u201cif-else\u201d statement into a conditional branch\ninstruction that the branc h decision \u201cNot Taken\u201d refers to the \u201cthen \u201d\npart of the \u201cif -else\u201d code.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2052, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f60830c3-0efb-4e61-bb5b-e803f3456dcd": {"__data__": {"id_": "f60830c3-0efb-4e61-bb5b-e803f3456dcd", "embedding": null, "metadata": {"page_label": "561", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3d097433-2c84-4dd2-a5a5-07fc1fab02e3", "node_type": "4", "metadata": {"page_label": "561", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1d01cbd406c0175603edbd10f396a8471a522baa76e900578ecd627aaef0af5c", "class_name": "RelatedNodeInfo"}}, "text": "There are four possible  execution paths to reach the branch\ninstruction \u201cBEQ,\u201d as shown in Fig. 8.24. Note that for the \u201cBEQ\u201d\ninstruction, the branch decision depends on an execution path. If x\nand y are both 2, then for sure the condition \u201cx ! = y\u201d is false.\nTherefore, in some programs, there are often strong correlations\namong the branch decisions of r ecently e xecuted branch instructions.\nThis information can be used to implement a better dynamic\npredictor .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 467, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "59060058-95fa-4551-ab10-ce930f71d2f8": {"__data__": {"id_": "59060058-95fa-4551-ab10-ce930f71d2f8", "embedding": null, "metadata": {"page_label": "562", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "99e8ac6a-77fd-4bfd-9d60-696fc4026ffc", "node_type": "4", "metadata": {"page_label": "562", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e35016382fbe32a97a9864cd58a0d6e177f3da6131816bede90be57f81a884db", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 8.24  All possible e xecution paths to r each instruction \u201c BEQ\u201d\nwithin the for -loop noted earlier .\nIn order to identif y an execution path, a branch prediction register\n(BPR) is used to encode the recently executed branch decisions. For\nthe previous for-loop, a 2-bit BPR register can encode the four\nexecution paths in Fig. 8.24 as (11)2, (10)2, (01)2, and (00)2, wher e 1\nimplies yes (Y) and 0 no (N). If the branch decisions for the two\ninstructions \u201cBNE\u201d and \u201cBNE\u201d were \u201cNot Taken\u201d (i.e., x = 2) and\n\u201cTaken\u201d (y \u2260 2), r espectively, then content of BPR becomes (01)2.\nFigure 8.25 illustrates the data path of a 2-bit correlation branch\npredictor . In the \ufb01gure, the lower bits of PP and the 2-bit BPR are\nconcatenated to create an index to the BHT. The index selects a\ndi\ufb00er ent 2-bit predictor for the \u201cBEQ\u201d instruction, depending on\nwhich execution path the program took in Fig. 8.24. Refer to the\nExercises section for e xamples.\nFIGURE 8.25  A cor relation pr edictor using a global view of the branch\ndecisions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1029, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "876eb332-7c61-4844-9d3c-ca94bcb7c660": {"__data__": {"id_": "876eb332-7c61-4844-9d3c-ca94bcb7c660", "embedding": null, "metadata": {"page_label": "563", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2d0b6c89-6b4d-4096-81fd-96e03686d751", "node_type": "4", "metadata": {"page_label": "563", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "ed100d62917336da161110cd92e6e802154cbca4d4f590d2903203620eaf0f06", "class_name": "RelatedNodeInfo"}}, "text": "Because a BPR identi\ufb01es  an execution path in the program, it is\nsaid to provide a global view of program execution . For this reason, a\ncorrelation-based predictor is often called a global predictor . Still\nother predictors use a combination of both local and global branch\nhistory data [ 9].\nStudies of SPEC89 benchmark programs have shown that the\nfrequency of mispr ediction\u2014for example, for a \u201cgcc\u201d compiler\u2014was\n12% when a local predictor (e.g., Fig. 8.23) with a 4096-entry BHT\nwas used versus 11% when a 2-bit global predictor (e.g., Fig. 8.25)\nwith a 1024-entry but the same size (1024 * 4 = 4096) BHT was\nused. With the Spice circuit simulation program, the mispr ediction\nrates were 9% for local and 5% for global, and with Espresso logic\nminimization software it was 5% for local and 4% for global [10]. This\nshows that using multipl e predictors often works better than using\nonly one as discussed ne xt.\nTournament Predictor\nModer n processors often implement multiple predictors and\ndynamically select the best among them for each branch instruction.\nFor example, consider implementing a local predictor and a global\npredictor and then using a 2-bit predictor (Fig. 8.22) to choose the\nbest predictor . The mechanism is called a tournament predictor\nbecause for each branch instruction, the winner predictor (local or\nglobal) is the one that is selected mor e often.\nFor example, using a tournament predictor, 40% of the time the\npredictor selected a global predictor for the SPEC Integer benchmark\nprograms versus only 15% for the SPEC \ufb02oating-point (FP)\nbenchmark programs [10]. Tournamen t predictors have been used in\nthe AMD Opter on and Phenom pr ocessors.\n8.4.3 Instruction-Level Parallelism\nIn order to execute two or more instructions in parallel on a\nsuperscalar processor, all those instructions must be data\nindependent. With ILP, there are three possible dependencies, as\nde\ufb01ned with examples in Table 8.7. Data dependency exists among\nsome instruc tions in all programs, no matter if ILP is used or not. An\nantidependency  and/or output dependency , on the other hand,\nmay exist between two instructions if the instru ctions execute in", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2163, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a02d4209-cfc4-4f5b-9c58-b6708889ebee": {"__data__": {"id_": "a02d4209-cfc4-4f5b-9c58-b6708889ebee", "embedding": null, "metadata": {"page_label": "564", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f08dce25-ba5c-4739-b9be-e88e1553ec83", "node_type": "4", "metadata": {"page_label": "564", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "042566510f340d7702d3d518d1f44959ad007f10458e9b3c7136acdf14578586", "class_name": "RelatedNodeInfo"}}, "text": "parallel (during the same pipeline cycle). An instruction pair with one\nor mor e of these dependencies, if e xecuted in parallel, would r esult in\nhazar ds know n as read after write  (RAW), write after read  (WAR),\nor write after write  (WAW) hazar ds. Further more, these hazar ds\ncannot be r esolved during e xecution.\nTABLE  8.7 Types of Dependencies in ILP\nFor example,  consider the execution of the program code given in\nExample 8.13 on a superscalar processor . There are data-\ndependency, antidependency, and output-dependency relationships\namong these  instructions  that, if executed in parallel, would cause\nRAW, W AR, or W AW hazar ds, as illustrated using a graph in Fig. 8.26 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 692, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7bd98a1a-362e-49de-9dac-160fdb34c567": {"__data__": {"id_": "7bd98a1a-362e-49de-9dac-160fdb34c567", "embedding": null, "metadata": {"page_label": "565", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7b3d4ba-c1be-4781-a5f3-ae4707ad8773", "node_type": "4", "metadata": {"page_label": "565", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a772025f63748fdc63e21756aba8d09741ff08cf316c00c421b569e4b8801719", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 8.26  Using a graph to illustrate R AW, W AR, and W AW hazar ds\namong the instructions in Example 8.13.\nExample 8.13.  A program code example assuming that registers R1 and R2 are already\ninitialized with values loaded fr om memory :\nThere are \ufb01ve RAW, two WAW, and one WAR potential hazar ds in\nthe example  program. Any pair of instructions that are shown\nconnected by a solid arrow (\u2192) in the graph are data dependent and\ncannot be executed in parallel. The instructions \u201cADD R3, R1, R2\u201d\nand \u201cSUB R3, R2, R1\u201d have an output-dependence relationship\nbecause they both upda te register R3. Their execution in parallel\nwould cause a WAW hazar d. Likewise, instructions \u201cMUL R4, R3, R3\u201d\nand \u201cADD R4, R3, R5\u201d that both write to register R4 would cause a\nWAW hazar d if they are executed in parallel. Instructions \u201cSUB R3,\nR2, R1\u201d and \u201cMUL R4, R3, R3\u201d have an antidependence relationship.\nThere will be a WAR hazar d if \u201cSUB \u201d executes befor e \u201cMUL \u201d that", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 958, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "287fd056-d2ac-49f6-bbef-7b5a8c4ce18d": {"__data__": {"id_": "287fd056-d2ac-49f6-bbef-7b5a8c4ce18d", "embedding": null, "metadata": {"page_label": "566", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "68848041-6200-4312-a6c5-25420beb7e87", "node_type": "4", "metadata": {"page_label": "566", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d6805b478e267879e754905ac01a5b2a88355237dfa9629c27792de92c0bedea", "class_name": "RelatedNodeInfo"}}, "text": "operates on the result produced by the \u201cADD R3, R1, R2\u201d instruction\nand not on the r esult pr oduced by the \u201cSUB \u201d instruction.\nThe requirement for ILP is that data-dependence, antidependence,\nor output-dependence relationships cannot exist among those\ninstructions that are scheduled to execute during the same pipeline\ncycle. The instructions that can be executed in parallel are selected\neither statically by the compiler (i.e., a software solution) or\ndynamically by hardwar e during execution. Both the software and\nhardwar e solutions have advantages and disadvantages that will be\ndiscussed ne xt.\nStatically Scheduled ILP\nFor statically scheduled ILP, the compiler and not hardwar e decides\nwhich set of instructions should be issued for parallel execution\nduring each pipeline cycle . The compiler for a superscalar processor\nmust examine a group of instructions and divide them into sets. The\ninstructions in each set must not have any dependency relationship\namong them  that can cause a RAW, WAR, or WAW hazar d. Consider\nthe program code in Example 8.13. Suppose the processor is a two-\nissue superscalar\u2014can issue maximum two instru ctions every clock\ncycle\u2014with the following speci\ufb01cations:\n\u2022 The compiler must or ganize the instructions into maximum\ntwo-issue ILP .\n\u2022 The instruction pipeline contains enough r esour ces\n(adder/subtractor, multiplier, and divider) to e xecute any two\narithmetic instructions in parallel, if needed. F or simplicity, it is\nalso assumed that each arithmetic computation tak es one clock\ncycle.\n\u2022 \u201cLD\u201d instructions ar e scheduled as soon as possible to hide\nthe single-cycle delay r equir ed to load data fr om cache (DM).\nExample 8.14 lists the compiler generated two-issue organization\nof the instructions in Example 8.13. Table 8.8  illustrates the e xecution\nof the program code, with the assumption that both variables a and b\nare already loaded into cache. During each pipeline cycle, two\ninstructions ar e fetched and e xecuted in parallel.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1994, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "522dc3b3-2c48-40cd-b166-636fcba7aeba": {"__data__": {"id_": "522dc3b3-2c48-40cd-b166-636fcba7aeba", "embedding": null, "metadata": {"page_label": "567", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6e955d32-9807-41ca-aa3e-d44c101c8bf3", "node_type": "4", "metadata": {"page_label": "567", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2363f70f82731a06a6111d66d2e519b6e26c28359fbcfb4feb289658430bac76", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  8.8 Executio n Two-Issue Statically Scheduled Program Code Using a Five-Stage\nSuperscalar P ipeline\nExample 8.14.  The instructions in Example 8.13 are organized for a statically scheduled\ntwo-issue ILP execution. The pipeline is capable of executing two arithmetic instructions in\nparallel.\nBecause a superscalar processor typically executes multiple\ninstructions during each clock cycle, a program\u2019s CPI is generally less\nthan 1. For this reason, the preferred perfor mance parameter is", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 495, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e8eed04-2f47-4ed5-9140-56b7a2c619f1": {"__data__": {"id_": "8e8eed04-2f47-4ed5-9140-56b7a2c619f1", "embedding": null, "metadata": {"page_label": "568", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "84304a1c-86a2-4927-8e05-3a8e5b843418", "node_type": "4", "metadata": {"page_label": "568", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7b64f0cbf9faf85b7af7c2557a46f505c0cedf3effded76d281659226bc436c8", "class_name": "RelatedNodeInfo"}}, "text": "called instructions per cycle  (IPC) and is calculated as the inverse\nof CPI, as de\ufb01ned by Eq. (8.6) .\nNot counting the clock cycles requir ed to \ufb01ll the pipeline, the IPC\nfor Example 8.14, as illustrated in Table 8.8 , is deter mined as follows:\nAn additional technique to further improve IPC is called compiler -\nbased speculative execution . In this case, instructions\nindependent of branch directions are selected for parallel execution.\nOne compile r-assisted speculative execution method that is used\nwith Intel Itanium ar chitectur e is to convert instructions of an \u201cif -else\u201d\nstatement to conditional instructions called predicated\ninstructions . For example, consider the following simple \u201cif-else\u201d\nstatement:\nThe compiler would translate the if-else statement to the following\nassembly code by attaching the condition \u201ca > 0\u201d to all instructions\n(one in this case) in the \u201cthen \u201d code section and the condition \u201c! (a >\n0)\u201d to all the instructions (again, one in this case) in the \u201celse\u201d code\nsection as shown next. This would also eliminate the branch\ninstruction that would otherwise be needed to execute the\ninstructions associated either with the \u201cthen \u201d or the \u201celse\u201d code\nsection.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1196, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cea71525-f98a-4a61-84ab-e2340b44257b": {"__data__": {"id_": "cea71525-f98a-4a61-84ab-e2340b44257b", "embedding": null, "metadata": {"page_label": "569", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "75a0c649-f76a-46e8-82bb-8958c234cdb0", "node_type": "4", "metadata": {"page_label": "569", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "bfa36f07d59c41dbc85113ba850ee1fd12aea0a5dbabf167b7ab5367e2da277b", "class_name": "RelatedNodeInfo"}}, "text": "Both the \u201cSUB \u201d and \u201cADD\u201d instructions can now be scheduled to\nexecute in parallel. The processor would compute both a \u2212 1 and a +\n1. However, only one of these results would be committed (written)\nto register R1, depending on the value of the greater than \ufb02ag (GTF).\nIf \u201ca > 0,\u201d then R1 takes the result of a \u2212 1; otherwise, R1 takes the\nresult of a + 1. One of the computations (a \u2212 1 or a + 1) is called\nspeculative because its computed r esult may not be used.\nAn advantage of staticall y scheduled ILP is that the processor is\nmore power e\ufb03cient in that it doesn\u2019t use hardwar e to decide which\nset of instructions should  execute in parallel during each pipeline\ncycle. For this reason, processors (e.g., ARM Corte x-A8) that\nimplement statically schedule ILP are typically used in handheld\ndevices such as smart phones. Another advantage of these\nprocessors as compar ed to those that implem ent dynamically\nscheduled ILP (discussed next) is that compiler can potentially\nexamine a longer list of instructions for ILP than the list of\ninstructions that must be dynamically and quickly examined during\neach pipeline cycle.\nDynamically Scheduled ILP\nThe pipeline of a superscalar processor that implements dynamically\nscheduled ILP is more comple x and consumes more power . The fetch\nstage contains a queue of instructions that are not yet scheduled for\nexecution. Dedicated hardwar e dynamically examines several\ninstructions in the queue  and decides which set of instructions to\nissue for parallel executi on. When compar ed to a pipeline that is\ndesigned for statically scheduled ILP, the pipeline for a dynamically\nscheduled ILP pr ovides certain advantages, such as\n\u2022 The e xact pr ogram \ufb02ow is only known at run time. Ther efore,\nthere are mor e opportunities for the pr ocessor to select and issue\nmore instructions for parallel e xecution.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1854, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7f84ae3d-673c-492a-8906-00919c09c13a": {"__data__": {"id_": "7f84ae3d-673c-492a-8906-00919c09c13a", "embedding": null, "metadata": {"page_label": "570", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9613b036-2564-4969-89fc-ac5ad9ed1553", "node_type": "4", "metadata": {"page_label": "570", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b1e243a3e82013efe9139d47b82bd9c514c29450d75f3ab34d6ff3f10fc2a2ff", "class_name": "RelatedNodeInfo"}}, "text": "\u2022 The pr ocessor could also implement a register renaming\nmechanism wher e antidependence and output-dependence\nrelationships can be r emoved dynamically by changing r egister\nnames in some instructions with temporary r egisters that ar e not\nvisible to pr ogrammers. This enables the pr ocessor to schedule\ninstructions out of order  and achieve higher ILP .\n\u2022 Programs ar e not r equir ed to be r ecompiled to tak e\nadvantage of a ne xt generation of the pr ocessor that implements\ndynamically scheduled ILP or when the dynamic scheduling in the\nnext generation is implemented di\ufb00er ently.\nThe pipeline of the Intel Core i7, for example, implements\ndynamically scheduled ILP. Its high-instruction throughput makes it\nsuitable for high-end desktop or server computers.\nDynamic instruction scheduling requir es that the pipeline\nimplement certain techniques, known as score boarding  or a more\nadvanced version called Tomasulo\u2019s algorithm  that also supports\nspeculative execution. The pipeline can dynamicall y rename registers\nto avoid WAR and WAW hazards and allow out-of-order execution. For\nexample, consider the program code in Example 8.13 that was\ndiscussed earlier with \ufb01ve RAW, two WAW, and one WAR potential\nhazar ds (Fig. 8.26 ).\nFigure 8.27 illustrates the removal of two antidependence and one\noutput-dependence relatio nships using register renaming. The output\ndependence between instructions \u201c ADD R3, R1, R2\u201d and \u201cSUB R3, R1,\nR1\u201d is resolved by changing the destination register R3 with\ntemporary register T1 in the \u201cADD\u201d instruction. This is because in\nprogram order, \u201cMUL R4, R3, R3\u201d that uses the result computed by\nthe \u201cADD\u201d instruction comes befor e the \u201cADD R4, R3, R5\u201d that uses\nthe output computed by the \u201cSUB \u201d instruction. R3 is also renamed to\nT1 in the \u201cMUL \u201d instruction. This removes the antidependence\nrelationship that e xists between the \u201cMUL \u201d and the SUB \u201d instructions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1907, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2534734-09fe-4fe1-9f30-3cc26dc15652": {"__data__": {"id_": "e2534734-09fe-4fe1-9f30-3cc26dc15652", "embedding": null, "metadata": {"page_label": "571", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b535e2f-4352-4ace-bdca-abfec18b9d72", "node_type": "4", "metadata": {"page_label": "571", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "11d0bd49cbb9ec558e42b45d0b7fb466ac9f2e7e98ee9e0f0bacb147bd467a3b", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 8.27  Illustrating r egister r enaming to r emove W AR and W AW\ndependencies in Fig. 8.26 .\nLikewise, the output-depe ndence relationship between the \u201cMUL \u201d\nand the \u201cSUB \u201d instructions is removed by renaming R4 in the \u201cMUL \u201d\ninstruction with another temporary register T2. R4 is also renamed\nT2 in the \u201cST (a), R4\u201d instruction. This leaves R4 in \u201cADD R4, R3, R5\u201d\nunchanged, as it should, since this instruction computes the last\nvalue stored in register  R4 as if the program is executed one\ninstruction at a time.\nTable 8.9 illustrates the execution of the program code in Example\n8.13 on a two-issue dynamically scheduled superscalar processor\nusing the modi\ufb01ed instructions shown in Fig. 8.27. Again, the\nfollowing list of requir ements is assumed; they are the same as those\nwe used with the two-issue statically scheduled superscalar\nprocessor .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 857, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "786be4ca-4d53-4f57-8350-0f9f1c292de7": {"__data__": {"id_": "786be4ca-4d53-4f57-8350-0f9f1c292de7", "embedding": null, "metadata": {"page_label": "572", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "33766326-d603-4172-9216-185e1a3af1a3", "node_type": "4", "metadata": {"page_label": "572", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9e550ab3a719d2b9e0f93aa6d25c467e924dfba527406aa6b71a333781b0a326", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  8.9 Dynamically Scheduled T wo-Issue Ex ecution of P rogram Code\n\u2022 The instruction pipeline contains enough r esour ces\n(adder/subtractor, multiplier, and divider) to e xecute any two\narithmetic instructions in parallel, if needed. F or simplicity, it is\nalso assumed that each arithmetic computation tak es one clock\ncycle.\n\u2022 \u201cLD\u201d instructions ar e scheduled as soon as possible to hide\nthe single-cycle delay r equir ed to load data fr om cache.\nDuring the \ufb01rst pipeline cycle, from the three independent\ninstructions \u201cADD T1, R1, R2,\u201d \u201cSUB R3, R2, R1,\u201d and \u201cLD R5, (b)\u201d as\nshown in Fig. 8.27, two must be issued. \u201cADD\u201d is selected because it\ncomes befor e \u201cSUB \u201d in program order. \u201cLD\u201d is selected so data can\nbe loaded early to hide the one-cycle cache latency requir ed befor e\nthe \u201cADD R4, R3, R5\u201d instruction can e xecute.\nDuring cycles 2 and 3, the scheduler issues the two independent\ninstructions \u201cMUL T2, T1, T1\u201d and \u201cSUB R3, R2, R1\u201d followed by the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 967, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "677bd193-9f7f-4bf8-ab65-e650c4fabc73": {"__data__": {"id_": "677bd193-9f7f-4bf8-ab65-e650c4fabc73", "embedding": null, "metadata": {"page_label": "573", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c370eb14-5abf-4fc0-a567-6425e95f02a1", "node_type": "4", "metadata": {"page_label": "573", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9b9d87a497a3cbbff1fbc5b74e29f2e2a9b24665c5d108c05908c08297019644", "class_name": "RelatedNodeInfo"}}, "text": "two indepen dent instructions \u201cST (a), T2\u201d and \u201cADD R4, R3, R5.\u201d\nFinally, during cycle 4, \u201cDIV R6, R4, R1\u201d is issued. Normally, as\ninstructions ar e scheduled, new instructions ar e fetched and stor ed in\nthe instructio n queue. However, in order to keep the illustrations\nsimple, such steps ar e ignor ed her e.\nAssuming that the initial cycles to \ufb01ll the pipeline are ignor ed, the\nIPC for the program code, as deter mined by Eq. (8.8), is 1.75. This\nmakes the dynamically scheduled two-issue superscalar processor\n25% (1.75/1.4 = 1.25) faster than its equivalent statically scheduled\nsuperscalar pr ocessor for the pr ogram e xample.\nHowever, because a typical RISC processor has many (e.g., 32)\nregisters and compilers do avoid reusing recently used registers,\ncompilers can assign di\ufb00er ent registers to instructions to reduce\nsome of the antidependency and output dependency among\ninstructions to achieve better statically scheduled ILP .\nSpeculative execution is also possible with dynamic scheduling. In\nthis case, the processo r executes instructions as soon as their\noperands are available, independent of branch directions. Some\nspeculatively computed results may be discar ded if there is a change\nin program \ufb02ow, and the results that must be committed to registers\nand/or memory must be done in program order as if instructions\nwere executed one at a time.\n8.4.4 Multithreading\nAs was said earlier in this chapter and in Chap. 1, there is a limit to\nILP. For a given program, there are only a few independent\ninstructions, even with register naming, that can be executed at the\nsame time during each pipeline cycle. Studies of some benchmark\nprograms have shown that about 30% of the time three instructions\nand about 2% of the time six or more instructions can be executed in\nparallel, with the average being about 2.5 instructions [11]. Even", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1856, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ba475a9-0dd7-45d3-b11c-50bbd10e2d9f": {"__data__": {"id_": "7ba475a9-0dd7-45d3-b11c-50bbd10e2d9f", "embedding": null, "metadata": {"page_label": "574", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4405f22e-4cf9-4990-bf49-716687071719", "node_type": "4", "metadata": {"page_label": "574", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a7c9d216824b46c58815737e28763d1a8b25b9ad95a9e7f9d35a0ae2348262d0", "class_name": "RelatedNodeInfo"}}, "text": "with the availability of more transistors and allowable maximum\npower consu mption, there is a limit on how quickly a single program\ncan be executed. Therefore, the only way to perfo rm a task faster is\nto divide the work into subtasks that can be perfor med concur rently.\nProgram Example\nConsider the C program given next that has a for-loop with 100\nmillion iterat ions. For simplicity, the array elements are initialized to\n1.0.\nOne way to reduce the total time requir ed to compute the sum of\nthe array elements is to divide the array into two halves and\ncompute the sum of each  half using a di\ufb00er ent thread of code. For\nexample, the following two-threaded program in C can be used to\nsum the array elements. The \u201cmain \u201d program \ufb01rst creates a thread\n(Thread 0) to sum the \ufb01rst half of array elements, and then itself, as\nThread 1, sums the second half of array elements. Once, the \u201cmain \u201d\n(now Thread 1) is done with its half of the array, it must check to\nmake sure Thread 0 is also done with its half of the array. The \u201cmain \u201d\nthen comput es and prints the grand total sum. Note that both\nthreads can access globally declar ed \u201car ray\u201d and \u201csum.\u201d", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1156, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d828e48c-8a00-4f77-9945-af3902fb84f7": {"__data__": {"id_": "d828e48c-8a00-4f77-9945-af3902fb84f7", "embedding": null, "metadata": {"page_label": "575", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a3f8d2ca-b3eb-4dc4-811c-8f2b693827ce", "node_type": "4", "metadata": {"page_label": "575", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3d04f381c89fcffed8a164aab97f6a6ceb2c3e354bd0dddc614ae12ae5d090bd", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a9818429-45ca-4873-81aa-015f974842ec": {"__data__": {"id_": "a9818429-45ca-4873-81aa-015f974842ec", "embedding": null, "metadata": {"page_label": "576", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bd6bef1a-f34b-4232-87b3-3bb9dc2cab93", "node_type": "4", "metadata": {"page_label": "576", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f18bba0d1c3daececeb15d801e9ea60e8e12fa948637aa16ad8a6d081187e271", "class_name": "RelatedNodeInfo"}}, "text": "The executio n of the two-threaded C program will cause two sets\nof code, as follows, to execute concur rently if the CPU implements\nmultithr eading:\nThe instruction pipeline must contain two copies of all the\nregisters, including PP. The following sections describe three k-issue\nmultithr eading pipeline or ganizations.\nCoarse-Grained", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 336, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fe71d3ab-d181-4514-96ca-e0c450bb7946": {"__data__": {"id_": "fe71d3ab-d181-4514-96ca-e0c450bb7946", "embedding": null, "metadata": {"page_label": "577", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f20b4cf3-a044-470d-8164-430f1ee28996", "node_type": "4", "metadata": {"page_label": "577", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "70cf03dcef5d4d2f30245a6596193427b992732e04b472fab4a0ba915c9378c0", "class_name": "RelatedNodeInfo"}}, "text": "Each time the execution of an \u201cLD\u201d or \u201cST\u201d instruc tion causes a long\nwait\u2014for example, when main memory access is requir ed\u2014the\npipeline switches and resumes execution of a second thread. For\nexample, when executing Thread 0 and Thread 1 discussed above\nthe pipeline continues and issues up to k instructions from Thread 0\nuntil it deter mines that an array element is not in cache and it must\nbe accessed from main memory, which has a long latency . At that\ntime, while the data is being accessed from memory, the pipeline\nswitches and continues issuing up to k instructions from Thread 1\nuntil it encou nters a long delay; the pipeline then switches back and\nissues k instructions fr om Thr ead 0.\nIt is called a coarse-grain ed multithr eading architectur e because\nthe pipeline executes one thread at a time until it encounters a long\ndelay . Because each thread uses its own private set of registers, the\nstate of the switched thread is automatically saved. While this\nmethod is good when the delays are long, it is not e\ufb03cient when\ndelays are short\u2014for example, when the access is from a lower -level\ncache with shorter latency . This is because each time that a switch to\na di\ufb00erent thread takes place, the pipeline must be \ufb02ushed, wasting\npipeline cycle s. Further more, in some applications, thread switching\nmay happen less frequently than necessary . For example, some real-\ntime applications may r equir e faster thr ead e xecution.\nThe pipeline organization, however, has the advantage of requiring\nthe least amount of hardwar e as compar ed to other multithr eading\narchitectur es discussed next because the pipeline resour ces at any\ntime are used for executing only one thread. Another advantage of\nthis architec ture is that it can be implemented as a statically or\ndynamically scheduled ILP multithr eading processor . Note that, in\ngeneral, the threads may or may not belong to the same program.\nThreads fr om two di\ufb00er ent pr ograms may be e xecuted concur rently.\nFine-Grained\nIn this case, thread switching happens every clock cycle. For\nexample, when executing the above Thread 0 and Thread 1 the\npipeline issues up to k instructions from Thread 0 during the \ufb01rst\npipeline cycle, then switches and issues up to k instructions from\nThread 1 during the second pipeline cycle, and then it repeats. Again,\nin general, the thr eads may or may not belong to the same pr ogram.\nIt is called a \ufb01ne-grained multithr eading architectur e because the\npipeline switches threads every cycle. This pipeline organization is", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2532, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9dd81cc2-0402-4392-9e9d-f9f67e1926f1": {"__data__": {"id_": "9dd81cc2-0402-4392-9e9d-f9f67e1926f1", "embedding": null, "metadata": {"page_label": "578", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4f59675b-ba35-459a-a913-4af8efb4bfd5", "node_type": "4", "metadata": {"page_label": "578", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "49fa381ae6c0cb51e696d65f84a1a03d492eb0ab466e115d940cf99f89907803", "class_name": "RelatedNodeInfo"}}, "text": "more e\ufb03cient as compar ed to a coarse-grained multithr eading\npipeline, but the execution of each thread is still slow. As the pipeline\nexecutes instructions from only one thread during each cycle, other\nthreads must wait their turn. The pipelines in the Sun Niagara\nprocessor and Nvidia GPUs, for example, implement this type of\nmultithr eading.\nBecause threads are switched every clock cycle, the architectur e\nprovides a higher thread-level concur rency as compar ed to the\ncoarse-grained architect ure. Likewise, the architectur e can be\nimplemented as a statically or dynamically scheduled ILP\nmultithr eading pr ocessor .\nSimultaneous\nIn this case, the pipeline issues up to k instructions selected from all\nrunning threads during each clock cycle. For example, when\nexecuting the above Thread 0 and Thread 1, the pipeline issues k0 (0\n\u2264 k0 \u2264 k) instructions from Thread 0 and k1 (0 \u2264 k1 \u2264 k) instructions\nfrom Thread 1 during each cycle, wher e 0 \u2264 k0 + k1 \u2264 k. Because\nthe pipeline selects independent instructions from several (e.g., two)\nthreads and executes them simultaneously, this architectur e is called\nsimultaneous multithr eading. The pipeline must implement\ndynamically scheduled ILP and, therefore, its implementation\nrequir es the most amount of hardwar e. Thread-level parallelism\n(TLP), wher e instructions from multiple threads execute at the same\ntime, is the advantage of this ar chitectur e as compar ed to the others.\nExample 8.15.  Consider the execution of the following two program codes, labeled Thread\nA and Thread B, on a simultaneous multithr eading four-issue superscalar processor with\ndynamically scheduled ILP. Thread A is the program code given in Example 8.13 with data-\ndependence, antidependence, and output-dependence relationships among some of the\ninstructions. Thread B, for simplicity, contains only data-dependence relationships among its\ninstructions.\nThe following is also assumed:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1932, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92897c38-0b87-466b-a41b-d4e7c1721fa1": {"__data__": {"id_": "92897c38-0b87-466b-a41b-d4e7c1721fa1", "embedding": null, "metadata": {"page_label": "579", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aee005ce-55ac-4a26-95d6-396f8d14c49d", "node_type": "4", "metadata": {"page_label": "579", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7745ac6b06803244eb9716eca7383955745cef48f9c48496ab8a463f873f4a38", "class_name": "RelatedNodeInfo"}}, "text": "\u2022 The e xecute stage has enough r esour ces (e.g.,\nadder/subtractor, multiplier, and divider) to e xecute any four\narithmetic instructions in parallel, if needed. F or simplicity, it is\nalso assumed that each arithmetic operation tak es one clock\ncycle.\n\u2022 The or ganization of DM (cache) is two -way \ufb01ne interleaved\n(Chap. 7 ), and the pipeline is designed to e xecute one \u201c LD\u201d\ninstruction (if any) and one \u201cST \u201d instruction (if any)\nsimultaneously, if needed. It is assumed that ther e is less chance\nfor a con\ufb02ict in a \ufb01ne interleaved memory when e xecuting a load\nwith a stor e at the same time than when e xecuting two load or\ntwo stor e instructions at the same time.\n\u2022 The pipeline will issue \u201c LD\u201d instructions as soon as possible to\nhide the single-cycle delay r equir ed to load data fr om cache.\n\u2022 Variables a, b, and x to z reside in cache without con\ufb02icts.\nTable 8.10 illustrates the execution  of Thread A and Thread B in\nExample 8.15. During pipeline cycle 1, the pipeline issues two\npossible instructions, \u201cADD T1, R1, R2\u201d and \u201cLD R5, (b)\u201d from Thread\nA, and two instructions, \u201cST (x), R3\u201d and \u201cADD R4, R1, R2\u201d from\nThread B. During cycle 2, the pipeline again issues two instructions\nfrom Thread A and two instructions from Thread B. During cycle 3,\nthe pipeline issues two instructions from Thread A and one\ninstruction from Thread B. Finally, during cycle 4, the pipeline issues\ntwo \ufb01nal instructions, one from each thread. The instructions issued\nduring each cycle are data independent and can execute in parallel.\nBecause the pipeline can only issue one \u201cLD\u201d and one \u201cST\u201d (if any)\nduring a cycle, the instruction \u201cLD R8, (y)\u201d cannot be issued earlier\nand during cycle 1. Therefore, the execution of the \u201cSUB R9, R6, R8\u201d\ninstruction is delayed until cycle 6.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1778, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "21f3961d-0dd1-41be-a2ee-1edb5b1f00b3": {"__data__": {"id_": "21f3961d-0dd1-41be-a2ee-1edb5b1f00b3", "embedding": null, "metadata": {"page_label": "580", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "659a3f80-45e8-4de6-be6c-c5775355c661", "node_type": "4", "metadata": {"page_label": "580", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "11547db45a6628162d6d6d4bc878dc0c4d850bc08a488d374b6791dfb0a8a6f6", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  8.10  Dynami cally Scheduled Two-Thread Simultaneous Multithr eading of Program\nCodes on F our-Issue Superscalar P rocessor", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 130, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "75c47b52-58b5-44f8-a6c7-150d6efa5b74": {"__data__": {"id_": "75c47b52-58b5-44f8-a6c7-150d6efa5b74", "embedding": null, "metadata": {"page_label": "581", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0bcaf8a-712e-49d9-99e1-05d0f2f77725", "node_type": "4", "metadata": {"page_label": "581", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1b6b357d697cbc1d936bbf9663f499f98af1eeb4144f5e5974f906ce1403a461", "class_name": "RelatedNodeInfo"}}, "text": "Based on the four-issue ILP shown in Table 8.10 , the IPC for Thread\nA or Thread B executed separately is 1.75 (7/4), wher e the number of\nclock cycles requir ed to \ufb01ll the pipeline is ignor ed. However, the IPC\nof simultaneous multithr eading of Threads A and B\u2014again with\nignoring the cycles requir ed to \ufb01ll the pipeline\u2014is 3.5, as deter mined\nby Eq. (8.9) .\nMultithr eading, especially a simultaneous multithr eading\narchitectur e, increases pipeline e\ufb03ciency . In addition, a simultaneous\nmultithr eading pipeline implements small-scaled TLP. Higher levels of\nTLP requir e a multicor e processor or multipr ocessor system, which\nwe will discuss in Chap. 10.\n\u00a0\nReferences\n1. IEEE standar d for micr oprocessor assembly language (IEEE Std.\n694-1985), IEEE, 1985.\n2. MASM, http://www .masm32.com/ .\n3. cygW in (GNU + Cygnus + W indows), http://www .cygwin.com/ .\n4. Intel Ar chitectur e Optimization Manual, 1997, www.intel.com .\n5. Intel 64 and IA -32 Ar chitectur es Optimization R eference Manual,\n2014.\n6. Simics (system level instruction set simulator),\nhttp://www .virtutech.com/\n7. J. E. Smith, A study of branch pr ediction strategies, Proceedings\nof the 8th Annual Inter national Symposium on Computer\nArchitectur e, June 1981, pp. 135\u2212147.\n8. Shien- Tai Pan, Kimr ning So, Joseph T . Rahmeh, Impr oving the\naccuracy of dynamic branch pr ediction. Proceedings of the F ifth\nInternational Confer ence on Ar chitectural Support for", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1440, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "061d17d6-f278-4634-84e8-61789dc1aecd": {"__data__": {"id_": "061d17d6-f278-4634-84e8-61789dc1aecd", "embedding": null, "metadata": {"page_label": "582", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "23cd8a10-87fc-489d-ac8c-5768cbd0740b", "node_type": "4", "metadata": {"page_label": "582", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4321534f178218f56f18ae2ff9f82640d8b669cb0dc77880f0fa6b551bb6fa05", "class_name": "RelatedNodeInfo"}}, "text": "Programming Languages and Operating Systems  (ASPL OS V),\nSept 1992, pp. 76\u221284.\n9. M.-C. Chang and Y .-W. Chou, Branch pr ediction using both global\nand local branch history infor mation, IEE P roc-Comput Digit T ech,\nVol. 149, No . 2, 2002, 33\u221238.\n10. J. Hennessy and D. P atterson, Computer Ar chitectur e: A\nQuantitative Appr oach , 5th ed. Mor gan K aufmann, W altham,\n2012.\n11. David Culler, Jaswinder P al Singh, and Anoop Gupta, Parallel\nComputer Ar chitectur e: Har dwar e/Sof tware Appr oach , Mor gan\nKaufmann, San F rancisco, 1999.\n\u00a0\nExercises\n8.1 Consider an A cc-IS A CPU that e xecutes the pseudo -code\nshown. Do the following:\na. Create a set of 8-bit A cc-IS A instructions with 3-bit op-codes\nand 5-bit operands. Any of the variables A through C may be a\nnegative 2\u2019s complement number .\nb. Write an assembly pr ogram using your instruction set. Also\nassume that the code starts fr om memory addr ess 0 and\nincreases by 1, and data starts fr om memory addr ess 0x1F\nand decr eases by 1.\nc. Manually assemble your assembly pr ogram and write\ninstructions in binary and in he x. Assign op-codes to the\ninstructions in the or der they wer e used in the assembly\nprogram, starting fr om addr ess 0.\nd. Draw the CPU data path with only the data paths necessary .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1274, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8517f765-5cf8-4292-b78e-d455fed6b3bf": {"__data__": {"id_": "8517f765-5cf8-4292-b78e-d455fed6b3bf", "embedding": null, "metadata": {"page_label": "583", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "98b61723-8bb4-4570-93b8-8341d438cdcb", "node_type": "4", "metadata": {"page_label": "583", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3aadd60e976a7f292f0fce9cfe9525554c550437257d84e4f167731faf127ebf", "class_name": "RelatedNodeInfo"}}, "text": "8.2 Consider the A cc-IS A assembly instructions \u201c LD data\u201d (A CC\n\u2190 data), \u201c LD (adrs)\u201d (A CC \u2190 Memory[adrs]), \u201cST (adrs)\u201d\n(Memory[adrs] \u2190 A CC), \u201c ADD (adrs)\u201d (A CC \u2190 A CC +\nMemory[adrs]), \u201c XOR (adrs)\u201d (A CC \u2190 A CC \n M[adrs]). Do the\nfollowing:\na. Write an assembly pr ogram for the following pr ogram:\nb. For the assembly instructions, draw a single-cycle instruction\ndata path.\n8.3 An A cc-IS A CPU e xecutes the following instructions using\n3-bit op-codes and 5-bit addr ess or 2\u2019s complement data. Do the\nfollowing:\na. Draw a data path for the CPU, assuming the DM has separate\ninput and output buses, as in the data path shown in Fig. 8.7 .\nDo not include data paths not used by the instructions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 703, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6775a72f-4cc8-41f7-bad7-364768ad9d02": {"__data__": {"id_": "6775a72f-4cc8-41f7-bad7-364768ad9d02", "embedding": null, "metadata": {"page_label": "584", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "91ea60f6-26f9-4363-9bdb-c955e293854d", "node_type": "4", "metadata": {"page_label": "584", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c12486bc58c202a6645e6da4facdd8ba182cb8952b515dad4bf871cee432ad99", "class_name": "RelatedNodeInfo"}}, "text": "b. Draw a data path for the CPU, assuming the DM has a\nbidirectional data bus. Do not include data paths not used by\nthe instructions.\n8.4 F or the high-level code segment shown ne xt, cr eate a set\nof instructions and write an equivalent assembly pr ogram for\neach of the following ar chitectur es:\na. Stack-IS A\nb. Acc-IS A\nc. CISC-IS A\nd. RISC-IS A\n8.5 Design a simple 8-bit har dwar e stack with depth = 16\nusing r egisters. Also, include four signals push , pop, ovf (for\nstack over\ufb02ow), and udf (for stack under\ufb02ow). Assume active-\nhigh signals. The ovf becomes 1 (asserted) if the stack is full and\npush  is asserted. The udf becomes 1 if stack is empty and pop is\nasserted.\n8.6 Discuss how di\ufb00er ent CISC instruction for mats versus the\n\ufb01xed RISC instruction for mats can complicate the design of an\ninstruction data path.\n8.7 Given the single-cycle CPU data path in Fig. 8.7 , estimate\nan upper bound for the clock fr equency . Assume \u0394IM and \u0394DM are\neach 1.2 ns, \u0394add = 0.8 ns, \u0394add/cmp  = 0.9 ns, \u0394mux = 0.3 ns,\n\u0394NAND = 0.1 ns, and \u03c4st = \u03c4cq = \u03c4cs = 0.05 ns.\n8.8 Given the pipelined data path in Fig. 8.11  estimate an\nupper bound for the clock fr equency . Assume \u0394IM and \u0394DM are\neach 1.2 ns, \u0394add = 0.8 ns, \u0394add/cmp  = 0.9 ns, \u03942-to-1 MUX  = 0.3 ns,\n\u0394NAND = 0.1 ns, and \u03c4st = \u03c4cq = \u03c4cs = 0.05 ns.\n8.9 Consider an instruction pipeline with four stages, fetch (F),\ndecode (D), e xecute (E), and write-back (WB), wher e \u0394E is twice\nthat of the other stages. Do the following as the pipeline\nexecutes n instructions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1525, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f97f3aa-4adc-44a6-b110-57127c75971c": {"__data__": {"id_": "1f97f3aa-4adc-44a6-b110-57127c75971c", "embedding": null, "metadata": {"page_label": "585", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dfe497f8-26b8-4e5c-8e5c-6d5fd0d41055", "node_type": "4", "metadata": {"page_label": "585", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d3968c4bb157a08e82458a0641e7a0af868ec8b70572e0368696eedae30b4466", "class_name": "RelatedNodeInfo"}}, "text": "a. Suppose the E stage can be divided into two stages, E1 and\nE2, each with \u0394E1 = \u0394E2 = + \u0394E. Deter mine an e xpression for\nspeed-up in ter ms of \u0394E and \u0394clocking  as n appr oaches in\ufb01nity\n(\u221e). Assume CPI = 1. Also, estimate the speed-up as n + \u221e if\n\u0394E = 2 ns and \u0394clocking  = 0.1 ns.\nb. Suppose the E stage can be superpipelined using two copies\nof the stage har dwar e and an MUX. Deter mine an e xpression\nfor speed-up in ter ms of \u0394E, \u0394clocking , and \u0394MUX as n\napproaches in\ufb01nity (\u221e). Assume CPI = 1. Also, estimate the\nspeed-up as n + \u221e if \u0394E = 2 ns, and \u0394clocking  = 0.1 ns, and\n\u0394MUX = 0.3 ns.\n8.10 Discuss the e\ufb00ect of switching the positions of the e xecute and\nDM stages in Fig. 8.17 .\n8.11 Given the assembly code in Example 8.10, do the following:\na. Show the pipeline chart for two iterations of the for -loop using\nthe \ufb01ve-stage pipeline in Fig. 8.17 . Do not include the time\nused to e xecute the instructions (i.e., Ix, Iy, Iz ) that ar e after\nthe for -loop.\nb. Calculate the pr ogram\u2019s CPI for two iterations.\nc. Deter mine an equation for CPI in ter ms of k iterations.\nd. Deter mine the limit for the CPI as k appr oaches in\ufb01nity .\n8.12 Given the assembly code in Example 8.11, do the following:\na. Show the pipeline chart for two iterations of the for -loop using\nthe \ufb01ve-stage pipeline in Fig. 8.17 . Do not include the time\nused to e xecute the instructions (i.e., Ix, Iy, Iz ) that ar e after\nthe for -loop.\nb. Calculate the pr ogram\u2019s CPI for two iterations.\nc. Deter mine an equation for CPI in ter ms of k iterations.\nd. Deter mine the limit for the CPI as k appr oaches in\ufb01nity .\n8.13 F or the pipeline chart in Table 8.6 , deter mine CPI for k = 10\niterations. Also, deter mine the lower bound for the CPI as k\napproaches in\ufb01nity .\n8.14 Consider the following for -loop with a single if -else statement\nand its compiler -generated branch instructions. Suppose the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1891, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "78c7d9b4-6a25-4441-8a76-5e054bfd1370": {"__data__": {"id_": "78c7d9b4-6a25-4441-8a76-5e054bfd1370", "embedding": null, "metadata": {"page_label": "586", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9a283e18-63b4-42d8-b7e3-f80434d36e7e", "node_type": "4", "metadata": {"page_label": "586", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7c18653b8a2a120d59ab6b75ce688e5879664bb924ff8345bfe95ad141435202", "class_name": "RelatedNodeInfo"}}, "text": "processor uses a cor relation branch pr edictor . When the for -loop\nexecutes, the \u201cthen \u201d section of the code e xecutes when i is an\neven number (0, 2, 4, etc.) and the \u201celse\u201d section e xecutes when\ni is an odd number . Do the following:\na. Suppose the pr edictor uses a 2-bit BHR . Complete the\nfollowing table for six iterations and deter mine the number of\nmispr edictions, wher e \u201cN\u201d (pr edictor not tak en), \u201cT \u201d (predict\ntaken), \u201c LN\u201d (pr edict lik ely not tak en), and \u201c LT\u201d (predict lik ely\ntaken) ar e used to indicate the states of a 2-bit pr edictor\nwher e one 2-bit pr edictor is used for each of the e xecution\npaths BHR = NN, NY, YN, and YY . In the table, the state in a\nprior r ow is used to pr edict the branch dir ection as Y or N for\nthe cur rent instruction. F or example, initially, when e xecuting\nthe \u201c JMP endif\u201d instruction wher e BHR = NN (no branching for\n\u201cBGT\u201d and no branching for \u201c BLE\u201d), the 2-bit pr edictor for BHR\n= NN is initialized to \u201cT \u201d because \u201c JMP endif\u201d branches. The\nnext time that BHR = NN, the cor relation pr edictor will pr edict\n\u201ctaken\u201d for the cur rent instruction. This is illustrated for BHR =\nNY in the table.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1163, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "81c5ef8f-88c0-4947-bb2a-76364e9467fe": {"__data__": {"id_": "81c5ef8f-88c0-4947-bb2a-76364e9467fe", "embedding": null, "metadata": {"page_label": "587", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d00d75a4-a8de-4271-8d56-c53f6cd68773", "node_type": "4", "metadata": {"page_label": "587", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "341cc243183952fb18a81f579bbfe6f8d4d3728d7309c9525463a465bfcbfe85", "class_name": "RelatedNodeInfo"}}, "text": "b. Suppose the pr edictor uses a 3-bit BHR that identi\ufb01es one of\neight total e xecution paths as NNN, NNT, NTN, NT T, TNN, TNT,\nTTN, or T TT. However, which of the eight possible e xecution\npaths the pr ogram will follow depends on the data it\nprocesses.\n8.15 Consider the pr ogram code shown ne xt. Assume (1) DM is \ufb01ne\ninterleaved and any combination of two memory instructions can", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 383, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a3561a9b-a250-49fa-b275-abe2c84f55db": {"__data__": {"id_": "a3561a9b-a250-49fa-b275-abe2c84f55db", "embedding": null, "metadata": {"page_label": "588", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5a0d48ab-4fd0-4eef-8497-2d9b40d14a8b", "node_type": "4", "metadata": {"page_label": "588", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "22e91e3c34ad3594a48ae2dcc0f15d633965e7f999023ab328f39a19178fcf94", "class_name": "RelatedNodeInfo"}}, "text": "execute at the same time; and (2) each arithmetic instruction\ntakes one clock cycle to e xecute. Do the following:\na. Or ganize the pr ogram for e xecution on a two -issue (ILP)\nstatistically scheduled superscalar pr ocessor .\nb. Or ganize the pr ogram for e xecution on a two -issue (ILP)\ndynamically scheduled superscalar pr ocessor .\n8.16 Consider the pr ogram code in Example 8.13. Suppose a\ndynamically scheduled two -issue (ILP) superscalar pr ocessor\nschedules arithmetic instead of \u201c LD\u201d instructions as soon as\npossible. Use a pipeline chart to show pr ogram e xecution and\ncalculate IPC. Ignor e the cycles r equir ed to \ufb01ll the pipeline when\ncalculating the IPC.\n8.17 Consider a four -issue simultaneous multithr eading superscalar\nprocessor . Also, consider a two -thread multithr eaded pr ogram\nwith appr oximately 1011 executing instructions per thr ead. Do\nthe following:\na. Suppose the pr ogram\u2019s IPC = 3.5 when ther e is no memory\naccess latency . How long will it tak e for the pr ocessor to\nexecute the pr ogram, assuming a 1 GHz clock? Also, ignor e\ndelays due to OS over head.\nb. Suppose 20% of the instructions ar e \u201cLD\u201d and \u201cST \u201d\ninstructions and 10% of these instructions will cause data\nloading and storing memory latency wher e the IPC dr ops to\n1.75. Deter mine the pr ogram e xecution time.\n8.18 Computer security (secur e co-processor): Ex ercise 11.27 (also\nsee Secs. 11.4, 11.8, and 11.10).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1421, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2526420f-0792-4e6f-91e7-c97c2e5f1416": {"__data__": {"id_": "2526420f-0792-4e6f-91e7-c97c2e5f1416", "embedding": null, "metadata": {"page_label": "589", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e70cb36-8e1f-4dec-bb42-04de56b1fb3e", "node_type": "4", "metadata": {"page_label": "589", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d02db631c90ad39b0d2dbf0a91c8f51ecf984ebcc261fb5ceab8af7770427860", "class_name": "RelatedNodeInfo"}}, "text": "8.19 Computer security (secur e processor): Select Ex ercises 11.28\nand/or 11.29 (also see Secs. 11.4, 11.9.2, and 11.11).\n8.20 Computer security (spoo\ufb01ng, splicing, and r eplay attacks):\nExercise 11.30 (also see Secs. 11.3 and 11.11).\n8.21 Computer security (secur e processor perfor mance-r elated\nissue): Ex ercise 11.31 (also see Sec. 11.11).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 346, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8dc0b306-a33d-419e-8286-d6850f1726d8": {"__data__": {"id_": "8dc0b306-a33d-419e-8286-d6850f1726d8", "embedding": null, "metadata": {"page_label": "590", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "18425161-0e20-43d0-b022-b99fe8503b23", "node_type": "4", "metadata": {"page_label": "590", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "401f391805829fa387615e509318d2f202c2118b00dcb95ee056fee8aa8fe8a5", "class_name": "RelatedNodeInfo"}}, "text": "CHAPTER 9\nComputer Architecture:\nInterconnection\n\u00a0\n9.1 Introduction\nA modern computer system is an interconnection  of one or more\nprocessors, memory units, and input/output (I/O) devices. A\npersonal computer (i.e., a microcomputer) addition ally may include\nan optional special-purpose or custom processor used as an\naccelerator (e.g., GPU, FPGA). A keyboar d, mouse, printer, network\nadapter, hard disk or \ufb02ash drive, portable drive  (e.g., memory\nstick), CD drive, micropho ne, etc. are examples of I/O devices used\nin a micr ocomputer .\nWhile innovations in CPU and memory architectur es have\nenabled instruction-level parallelism (ILP), multithr eading and\nmulticor e processors and innovations in integ rated chip (IC)\ntechnologies have increased the speed of CPUs  from 16.7 MHz\n(Sun-4 Sparc) in 1986 to 3.33 GHz (Intel Nehalem Xeon) in 2010; it\nis the innovations in interconnection architect ures that have\nincreased the overall system perfor mance. Today, a shared memory\nsystem runs multiple applications and allow s programs to\ncommunicate with various I/O devices simultaneously . Further more,\ninnovations in interconnection architectur es have  enabled \u201cplug", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1173, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a600cedf-4627-4ceb-af17-f20c1a759475": {"__data__": {"id_": "a600cedf-4627-4ceb-af17-f20c1a759475", "embedding": null, "metadata": {"page_label": "591", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c2ba2725-e4ae-4a92-888d-25bab2210d98", "node_type": "4", "metadata": {"page_label": "591", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "503737731bb7953982a9acc61c0842fa7003e554466850d27c89459d6898bf67", "class_name": "RelatedNodeInfo"}}, "text": "and play\u201d I/O device interface  wher e users of moder n\nmicrocomputers ar e able to use an abundance of devices with ease.\nAll I/O device s do not operate the same; the frequency, speed,\nand amount of communic ated data of each device are di\ufb00er ent. In\naddition, in some cases, the processor must be directly involved in\ncommunicating with a device, and in other cases, a device may be\ninstructed to communicat e directly with memory . And still in other\ncases, the processor may need to poll devices to provide service\n(i.e., send or receive data) when there are many devices in the\nsystem, or a device can inform the processor via interruption when\nit need s a service. And because various system components, from\nspecial-purpose processors, to memory units, to I/O devices,\noperate di\ufb00er ently and with various speeds as compar ed to a\nprocessor, special hardwar e modules are needed  to interconnect\nthese components with one or mor e processors.\nA memory controller  controls the timing and responds to\nmemory read/write requests. A device contr oller interface (DCI),\nintroduced in Chap. 1, is a simple or comple x embedded system\nand acts as a \u201cmiddle man\u201d between an I/O device and processor or\nboth processor and memory . A bridge  translates the\ncommunication protocol used by one compo nent, such as\nprocessor, to a typically standar d protocol used, for example, by a\nGPU or a disk DCI.\nAs a simple embedded system, a DCI is typically a\nmicrocontroller , which, as discussed later, is a small system with\nCPU, RAM, ROM, and other modules used for interfacing. Each I/O\ndevice additionally needs a device controller  (DC), also typically a\nmicrocontr oller, to contr ol the actual hardwar e of the device. For\nexample, a keyboar d DC contr ols the hardwar e of the keyboar d; a\ndisk DC contr ols the hardwar e of a disk drive; etc. A DCI that\nconnects via a cable or wirelessly to a DC perfor ms the following\ntwo tasks:\n\u2022 It contr ols the functions of a device by sending contr ol data\nto the DC.\n\u2022 It communicates with the DC to e xchange data with the\ndevice. It can r eceive data fr om an input device (e.g.,\nkeyboar d), send data to an output device (e.g., a printer), or", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2187, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0baaa147-5430-4e8c-885c-abf3ed156158": {"__data__": {"id_": "0baaa147-5430-4e8c-885c-abf3ed156158", "embedding": null, "metadata": {"page_label": "592", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3c1a7493-275f-412f-af05-9ad0a1284987", "node_type": "4", "metadata": {"page_label": "592", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4ec17523cf17d8fc7b44db571ab960abd2048f5d654ee5706a4c5090c5466772", "class_name": "RelatedNodeInfo"}}, "text": "both send and r eceive data fr om a disk drive or a network\nadapter .\nFurther more, in order to support a \u201cplug and play\u201d interface with\ndevices, modern microcom puters use one or more general-purpose\nDCIs, such as the one commonly called a host controller\ninterface  used to interface with Universal Serial Bus (USB)\ndevices. A USB host contr oller can interface and communicate with\nmany di\ufb00er ent types of USB devices simultaneously .\nIn this chapter, we will discuss four generations of\ninterconnection architect ures, from single-bus to multibus, and\nintegrated to link ed-based point-to -point. The chapter then pr esents\na list of I/O devices to highlight their communication needs and the\nI/O ports (initially introduc ed in Chap. 1 ) used in the design of a DCI\nand DC.\nInterruption, interrupt structur es, and the requir ements for a\ndirect device communication with memory are discussed, and\ncircuit modules are presented. An example CPU data path with\ninterrupt handling circuitry is used to familiarize readers with\ninterrupt handling mechanisms and the steps the CPU must take to\nprovide service to a device. Alternative interrupt structur es to\nimprove perfor mance are also discussed and illustrated. Finally, for\na bette r understanding of the tasks perfor med by a, host contr oller\ninterface, the chapter presents both the internal organization and\ncommunication pr otocols of a USB host contr oller interface.\n9.1.2 Interconnection Architectures\nThe architectur e of single -bus system is simple. All system modules\nshare a single bus to communicate. However, as the speed of\nmicroprocessors and memory started to diver ge, single-bus\narchitectur es no longer work ed e\ufb03ciently . Processors were\noperating with higher -frequency clocks than the rest of the modules\nin the system. In addition, because processors typically use\nproprietary buses to communicate with memory and devices,\nmanufactur ers needed to use a set of standar d I/O buses to\ninterconnect DCIs with memory and/or processor . This, in turn,\ncreated several generations of multibus system ar chitectur es.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2092, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2a4c1ff-fc5d-4895-a03f-afbb52efd04c": {"__data__": {"id_": "e2a4c1ff-fc5d-4895-a03f-afbb52efd04c", "embedding": null, "metadata": {"page_label": "593", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eeac4b2c-03b9-41e6-b4f3-0a3516d591a8", "node_type": "4", "metadata": {"page_label": "593", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9d5cb77a2ab6e0943ec8a9e99fbd1c2a2f3484ff3b9dcb1c59936ef15d4d9c7a", "class_name": "RelatedNodeInfo"}}, "text": "In order to simplif y designs and bring the cost of personal\ncomputers down, many modules, including a memory contr oller\nand certain bridges and DCIs, were integrated into two ICs: one IC\nfor inter connecting fast modules such as pr ocessors and an optional\nGPU to memory, and a second IC for interconnecting various DCIs\ndesigned to interface with standar d I/O buses. However, while the\nintegrated interconnections work ed well with limited number of\nprocessing cores, this architectur e created a memory bottleneck as\nthe number of cores in each processor, as well as the number of\nprocessors, incr eased.\nThis integrated interconnection architectur e was no longer\nscalable; you could not use more memory units to increase memory\nbandwidth. Therefore, there was a need for a scalable\ninterconnection architectu re that would allow memory bandwidth to\nincrease without signi\ufb01cant incr ease in memory latency .\nSingle Bus\nFigure 9.1 illustrates a single-bus architectur e with a CPU, a\nmemory unit, and three DCIs that interface with three peripheral\ndevices. The bus consist s of an address bus (AB), a bidirectional\ndata bus (DB), and a control bus (CB). The CPU would use the bus\nto access the memory or to communicate with a DCI. For instance,\nthe CPU would send r egister content as data or a command to a DCI\nand receive, via the DCI, data and status information from the\ncorresponding DC.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1398, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c8051173-f18d-43fb-8652-c0cb2de9918f": {"__data__": {"id_": "c8051173-f18d-43fb-8652-c0cb2de9918f", "embedding": null, "metadata": {"page_label": "594", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f8c5f044-ffe1-4543-9822-f358fa2b0746", "node_type": "4", "metadata": {"page_label": "594", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "396ff0642e20ef28fefde4b2015fb599c6a372036c1be3c122ae9b666685bf7d", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 9.1 A simple micr ocomputer system ar chitectur e.\nThe bus would also be used to transfer a large amount of data\n(e.g., when reading a \ufb01le) between a disk drive and the memory .\nHowever, in order for the computer to operate as expected, run a\nprogram, accept a user\u2019s input without delay, etc., the CPU would\nalso use the bus to access memory while a disk transfer to/from\nmemory is taking place. For this reason, another module, known as\na direct-memory-access  (DMA) contr oller would be used. Both\nthe disk DCI and the DMA contr oller would receive commands from\nCPU to transfer large data blocks between a disk drive and memory\nwithout invol ving the CPU in the actual transfer of data. The CPU\nand DMA contr oller would share the bus, taking turns to access\nmemory . Currently, however, only microcontr ollers use single-bus\narchitectur e.\nMultibus\nFigure 9.2 illustrates an example of a multibus system architectur e\nusing a bus hierarchy known as mezzanine [1]. It uses a processor\nbus called a front-side bus (FSB) and a combination  of standar d\nI/O buses, such as those listed in Table 9.1. Peripheral devices are\nalso not treated the same as in Fig. 9.1; they may be grouped into\nslow, medium, and fast devices. In the \ufb01gure, a hierar chy of\nstandar d I/O buses is used to separate the fast and more frequently\ncommunicating devices from those that are slow and communicate\nless fr equently .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1410, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a34c5376-742a-43fd-ae82-c58161594746": {"__data__": {"id_": "a34c5376-742a-43fd-ae82-c58161594746", "embedding": null, "metadata": {"page_label": "595", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8c0a8d1c-4b58-4ade-ab85-4ca953647091", "node_type": "4", "metadata": {"page_label": "595", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "de95c09990fd05836fd14150385863bfdea2d9c8a85ee37799e5fa474bd7ac63", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 9.2 A multibus micr ocomputer ar chitectur e with fr ont-side\nbus and I/O buses.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 87, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "08322b45-ae66-4411-ad7f-22112b4bd09a": {"__data__": {"id_": "08322b45-ae66-4411-ad7f-22112b4bd09a", "embedding": null, "metadata": {"page_label": "596", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5c303545-8bb9-437a-9cab-af251b99a2c7", "node_type": "4", "metadata": {"page_label": "596", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "56974080d3ad522723c7d2f8b223ccf3b54f75efbd7f993c5e15d940e8ba77b4", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  9.1 A List of Contemporary Buses\nA mem ory controller and two Peripheral Component Interconnect\nExpress (PCI-E) bridges are shown interfacing with the FSB. The\nbridges are used to interface with a GPU and facilitate high-speed\ncommunications between  the FSB and other I/O buses. In this case,\nthe PCI-E bus that is interfacing I/O devices, connects an Ether net\nDCI, a USB host contr oller interface, a serial advanced technology\nadvancement (SATA) bridge, a video graphics array (VGA) bridge, a\nDMA contr oller, and a (slower) PCI-bus expansion bridge to the rest\nof the system, cr eating a motherboard .\nThe SATA bus supports chained connections of SATA hard and CD\ndisk drives. A second USB host contr oller interfac e is also shown\ninstalled via one of the available PCI-bus expansion slots for\ncommunicating with a USB keyboar d and a USB mouse. The mouse\ninterfaces the system via a USB hub  locate d in the keyboar d. Each\ndevice connects to a USB port and communicates through one or\nmore USB hubs and a USB root hub with a USB host contr oller\ninterface.\nIntegrated Architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1095, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c7acfcbd-9738-47fe-8587-425f7c080d14": {"__data__": {"id_": "c7acfcbd-9738-47fe-8587-425f7c080d14", "embedding": null, "metadata": {"page_label": "597", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "94c4a39b-2d26-4d29-b6c0-5216ccb27556", "node_type": "4", "metadata": {"page_label": "597", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9873407e9ef3f8fd947866896d6ebb51f4b96607d9bea15e8de9594592680b57", "class_name": "RelatedNodeInfo"}}, "text": "Interconnection chips, such as a memory contr oller hub (MCH) that\nwas called a north bridge  and an I/O contr oller hub (ICH) that was\ncalled a south bridge  simpli\ufb01ed the design of Intel and AMD next-\ngeneration computer system boards, as illustrated in Fig. 9.3. The\nmodules that used to be scatter ed on the motherboar d were\nintegrated into the MCH and ICH chips. In the \ufb01gure, an MCH\nincludes a memory contr oller, a bridge connection to an optional\naccelerator (e.g., GPU), and a bridge to an ICH. The ICH, in turn,\nincluded a DMA contr oller, a high-de\ufb01nition audio (HDA) interface, a\nUSB host controller interfa ce, a network DCI, and a set of bridges to\nstandar d buses.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 680, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b17bf47a-0974-4c56-a6c0-3cf7774c7dc5": {"__data__": {"id_": "b17bf47a-0974-4c56-a6c0-3cf7774c7dc5", "embedding": null, "metadata": {"page_label": "598", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "73784c4d-3691-49ba-9fc7-a8adfe8eab80", "node_type": "4", "metadata": {"page_label": "598", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "cd584a1996f1127f5a132488a76ad1eb396a9410babd81b3165b525e60d80da5", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 9.3 An integrated micr ocomputer system ar chitectur e using\ninterconnection ICs.\nThe memory  hub was later expanded to operate  with multiple\nprocessors, thus creating a unifor m memory  access (UMA)\narchitectur e, which was only e\ufb03cient when the total number of\nprocessing cores (CPUs) was small (e.g., four). However, as the\nnumber of cores increased, so did the number of requests to\nmemory, r esulting in long memory latency .\nPoint-to-Point Architecture\nFigure 9.4 illustrates an example of a scalable nonunifor m memory\naccess (NUM A) architectu re based on the Intel QuickP ath links or\nAMD HyperT ransport  or tunnel architectur e. The links are used to\ncreate one-to -one interconnections of processors for serial point-to -\npoint communication. Instead of multiple processors sharing an FSB\nto access memory, each processor is directly interfaced with its\nown local memory, creating a NUMA architectur e. As discussed in\nChap. 7 , average memory latency in a NUMA would be smaller than\nthat of UMA ar chitectur e. Further more, the average memory latency\nin NUMA architectur e would increase slowly as more processors are\ninterconnected.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1155, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "24b42c5e-6c29-4bed-84cc-899eb4c53589": {"__data__": {"id_": "24b42c5e-6c29-4bed-84cc-899eb4c53589", "embedding": null, "metadata": {"page_label": "599", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a2f14db2-b062-4977-a5c9-f2b5927c74b7", "node_type": "4", "metadata": {"page_label": "599", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7de0bebc32bab90626506e03939c37be5c311ddd9041b506578f49632f0757d8", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 9.4 A moder n micr ocomputer NUMA ar chitectur e.\nIn addition, due to increased demand for single-chip embedded\nsystems (system- on-chip, or SoC), more modules, such as the\nmemory hub, migrated into the processor chip. For example, Intel\u2019s\nSandy Bridge architectur e includes a memory controller, PCI-E,  and\nother bridges all within a single processor chip. Figure 9.5  illustrates\na two -node NUMA system.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 414, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "29eac260-7dad-48a6-aa40-c4142e8c878f": {"__data__": {"id_": "29eac260-7dad-48a6-aa40-c4142e8c878f", "embedding": null, "metadata": {"page_label": "600", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74278583-c5b7-4b7d-b822-74bba33af6ba", "node_type": "4", "metadata": {"page_label": "600", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "acfe9e20e7a1b33dc15b9fccf7f43ed49dc2ab44492018ecdcc1f7c9c98deafc", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 9.5 A two -node NUMA system. (Courtesy of Intel.)\n\u00a0\n9.2 Memory Controller\nA memory contr oller is responsible for responding to requests made\nto memory . Its comple xity depends on the communication protocols\nused by both the processor and memory unit. For example, a\nsimple single -bus archite cture with static random access memory\n(SRAM) requir es a simple  memory contr oller. On the other hand, a\nmoder n system that uses a comple x bus, such as the FSB of an\nIntel processor, and communicates, for example, with synchr onous\ndynamic random access memory (SDR AM), would requir e a more\ncomple x memory contr oller.\n9.2.1 Simple Memory Controller\nAn example of a simple memory contr oller is illustrated in Fig. 9.6.\nThe controller consists of a counter and a combinational circuit\n(CC). The processor control bus consists of four signals, labeled\naddress strobe (_as), write (_wr), read (_rd), and acknowledge (e.g.,\nack). The signal _as is asserted to start a memory read or write\ncycle. The _as, _wr, and _rd signals are typically used as memory", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1060, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92f1b77a-0aa3-4dc6-b7c7-23d0acc94328": {"__data__": {"id_": "92f1b77a-0aa3-4dc6-b7c7-23d0acc94328", "embedding": null, "metadata": {"page_label": "601", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e67af9db-650b-4a47-a3e4-a6c12189f96f", "node_type": "4", "metadata": {"page_label": "601", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9aeeb791e6913ac83c32ce4ff314359dc611c9785f3dcf47ee4ad105d6fd97f9", "class_name": "RelatedNodeInfo"}}, "text": "contr oller signals from processor points of view, wher eas _ce, _we,\nand _oe (discussed in Chap. 7) are contr ol signals used from\nmemory point of view .\nFIGURE 9.6 An SR AM contr ol unit fr om pr ocessor point of view .\nIf there is more than one memory unit, _as and the target\nmemory address are used to generate the _ce for a speci\ufb01c\nmemory unit. In the \ufb01gure, it is assumed there is only one memory\nunit in the system, hence _as directly connects to the _ce in the\nSRAM memory unit.\nAs shown in the \ufb01gure, both the memory unit and counter are\nenabled when _as is asserted. Once enab led, the counter starts\nincrementing every clock cycle and asynchr onously resets when _as\nis deasserted or the master reset is asserted. The counter is used to\ncount the number of clock cycles, called wait cycles , requir ed to", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 816, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4a399b1c-bd9c-4568-9c9b-b410c6c9a866": {"__data__": {"id_": "4a399b1c-bd9c-4568-9c9b-b410c6c9a866", "embedding": null, "metadata": {"page_label": "602", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bada4d5b-b22e-4d7f-8979-76aae5766bab", "node_type": "4", "metadata": {"page_label": "602", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "32e2093c3df72b17a29844df300534b1c153c65433c8602412f2243e773f8f00", "class_name": "RelatedNodeInfo"}}, "text": "access memory . The number of wait cycles is proportional to\nmemory access time. The counter module asserts the ack signal\nand noti\ufb01es the processor of the completion of a memory read or\nwrite access. The processor is said to be in a wait state  (also\ncalled an idle state ) while waiting for the ack to be asserted.\nFigure 9.7 illustrates a memory read cycle from processor point\nof view. The number of wait cycles is deter mined using Eq. (9.1).\nThe symbols \u2308 \u2309 indicate the ceiling function, \u03c4 is the clock period of\nthe bus, and m is the requir ed number  of clock cycles for the\nprocessor to detect ack = 1 and then end at he memory cycle. For\nexample, suppose in the \ufb01gure the clock period is 10 ns, memory\nread access time is 45 ns, and the processor requir es one clock\ncycle to detect ack = 1 and another clock cycle to end the read\ncycle. From Eq. (9.1), the number of wait cycles is 3 (i.e., \u2308\n45ns/10ns \u2309 \u2013 2 = 3).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 926, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "26528528-3ca4-43c5-9d82-a9e7a3cce09d": {"__data__": {"id_": "26528528-3ca4-43c5-9d82-a9e7a3cce09d", "embedding": null, "metadata": {"page_label": "603", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "17c7ab22-c0df-4df6-8204-6809e8e29948", "node_type": "4", "metadata": {"page_label": "603", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7384c12327ebba9a15cb2bb89140672bb2e045a859aad828af30fa87884b64b7", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 9.7 Illustration of a simple SR AM read cycle fr om pr ocessor\npoint of view .\nIn the \ufb01gure, the three \ufb01ne dotted arrows indicate signal\ndependencies commonly  referred to as signal handshaking . A\nprocessor communication with the memory contr oller starts when\nthe processo r places a target address on the address bus and\nasserts _as, which marks the start of a memory cycle at time t0.\nThe signal enables both the counter and the memory unit. The\ncounter value becomes 3 at time t1 at the start of the fourth clock", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 524, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "985324a9-4979-445b-bf38-a225e760714f": {"__data__": {"id_": "985324a9-4979-445b-bf38-a225e760714f", "embedding": null, "metadata": {"page_label": "604", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e22a1cec-dbd5-4a2a-847c-a1c50d3c1725", "node_type": "4", "metadata": {"page_label": "604", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "50f015f002345f1c694a1871f94f508313a3ec62ff745d0c2ee8dc46e7f3adcc", "class_name": "RelatedNodeInfo"}}, "text": "cycle since the start of memory cycle and causes the ack signal to\nbecome 1 at time t 2 (\u0394CC = t 2 \u2212 t 1 in Fig. 9.6). This is indicated\nby an ar row fr om the time _as = 0 to when ack = 1.\nWhen the processor detects ack = 1 at time t 3 (one clock cycle\nlater), it leaves the wait state and gets ready to load the data to its\ninternal register on the next cycle at time t 5. As shown in the\n\ufb01gure, memo ry places data on the data bus starting at time t 4 (45\nns = t 4 \u2212 t 0). The processor deasserts _as, making it 1, and ends\nthe read cycle at time t 6. The communicatio n between the\nprocessor and the memory ends when the counter  resets when _as\n= 1 and deasserts ack, making it 0 at time t 7. These are illustrated\nby an arrow from when ack becomes 1 to when _as becomes 1, and\nagain from when _as becom es 1 to when ack becom es 0. Another\nmemory cycle can now begin starting at clock cycle 8 or later .\nA mem ory write cycle is similar, except that when the processor\ndetects ack = 1, it can remove the data from the data bus. Again,\nassuming that the processor requir es one clock cycle to detect ack\n= 1 and another cycle to remove its data from the data bus, ack\nmay be asser ted earlier, as was done for a read cycle. In addition, if\nmemory read access and write access times are di\ufb00er ent, the\nmemory contr oller may implement two di\ufb00er ent wait cycles, one\nbased on r ead access time and another based on write access time.\nA memory contr oller for a dynamic access random memory\n(DRAM) also requir es a counter, similar to the one discussed for an\nSRAM. In addition, a DRAM memory contr oller requir es circuitry\nrequir ed to implement refresh cycles. However, when a refresh\ncycle is trigger ed, the memory contr oller typically would allow a\ncurrent read or write cycle (if any) to complete before starting a\nrefresh cycle. A new r ead/write cycle can start only af ter an ongoing\nrefresh cycle is completed.\n9.2.2 Modern Memory Controller\nFigure 9.8  illustrates a moder n memory contr oller interfacing with a\ncomple x FSB and a contemporary memory unit. The contr oller\ninterpr ets memory reque sts it receives over a comple x bus and\ncommunicates, for example, with a double data rate (DDR) SDRAM\nover the standar d DDR SDRAM bus. Table 9.2 is a partial signal\nlisting of the 533 MHz F SB of the Mobile Intel P entium 4 P rocessor . A", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2354, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "24ee6773-bb3d-425b-a9e2-3d64384a234d": {"__data__": {"id_": "24ee6773-bb3d-425b-a9e2-3d64384a234d", "embedding": null, "metadata": {"page_label": "605", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8e3bdc00-76b2-45bd-b6eb-a511b520933f", "node_type": "4", "metadata": {"page_label": "605", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3821dccf45bae19be685430c2a888abf62fcc1796911bb8fb30b5344dc40396a", "class_name": "RelatedNodeInfo"}}, "text": "FSB, or a comple x serial link, for example, the Intel\u2019s QuickP ath,\ntypically implements split transactions  to communicate with a\nmemory contr oller. A split transaction consists of a request\ntransaction  and a response transaction .\nFIGURE 9.8 A comple x memory contr oller.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 277, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e41f4c8a-b74c-495a-b224-50d14a628238": {"__data__": {"id_": "e41f4c8a-b74c-495a-b224-50d14a628238", "embedding": null, "metadata": {"page_label": "606", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fa48f675-5675-42c3-a601-bf485b0e0bab", "node_type": "4", "metadata": {"page_label": "606", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "27dc5d0705078010f0cea3c51ddf1c41c52ea10b0145a3752441cf27ce4a2c6a", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  9.2 Partial Signal Listing of the Mobile Intel P entium 4 P rocessor 533 MHz F SB", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 88, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "59db4051-6735-4080-840a-40fafb2f305f": {"__data__": {"id_": "59db4051-6735-4080-840a-40fafb2f305f", "embedding": null, "metadata": {"page_label": "607", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c166a0a0-9e66-4979-a029-ab5212a07344", "node_type": "4", "metadata": {"page_label": "607", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "31bc77797597376be8cd73bfa37693906b25d400ffb5e9e1bac27567b3d01c81", "class_name": "RelatedNodeInfo"}}, "text": "A request read transactio n includes an address and a command\n(e.g., read). A request write transaction also includes data. A\nresponse transaction includes one or more acknowledgement\nsignals, as well as data if the request was a read transaction. A\nmoder n memory contr oller typically handles multiple outstanding\nsplit transactions.\nIn the table, the symbol # is used to indicate an active-low\nsignal. The Mobile Intel Pentium 4 Processor with 533 MHz FSB [2]\nhas 478 pins, with several pins reserved for power and ground\nconnections, as well as power management, board-level design\nissues, perfo rmance measurement, bus error signa ling, transaction\n\ufb02ow contr ol, and testing. It includes 36 pins for address bus\n(A[35:3]#) that can reference 236 bytes of physical memor y, 5 pins\nto issue a memory comm and (REQ[4:0]#), and 64 pins for data bus\n(D[63:0]#). A request transaction (i.e., address and command) is\nissued by an address strobe signal (ADS#), which is then latched by\nthe memory  contr oller in two parts using two additional strobe\nsignals (ASTB[1:0]#). ADS# starts and ends a memory request\ntransaction, and ASTB[1]#  and ASTV[0]# are used as clock signals\nto operate two register bu\ufb00ers in the memory contr oller for loading\nthe upper and lower bits of a tar get addr ess.\nA response transaction includes a data ready signal (DRD Y#), a\n3-bit response code (RS[2:0)]#), and data for a read command. If a\nresponse transaction includes data, it is latched by the processor in\nfour negative (DSTBN[3:0]#) or positive (SDTBP[3:0]#) edge-\ntrigger ed data strobe signals. The 36-bit address, 64-bit data, and\n3-bit response code also include a parity error protection signal\nAP[1:0] for the address, DP[3:0] for the data, and RSP# for the\nresponse code. Some of the remaining contr ol bus signals listed in\nthe table deal with cache memory (discussed in Chap. 10), with\nrequest for service from peripheral devices, and with atomic bus\naccess  when two or more CPUs try to modif y the content of a\nshared mem ory location. Only one CPU at a time is permitted to\nmodif y the content of a shar ed memory location.\nA moder n memory contr oller operates as a middleman between\na processor by interfacin g its FSB and memory unit using SDRAM\nmodules. Using, for example, the A, D, REQ, ADS, and ADSTB bus\nlines in Table 9.2 , the processor issues a memory transaction to the\ncontr oller requesting to access the memory . The contr oller logs the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2451, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a52d7ed7-c2cf-423a-83c7-177afe53de81": {"__data__": {"id_": "a52d7ed7-c2cf-423a-83c7-177afe53de81", "embedding": null, "metadata": {"page_label": "608", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "61dd2869-2bdb-4681-bd02-e1f69942b694", "node_type": "4", "metadata": {"page_label": "608", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "bf10d0105878ffb0884545f98b450a969b4825053e0511be1ff87f3e2882fe82", "class_name": "RelatedNodeInfo"}}, "text": "transaction and then converts the communication protocol of the\nFSB to that of the SDRAM bus and vice versa. Refer to Chap. 7 for\nexamples of SDR AM bus transactions.\n\u00a0\n9.3 I/O Peripheral Devices\nEach periphe ral device requir es a speci\ufb01c commun ication protocol,\noperating speed, and data size. For example, a keyboar d generates\nsmall data values (e.g., a key value) each time that a key is\npressed. On the other hand, a magnetic hard disk drive is an\nelectr omechanical device designed to transfer a large amount of\ndata fast. A hard drive has many recording circular surfaces (disks),\neach with many tracks (like the tracks on a CD). A track is divided\ninto several equal-sized regions called sectors . Each recording\nsurface has its own read/write head, and some hard drives can\ntransfer data simultaneously fr om multiple sectors.\nFor example, consider a Samsung 260 GB hard drive (e.g., HD\n642JJ). Its magnetic disks  rotate at the speed of 7200 rotations per\nminute (RPM) and has 175 Mbps (megabits per second) peak\ntransfer rate between its recording surfaces and its 16 MB internal\n(DRAM) memory . The internal memory, also called a bu\ufb00er, is used\nas a tempor ary storage  to store sector data to/from the main\nmemory . Its peak data transfer rate between the bu\ufb00er and the\nmain memory is 300 Mbps. Its sector size is 512 B. Moder n personal\ncomputers use disks with 4 KB sectors. Some moder n disk drives\noperate at 10,000 RPM or higher .\nThe Samsung hard drive has 8.9 ms (millisecond) average seek\ntime , the amount of time requir ed to move a disk\u2019s read/write head\nto a speci\ufb01c track. The disk drive also has 4.17 ms average\nlatency , the average amount of time requir ed to rotate a disk 50%\n(half of its circumfer ence). That is, at 7200 RPM, one-half (50%)\nrotation would requir e 4.17 ms (0.5/7200 RPM). The sum of the two\naverages is the approximate amount of time requir ed to locate a\ntarget sector for r ead or write operation.\nExample 9.1.  Using the averag e and peak perfor mance parameters of the Sams ung disk\ndrive, determine the approximate average requir ed time to transfer 512 B (data from one\nsector) to memory .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2147, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2e16f9fb-d05a-41a1-9aaf-1f573f9df918": {"__data__": {"id_": "2e16f9fb-d05a-41a1-9aaf-1f573f9df918", "embedding": null, "metadata": {"page_label": "609", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7b299776-5974-483a-82d1-6e2bb601df8d", "node_type": "4", "metadata": {"page_label": "609", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f767ba48caffcc27e9ba9869d2e9f7a0945ca7cb7bc5a21f6ca046c45fbd528f", "class_name": "RelatedNodeInfo"}}, "text": "Solution:  Four sequen tial tasks are requir ed to copy sector data to\nmemory :\nTask 1: Seek the target track with an average seek time of 8.9\nms.\nTask 2: Locate the target sector with an average latency of 4.17\nms.\nTask 3: Copy  data from the sector to the internal bu\ufb00er with the\npeak transfer rate of 175 Mbps.\nTask 4: Copy data from the internal bu\ufb00er to main memory with\nthe peak transfer rate of 300 Mbps.\nThe average approximate requir ed total time to transfer 512 B to\nmemory is 13.075 ms, as calculated ne xt:\nHowever, transfers to/from multip le physically adjacent sectors would be faster . A transfer\nfrom memory to disk is similar, except that the data is \ufb01rst copied from memory to the\ninternal bu\ufb00er befor e it is written onto the tar get sector .\nRAID (redundant array of independent disks) is designed to\nincrease the bandwidth or both the bandwidth and the reliability of\ndisks. For example, data interleaving, similar to memory\ninterleaving (Chap. 7), is used to increase bandwidth by storing\nstrips of data from a single record on several sectors, one strip on\neach indepe ndent disk. Interleaving can be done at a bit level\n(RAID-2 and RAID-3) or at a block-level (RAID-0 and RAID-4 to -6).\nCopies of \ufb01les may be duplicated to create \ufb01le storage redundancy\n(RAID-1). Error correction codes can be used to avoid the extra cost\nof storage redundancy by implementing a recovery mechanism if\none or even two disks fail, such as in RAID-2 to -4, if only one disk\nfails, or R AID-6 and R AID DP (double parity) if two disks fail.\nOther devices that have no mechanical parts can communicate\nat even faster rates. For example, an Ether net network adapter is\ncapable of transfer ring data between two communicating\ncomputers at the rate of 10 Mbps, 100 Mbps, or higher . In this case,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1798, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eb1fbbbf-25d7-4399-b5f5-2414bc720da3": {"__data__": {"id_": "eb1fbbbf-25d7-4399-b5f5-2414bc720da3", "embedding": null, "metadata": {"page_label": "610", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c4e17d66-49ce-48aa-ba73-a4f113e958e4", "node_type": "4", "metadata": {"page_label": "610", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9f989b0601e3d2957a470b6e07a726fa7b9843719d37d4d53cff76141810d35b", "class_name": "RelatedNodeInfo"}}, "text": "data originates from mem ory and is communicated with a receiving\ncomputer via a DMA contr oller and the DCI of the adapter . The\nEther net adapter at the receiving computer receives the data and,\nvia its DCI and a DMA contr oller, transfers the data to main\nmemory .\n\u00a0\n9.4 Controlling and Interfacing I/O Devices\nPeripheral devices are slow, medium, or fast; each requiring a clock\nwith di\ufb00er ent operating frequency and data transfer rate. Some\ndevices may contain electr omechanical parts and operate\ndi\ufb00er ently from digital systems and may requir e data conversions\nto digital signal values. The data format and signal voltage levels in\na devic e may also be di\ufb00er ent from those used by processors and\nmemory . In addition, the processor must be able to communicate\nwith each device without a\ufb00ecting the functions of other devices in\nthe system.\nA DCI commu nicates with the rest of the system via a processor\nbus (e.g., Fig. 9.1), I/O bus (e.g., Fig. 9.2), or ICH (e.g., Fig. 9.3 or\nFig. 9.4). In the past, personal computers were designed with each\ndevice having its own dedicated DCI. Even the basic devices such\nas keyboar d, mouse, and printer requir ed its own DCI, as was\nillustrated in Fig. 9.1  for the k eyboar d and the mouse.\nFor example , older standar ds such as the parallel port (IEEE\n1284) and RS-232 (recommended standar d 232), including its\nsmaller version DE-9, supported only a single point-to -point\nconnection to a peripheral device and requir ed a dedicated DCI.\nThis meant they did not implement the \u201cplug and play\u201d device\ninterface, and therefore increased the cost of a personal computer\nand, in addition, requir ed system reboot each time that a device\nwas installed . A typical system also supported only a limited\nnumber of slots for installing new devices, which created a\nrestriction for personal computer users. Today, most, if not all,\nperipheral devices ar e \u201cplug and play .\u201d\nAs was brie\ufb02y discussed earlier, both DCIs and DCs use I/O ports.\nThe ports are designed using tri-state bu\ufb00ers and registers, and\neach is identi\ufb01ed by a unique address and accessed similar to", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2111, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "444e85b1-1385-4429-8998-44263cc3a9ce": {"__data__": {"id_": "444e85b1-1385-4429-8998-44263cc3a9ce", "embedding": null, "metadata": {"page_label": "611", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6dca0a7b-c1a2-49cc-9dce-08a60063ad43", "node_type": "4", "metadata": {"page_label": "611", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9cec2113af7b6d6c511446d52ead347cb7638d2ba4b245728c624e39004f7349", "class_name": "RelatedNodeInfo"}}, "text": "memory . Isolated I/O or port-mapped I/O and memory-mapped\nI/O are two commonly used I/O port addressing schemes, as\nillustrated in Fig. 9.9 .\nFIGURE 9.9 I/O port addr essing: ( a) port-mapped I/O, a 512- B\naddress space for memory and another 512- B addr ess space for I/O\nports; ( b) memory -mapped I/O, a single 512- B addr ess space\ndivided between memory and I/O ports.\nIn Fig. 9.9(a), port-mapped I/O requir es two separate address\nspaces, one for memory (e.g., 512 B), and anoth er with an equal\nsize for I/O ports. An additional contr ol bus signal, for example, _m,\nindicates whether a given address is a memory address if _m = 0 or\nan I/O port addr ess if _m = 1.\nOn the other hand, memory -mapped I/O requir es only one\naddress space divided between memory and I/O ports, as shown in\nFig. 9.9(b). In the \ufb01gure, a 512 B address space is divided between\nmemory and I/O ports. The same contr ol signals (e.g., _as, _rd, _wr,\nand _ack) that are used to access memory are also used to access\nmemory -mapped I/O ports. In this case, it is the responsibility of the\nmemory controller and each of the DCIs to deter mine if an address\nis within the address range reserved for the memory unit or if the\naddress belongs to an I/O port.\nAny computer system may implement the memo ry-mapped I/O\naddressing scheme. Intel processors also support port-mapped I/O\naddressing, with two special I/O instructions: \u201cIN\u201d and \u201cOUT.\u201d\nTypically, all reduced instruction set computer (RISC) processors\nsupport only memory -mapped I/O addressing, which has the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1544, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "113d6fa4-5d9c-41b0-a036-c8d578170124": {"__data__": {"id_": "113d6fa4-5d9c-41b0-a036-c8d578170124", "embedding": null, "metadata": {"page_label": "612", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5662666c-6ed1-4d21-bf8b-a03bc949c465", "node_type": "4", "metadata": {"page_label": "612", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2bcbf4debdcf99c439c08207c84031ac72cae8dd678435d70723f4f4a856e8e4", "class_name": "RelatedNodeInfo"}}, "text": "advantage of using memory reference instructions to access I/O\nports. On the other hand, the port-mapped I/O addressing has the\nadvantage of not using any part of memory address space for I/O\nports; however, this advantage has diminished as memory address\nspace has increased over the years. For example, moder n computer\nsystems have main memory address space in GB, which is more\nthan enough to easily support memory -mapped I/O port addressing\nto access many I/O ports.\n9.4.1 I/O Ports\nFigure 9.10 illustrates an example of a simple memory -mapped I/O\nport with an input port and an output port. The port refers to\nboth the set of tri-state bu\ufb00ers that isolates an input data from the\ndata bus and to a paralle l-load register that holds an output value.\nIn the \ufb01gure, the parallel- load register, also called a bu\ufb00er, is built\nfrom positive-level latches.\nFIGURE 9.10  An illustration of an I/O port that includes an input port\nand an output port; the memory -mapped I/O port addr essing is\nassumed.\nFor the input port, a read cycle starts when processor places the\nport\u2019s address on the address bus and asserts the _as (addr ess\nstrobe) signal, as illustrat ed in Fig. 9.11 at time t 0. The _as signal,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1207, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1932c12c-6421-4434-a382-82e48619946d": {"__data__": {"id_": "1932c12c-6421-4434-a382-82e48619946d", "embedding": null, "metadata": {"page_label": "613", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b1382c47-43b1-486f-8f79-58779993f163", "node_type": "4", "metadata": {"page_label": "613", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "47aa190e01066937ada82543764440a9b65e94f9de8f9ed21154fd3e80883b3a", "class_name": "RelatedNodeInfo"}}, "text": "when asserted (_as = 0) by the processor, indicates the address\ncurrently on the address bus (AB) is valid. The _as = 0 enables the\naddress decoder in Fig. 9.10, which in turn asserts the sel signal at\ntime t 1 if the address on the address bus is the target port\naddress. A 1-0 _rd transition at time t 2 enables the tri-state\nbu\ufb00ers, causing the input  data to be placed on the data bus at time\nt 3. The pr ocessor inputs the data and deasserts _rd at time t 4. The\nread cycle ends when _as returns to 1 and makes sel = 0 at time t\n5.\nFIGURE 9.11  An illustration of an memory -mapped I/O input port\nread cycle fr om pr ocessor point of view; also may r equir e an ack\nhandshaking signal (not shown).\nAs illustrated  in Fig. 9.12 , an output port write cycle starts similar\nto reading an input port. The processor places the port address on\nthe address bus and asserts the _as signal. A 1-0 _wr transition\nresults in a 0-1 transition  at the output of the AND gate connected\nto the register in Fig. 9.10 if sel = 1. This causes the positive-level", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1048, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "111d76be-c792-4f39-a6d9-07f36b8e92c3": {"__data__": {"id_": "111d76be-c792-4f39-a6d9-07f36b8e92c3", "embedding": null, "metadata": {"page_label": "614", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fecb5b9d-ef87-4655-8aca-00b6ab50e016", "node_type": "4", "metadata": {"page_label": "614", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "fd1c65365065ce2192828246fba0aa698fec6baf723921359892e954407be4b8", "class_name": "RelatedNodeInfo"}}, "text": "parallel-load register (built using positive-level latches) to load the\ndata on the data bus at time t 1. A 0-1 _wr transition completes the\nwrite. The write cycle ends when _as returns to 1 at t 2 and makes\nsel = 0 at t 3.\nFIGURE 9.12  An illustration of an memory -mapped I/O output port\nwrite cycle fr om pr ocessor point of view; also may r equir e an ack\nhandshaking signal (not shown).\nA port- mapped I/O port reading or writing is similar, except that\nthe address decoder in Fig. 9.10 also inputs the contr ol bus signal\n_m (discussed earlier). Assuming an Acc-IS A processor, the \u201cLD\u201d\nand \u201cST\u201d instructions (discussed in Chap. 8) would also generate\n_m = 0 to access memory, and two new instructions , for example,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 722, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ff959260-1c5e-463c-9107-c5b20649b630": {"__data__": {"id_": "ff959260-1c5e-463c-9107-c5b20649b630", "embedding": null, "metadata": {"page_label": "615", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c248a63-bf2f-42ab-8ace-7f0ba7082233", "node_type": "4", "metadata": {"page_label": "615", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "dc35b90eb241973e113ef43fba94fbcdb47901b31a1fd4357e78c1c8c6e3dd08", "class_name": "RelatedNodeInfo"}}, "text": "\u201cIN\u201d and \u201cOUT,\u201d would generate _m = 1 to acces s port-mapp ed I/O\nports. With memory -mapp ed I/O ports, the _m signal is not needed,\nand the \u201cLD\u201d and \u201cST\u201d instructions would be used to address\nmemory as well as I/O ports.\nCon\ufb01gurable Ports\nAs illustrated in Fig. 9.13, a con\ufb01gurable I/O port also contains a\ndata direction register  (DDR) used for con\ufb01guring each bit in the\nI/O port either as a 1-bit input port or a 1-bit output port. Figure\n9.14 illustra tes the design detail for 1-bit con\ufb01gurable I/O port. The\nDDR.q0 = 0 con\ufb01gur es the bit d0 as a 1-bit input port by disabling\nthe tri-state bu\ufb00er 1. The tri-state bu\ufb00er 2 is enabl ed during a read\ncycle. The DDR.q0 = 1 con\ufb01gur es d0 as a 1-bit output port by\nenabling tri-state bu\ufb00er 1 and disabling tri-state bu\ufb00er 2.\nFIGURE 9.13  A block diagram for an 8-bit con\ufb01gurable port [ 3].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 842, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f6e84b64-e4c9-4280-aa9b-f6de74e2a7dd": {"__data__": {"id_": "f6e84b64-e4c9-4280-aa9b-f6de74e2a7dd", "embedding": null, "metadata": {"page_label": "616", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54bdba4b-44ba-463e-a593-0820957beecd", "node_type": "4", "metadata": {"page_label": "616", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "97c39bd41c59067b03083e2cec7b7cbadbdf702a7eb517ac6730dbf979c4a676", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 9.14  A detained cir cuit for a 1-bit con\ufb01gurable I/O port.\nFor example, if the content of DDR is 0x0F, it con\ufb01gur es the\nupper 4-bits of the I/O port in Fig. 9.13 as a 4-bit input port, and its\nlower 4-bits as a 4-bit output port. The content of the DDR may be\nread and dynamically modi\ufb01ed to recon\ufb01gur e the I/O port during\nsetup. The tri-state bu\ufb00er  3 is used when the content of the DDR is\nread.\nHowever, it is also possible to include, for e xample, a \u201ccommand\u201d\nport in a microcontr oller that would be used to con\ufb01gur e a set of I/O\nports with limited con\ufb01guration options but general enough to\nsupport the development of many DCIs and DCs.\nFigure 9.15 shows an example of a microcontr oller with three\ncon\ufb01gurable I/O ports 0, 3, and 4 and two multipu rpose I/O ports 1\nand 2. Ports 1 and 2 are not only con\ufb01gurable, but also have dual\nuse. In one application, the pins associated with ports 1 and 2 may\nbe used as con\ufb01gurable I/O ports, and in another  application, the\nsame pins may serve as data or contr ol signals.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1034, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "48403e61-3433-4b12-8e59-b3e247c8816f": {"__data__": {"id_": "48403e61-3433-4b12-8e59-b3e247c8816f", "embedding": null, "metadata": {"page_label": "617", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3f68b80f-f5b1-4268-827e-ead61caabce6", "node_type": "4", "metadata": {"page_label": "617", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4969bb77a3f7c87661f50f956ab30b58cb4facb3ccf36c258b12996540b9b82d", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 9.15  A micr ocontr oller ar chitectur e: pins connected to ports\n1 and 2 have dual use [ 3]; not all modules shown.\nA microcontr oller, as an embedded system, includes CPU, RAM,\nROMs, a set of I/O ports, one or more timer modules , an\ninterrupt controller , one or more data communication modules,\netc. A timer module is used when the microcon troller perfor ms\ncertain tasks periodically . The interrupt contr oller, which will be\ndiscussed later, is used to interrupt the microcontr oller when there\nis an e xternal event.\nThe electrically erasable programmable read-only memory\n(EEPROM) and \ufb02ash memory (organized as memo ry) are used for", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 649, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4430042c-11ca-4dc5-9da4-23cb09193c3d": {"__data__": {"id_": "4430042c-11ca-4dc5-9da4-23cb09193c3d", "embedding": null, "metadata": {"page_label": "618", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3297c95f-dd53-4b24-8f0c-c00da4e2ab93", "node_type": "4", "metadata": {"page_label": "618", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "33f9ca53804935a6d7bdd9ce42bcd8b5878d14e76bd1d2c06581ea10c94e66b9", "class_name": "RelatedNodeInfo"}}, "text": "\ufb01rmware , software stored inside an embedded device. The\nEEPROM is loaded with a bootloader program , and the \ufb02ash\nmemory is used to store a DC or DCI \ufb01rmwar e that can be updated\nby the system during setup. The RAM is used to store program data\nduring e xecution and/or stor e setup data. A timer module includes a\ncounter and is used to schedule events. For example, a timer\nmodule that uses a mod-12K counter and operates with a 12-MHz\nclock can be used to monitor the keyboar d hardware for keystr okes\nonce every 1 ms (12 K cycles / 12 M cycles/s \u2217 1000 ms/s = 1 ms).\nIn the \ufb01gure, the microcontr oller also includes three di\ufb00er ent\ndata communication modules to support various design\napplications. It includes a universal asynchr onous\nreceiver/transmitter (UAR T), serial peripheral interface (SPI), and a\nUSB port, all within a single chip. UART, SPI, and USB are three\ndi\ufb00er ent communication pr otocols used with I/O devices.\nIn general, not all the resources in a microcontr oller are expected\nto be used in a single application, and thus some of the modules\nmay share the same I/O pins. For example, in the \ufb01gure, the pins\nfrom ports 1 and 2 could be used as the receive (Rx) and transmit\n(Tx) signals by UART module; as the master in slave out (MISO),\nmaster out slave in (MOSI), serial clock (SCK), and slave select (SS)\nsignals by the SPI module ; or the interrupt 0 (INT0 ) and interrupt 1\n(INT1) signals by the inter rupt contr oller.\nFigure 9.16 illustr ates a keyboar d DC operating a key matrix .\nEach row-colu mn intersection in the key matrix identi\ufb01es a key. The\nDC scans the matrix by activating the 20 column signals, for\nexample, setting each to 0 one at a time using Ports 0, 1, and 3, as\nillustrated in the \ufb01gure, and reading the 8-bit row signals using Port\n2. Each time a key is pressed, it creates a contact between a\ncolumn wire and a row wire, making the corresponding row signal 0\nif and only if its cor responding column signal is also 0; the other r ow\nsignals remain at 1. A key is consider ed released when its row\nsignal returns to 1. The DC generates a code, referred to as a make\ncode , when  a key is pressed and a contact is made, and a break\ncode  when the k ey is r eleased and the contact is br oken.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2247, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c2080bc-0e2b-4956-8658-52f201d3b885": {"__data__": {"id_": "6c2080bc-0e2b-4956-8658-52f201d3b885", "embedding": null, "metadata": {"page_label": "619", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ad9e0bd3-20e5-42ff-86a1-7256963b9cdb", "node_type": "4", "metadata": {"page_label": "619", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "05e0f5be3c70fd924b5dfde91be7b20bad3ba3d50eb5f68bae8744a45253ae6a", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 9.16  Illustrating a k eyboar d device contr oller operating a\nkey matrix; not all micr ocontr oller modules shown.\nThere are three standar ds for keyboar d scan codes, known as\nscan code  set 1, set 2, and set 3. For example, using the scan\ncode set 2, the data sequence 0xE012, 0xE01C,  0xE0F01C, and\n0xE0F012 indicate capital letter A. The code 0xE012 is the make\ncode for the SHIFT key, 0xE0IC  is the make code for the a key,\n0xE0F012 is the break code for the a key, and \ufb01nally 0xE0F012 is\nthe break code for the SHIFT key. A key may also be held down to\nhave its make code repeated every so often. The keyboar d DC is\ninitialized with a key repetition rate that deter mines how often a\nmake code is generated if a k ey is held down.\nThe make and break codes for all the keys, including CTRL, ALT,\netc., are transmitted via a DCI and stored in mem ory. The code is\nthen converted, for example, to an ASCII code by a basic\ninput/output system (BIOS) r outine for use by application pr ograms.\nThe keyboar d DC also receives instructions through the keyboar d\nDCI. For example, the DC receives a key repetition rate during\ninitialization, or a command to turn on the Caps- On light-emitting\ndiode (LED), if any, when the CAPS-L OCK key is pr essed.\nPorts with Status Bits", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1282, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5537d7f9-6a19-47b1-b361-e8031cb0fa93": {"__data__": {"id_": "5537d7f9-6a19-47b1-b361-e8031cb0fa93", "embedding": null, "metadata": {"page_label": "620", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2d09ec18-2c77-4acc-b7cd-61079b7a9185", "node_type": "4", "metadata": {"page_label": "620", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "42dd4c072310510f4eaabbc158f55fecbf51cb3b79aff026bd90c2bf4bb07972", "class_name": "RelatedNodeInfo"}}, "text": "The I/O port shown in Fig. 9.10  is an example of an I/O port with no\nstatus bits. There is no way to know when input data is available to\nbe read or when the output data has been read. I/O ports with no\nstatus bits are used in the design of a DC that directly contr ols the\ndevice hardwar e, such as those shown in Fig. 9.16 for contr olling\nthe k ey matrix.\nOn the other  hand, I/O ports that are used in the design of a DCI\nrequir e status bits to indicate when input data is available to be\nread or when output data has been read by the devic e. For\ninstance, when communi cating with a printer DCI, when the next\nprint data should be sent to the printer DCI depe nds on how fast\nthe printer is able to print the data it has already received. The next\nprint data should be sent to the printer DCI when the DCI has\nalready sent the previous data to the printer DC and the DCI\nindicates it is r eady to r eceive the ne xt print data.\nOther examples are the keyboar d DCI indicating the availability\nof a new scan code it has received from the keyboar d DC, a DMA\ncontr oller indicating the completion of a data transfer between\nmain memory and a disk drive DCI or a network adapter DCI, etc.\nAn application example of I/O ports with statu s bits will be\ndiscussed in the next section, but \ufb01rst, there are three di\ufb00er ent\nmechanisms to transfer data to/from a DCI, one of which is DMA\ntransfer, which was brie\ufb02y discussed earlier .\n\u00a0\n9.5 Data Transfer Mechanisms\nData communication with a DCI is either done directly by a\nprocessor or directly by a DMA contr oller. Further more, even when a\nprocessor is directly communicating with a DCI to transfer data, the\ndata is actually in main memory . The processor inputs data from a\nDCI and then writes it to memory, or the processor reads data from\nthe memory and then outputs it to the DCI. Interrupt-driven  and\nprogrammed I/O are two data transfer mechanisms that directly\ninvolve the pr ocessor .\n9.5.1 Interrupt-Driven Transfer", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1979, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "10d91382-60e3-45ce-9f75-7ee6510a8a12": {"__data__": {"id_": "10d91382-60e3-45ce-9f75-7ee6510a8a12", "embedding": null, "metadata": {"page_label": "621", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2def759f-7a43-4c2d-a5f7-1de7241c28c6", "node_type": "4", "metadata": {"page_label": "621", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "53245c56d74dfb8132cb7d8ca70ff7668ac17094a9602bed0991ced9672f3598", "class_name": "RelatedNodeInfo"}}, "text": "An interrupt-driven transfer, also known as interrupt-driven I/O,\nis used when a device causes an interruption. The execution of a\ncurrently running program stops, and the processor invok es an\ninterrupt handler (IH), also called an interrupt service routine. When\nthe IH executes, it trans fers data between the device and main\nmemory . Because the processor is executing the IH, it is directly\ninvolved in the transfer of data between the device and memory .\nAn interrupt structure  (discussed in Sec. 9.6) is used to assign\neach device an interrupt priority in case multiple devices wish to\ninterrupt the processor . Some devices, such as the keyboar d, have\na lower interrupt priority than, say, a disk drive.  If there are too\nmany device s in the system, service for some devices could be\ndelayed.\nIn order to illustrate interrupt-driven transfer and application of\nI/O ports with status bits, consider a legacy keyboar d DCI shown in\nFig. 9.17 . In the \ufb01gure, the DCI has two I/O ports, labeled port-0 and\nport-1. Howe ver, because both the processor and the DCI access\nthese ports, an input port that the processor inputs data from is\nalso an output port for the DCI. Likewise, an output port that the\nprocessor writes to is also an input port for the DCI. Two registers\nare associated with each port address, one as an input port and one\nas an output port.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1365, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7191a264-352b-4042-a71f-81ed889a9759": {"__data__": {"id_": "7191a264-352b-4042-a71f-81ed889a9759", "embedding": null, "metadata": {"page_label": "622", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "401dcaab-930c-4884-a09c-15310af427cb", "node_type": "4", "metadata": {"page_label": "622", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1e216d515e05858198318843dd0efd2899710d52881611692e07632292cebce7", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 9.17  A keyboar d DCI (device contr oller interface) to\nillustrate I/O port accessing and inter rupt driven transfer; not all\nsignal and data path modules ar e shown; ports ar e shown labeled\nfrom DCI point of view .\nIn the \ufb01gure, the registers are labeled \u201cScancode,\u201d \u201cData,\u201d\n\u201cStatus,\u201d and \u201c Command.\u201d Table 9.3  lists the input and output ports\nfrom both the processor and the keyboar d device DCI point of view.\nThe ports, however, are labeled from the keyboar d DCI point of\nview in the \ufb01gur e.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 505, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2db54de0-e99b-46aa-8448-4e05133b610a": {"__data__": {"id_": "2db54de0-e99b-46aa-8448-4e05133b610a", "embedding": null, "metadata": {"page_label": "623", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7a41ef9-a50d-428e-8ffc-f079a7c4f162", "node_type": "4", "metadata": {"page_label": "623", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d7bf5230ba7ae5493f08fe9f3e4f0b7393e8bede2fd87dc9a3ecc26ca649777c", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  9.3 How Ports Are Viewed by the Processor and Device Contr oller Interface in Fig.\n9.17\nThe processo r can read the \u201cStatus\u201d port, which contains the\nstatus bits for the remaini ng ports, at any time. The input bu\ufb00er full\n(IBF) status bit (or active-high signal ibf) and output bu\ufb00er full\n(OBF) status bit (or active-low signal _obf) indicate the status of the\nother three ports. When _obf = 0 (full), it indicates a scan code is\nloaded into the \u201cScancod e\u201d register for the processor to access.\nWhen ibf = 1 (full), it indicates that there is data from the processor\navailable in the \u201cData\u201d or in the \u201cCommand\u201d port for the keyboar d\nDCI to access.\nA keyboar d driver routine  must \ufb01rst con\ufb01gur e the DCI for either\ninterrupt-driven or programmed data transfer . The driver routine\nexecuted by the processo r writes a con\ufb01guration command in the\n\u201cCommand\u201d register initiating the con\ufb01guration of the DCI. Upon\nreceiving the command, the DCI starts the execution of a\ncon\ufb01guration program. The driver then writes con\ufb01guration data in\nthe \u201cData\u201d register . The con\ufb01guration program reads the data and\nstores it in a \u201ccon\ufb01guration bu\ufb00er \u201d within the DCI.\nFor example, to illustrate  how the I/O ports are accessed, the\nfollowing program code is used to check the IBF bit, and if the bit is\n0 (i.e., ibf = 0), a value as con\ufb01guration command is stored in the\n\u201cCommand\u201d register . The program code is written using instructions\nfrom an A cc-IS A, discussed in Chap. 8 .\nKeyboar d Driver Routine Polls the \u201cStatus\u201d Port and then Outputs to\nthe \u201c Command\u201d P ort:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1563, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f89aa799-a5de-41e2-8240-b3465ece5a4e": {"__data__": {"id_": "f89aa799-a5de-41e2-8240-b3465ece5a4e", "embedding": null, "metadata": {"page_label": "624", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "450295e0-9905-4c99-b8e7-2288c4f4d90e", "node_type": "4", "metadata": {"page_label": "624", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7b36c54330e7099cdf722fc8ee19d1a7c53a024c4a15866a4793f9b9ae57942a", "class_name": "RelatedNodeInfo"}}, "text": "For interrupt-driven transfer, con\ufb01guration data must set the OBF\ninterrupt enable (INTE) bit in the \u201ccon\ufb01guration bu\ufb00er .\u201d The\ninterrupt request (INTR) bit (signal intr) is used to trigger an\ninterruption if INTE is enabled. That is, for an OBF interruption, the\nintr becomes 1 (active) when we have both _obf = 0, which\nindicates the \u201cScancode\u201d port is full, and inte = 1, which indicates\ninterrupt-driven data transfer .\nAs soon as a key is pressed (Fig. 9.16), the keyboa rd DC sends a\nscan code to the keyboa rd DCI, which writes it to the \u201cScancode\u201d\nregister setting the OBF bit (_obf = 0). This asserts the interrupt\nrequest signal intr making it 1 if inte = 1. The intr = 1 noti\ufb01es the\nprocessor, which invok es the keyboar d IH, a routine. The handler\nthen reads and stores the scan code in the main memory . Because\nthis is an interrupt-driven transfer, the IH does not need to poll the\nOBF status bit; the intr = 1 is an indication that the \u201cScancode\u201d\nbu\ufb00er is full. When an input port read cycle starts (see Fig. 9.11), a\n1-0 _rd transition clears the INTR bit, making intr = 0. When the\nprocessor reads the scan code in the \u201cScancode\u201d bu\ufb00er, a 0-1 _rd\ntransition clears the OBF bit, making _obf = 1, which indicates the\nbu\ufb00er is now empty . The DCI can now write another scan code in\nthe \u201cScancode\u201d bu\ufb00er .\n9.5.2 Programmed Transfer\nThe programmed transfer, also known as programmed I/O, is not\ninterrupt driven; instead, the processor periodic ally executes a\npolling program, trigger ed by a timer module, and checks the I/O", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1539, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dafb7ed2-80e9-4c3e-a2bb-5f84eac6ec22": {"__data__": {"id_": "dafb7ed2-80e9-4c3e-a2bb-5f84eac6ec22", "embedding": null, "metadata": {"page_label": "625", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d911535d-460b-4129-83bb-6dbebb4ad8fe", "node_type": "4", "metadata": {"page_label": "625", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f40fa2f98d0581ba6ac740bc107fb791badad13e7ad54eacad14904d35336215", "class_name": "RelatedNodeInfo"}}, "text": "port status bits in each DCI to deter mine if any device requir es a\nservice. The polling is done in some priority order. The following\nprogram illustrates a programmed transfer wher e it checks the OBF\nand IBF \ufb02ags of each device. The program either inputs from the\nport if ibf = 1 (input bu\ufb00er full) or outputs to the port if _obf = 1\n(output bu\ufb00e r is empty). In the program, this is shown for keyboar d\nPort 0 in Fig. 9.17. Program code sections for other devices are\nlabeled DCI_X, DCI_Y, etc.\nA Polling P rogram F or Implementing P rogrammed I/O :\nIn this case, the processor not only is involved in the actual\ntransfer of data between  the devices and memory, but also is\ndirectly involved in the frequent polling of each device. A", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 738, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f31bebd2-944f-46cc-8b38-26311caa5a6d": {"__data__": {"id_": "f31bebd2-944f-46cc-8b38-26311caa5a6d", "embedding": null, "metadata": {"page_label": "626", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f36c8323-9ce7-4b62-bd89-8dc796fd332c", "node_type": "4", "metadata": {"page_label": "626", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "06c1a76778cac15f2c787f432d9f8a6a1a970c67e6f0c02eff43576bc0277485", "class_name": "RelatedNodeInfo"}}, "text": "programmed transfer is only e\ufb03cient when there are a large\nnumber of devices in the system. For example , when using a\ncomputer to monitor many sensors in a factory, if interrupt-driven\nI/O is used, this would cause frequent processor interruption. At the\nsame time, a programmed transfer wastes valuable processor time.\nHowever, programmed transfer can be o\ufb04oaded and perfor med by\na host contr oller interface , such as a USB host contr oller interface,\nwhich would inter rupt the pr ocessor when it needs services.\nFor example, consider a moder n personal computer system with\nseveral di\ufb00er ent types of USB peripheral devices, such as digital\nspeak ers, digital phone, digital camera, digital fax machine,\nremovable \ufb02ash memory,  etc., as illustrated in Fig. 9.18. The list of\nUSB interfaced devices is growing every day. Currently, a single\nUSB host contr oller interface can poll 127 USB devices.\nFIGURE 9.18  A moder n personal computer with several connected\nUSB devices [ 4].\nA USB host contr oller communicates with each device using\npack ets, which is a collection of several data \ufb01elds, each\ncontaining a piece of information. Figure 9.19 illustrates one way\nthe USB devices in Fig. 9.18 may be interfaced with a single USB", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1235, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "441a75e6-d042-4423-ba49-94fc087ee9b0": {"__data__": {"id_": "441a75e6-d042-4423-ba49-94fc087ee9b0", "embedding": null, "metadata": {"page_label": "627", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "22bf24d7-b8ab-4660-a2db-0c80a883f6e0", "node_type": "4", "metadata": {"page_label": "627", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "357f0beb9fc037c16645f3c0ba0ec3e2dda3c21ec2350d0c35189d0538ca3798", "class_name": "RelatedNodeInfo"}}, "text": "host controller interface that includes a root hub with three ports.\nAlso, as illustrated, USB hubs in the printer are used to interface\nwith USB speak ers and a USB fax machine, and the hubs in the\nkeyboar d are used to interface a \ufb02ash memory and the mouse.\nFIGURE 9.19  USB device connections to a single USB host contr oller\ninterface with thr ee root hubs.\nThe services  requir ed by all the connected USB devices are\nclassi\ufb01ed into four priority packet classes, as outlined in Table 9.4.\nPeriodically, packets for all the connected devices are made into a\nframe and communicated serially from a USB host contr oller\ninterface and through a USB root hub, USB hubs, and USB ports and\nUSB cables to the USB devices; or vice versa from the USB ports\nand USB cables, through USB hubs and a USB root hub, to the USB\nhost contr oller interface.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 843, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "360a489c-e4f5-41f3-9cd7-0efdcbec93f4": {"__data__": {"id_": "360a489c-e4f5-41f3-9cd7-0efdcbec93f4", "embedding": null, "metadata": {"page_label": "628", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ae750d6-e0ff-45ed-a316-6ad98edb5ed0", "node_type": "4", "metadata": {"page_label": "628", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7e8a9db4152ac0d25746e86a7b6766d201fbbc59f3c996e4fb764b6e2e376b2a", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  9.4 Four P acket Classes Used with USB Devices\nFrame comm unication is frequent enough (e.g., every few\nmicroseconds) to captur e all the pending interrupt requests for\ntimely service of devices that requir e interrupt driven I/O, such as\nkeyboar d and mouse, and also transfer data to/from real-time\nperipheral devices, such as digital speak ers and phones, that\nrequir e real-time data communication. A bulk packet is used to\ncommunicate with slower devices such as a printer . A contr ol\npacket is used to poll the USB hubs as devices are connected and\ndisconnected.\nWhile a host contr oller can communicate with several devices at\nthe same time, the basic operations requir ed to communicate with\neach device are still the same. Each packet sent by the host\ncontr oller to each device must contain an I/O port address and the\ntype of service as either  reading or writing the port. For a read\npacket, the device sends a response packet containing the device\ndata (e.g., scan codes) back to the host contr oller, which stores the\ndata in the main memory . For a write packet, the host contr oller\nmust \ufb01rst access device  data (e.g., print data) from the main\nmemory and send the data to the device.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1209, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c91239bd-8a46-4469-9f75-363d4973c982": {"__data__": {"id_": "c91239bd-8a46-4469-9f75-363d4973c982", "embedding": null, "metadata": {"page_label": "629", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "588205ae-9ffb-43fe-9add-30d034640b97", "node_type": "4", "metadata": {"page_label": "629", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "09498cb70836e1d0f3e5a4a3ac5a4bd28527f4d04dd025ac26e44d049848c9dd", "class_name": "RelatedNodeInfo"}}, "text": "Because the size of the data communicated between a host\ncontr oller and a device is in the order of many bytes at a time, both\nthe host contr oller and the DCI of each device contain memory as\nbu\ufb00er space to temporarily store the received or transmitted data.\nA USB host contr oller interface is described in more detail in Sec.\n9.7.\n9.5.3 DMA Transfer\nInterrupt-driven or programmed transfer is e\ufb03cient if data\ntransfer red between devices and memory is small (a few bytes). For\ndevices such as disk drives that requir e large (e.g., 4 KB) data\ntransfers to/from memory , a DMA transfer, which does not involve\nthe processor in the actual transfer of data, is more e\ufb03cient. In\norder to illustrate a DMA transfer, consider the simple system\norganization shown in Fig. 9.20 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 775, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "43323f28-ea2d-482b-8af2-ac465a90828a": {"__data__": {"id_": "43323f28-ea2d-482b-8af2-ac465a90828a", "embedding": null, "metadata": {"page_label": "630", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4e1e1247-74bb-4bc8-b245-3d58b479ffa2", "node_type": "4", "metadata": {"page_label": "630", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b0be14f47646af4776ae80108e72158eadb52f3c1ffcbbc9e8f156ecef362ea0", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 9.20  A simple DMA contr oller to illustrate DMA transfer;\nassumed memory -mapped I/O ports.\nBoth the processor and the DMA contr oller need to access the\nmemory . In general, a module, known as an arbitrator , is needed\nto grant access to the shared bus. However, in a simple system\norganization like the one shown in the \ufb01gure, often, the processor is\nalso the arbitrator . The following steps e xplain a DMA transfer :\n1. The operating system (OS), via the pr ocessor, initiates a\nDMA transfer by \ufb01rst writing the I/O ports of both the DMA\ncontr oller and the DCI. Speci\ufb01cally, the pr ocessor (via a device\ndriver) writes the memory addr ess register (MAR) port with a\nstarting memory addr ess and the byte count r egister (B CR)\nport with a number of bytes to be transfer red. The pr ocessor", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 802, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a5d60bb0-6328-48fb-873d-a314663d1c9a": {"__data__": {"id_": "a5d60bb0-6328-48fb-873d-a314663d1c9a", "embedding": null, "metadata": {"page_label": "631", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "15956934-3793-48b6-9bc1-a63aa64ce66e", "node_type": "4", "metadata": {"page_label": "631", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a4323c1e91fe4e7cb0a72b621ab5cd31af2a3e5982f61c122a0e8556f62a5ec7", "class_name": "RelatedNodeInfo"}}, "text": "also writes the con\ufb01guration r egister (CR) port to indicate both\nthe dir ection of data transfer (to or fr om memory) and type of\nDMA as either continuous \u2014for e xample, when starting up a\ncomputer\u2014or noncontinuous \u2014for example, during nor mal\nsystem operation when the pr ocessor also needs to use the bus\nbetween each DMA transfer to/fr om memory . The pr ocessor\nalso writes to the I/O ports in the, for e xample, disk DCI to\ncon\ufb01gur e the disk for a r ead or write operation. Once both\ncontr ollers ar e programmed, the pr ocessor starts the DMA\ntransfer by writing and setting a \u201cstart\u201d bit in the disk DCI.\n2. The disk DCI communicates with both the disk DC, which\ncontr ols the actual har dwar e of the disk, and DMA contr oller to\ncomplete data transfer to/fr om memory . Assuming that the\ndirection of a DMA transfer is fr om the device to memory, the\nDCI \ufb01rst stor es the device data in its inter nal memory (r efer to\nthe Samsung disk drive in Example 9.1 ), and then it asserts the\nDMA r equest ( reqDMA) signal r equesting a DMA transfer . The\nDMA contr oller, in tur n, asserts the bus r equest ( br) signal\nrequesting the pr ocessor to r elease the bus. The pr ocessor,\nupon completing its cur rent bus cycle (if any), r eleases the bus\nand asserts the bus grant ( bg) signal, which grants the bus to\nthe DMA contr oller. The bus is r eleased when the pr ocessor\ndisables all its bus-connecting tri-state bu\ufb00ers. Upon r eceiving\nthe asserted signal bg, the DMA contr oller becomes a bus\nmaster  and thus is now able to initiate a memory write cycle.\nA DMA memory r ead cycle is similarly perfor med, e xcept that\ndata is transfer red from memory to the DCI, and then fr om\nthere the data is sent to the DC.\n3. As a bus master, the DMA contr oller starts a memory write\ncycle using the content of MAR as the ne xt memory addr ess. It\nalso asserts the DMA acknowledge ( ackDMA) signal for the DCI\nto place the data on the data bus. MAR is incr emented and B CR\nis decr emented af ter each bus transfer . For a memory r ead\ncycle, the ackDMA is asserted when the memory data is on the\nbus (e.g., Fig. 9.7 ) and is r eady to be transfer red to disk DCI.\n4. Once the DMA contr oller completes one transfer, it does\none of two things: it either transfers the ne xt data item\n(repeating step 3) if the transfer type is continuous, or it", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2345, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d4b634ad-4fce-41a2-b33c-d0b5782dc502": {"__data__": {"id_": "d4b634ad-4fce-41a2-b33c-d0b5782dc502", "embedding": null, "metadata": {"page_label": "632", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a5d221-9b02-4ea5-8779-124c392f208e", "node_type": "4", "metadata": {"page_label": "632", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f6c9f1868cbff1dfeb3955cf1d1384c209d34faedb40c34aea349050b15d1471", "class_name": "RelatedNodeInfo"}}, "text": "releases the bus if the transfer type is noncontinuous. The bus\nis released when the DMA contr oller deasserts br. Another DMA\ntransfer can begin starting at step 2. Once all the data bytes\nare transfer red and B CR becomes zer o, the DMA contr oller\ninterrupts the pr ocessor to initiate another DMA transfer if\nneeded.\nA moder n DMA contr oller, however, may provide service to\nmultiple devices by implementing multiple DMA channels , each\nequipped with its own I/O ports that can be con\ufb01g ured to service a\ndi\ufb00er ent device. A moder n DMA contr oller may also include ports to\nminimize its communication with the processor and improve\nperfor mance. For example, instead of requiring a processor to\ninitiate a DMA transfer each time, the processor  creates a DMA\ntransfer table  (or a linked list) in memo ry and passes its address\nto the DMA contr oller. Each of the table entries contains the\ninformation necessary to initiate a separate DMA transfer . When\none transfer is completed, the DMA contr oller automatically fetches\nthe information for the next DMA transfer from memory without\ninterrupting the processor . The DMA contr oller only interrupts the\nprocessor when it has pr ocessed the entir e table.\nAlternatively, with some moder n DMA contr ollers,  the processor\nmay also con\ufb01gur e the contr oller to interrupt each time it has\nprocessed several DMA transfers. In this case, the processor is able\nto check the status and update the transfer table, for example, by\nadding mor e DMA transfers, if necessary .\nA moder n multichannel DMA contr oller may also need to operate\ndi\ufb00er ently if it is used to transfer data between two memory units\n(i.e., memory -memory DMA). A memory read cycle from one unit\nmay be followed by a memory write cycle to another unit. Finally,\neach device may include its own dedicated DMA contr oller instead\nof sharing a multichannel  DMA contr oller. In this case, several DMA\ncontr ollers would compete to communicate with the main memory .\nAs we will see in Sec. 9.8 , a USB host contr oller interface contains\ntwo DMA contr ollers. The contr oller uses one DMA contr oller to\ntransfer data between the host interface and the main memory,\nand a second DMA contr oller is used to transfer data between the\nhost interface and each of the connecting devices.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2300, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "639a3fd4-8897-48fb-9e54-76f3087d26bc": {"__data__": {"id_": "639a3fd4-8897-48fb-9e54-76f3087d26bc", "embedding": null, "metadata": {"page_label": "633", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ea36e0a-80b8-46ed-b8f5-a722bd40e229", "node_type": "4", "metadata": {"page_label": "633", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3587959b5a26af606a75545791747be7d0ea9fbb689694a220d4f39ac17227c3", "class_name": "RelatedNodeInfo"}}, "text": "9.6 Interrupts\nInterruptions are typically classi\ufb01ed into hardware interrupts ,\ncaused by hardwar e modules internal or external to the processor,\nand software interrupts , caused by executing  a special\ninstruction, such as \u201cINT\u201d that invok es a system-level routine.\nInternal hardwar e interrupts, also sometimes called synchronous\ninterrupts , exceptions , or traps , are due to an error, such as\narithmetic over\ufb02ow, divide by zero, or invalid op-code, that occurs\nwithin the CPU data path. They are called traps because they are\ninstruction dependent. If the execution of a program results, for\nexample, in an arithmetic over\ufb02ow at a speci\ufb01c instruction\u2014an\n\u201cADD\u201d instruc tion at memory address X\u2014the over\ufb02ow will occur at\nexactly same instruction no matter how many times one runs the\nprogram (assuming that interruption on arithmetic over\ufb02ow is\nenabled and input to the pr ogram is the same).\nOther internal hardwar e interruptions, however,  may not be\nsynchr onous. For example, consider a multiprogramming\nexecution environment  where programs are often too big to \ufb01t in\nthe main memory . This creates a scenario in which a target\ninstruction or data is not in main memory during the execution of a\nprogram. This results in an interruption, commonly known as a\npage fault . The program code or data page (e.g., 4 KB) must be\ncopied on demand from a disk drive to main mem ory using a DMA\ntransfer befor e the execution of the program can resume. The\ntiming of the page fault may not be synchr onou s as pages from\ndi\ufb00er ent programs move in and out of memory . Page faults will be\ndiscussed further in Chap. 10 .\n[In a multipr ogramming execution envir onment, interruption of\nany kind stops the execution of the currently running program\n(called a process). In the case of a page fault interruption, the OS\ninitiates a disk-to -memory DMA transfer and places the ID of the\ninterrupted process (e.g., process-1) in a wait queue . While the\npage is being transfe rred, the OS starts or resumes the execution of\nanother process. When the DMA transfer completes, the DMA\ncontr oller interrupts the currently executing process (e.g., process-\n2), returning contr ol to OS, which then moves the process-1 ID from\nthe wait queue and places it in a ready -to-execute queue called a\nready queue .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2296, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b000af35-4c8c-4c41-b4fd-fc2c25e13be0": {"__data__": {"id_": "b000af35-4c8c-4c41-b4fd-fc2c25e13be0", "embedding": null, "metadata": {"page_label": "634", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2c82261c-8143-47b5-b083-4e64c589b417", "node_type": "4", "metadata": {"page_label": "634", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "937f4a155b9d75c7e51cfec33e91832009aef39705dcbf5cbdf46d80aa9811c6", "class_name": "RelatedNodeInfo"}}, "text": "Processes (including process-1) that are in the ready queue take\nturns and execute for a fraction of processor time called a time\nslice . A timer module contr ols the duration of the time slice and\ncauses an interruption when the current time slice expires. Each\nprocess may use one or more time slices to complete execution.\nUpon a time slice interruption, the OS places  the ID of the\ninterrupted process on the ready queue and assig ns the processor\nto the process with its ID at the head of the queue. Process-1 (like\nother processes in the ready queue) resumes execution when its\nturn arrives and continues executing until there is another\ninterruption, including another page fault, a time slice interruption,\netc.]\nHardwar e interrupts, such as a DMA interrupt and a DCI interrupt,\nthat are not internal to the processor, are called asynchronous\ninterrupts . These interrupts can happen at random and at any\ntime during the executio n of an arbitrary program. For example,\nwhen a system uses interrupt-driven I/O to servic e the mouse or\nkeyboar d, the exact moment when mouse is moved or a key is\npressed is not known.\nThe Intel \u201cINT\u201d and the ARM \u201cSWI\u201d are two examp les of software\ninterrupt instructions. Software interrupts are always synchr onous,\nand they are used for many purposes, including allowing programs\nto take turn and access shared resour ces, such as a disk drive for\nreading and writing \ufb01les. Here, we use the term interrupts to mean\nall types of inter rupts.\n9.6.1 Handling Interruptions\nFigure 9.21 illustrates the di\ufb00er ence  between invoking a hardwar e\ninterrupt handling (IH) routine and a subroutine call (i.e., function,\nprocedur e, or method). A subroutine is called by another routine\nwhen the routine executes a jump/branch subroutine instruction,\nsuch as \u201cJSUB sort,\u201d that includes the starting address of subroutine\nsort. The starting and ending addresses of subroutine or an IH are\nlabeled B and C in the \ufb01gure. Because an instruction starts the\nexecution of a subroutine , the call is illustrated, by solid arrows in\nFig. 9.21(a), from A to B and subroutine return from C to D. After\nexecuting a subroutine, contr ol is returned to the calling routine\nwher e its e xecution r esumes starting at addr ess D.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2247, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e7e9909c-a677-4557-9b65-820e70adc961": {"__data__": {"id_": "e7e9909c-a677-4557-9b65-820e70adc961", "embedding": null, "metadata": {"page_label": "635", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "055319b2-f77c-4052-a4a9-ea020923e7df", "node_type": "4", "metadata": {"page_label": "635", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3eaf8355c2196947896d7e5afcffd2c602ad97bb7042522ee2e6091187a059cb", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 9.21  An illustration of subr outine call verses inter rupt\nhandler (IH); solid ar rows verses dashed ar rows.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 117, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c759e932-fdc0-4db4-8281-e73ac57b186b": {"__data__": {"id_": "c759e932-fdc0-4db4-8281-e73ac57b186b", "embedding": null, "metadata": {"page_label": "636", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c829bcd7-0bf8-4a06-91db-3daf3a884eba", "node_type": "4", "metadata": {"page_label": "636", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "cfcbe8793801e7e6410e2fb4116cf0cdfab241a1b51c8ed73439552016f9f294", "class_name": "RelatedNodeInfo"}}, "text": "The execution of a hardwar e IH, on the other hand, is not started\nby an instruction; thus, this is illustrated using dashed arrows in Fig.\n9.21(b). In this case, the CPU must \ufb01rst \ufb01nd out the cause of\ninterruption and from that it deter mines which IH to invok e. For\nexample, if the cause of the interruption is because the mouse was\nmoved, the mouse IH is invok ed.\nAfter executing a current instruction, the CPU checks for pending\nrequests for interruptions , such as checking whether or not the intr\nsignal in Fig. 9.17 is asserted. For example, if the CPU \ufb01nds the intr\nsignal associated with the mouse is asserted, the CPU invok es the\nmouse IH. The IH then communicates with the mouse DCI,\naccessing its ports to input the mouse displacement information,\nwhich the IH uses to move the cursor on the scr een.\nThe software interruption handlers are typically number ed with\ninteger numbers. For example, Pentium instruction \u201cINT 3,\u201d which\nstands for breakpoint exception, is used by debugger tools to\ncreate breakpoints in a program during testing [5]. When the\nprogram execution reaches a breakpoint, the IH is invok ed that\nbreaks the e xecution of the pr ogram under test.\nWhen an IH is invok ed or a subroutine call is made, the state of\nCPU, for example, the contents of ACC, X, SR, and program pointer\n(PP) in Fig. 8.7 (Chap. 8) are saved within CPU or typically in main\nmemory by the IH or subroutine. The saved state is restor ed when\nthe executio n of the IH or subroutine complete s and contr ol is\nreturned to the interrupted or calling routine. The saved PP is called\na return address  or a return program pointer (RPP). In the \ufb01gures,\nthe RPP for a subroutine call would be address D, and for an IH, it\nwould be either addr ess A or D, as discussed ne xt.\nPrecise Interruption\nA precise interruption refers to a set of rules that must be carried\nout by CPU, depending  on the cause of an interruption. The\nfollowing is a list of rules applied for a pr ecise inter ruption:\n1. All the instructions prior to the RPP must have been\nexecuted and have modi\ufb01ed the state of CPU.\n2. All the instructions starting at the RPP must not have been\nexecuted.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2164, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91752d62-abf1-4a0a-adda-c150916f2d88": {"__data__": {"id_": "91752d62-abf1-4a0a-adda-c150916f2d88", "embedding": null, "metadata": {"page_label": "637", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2f25975e-2093-49f4-b680-7adaa169f22b", "node_type": "4", "metadata": {"page_label": "637", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b6dad135aecacf8d3dd11c45f34ca7c73786eca6133e31621d178ad621623b5f", "class_name": "RelatedNodeInfo"}}, "text": "3. If the inter ruption is due to a synchr onous event, e xcept\nfor sof tware inter rupts, the RPP must point to the instruction\nthat caused the e xception. In addition, if the e xception is raised\nby the e xecution unit, such as arithmetic over\ufb02ow, the r esult of\nthe e xecution may not change the pr ocessor state. F or\nexample, the content of the A CC register in Fig. 8.7  (Chap. 8 )\nshould not change if an \u201c ADD\u201d instruction causes arithmetic\nover\ufb02ow, so the content of A CC can be analyzed by the\ncorresponding IH .\n4. If the inter ruption is due to an asynchr onous (e xternal)\nevent or sof tware inter rupt, the RPP must point to the ne xt\ninstruction.\nIf the CPU data path is single-cycle, the checking for interruption\nis performed during the execution of a current instruction, as will be\nillustrated in Sec. 9.7. If the CPU data path is multicycle, the\nchecking for interruption  is perfor med during the last data path\noperation required to retire each instruction. If the CPU data path is\npipelined, the checking for interruption is perfor med in the write-\nback stage, wher e it indicates the execution of the instruction is\ncomplete and the instruction is about to r etire.\nA precise interruption in a pipelined CPU is more comple x than a\nsingle-cycle or multicycle data path. Multiple interrupt requests\nmay be generated at the same time as stages are operating\nconcur rently in the pipel ine. In this case, the instruction address\n(i.e., the content of PP) is also forwar ded fr om the fetch stage to the\ndecode stage along with the fetched instruction. The instruction\naddress and any interrupt request generated in each stage are\nforwar ded from one stage to the next until they reach the write-\nback stage.\nUpon an interruption, the RPP is saved internally in a register as\npart of the CPU state that is saved in main memo ry, and the PP is\nchanged to execute an IH. If the CPU data path is pipelined, this will\nalso cause a pipeline \ufb02ush. Note that the registers would not be\nclear ed and would be left as is so they can be saved in main\nmemory by the IH. As was discussed earlier, the state may also be\nsaved internally within CPU (see Exercises section). The details of a\nprecise inter ruption in a pipelined CPU ar e referred to elsewher e.\nVectored Interrupts", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2287, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9016eb45-5b73-4920-b8a3-c48ef02b42ea": {"__data__": {"id_": "9016eb45-5b73-4920-b8a3-c48ef02b42ea", "embedding": null, "metadata": {"page_label": "638", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2f934a1-ddce-498d-a638-3a20511d33e3", "node_type": "4", "metadata": {"page_label": "638", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3adc4b2c4ab17a568cfcbdc3528a814ffc3439a8b8c8164aca6d80a119dffa3a", "class_name": "RelatedNodeInfo"}}, "text": "Vector ed interrupts refers to several IHs in the system.\nNonvectored interrupts , on the other hand, means there is only\none IH that handles all interruptions. Figure 9.22 illustrates the\norganization of a single IH and multiple IHs in mem ory. In the case\nof the nonvector ed interrupts, the single IH is invoked each time\nthere is an interruption. The handler then deter mines the highest-\npriority interrupting device to service. A nonve ctored interrupt\nmechanism is simple to implement, but because all interruptions\nare handled by a single routine, interrupts are not handled quickly;\nthus, a nonvector ed interrupt is not common in moder n computer\nsystems. However, as discussed in Sec. 9.7, a nonvector ed\ninterrupt mechanism is used for simplicity to illustrate the data\npath details of an inter rupt handling CPU.\nFIGURE 9.22  Handling of vector ed inter rupts; assuming 2 bytes per\nword memory .\nThe following outlines the requir ements to implement vector ed\ninterrupts:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 984, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6bc77d9d-7cde-45e1-ac77-5a912aa254b5": {"__data__": {"id_": "6bc77d9d-7cde-45e1-ac77-5a912aa254b5", "embedding": null, "metadata": {"page_label": "639", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "50c21f9d-0dfd-4ac0-b37e-d70838f3ba88", "node_type": "4", "metadata": {"page_label": "639", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9cd375a77fce68ddfb88f3cdf5d679fd3206747d03641106252bbf4a4c7e1ba3", "class_name": "RelatedNodeInfo"}}, "text": "\u2022 A small r egion in main memory must be r eserved for a\nvector table , starting at a known addr ess labeled \u201c Base\nAddress\u201d as illustrated in Fig. 9.22 (b).\n\u2022 The inter rupt r equests fr om each DCI and DMA contr ollers\nmust be prioritized in har dwar e to generate a unique number,\ncalled an inter rupt vector ( IV), associated with the highest-\npriority IH . The IV is used to invok e a cor responding handler .\n\u2022 During system startup, the entries of vector table must be\n\ufb01lled with jump instructions to di\ufb00er ent IHs, one for each IV.\n\u2022 The pr ocessor data path must be e xtended by adding new\nregisters and cir cuits to e xecute new instructions and featur es\nas necessary to implement vector ed inter ruptions.\nEquation (9.2) is an example of how an interrupt handler pointer\n(IHP) can be de\ufb01ned as a linear function of an IV and the\nbase_addr ess of the vector table. For IV = 1, 2, 3, etc., IHP =\nbase_addr ess + 2, base_addr ess + 4, etc., is used as an index to\naccess a vector table entry assuming each entry is 2B. IV = 0, as\nillustrated later, may be used to indicate no pending requests for\ninterruption.\nFigure 9.23 illustrates the execution order of multiple prioritiz ed\nIHs. A higher -priority handler always interrupts a lower -priority one,\nbut not the other way around. Further more, with each handler\ninvocation, the processor status, including a return address for the\ninterrupted pr ogram, must be saved (typically in memory).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1451, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "84f0c089-0781-4f37-a39d-01cb4e63786d": {"__data__": {"id_": "84f0c089-0781-4f37-a39d-01cb4e63786d", "embedding": null, "metadata": {"page_label": "640", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9c78a1d5-1ba7-40de-850f-6d8cbbc9a9d4", "node_type": "4", "metadata": {"page_label": "640", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "097b7ca6f8d093aef671d4e7138881ec33483cdd763c166c9ddd5035b15866e6", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 9.23  Invocation of a multiple inter rupts handlers.vsd\nThe following describes the steps CPU takes to invoke an IH; it is\nassumed that IVs are prioritized so that IH1 (IV = 1) has lower\npriority to IH2 (IV = 2), and IH2 has lower priority to IH3 (IV = 3),\netc., as shown in Fig. 9.23. Further more, IV = 0 is used to indicate\nthere are no pending r equests for inter ruption:\n1. Processor ignor es a r eceiving IV (labeled IVr) if the CPU\u2019s\nchecking for inter rupt r equests featur e is disabled or the IV of\nthe cur rently e xecuting IH (labeled IVc) is gr eater than IVr. That\nis, when IVr \u2264 IVc, the CPU ignor es IVr, keeping the r equest for\nan inter ruption pending until the e xecution of the cur rent\nhandler associated with IVc ends. Otherwise, if the CPU\u2019s\nchecking for inter rupt r equests featur e is enabled and IVr >\nIVc, CPU saves both the RPP for the cur rently e xecuting IH and\nthe IVc in special r egisters within the CPU and changes the\ncontent of PP with the IHP = IV \u2217 2 + base_addr ess and mak es\nIVc = IVr. For example, if IVc = 1 and IVr = 2, then the CPU\nsaves RPP1  for IH1 and IVc = 1 and r eplaces the content of PP\nwith the quantity base_addr ess+4 and mak es IVc = IV2.\n2. The CPU starts e xecuting the jump instruction at memory\naddress IHP and thus begins the e xecution of the IH\ncorresponding to the cur rent IVc (e.g., IH2 when IVc = 2).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1380, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "55b2fdce-a1f0-422a-bf41-b89b1858c6bc": {"__data__": {"id_": "55b2fdce-a1f0-422a-bf41-b89b1858c6bc", "embedding": null, "metadata": {"page_label": "641", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "41b3762e-a80c-4dc1-9311-fddd3b4d8a96", "node_type": "4", "metadata": {"page_label": "641", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e2f996e7877379e8d84e49ca535ef5b169c6d14f23d65adcf3d5e26a45ae1a92", "class_name": "RelatedNodeInfo"}}, "text": "3. The invok ed handler must \ufb01rst save the pr ocessor state,\nincluding the saved RPP and saved IVc in memory (see Sec.\n9.6.2 ). The CPU, however, continues monitoring the IVr for the\nnext higher -priority IV .\n4. The IH services the inter rupting device\u2014for e xample, a DCI\nor DMA contr oller. Upon completion, the handler r estor es the\nprocessor saved state, including the saved RPP and save IVc,\nand r eturns to the inter rupted pr ogram so the e xecution of the\nprogram can r esume, which could be a lower -priority IH (e.g.,\nIH1) or a systems or application pr ogram.\n9.6.2 Interrupt Structures\nFigure 9.24 illustrates two hardwar e interrupt structur es, daisy-\nchained  and independent request , for priorit izing interrupt\nrequests. They are used  to deter mine the IV of the interrupting\ndevice. The IV, in turn, is used to deter mine which IH to invok e to\nservice the device. The details of these structur es are explained\nnext.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 939, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "32796e75-0b48-4519-be10-e1a74ec64551": {"__data__": {"id_": "32796e75-0b48-4519-be10-e1a74ec64551", "embedding": null, "metadata": {"page_label": "642", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1d426c90-e48e-4c31-ba93-8c34b93863d1", "node_type": "4", "metadata": {"page_label": "642", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8f656fffbf397aae1567783392249a9bba518b0764c044d8fec03df2b585e16f", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 9.24  Inter rupt structur es: (a) daisy -chained structur e; (b)\ndaisy chain module; ( c) independent r equest structur e.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 129, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4dea2575-f8af-40d8-bea2-8c16ecb42d3c": {"__data__": {"id_": "4dea2575-f8af-40d8-bea2-8c16ecb42d3c", "embedding": null, "metadata": {"page_label": "643", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a0d5c30f-04dc-4871-a86e-adf4a5fd2a5e", "node_type": "4", "metadata": {"page_label": "643", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7ae72969991ee9b1771396dd3753f5a7b2714e9c89ba2633c635648d331d10e7", "class_name": "RelatedNodeInfo"}}, "text": "Daisy-Chained\nThe structur e in Fig. 9.24(a) orders all the interrupt requests into\n\ufb01xed prioritie s. When the signal int is asserted, the CPU asserts an\ninterrupt acknowledge (iack) signal to identify the highest-priority\nIV.\nA detailed circuit of a daisy-chain module is shown in Fig. 9.24 (b).\nThe iack signal is forwarded from one daisy -chain module  to the\nnext until the highest-prio rity IV (at that moment) as IVr is selected.\nA unique IV typically is assigned to each DCI during setup. With the\nUSB devices, only the USB host contr oller interfa ce interrupts the\nprocessor .\nWhile the structur e in Fig. 9.24(a) is scalable and more devices\ncan be added to the system, it has the disadvantage of resulting in\nstarvation of DCIs that are at the end of a long daisy -chain. A\nhigher -priority DCI can prevent iack = 1 from reaching the lower -\npriority daisy -chain modules at the end of the chain.\nIndependent Request\nThe structur e in Fig. 9.24(c) uses a priority encode r to quickly\nidentif y the highest-priority IV. In the \ufb01gure, the 8-to-3 priority\nencoder is used as a 7-to-3 encoder by connecting its input-0 signal\nto ground. In this case, IVr = 0 when none of the seven interrupt\nrequest signa ls are active. Further more, IVr = 0 is used to indicate\nto CPU there are no pend ing requests for interruption. This would\neliminate the int signal in Fig. 9.24(a), reducing one signal that the\nCPU inputs.\nThe independent request structur e requir es no iack signal, unless\na hybrid\u2014pa rtly independ ent and partly daisy -chai ned\u2014structur e is\nused to implement interrupt priority classes . All the DCIs in a\nsystem would be grouped into di\ufb00er ent priority classes. For\nexample, all the disk drive s (e.g., hard disk and CD disk drives) may\nbe consider ed part of a device class. In this case, an IVr identi\ufb01es\nall the DCIs in the same class (i.e., all the disk drives), and an iack\nwould then be used to identif y the IVr of a speci\ufb01c device (e.g.,\nhard disk drive) in that class.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1996, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9e77db68-9631-48df-a5df-439432fcae04": {"__data__": {"id_": "9e77db68-9631-48df-a5df-439432fcae04", "embedding": null, "metadata": {"page_label": "644", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ef59e24-1d36-44de-9019-9e8fe7f4e06a", "node_type": "4", "metadata": {"page_label": "644", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e2cc17c8687503084783361023a7e4f2a38995bcafd24408db517132ada26262", "class_name": "RelatedNodeInfo"}}, "text": "9.7 Design Example: Interrupt Handling\nCPU\nThis section presents the data path of an interrupt handling CPU\nwith the following r equir ements and speci\ufb01cations:\n\u2022 The data path of the single-cycle A cc-IS A CPU in Fig. 8.7\n(Chap. 8 ) is e xtended to implement the invocation mechanism\nof a single IH that pr ovides service to several devices.\n\u2022 The IHP is har dcoded to memory addr ess 0x40 within the\nCPU, assuming 8-bit addr esses. Her e, addr ess 0x40 is arbitrarily\nselected.\n\u2022 The IH can service a maximum of 16 devices, including a\ntimer module, a DMA contr oller, and 1 to 14 I/O devices.\n\u2022 A daisy -chained structur e (Fig. 9.29 (a)) is used to prioritize\nthe inter rupt r equests fr om the 16 devices, wher e IV = 15 (the\nhighest) is assigned to the timer module, IV = 14 to the DMA\ncontr oller, and 0 (the lowest) to k eyboar d. Note that because\nwe ar e using a daisy -chained inter rupt structur e, we may also\nuse IV = 0 as a valid device IV .\n\u2022 Upon an inter ruption, the state of the CPU, de\ufb01ned by the\ncontent of r egisters A CC, X, and SR, is saved in memory by the\nIH. The the return addr ess (RPP)  is saved inter nally within the\nCPU.\nFigure 9.25  illustrates a 16-level daisy -chained interrupt structur e\nthat prioritiz es a timer, DMA, and 1 to 14 I/O interrupt requests\n(only one, keyboar d, is shown). The DCI of each device generates\nan interrupt request (intr) signal, which becomes 1 each time the\ndevice wants  service from the CPU. For example, a key depressed\non the keyboar d would set its interrupt request signal as intr0 (also\nsee Fig. 9.17), causing the CPU to interrupt the currently executing\nprogram and start e xecuting the IH to service the k eyboar d.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1693, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b18e415-e5ef-467d-a2a8-f6c64199aafe": {"__data__": {"id_": "0b18e415-e5ef-467d-a2a8-f6c64199aafe", "embedding": null, "metadata": {"page_label": "645", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "63f1a725-0d47-4821-a0c9-096b57c983c2", "node_type": "4", "metadata": {"page_label": "645", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "014adf961d831632797090241c6fb1b8044908dae8eb9ec0507b887523167e54", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 9.25  A 16-level daisy -chained inter rupt structur e that\nprioritizes inter rupt r equests fr om 16 devices fr om highest ( IV = 15)\nto lowest ( IV = 0).\nLikewise, a DMA contr oller would assert its respective interrupt\nrequest signal as intr14  (also see Fig. 9.20) when it completes a\nDMA transfer . The timer module would interrupt, making intr15  = 1,\nso the OS can start or resume the execution of another program. An\nI/O DCI can be device speci\ufb01c or universal, such as a USB host\ncontr oller interface.\nThe intr signals from the timer module, DMA contr oller, and\nmaximum of 14 DCIs are wired-ORed to create the external\ninterrupt request signal xint as shown in Fig. 9.25. The xint signal,\nwhich enters  the CPU, causes an interruption if asserted and if the\nCPU\u2019s interrupt handling featur e is enabled. The data path of the\ninterrupt handling CPU is pr esented in Fig. 9.26 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 892, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "40ce9d40-d879-4996-be1a-6132894ac5a3": {"__data__": {"id_": "40ce9d40-d879-4996-be1a-6132894ac5a3", "embedding": null, "metadata": {"page_label": "646", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "962fcb5e-e515-4855-acd1-107467ae635a", "node_type": "4", "metadata": {"page_label": "646", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "29084f7da8cbf063b49aa754c2cfbdcdec19eb1e26ecf447e70280935538bde0", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 9.26  The data path of the inter rupt handling CPU, which is\nan extension to the A cc-IS A discussed in Chap. 8 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 120, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a966fa04-5582-41e8-8ffd-ca3587b96ebb": {"__data__": {"id_": "a966fa04-5582-41e8-8ffd-ca3587b96ebb", "embedding": null, "metadata": {"page_label": "647", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4ac7a742-d4fe-425d-9d6d-fbfb2edf007c", "node_type": "4", "metadata": {"page_label": "647", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f3cf9e9bd2603184bef034b7a4164d3fd329f6b314a936cb454184533e7b93d7", "class_name": "RelatedNodeInfo"}}, "text": "The new data path implements eight new instruc tions, listed in\nTable 9.5 , and also includes added har dwar e as follows:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 122, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aac7de60-f385-43f5-b46c-bbee26d0d967": {"__data__": {"id_": "aac7de60-f385-43f5-b46c-bbee26d0d967", "embedding": null, "metadata": {"page_label": "648", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a613607b-8467-4a55-855c-84b9851effe6", "node_type": "4", "metadata": {"page_label": "648", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "6ef6868d092bdccecb93d72d33a71350f9e92c7d1ce0fe114b517da1b79dec03", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  9.5 New Instruction s Requir ed to Implement the Single Interrupt Handling\nMechanism\n\u2022 A D \ufb02ip-\ufb02op (FF) is used to enable or disable the CPU\u2019s\nchecking for inter rupts featur e. The FF will be set to 1 (i.e., FF .q\n= 1) when the \u201cEI\u201d or \u201c RTI\u201d instruction e xecutes.\n\u2022 An auxiliary pr ogram pointer r egister (PPX) is added to save\nthe RPP, which in this case, is the addr ess of the ne xt\ninstruction in the cur rently running pr ogram. Upon r eturning\nfrom an inter ruption, the pr ogram r esumes e xecution, starting\nfrom the addr ess saved in the PPX. The added 2-to -1 MUX7 in\nthe fetch unit selects PPX (the content of r egister PPX) as the\nnext PP (the content of r egister PP) when instruction \u201c RTI\u201d\nexecutes.\n\u2022 The added 2-to -1 MUX5 in the fetch unit selects the har d\ncoded IHP = 0x40 as the ne xt PP upon inter ruption.\n\u2022 An auxiliary status r egister (SRX) is added in the decode\nunit to save the incoming IV of the highest-priority inter rupting\ndevice.\n\u2022 The instruction decoder unit is also modi\ufb01ed to include\nthree mor e signals as ei (enable the CPU\u2019s checking for\ninterrupts featur e), rstr (restor e), and di (disable the CPU\u2019s\nchecking for inter rupts featur e). The ei signal is asserted when\nthe \u201cEI\u201d instruction e xecutes. The ei signal sets the FF (FF .q = 1)\non the ne xt clock cycle, which in tur n enables the CPU\u2019s\nchecking for inter rupts featur e. The rstr signal, which also sets\nthe FF to 1, is asserted when the \u201c RTI\u201d instruction e xecutes. The\ndi signal is asserted when the \u201c DI\u201d instruction e xecutes, which\nsynchr onously r esets the FF (FF .q = 0) and disables the CPU\u2019s\nchecking for inter rupts featur e.\n\u2022 The write-back multiple xer (MUX4) is also r eplaced with an\n8-to-1 MUX to additionally implement A CC \u2190 SRX, A CC \u2190 SR,\nand A CC \u2190 X, which ar e requir ed for the IH to save the CPU\nstate in memory .\nInitially, upon  reset, the FF would be set to 0 (FF.q = 0), disabling\nthe CPU\u2019s checking for interrupts featur e. FF.q remains 0 until the\nsystem starts and the operating system initializes the system by :", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2063, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "22ee009a-754c-4dd1-b6b1-d5fdc12d9593": {"__data__": {"id_": "22ee009a-754c-4dd1-b6b1-d5fdc12d9593", "embedding": null, "metadata": {"page_label": "649", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "940b4034-192f-465f-a7e3-430659883273", "node_type": "4", "metadata": {"page_label": "649", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "cd06ef7be616b402a00837f01d113415c224dc7bd1b71ea0111700ed4017aa6d", "class_name": "RelatedNodeInfo"}}, "text": "\u2022 Loading the single IH into memory starting, for e xample, at\nlocation 0x42\n\u2022 Storing the instruction \u201c JMP 0x42\u201d at location IHP = 0x40\n\u2022 Enabling inter rupts by e xecuting an \u201cEI\u201d instruction, which\nmakes FF .q = 1, and thus enables the CPU\u2019s checking for\ninterrupts featur e\nDuring normal system operation, one or more interrupt request\n(intr) signals (Fig. 9.25) may be asserted. Each time that xintr\nbecomes 1 and checking  for interrupts is enabled (i.e., FF.q = 1),\nthe int signal  within the CPU becomes 1 and causes the following\noperations to tak e place during the ne xt clock cycle:\n\u2022 Via MUX7, int = 1 will cause data path to perfor m PPX \u2190 PP\n+ 2. This saves the quantity PP + 2 as the RPP. The inter rupted\nprogram will r esume e xecution (af ter returning fr om an\ninterruption) starting fr om instruction addr ess at RPP (see Fig.\n9.21(b)).\n\u2022 Via MUX 5 and MUX 7, int = 1 will cause data path to\nperfor m PP \u2190 0x40. This will cause the \u201c JMP 0x 42\u201d instruction\nat memory location 0x40 to e xecute ne xt, which will start the\nexecution of the single IH .\n\u2022 The int = 1 also causes SRX \u2190 IV and thus saves the IV of\nthe highest-priority inter rupting device. Note that when both int\n= 1 and xintr = 1, iack becomes 1 and in tur n selects the IV of\nthe highest-priority device ( Fig. 9.25 ) that is r equesting service.\n\u2022 The int = 1 also synchr onously r esets FF, making FF .q = 0.\nThis disables the CPU\u2019s checking for inter rupts featur e. While\nFF.q = 0, int remains 0 and pr events a cur rently e xecuting\nprogram, which could be an OS r outine during system\ninitialization or IH during nor mal operation, fr om inter rupting.\nThe pseudo -code in Example 9.2 outlines the steps the single IH\nmust take to provide service, one at a time, for an interrupting\ndevice among several devices. The handler perfor ms four main\ntasks as follows:\n1. The IH saves the state of the inter rupted pr ogram, which is\nde\ufb01ned as the content of A CC, X, and SR r egisters, in memory .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1986, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd58286e-3fd3-4649-8fa4-34e11ecfda48": {"__data__": {"id_": "cd58286e-3fd3-4649-8fa4-34e11ecfda48", "embedding": null, "metadata": {"page_label": "650", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6ae8203d-5ef5-4484-a0f7-4ce8175077d7", "node_type": "4", "metadata": {"page_label": "650", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7e669d12ffd5a8d92fefd825c2cf19be193b48f2d901f88888cfc5d25b232399", "class_name": "RelatedNodeInfo"}}, "text": "In the pseudo -code, this is shown by calling function\nsave_cpu_status( ), which can include the following code section:\n2. The IH must deter mine the IV of the inter rupting device so\nit can call a driver r outine to service the device and thus r eset\nthe device inter rupt r equest signal ( intr)\u2014refer to Sec. 9.5.1  for\nthe k eyboar d example. This is shown by \u201civ = get_iv()\u201d and a\n\u201cswitch\u201d statement in the pseudo -code. The \u201cget_iv()\u201d function\nwould use the MVSRX2A CC instruction to copy the content of\nSRX into A CC, which will then be compar ed with 0, 1, 2, etc., to\ndeter mine the IV of the inter rupting device.\n3. The inter rupt handler must r estor e the state of the\ninterrupted pr ogram befor e returning. This is shown by calling\nfunction restore_cpu_status( ), which can include the following\ncode section:\n4. The IH would then e xecute the \u201c RTI\u201d instruction, which will\ncause the data path to perfor m PP \u2190 PPX and FF .q \u2190 1 on the\nnext clock cycle. This restor es the r eturn addr ess, which\nresumes the e xecution of the inter rupted pr ogram, and also\nenables the CPU\u2019s checking for inter rupts featur e.\nExample 9.2.  Describes a pseu do-code outlinin g the functions of a single IH that services\nan inter rupting device, a timer module, DMA contr oller, or an I/O device one at a time:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1311, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7d58e881-0fef-43ed-9952-8c86d60928fa": {"__data__": {"id_": "7d58e881-0fef-43ed-9952-8c86d60928fa", "embedding": null, "metadata": {"page_label": "651", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "12f191f2-4cfc-48c8-bb32-3e97a4da2f9e", "node_type": "4", "metadata": {"page_label": "651", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b43bef0d8204272ef67740f2911c2b9c8fd66aea2dffb701433882248a635683", "class_name": "RelatedNodeInfo"}}, "text": "If, upon returning from an interruption, the CPU \ufb01nds xintr = 1,\nthe handler will be invok ed again to service another device that has\nits pending intr = 1.\nFinally, the disable interrupts (\u201cDI\u201d) instruction in Table 9.5 is\nincluded in case a \u201csoft\u201d reset\u2014for example, using a \u201crestart\u201d menu\noption\u2014is used. The disadvantage of a single IH mechanism is that\nif a higher -priority devic e requests a service while the CPU is\nexecuting the IH, the high-priority device must wait until the\nhandler completes its task and returns. For this reason, moder n\ncomputer systems implement a vector ed interrupt mechanism so\nthat the IH of a lower -priority device can be inter rupted and the CPU\ncan execute the IH of a higher -priority interrupting device (e.g.,\nDMA) as was illustrated in Fig. 9.23 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 792, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b33180d2-e016-41ea-8a58-7107508ef3fd": {"__data__": {"id_": "b33180d2-e016-41ea-8a58-7107508ef3fd", "embedding": null, "metadata": {"page_label": "652", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "67490fd8-c040-48c4-b043-d68970ee6550", "node_type": "4", "metadata": {"page_label": "652", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2015a9c8d65f3070a10f99ab35568d869d59a32bbd4d29f9ca42d2e87f6b436b", "class_name": "RelatedNodeInfo"}}, "text": "9.8 USB Host Controller Interface\nThe need for a host controller interface was brie\ufb02y discussed in\nSec. 9.5.2 . The USB host contr oller interface is designed to o\ufb04oad\nCPU from perfor ming the task of directly providing services to\npotentially many I/O devices. In this case, the interrupt-driven\ntransfer may not be a practical option because there could be many\ndevice interruptions. Programmed transfer would not be a viable\noption becau se it would waste valuable CPU time. In addition, the\nUSB host contr oller interface implements \u201cplug and play\u201d device\ninterface that can support numer ous USB devices without requiring\ndevice installation and system r estart.\n9.8.1 Standards\nThe USB 1.x standar d was designed accor ding to the speci\ufb01cation\nof either the universal host contr oller interface (UHCI) or the open\nhost contr oller interface (OHCI) suitable for low-speed and full-\nspeed device s requiring, respectively, 1.5 Mbps and 12 Mbps data\ntransfer rates. The USB 2.0 standar d, on the other hand, is based\non the speci\ufb01cation of the enhanced host contr oller interface (EHCI)\nand is design ed for high-speed devices with a transfer rate of up to\n480 Mbps. USB 3.0 is designed to support super -speed devices\nrequiring transfer rates of up to 5 Gbps. Each generation of USB\nhost contr oller interfaces also contains root hubs to service a slower\ndevice. For example, the USB 2.0 host interface contains root hubs\nto service low-speed and full-speed devices in addition to providing\nservice to high-speed devices.\nA USB cable consists of four wires, two of which are power and\nground, and the other two are data signals labeled D+ and D\u2212. A\nUSB communication module uses the D+ and D\u2212 signals to\nsend/r eceive packets with the non-r eturn-to-zero inverted (NRZI)\ncoding scheme (refer to the \u201cExercises\u201d section in Chaps. 5 and 6\nfor information on NRZI). USB packets are grouped into token,\ndata , and handshak e as illustrated in Fig. 9.27 . Each packet starts\nwith a synchr onization sequence and ends with an end-of-pack et\n(EOP) mark er. USB 1.x packets start with an 8-bit synchr onization\nsequence (i.e., 00000001) and end with an EOP marker that keeps\nthe D+ and D\u2212 signals at 0 for the duration of 2 bits. The USB 2.0", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b84aaa2b-45be-42fa-b62e-0a4710d5714e": {"__data__": {"id_": "b84aaa2b-45be-42fa-b62e-0a4710d5714e", "embedding": null, "metadata": {"page_label": "653", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "98497cbb-9b0f-4cc4-b880-f14045bdae36", "node_type": "4", "metadata": {"page_label": "653", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "495ee9d75e3ac6f18883004882bdebf2c79945f5dade4d87e0f8f9b9afefeae9", "class_name": "RelatedNodeInfo"}}, "text": "standar d, on the other hand, uses a 32-bit (4-B) synchr onization\nsequence and an 8-bit EOP mark er.\nFIGURE 9.27  Three types of USB communication pack ets. Each\npacket starts with a synchr onization sequence and ends with an\nEOP mark er.\n9.8.2 Transactions\nEach USB transaction consists of one or more packets. For example,\na transaction  that sends print data to a printer, requires, in order, a\ntoken pack et, a data pack et, and a handshak e pack et.\nAs shown in Fig. 9.27, token and data packets each include a\ntype \ufb01eld, a data \ufb01eld, and a \ufb01eld for an error detection code.\nHandshak e packets have only a type \ufb01eld. A token packet identi\ufb01es\none of four possible transactions, called start- of-frame (SOF), setup\n(SETUP), input (IN), and output (OUT), as described in Table 9.6. A\ndata packet contains a payload and is typed either as Data0 or\nData1. The USB 2.0 has other data types, such as Data2, which is", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 914, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8d8dc302-242b-49ac-a2dc-dccae977de3a": {"__data__": {"id_": "8d8dc302-242b-49ac-a2dc-dccae977de3a", "embedding": null, "metadata": {"page_label": "654", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f0113cf9-4019-4a21-afa4-41eb2670161c", "node_type": "4", "metadata": {"page_label": "654", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "6aa7b2771440fe2ee659ac92a77c3977e645e1c7c87cc851e26ba6ab15d7cea6", "class_name": "RelatedNodeInfo"}}, "text": "used to communicate the size of a large payloa d that would be\ntransmitted via several transactions.\nTABLE  9.6 Examples of USB P acket Identi\ufb01ers\nIf a transaction contains an entire data payload from/to a device,\nits data packet would be typed as Data0. On the other hand, if two\nor more transactions are used to transfer a large payload, the\nconsecutive data packets would be labeled alternating Data0 and\nData1. Every  source and destination module includes a toggle bit\nthat is initially set to 0.\nEach time that a Data0 or Data1 packet is sent by a source\nmodule and is received by a destination module, their toggle bits\nare toggled; if 0 (i.e., indicating Data0), it becomes 1 (i.e.,\nexpecting Data1 next), or if the tag was 1 (indicating Data1), it\nbecomes 0 (expecting Data0 next). This ensur es that a data packet\nat the destination is received only once in case of an error, such as\nwhen a destination modu le receives a packet correctly and toggles\nits toggle bit but the source thinks otherwise and keeps its toggle\nbit unchanged and retran smits the packet. In this case, since the\ntwo toggle bits are no longer the same, the receiver (correctly)\nrejects the retransmitted packet. Handshak e packets serve multiple\npurposes. For example, an acknowledgement (ACK) packet is used\nto con\ufb01rm the receipt  of a data packet, or a negative\nacknowledgment (NACK) packet is used to contr ol the \ufb02ow of data,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1412, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "17e63669-0286-414e-acaa-ed6f1a964379": {"__data__": {"id_": "17e63669-0286-414e-acaa-ed6f1a964379", "embedding": null, "metadata": {"page_label": "655", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ba780ad5-23bb-4a48-9a5b-b263d64a0a61", "node_type": "4", "metadata": {"page_label": "655", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1148bc7f41e5487d58880605e50805132c173da1d3a61f25be6a912e36bb2554", "class_name": "RelatedNodeInfo"}}, "text": "for example, when a device that receives a packet to send data has\nno data to send at that time.\n9.8.3 Transfers\nThe four types of data transfers, named interrupt , isochronous ,\nbulk , and control , which were described in Table 9.4, are used to\nservice all classes of USB devices. Also, as was discussed earlier,\nUSB devices do not use interrupt-driven transfer . Instead, an\ninterrupt packet is used to poll those devices, such as the keyboar d\nand mouse, that normally use interrupt-driven transfer in legacy\npersonal computers. In this case, a device, such as keyboar d, will\nsend a NACK handshak e packet each time that it is polled but has\nno scan code to send.\nReal-time USB devices, such as digital phones must be able to\nsend or receive data and speak ers must receive data frequently\nwithout interruptions when they are in use. These devices use\nisochr onous transfers, and the corresponding transactions include\ntoken and data packets but no handshak e packets; the data of\nthese transactions is never retransmitted. Bulk transfers are used\nwith devices such as printers, fax machines, scanners, and plotters\nthat requir e accurate data communication but can tolerate\ninterruptions in receiving data. Contr ol transfers are used during a\ndevice or hub con\ufb01guration.\nMany device s may use a single host contr oller interface to send\nor receive packets. Howe ver, a single device cannot be allowed to\ncommunicate continuously and starve other devices, negatively\na\ufb00ecting their normal operations. For example, consider the system\nshown in Fig. 9.18 . Suppose a user wants to print a document while\nlistening to music on USB speak ers. Both the printer and speak ers\nmust share the host controller to receive print and music data,\nrespectively . If the host contr oller is allowed to transfer print data\ncontinuously for a long time, the transfer of music data to the\nspeak ers will be interrupted, thus resulting in poor audio quality .\nSimilarly, if the host contr oller is allowed to transfer music data\ncontinuously, the print job may never \ufb01nish. In another scenario, a\nuser may want to work on, say, a document at the same time that\nthe printer is printing and the music is on. In this case, the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2210, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1bea119c-e6c7-44eb-ad0c-973c347a34b8": {"__data__": {"id_": "1bea119c-e6c7-44eb-ad0c-973c347a34b8", "embedding": null, "metadata": {"page_label": "656", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "571c684e-7859-44fc-aa97-5e111634a40e", "node_type": "4", "metadata": {"page_label": "656", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "54a9ed2e64b39c2e1b947faf3dcb6e7c41e916cb726be21d20b46a99dc79454e", "class_name": "RelatedNodeInfo"}}, "text": "keyboar d and mouse must also be able to communicate with the\nsystem.\n9.8.4 Descriptors\nEach USB host contr oller interface implements one or more access\npoints , each one called an endpoint . Each endpoint includes a set\nof I/O ports that are accessed by the host contr oller. Each endpoint\ncontains a descriptor called an endpoint descriptor  that identi\ufb01es\nits transfer type\u2014for example, contr ol, interrupt,  isochr onous, or\nbulk\u2014as well as other requir ements, such as the maximum amount\nof data allowed in each data packet. The contr ol, interrupt, and bulk\ntransfers use a maximum data size of 64 B. Isoch ronous transfers,\non the other hand, use a larger maximum data size (e.g., 1024 B in\nUSB 2.0). A USB hub contr oller implements a status change\nendpoint , which is polled once every 255 ms to detect a possible\nport event, such as conn ecting or disconnecting a device from a\nUSB port.\nA device may contain multiple sets of endpoints to implement\ndi\ufb00er ent types of interfaces. For example, a USB CD-ROM drive\nwould implement three di\ufb00er ent interfaces: a mass storage\ninterface for reading/writing \ufb01les, an audio interface for handling\nmusic, and a video interface for handling video images. Each\ninterface in a USB device includes an interface descriptor  that\nincludes a number of endpoint descriptors. The interface\ndescriptors themselves are part of a con\ufb01guration descriptor ,\nwhich may consist of multiple di\ufb00er ent con\ufb01gurations, including, for\nexample, a low-power con\ufb01guration used with battery -power ed\nsystems. All these descriptors are organized in a hierar chy and\nincluded in a device descriptor , which also contains device\ninformation such as the manufactur er name and serial number .\nEach time that a newly plugged-in device is detected by polling the\nhub, the device\u2019s descri ptor is accessed by a USB driver . The\ndescriptor contains all the necessary device infor mation, including a\nlist of I/O port relative addresses within the device and the type of\ntransfer used  by the device. The driver assigns a unique address to\nthe device and con\ufb01gur es its endpoints.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2099, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ac301e55-66e9-4ffb-bc03-ac5380c9104c": {"__data__": {"id_": "ac301e55-66e9-4ffb-bc03-ac5380c9104c", "embedding": null, "metadata": {"page_label": "657", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ae63c3f9-ba06-4474-8e6c-eb96b9430ccc", "node_type": "4", "metadata": {"page_label": "657", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8a39af2e46f1e0506adfec311365e4168a050a8af0462421d79c455252430648", "class_name": "RelatedNodeInfo"}}, "text": "9.8.5 Frames\nA USB host controller interface is designed to service all the devices\nthat are currently attac hed and active. It sends and receives\npackets at regular interva ls called frames. For example, the USB 1.x\nuses 1 ms (millisecond ) frame, and USB 2.0 uses 125 \u03bcs\n(micr osecond) frames, each called a microframe . Each frame for\nfull-speed USB 1.x devices is 12,000 bits (12 Mbits/s \u2217 1 ms \u2248\n12,000 bits) long. A microframe is 60,000 bits (480 Mbits/s \u2217 125\n\u03bcs \u2248 60,000 bits) long.\nAssuming that the system shown in Fig. 9.18 is using a single\nUSB host contr oller interface, Fig. 9.28 illustrates one possible\nframe content for the USB 1.x host contr oller. In the \ufb01gure, each\nframe includes packets for several transactions and begins with an\nSOF transaction. For example, consider a scenario wher e a user is\ntalking on a digital phon e, working on a document, listening to\nmusic, printing a print job, sending/r eceiving a fax, and writing \ufb02ash\nmemory . In this case, a frame would contain packets for the\nfollowing transactions as follows:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1053, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a76315dd-97aa-4215-b021-ccdfab52e71f": {"__data__": {"id_": "a76315dd-97aa-4215-b021-ccdfab52e71f", "embedding": null, "metadata": {"page_label": "658", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e5013ee2-7dd7-4863-a6cd-cec086fc9c56", "node_type": "4", "metadata": {"page_label": "658", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "94e4ae3c614b72b50f44f9be8d4c7826cf69668fe3a3d612f8f0e41a4ad2a45f", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 9.28  Illustrating USB transfers during a single frame; frame\nduration is 1 ms for USB 1.x [ 4].\nTwo isochr onous audio IN and OUT transactions with the digital\nphone\nAn isochr onous ster eo audio OUT transaction with the speak ers\nAn inter rupt IN transaction with the k eyboar d\nAn inter rupt IN transaction with the mouse\nZero or mor e contr ol transactions with the hubs\nIf possible, a bulk OUT transaction with the printer, fax machine,\nand \ufb02ash memory", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 464, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cbf93dda-47a8-4a1a-84d5-83ea58cf5622": {"__data__": {"id_": "cbf93dda-47a8-4a1a-84d5-83ea58cf5622", "embedding": null, "metadata": {"page_label": "659", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7d3283b0-c096-4ea3-a09c-a5e42b75feb4", "node_type": "4", "metadata": {"page_label": "659", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8e3c8fd051a5679bb4f760ecee6ee0ea46d83b72a90a4db4fafd8fe0efdfe601", "class_name": "RelatedNodeInfo"}}, "text": "Packets that are associated with the interrupt, isochr onous, and\ncontr ol transf ers have higher priority and are included \ufb01rst in every\nframe. Packets that are associated with bulk trans fers are included\nin the frame only if ther e is enough lef tover bandwidth.\nIn gene ral, not all devices, except for those that requir e interrupt\nor isochronous transfers, need to have packets in every frame.\nTypically, 90% of the frame bandwidth is reserved for interrupt and\nisochr onous transfers and 10% for contr ol transfers, leaving up to\n0% of frame bandwidth for bulk transfers. If at any time there are\nmore interrupt or isochr onous transfers, no bulk packets will be\nallowed, which may result in short interruptions in the operation of\ndevices that use bulk transfers. Further more, a newly attached\ndevice would  not be con\ufb01gur ed if its transfer type requir es more\nbandwidth than is cur rently possible with the e xisting devices.\nThe USB 2.0 host contr oller uses split transactions to\ncommunicate with low- and full-speed devices that are interfaced\nthrough a high-speed hub. In this case, a low- or full-speed OUT\ntransaction is split into several start-split  (SS) microframe\ntransactions. The data from these SS transactions are stored in a\nbu\ufb00er in the high-speed hub and later are sent to the low- or full-\nspeed device s. A USB 2.0 low- or full-speed IN transaction starts\nwith a single SS microframe transaction. Once a target low- or full-\nspeed device  receives the IN request, it uses a lower packet rate of\n1.5 Mbits/s or 12 Mbits/s to transmit its data to the high-speed hub,\nwhich receives it in an input bu\ufb00er . The data in the bu\ufb00er is then\ntransmitted to a USB 2.0 host contr oller via several split\ntransactions called complete split  (CS) transactions.\n9.8.6 Transaction Organization\nEach USB device uses a driver routine called a client driver  that\ncommunicates with the device through two pieces of host software:\na USB driver  and USB host driver . A client driver knows what to\ncommunicate with the device and issues requests to the USB driver .\nEach client request includ es a memory space that data to/from the\ndevice is stored. For example, a USB keyboar d (a client) driver\ninitiates an interrupt transfer request and provides a memory\naddress wher e data (scan codes) from the keyboar d should be\nstored. The USB driver translates each client request into one or", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2398, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "004d6238-9e34-480e-b27c-15a925ad8cff": {"__data__": {"id_": "004d6238-9e34-480e-b27c-15a925ad8cff", "embedding": null, "metadata": {"page_label": "660", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0954ae3d-bb52-4859-8c3e-a6f6512bd2b7", "node_type": "4", "metadata": {"page_label": "660", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0da26bdbce30cb8203e081ca1218cde7a96e19af08fa51db668c01b38366c8ca", "class_name": "RelatedNodeInfo"}}, "text": "more USB transaction descriptors (TDs). Each TD is a data structur e\nand includes all the necessary information about a transfer, as well\nas links to the next TD and memory space that either holds the\nclient\u2019s OUT data or the client\u2019s IN data.\nAll the TDs from the activ e clients are grouped and organized as\na set of linked lists of TDs in memory . The contr ol and bulk TDs in\nUSB 2.0 are organized separately than those for interrupt and\nisochr onous packets. The interrupt and isochr onous TDs, shown as\niTDs in Fig. 9.29, are grouped into an array of linked lists and\nprocessed (executed) at regular periods (intervals). The contr ol and\nbulk TDs, shown as qTDs, on the other hand, are organized as a\nqueue of linked lists and are processed with no speci\ufb01c intervals.\nEach of the linked lists of iTDs is executed within a 125-\u03bcs\nmicroframe. A qTD is executed when there are no unexecuted iTDs\nleft in the ar ray.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 918, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eb6213b5-7784-43e8-8d01-6f163817497f": {"__data__": {"id_": "eb6213b5-7784-43e8-8d01-6f163817497f", "embedding": null, "metadata": {"page_label": "661", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a0bfd182-e935-48c9-9d1d-e212a0d5041e", "node_type": "4", "metadata": {"page_label": "661", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d9b30d11041a79e35e93cb79661806a3344b2ff5dd8989fb9d1725bd3abdea50", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 9.29  The or ganization of USB 2.0 transactions in memory\n[4].\nA USB driver stores the starting addresses of the array and the\nhead of the queue in a USB host contr oller interface via a USB host\ndriver . A USB host contr oller uses two counters to execute the iTDs,\nas shown in the \ufb01gure. The counter -1 is a mod-60000 counter and\noperates with a 480-MHz clock. The counter -2 holds a current\nframe number  and is used as an index to the array. The counter -2\nis incremented once every 125 \u03bcs. The array size is programmable\nand may be de\ufb01ned with 1024, 512, or 256 elements. The array\nbase address is stored in a register called a periodic list base\naddress , and is conca tenated with the counter -2 to locate the next\ntransaction in memory . The asynchronous list base address\npoints to the head of the queue of linked lists in memory, as\nillustrated in the \ufb01gur e.\nEach time that the count er-2 increments, an SOF transaction is\nexecuted, which informs all the devices that use isochr onous\ntransfers to synchr onize their activities. If a TD (iTD or qTD)\ndescribes an OUT transaction, the host contr oller fetches its token\nand data packets from main memory and transm its them to the\ntarget endpoint. If the endpoint implements an interrupt, contr ol, or\nbulk transfer , the contr oller receives a correspon ding handshak e\npacket from the endpoint. As stated earlier, isochr onous transfers\nrequir e no handshak e pack ets.\nIf a TD is an IN transaction and indicates an interrupt, contr ol, or\nbulk transfer, the host contr oller fetches the TD\u2019s token and\nhandshak e packets from memory and transmits the token packet to\nthe target endpoint. After receiving a data packet from the\nendpoint, the contr oller transmits the handshak e packet to the\nendpoint if the data was r eceived er ror free.\n9.8.7 Transaction Execution\nLike any DCI (e.g., Fig. 9.17), a USB host contr oller interface\nincludes a set of I/O ports that are accessed by both CPU and the\nhost contr oller (an embedded system), as illustrated in Fig. 9.30 for\nthe USB 2.0 host contr oller interface. No device data is directly\ncommunicated by the CPU using the I/O ports; instead, the ports", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2170, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e5155f1e-39d7-40a1-8434-b92e796af74f": {"__data__": {"id_": "e5155f1e-39d7-40a1-8434-b92e796af74f", "embedding": null, "metadata": {"page_label": "662", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e5e4f878-744f-487f-b8d2-d67c50954d9c", "node_type": "4", "metadata": {"page_label": "662", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2d7983e53045934faa459761625df7d0a08f1c12d91e1da6bf2e98b740c773aa", "class_name": "RelatedNodeInfo"}}, "text": "are used only to con\ufb01gur e and setup the host contr oller. Table 9.7\nlists a few USB 2.0 host I/O ports called USB operational\nregisters . They  are used to set the size of the frame array with\n1024, 512, or 256 entries; how often to interrupt CPU; etc. The\ninterrupt frequency is speci\ufb01ed in terms of the number of\nmicroframes. This is referred to as an interrupt threshold  that is\nde\ufb01ned in ter ms of once every 1, 2, 4, 8, 16, 32, or 64 micr oframes.\nFIGURE 9.30  A single port USB 2.0 EHCI block diagram [ 6].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 514, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f970a831-c9a0-43c3-acb7-32dda11fbbf2": {"__data__": {"id_": "f970a831-c9a0-43c3-acb7-32dda11fbbf2", "embedding": null, "metadata": {"page_label": "663", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d8e968c8-6bb3-4b2c-8ce7-23b0f25c6e1a", "node_type": "4", "metadata": {"page_label": "663", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d8e1c6695e42fa4d72b5978c5d2cafc26501f0c059fbea03c796944e653e6700", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  9.7 A List of the USB 2.0 Operation R egisters (i.e., I/O P orts)\nFor example, if the interrupt threshold is set to once every two\nmicroframes, the host contr oller \ufb01rst will execute all the TDs (iTDs\nand qTDs) allowable within two microframes, wher e iTDs are", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 267, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66a82abb-3259-4fc6-9f31-792bac87a8b2": {"__data__": {"id_": "66a82abb-3259-4fc6-9f31-792bac87a8b2", "embedding": null, "metadata": {"page_label": "664", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "536511dc-f9fd-49f2-9f46-2f5dd3182795", "node_type": "4", "metadata": {"page_label": "664", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "172b6924d3b7a182770831a18f730298ac08a3c679cb1b6e38317ecce12639a8", "class_name": "RelatedNodeInfo"}}, "text": "processed \ufb01rst. If the interrupt- on-complete (IOC) bit is set in one or\nmore of the TDs, the host contr oller will issue a request to interrupt\nCPU at the end of the second microframe. As part of the host\ncontr oller interface con\ufb01guration, CPU may choose to enable or\ndisable the e xecution of TDs.\nOnce the processor fully con\ufb01gur es the host contr oller interface,\nit sets the run-bit \u2014similar to how the processor initiates a DMA\ntransfer\u2014in the USB command register , which enables the host\ncontr oller and starts the execution of the TDs. A \ufb01rst in, \ufb01rst out\n(FIFO) memory bu\ufb00er is used to hold the OUT data packets befor e\nthey are transmitted and IN data packets receiv ed from devices\nbefor e they are transmi tted to the main memory . The memory\ncontr oller in this case is responsible for generating memory\naddresses for fetching TDs, reading and writing endpoint data\nfrom/to main memory, and writing status data to main memory . For\nexample, in Fig. 9.30 , the DMA-1 is used to fetch TDs from the main\nmemory and store them in a RAM within the list processor and to\nfetch endpoint OUT data and, via the DMA-2, store them in the FIFO\nbu\ufb00er . The DMA-2 is also used to store the endpoint IN data from\nthe FIFO bu\ufb00er via DMA -1 in the main memory .\nThe DMA contr ollers are used for concur rent processing; they\naccelerate data transfer in and out of the host contr oller interface.\nThe root hub, which also includes a set of con\ufb01guration registers, is\nresponsible for the mana gement of the ports, such as port reset\nand resume, as well as port connections or disconnections. The\ninterface engine  (IE) is responsible for NRZI data\nencoding/decoding, tok en construction, etc.\n\u00a0\nReferences\n1. William Stallings, Computer Or ganization and Ar chitectur e,\nPrentice Hall, 8th ed., 2010.\n2. Mobile Intel P entium P rocessor with 533MHz F ront Side Bus,\nhttp://www .intel.com/Assets/PDF/datasheet/253028.pdf .\n3. Micr ocontr oller, http://www .atmel.com.pr oducts/ ,\nhttp://www .cypr ess.com/pr oducts/ .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2012, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b02095b9-bf23-42f5-9956-a9150cdb36c9": {"__data__": {"id_": "b02095b9-bf23-42f5-9956-a9150cdb36c9", "embedding": null, "metadata": {"page_label": "665", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "35b9b383-a4af-40bc-868c-13bd48fdae21", "node_type": "4", "metadata": {"page_label": "665", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0f0e48a274ea7077bfc4826020cbfaf574632ae66187ab1ac4f30d9fef9dcb38", "class_name": "RelatedNodeInfo"}}, "text": "4. Don Anderson and Dave Dzatk o, Universal Serial Bus System\nArchitectur e, 2nd ed., A ddison W esley, 2002.\n5. Intel 64 and IA -32 Ar chitectur es Sof tware Developer\u2019s Manual,\nVolume 3A : Systems pr ogramming Guide, P art 1, 2009.\n6. USB 2.0 host contr oller cor e (inSilicon),\nhttp://www .synopsys.com/ .\n\u00a0\nExercises\n9.1 Consider an F SB that inter connects four 1- GHz pr ocessors to a\nshared memory unit cr eating a UMA ar chitectur e. Suppose, on\naverage, 10% of the instructions ar e \u201cST \u201d that write to\nmemory . Do the following:\na. Assuming that CPI = 1 and each write is 4 B, deter mine\nthe memory -write bandwidth r equir ed by the four\nprocessors.\nb. Considering that memory also needs to pr ovide\ninstructions and data to the pr ocessors, deter mine the\nrequir ed clock fr equency of the F SB for twice the bandwidth\ncalculated in part (a), assuming the F SB operates similar to\nan SDR AM bus with burst size = 1 and has a 32-bit data bus.\nc. Suppose the memory contr oller operates a 32-bit 400\nMHz SDR AM memory unit, deter mine a memory or ganization\nfor peak perfor mance; that is, ther e is 4 B transfers every\nFSB clock cycle.\n9.2 R esear ch and write a short paper on Intel\u2019s QuickP ath link.\n9.3 R esear ch and write a short paper on AMD\u2019s HyperT ransport\ntunnel.\n9.4 Draw a six-node NUMA ar chitectur e with only nine serial links,\nwher e each pr ocessor is no mor e than two links away fr om\nanother pr ocessor .\n9.5 Consider a four -processor NUMA ar chitectur e with serial\ninterconnection links versus a bus-based four -processor UMA\nsystem. Answer the following:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1590, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "38a1c611-8c23-45d8-b1de-35dee042e679": {"__data__": {"id_": "38a1c611-8c23-45d8-b1de-35dee042e679", "embedding": null, "metadata": {"page_label": "666", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8d2e589-9149-4953-b819-102adea6d2c2", "node_type": "4", "metadata": {"page_label": "666", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5799f75f35737becc11b200f4d1c44d96354690195d1c651dc8368b525f61fea", "class_name": "RelatedNodeInfo"}}, "text": "a. Compar e serial versus bus inter connections.\nb. Compar e NUMA versus UMA ar chitectur es as the number\nof processors incr eases.\n9.6 Consider the memory contr oller shown in Fig. 9.6 . Suppose the\nSRAM has a r ead/write access time of 4 ns, the CPU bus clock\nfrequency is 0.5 ns and r equir es one clock cycle to detect ack\n= 1 and one clock cycle to complete the memory cycle, either\nto load the data sitting on the bus to an inter nal register and\nend a r ead cycle or to r emove the data fr om the bus and end a\nwrite cycle. Assuming that memory r ead and write access\ntimes ar e the same, deter mine the size of the counter .\n9.7 Suppose the RPM of a new Samsung disk drive is twice the\none in Example 9.1 . Deter mine how much faster a 512- B\ntransfer between memory and the disk drive will be.\n9.8 Draw a cir cuit for a port-mapped I/O port access as in Fig. 9.10\nthat illustrates the cir cuit for a memory -mapped I/O port.\n9.9 Consider the timing diagram in Fig. 9.12 . Do the following:\na. Brie\ufb02y e xplain why, when sel = 1 and _wr = 0, the\noutput port will load the data on the bus.\nb. Suppose the output port is designed using \ufb02ip-\ufb02ops.\nWhat changes would be r equir ed to interface and operate\nthe port? Also, draw the output port and illustrate/e xplain\nhow and when it will load the data fr om the bus. Note: the\nport \ufb02ip-\ufb02ops ar e not operated with a continuously changing\nclock signal.\n9.10 Suppose port addr esses 0x60 and 0x 64 ar e, respectively,\nassigned to memory -mapped I/O ports 0 and 1 (each a 4- B\nport) in Fig. 9.17 . Design an addr ess decoding cir cuit for the\ntwo ports. F or simplicity, assume an 8-bit addr ess bus.\n9.11 Explain in what way a moder n DMA contr oller that pr ocesses a\ndata structur e containing DMA transfer infor mation is better\nthan a simple DMA contr oller shown in Fig. 9.20  and how a\nmoder n contr oller may a\ufb00ect the perfor mance of a system.\n9.12 Explain why when a r eceiving IV ( IVr) is less than or equal to\nthe IV of the cur rently e xecuting inter rupt handler ( IVc), the\nCPU will ignor e the IVr until IVr > IVc.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2082, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e338d10-3d3b-49ff-bdb1-2a1009e8c605": {"__data__": {"id_": "8e338d10-3d3b-49ff-bdb1-2a1009e8c605", "embedding": null, "metadata": {"page_label": "667", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "67eeba84-66b9-4e07-84c1-e698d2a7085b", "node_type": "4", "metadata": {"page_label": "667", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "de1814cecc1398f84d74da9d576f7a0ca87ded25e2be79375b7dfcae50d95006", "class_name": "RelatedNodeInfo"}}, "text": "9.13 Assuming that the delay for a NAND gate is 0.1 ns and for a\ntri-state bu\ufb00er is 0.2 ns, estimate the worst-case delay befor e\nan IV fr om a 16-node daisy -chained inter rupt structur e is\nplaced on the bus.\n9.14 The Spar c CPU implements eight-window \u201c register windows\u201d\nwher e the CPU data path includes eight copies of all the user -\naccessible r egisters. F or example, A CC, X, and SR in Fig. 9.26\nare the user -accessible r egisters. W ith a r egister window, the\nstate of a cur rently e xecuting pr ogram, upon subr outine call or\ninterruption, would be saved within the CPU instead of on\nmemory . Do the following:\na. Suppose the CPU in Fig. 9.26  has four r egister windows;\nexplain how having r egister windows impr oves service to the\nwaiting devices.\nb. Suppose four copies of A CC, X, and SR r egisters ar e used\nin Fig. 9.26  to cr eate r egister windows of size 4. Also, assume\nthe registers ar e now labeled A CC0, X0, and SR0 for window\n0, ACC1, X1, and SR1 for window 1, etc. Upon an\ninterruption, the ne xt instruction that e xecutes and r equir es\na register uses, for e xample, one of the r egisters in window\n1. That is, for e xample, the instruction \u201cMVSRX2A CC\u201d in the\nIH when it e xecutes perfor ms A CC1 \u2190 SRX, and the state of\nthe inter rupted pr ogram will r emain saved as the content of\nthe registers A CC0, X0, and SR0 in window 0. R TI will also\nswitch back to window 0 so the inter rupted pr ogram r esumes\nexecution using the r egisters in window 0. Design the four -\nwindow r egister windows cir cuit and brie\ufb02y describe how it\nwould be used to switch windows.\nc. Discuss how to e xtend the r egister windows in part (b) to\nalso support subr outine calls with the ability to pass a single\nparameter to a subr outine via A CC. Also, what should be\ndone when ther e are several levels of subr outine calls.\nd. A r egister window pr ovides certain advantages. Suppose\na CPU has eight r egister windows. What can pr ogrammers do\nto tak e advantage of r egister windows?\ne. Resear ch and write a short paper on how a Sprac\nprocessor implements overlapping r egister windows to pass\nparameters.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2126, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0ef806ec-84eb-464c-937a-900ea1193522": {"__data__": {"id_": "0ef806ec-84eb-464c-937a-900ea1193522", "embedding": null, "metadata": {"page_label": "668", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8195f182-88e0-4b54-9605-5526395e59b3", "node_type": "4", "metadata": {"page_label": "668", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "929f40bc4d9c68a7b13ad703e74a7d303c5611097165504277336bd9f3dd17c8", "class_name": "RelatedNodeInfo"}}, "text": "9.15 Brie\ufb02y state why a USB host contr oller combines pack ets into\nframes that ar e periodically transmitted to/fr om devices.\n9.16 Brie\ufb02y state why the iTDs ar e processed befor e the qTDs in\nFig. 9.29 .\n9.17 Brie\ufb02y state why DMA -1 and DMA -2 in Fig. 9.30  are necessary .\n9.18 Brie\ufb02y state the purpose for the inter rupt on asynchr onous list\nadvance in a USB host contr oller interface. (Hint: How moder n\nmoder n DMA contr ollers work.)\n9.19 Computer security (secur e inter ruption): See Ex ercise 11.36\nfor detecting r egister spoo\ufb01ng, splicing, or r eplay attack upon\nreturning fr om an inter ruption (also see Sec. 11.11.9).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 634, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f451ea8-a5b1-4dde-8cc5-a52fda6a3a28": {"__data__": {"id_": "3f451ea8-a5b1-4dde-8cc5-a52fda6a3a28", "embedding": null, "metadata": {"page_label": "669", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "85194c68-6605-4d16-a1f6-bd81ebaf0940", "node_type": "4", "metadata": {"page_label": "669", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "910fe1dc1fe4d489e3604012c2468211a7c9e9e96f9ee1696e4a951729777a54", "class_name": "RelatedNodeInfo"}}, "text": "CHAPTER 10\nMemory System\n\u00a0\n10.1 Introduction\nThe perfor mance of both unifor m memory access (UMA) and\nnonunifor m memory access (NUMA) systems depends on latency . Any\nimprovement in latency, including memory laten cy, would increase\nthe bandwidth of the system. The longer a CPU (processing core)\nstays idle, the number of clock cycles requir ed to execute programs\nincrease, reducing instruction throughput. In addition, the capacity of\nboth nonvolatile storage and main memory has to be large enough for\na system to store many programs and data so it can run systems and\napplication programs concur rently. This means memory must be cost\ne\ufb00ective too. However, at the moment, there is no single technology\navailable that can be used to build a low-latency, large-capacity, and\nlow-cost memory .\nCommonly used memory  technologies today are static random\naccess memory (SRAM), synchr onous dynami c random access\nmemory (SDRAM), and magnetic and \ufb02ash memory . SRAM\ntechnologies are the fastest, but because SRAMs are used as cache\nmemory inside the processor, they are also the most expensive.\nSDRAM technologies cost less, but are slower, requiring access time in\nthe order of 100 CPU cycles. Magnetic and \ufb02ash memories are\nnonvolatile and cost the least, but they are the slowest and requir e", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1297, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "415b51d7-48d5-4c17-89b9-ceede8bac490": {"__data__": {"id_": "415b51d7-48d5-4c17-89b9-ceede8bac490", "embedding": null, "metadata": {"page_label": "670", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "77ac52e2-e864-47fe-99c7-06a2185a9ce7", "node_type": "4", "metadata": {"page_label": "670", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "843b46d5e2545486f047b9e1eb00f1afd1200e1940f38261235193fb81899d3d", "class_name": "RelatedNodeInfo"}}, "text": "access time in the order of milliseconds; they are about 1,000,000\ntimes slower than CPU.\nHowever, programs contain loops and data is typically accessed\nfrom memory sequentially . Thus, only by using  a combination of\ndi\ufb00er ent memory technologies, organized in a hierar chy, as illustrated\nin Fig. 10.1, with the slowest memory at the bottom and the fastest\nmemory on top, can one create a memory system that reduces\naverage latency, minimizes cost, and has large storage capacity . Note\nthat the instruction mem ory (IM) and data memory (DM) that were\nintroduced in Chap. 8 as part of CPU data path are relabeled as\ninstruction cache (Ic) and data cache (Dc) in the \ufb01gur e.\nFIGURE 10.1  A memory system with four levels of memory hierar chy.\nOther memory system design objectives may include low power\nusage, high reliability, and small physical size. The low power and\nsmall size r equir ements ar e especially important for handheld devices.\nData is copied from the lowest level of memory hierar chy to the\nnext higher level until it is at the highest level befor e they are\naccessed by the CPU. In addition, multiple data items (as a block or", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1147, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a83b5352-5cf4-4d7a-b31d-9d967afa1af2": {"__data__": {"id_": "a83b5352-5cf4-4d7a-b31d-9d967afa1af2", "embedding": null, "metadata": {"page_label": "671", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7503468-1f90-4dc5-b282-ec0f842c9bed", "node_type": "4", "metadata": {"page_label": "671", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "af90229737f5ab6ef012a9e8b8a55853154562cb381c63dedb081cf3b4c13743", "class_name": "RelatedNodeInfo"}}, "text": "page) are copied betwee n levels of the hierar chy. Further more, the\nCPU will wait to receive data as long as data is in main memory . A\nprogram\u2019s execution will be stopped, as we see in Sec. 10.4, if the\ninstruction or data the CPU r equested is not in the main memory .\nWhile a program is executing, modi\ufb01ed data is copied from a higher\nlevel to the next lower level of memory hierar chy to create space or to\ninform the lower -level memory of changes when necessary . This\ncreates scenarios wher e two copies of the same data in two di\ufb00er ent\nmemories may not be the same. For example, consider a data item at\nmemory address X that is copied from main memory to Level 2 (L2)\ncache in Fig. 10.1. The data is then copied from the L2 cache to Level\n1 (L1) data cache befor e it is accessed by CPU. Now suppose the CPU,\nafter operating on the data item, writes the new value in the L1 cache,\nmodif ying the copy, indicated as \u201c(X)\u2032\u201d in the cache. The copy of the\ndata item in the L1 cache  is now di\ufb00er ent from the one still stored in\nthe L2 cache and main memory .\nNow, at this time, suppose the operating system (OS) instructs a\ndirect memory access (DMA) contr oller to transfer data, including the\ndata at address X, from main memory to the hard disk. Clearly, the\ndata item that should be copied to the disk must be the modi\ufb01ed one\nsitting in the L1 cache. Likewise, in another scenario, the OS may\ninstruct the DMA contr oller to update the main memory, including the\ncontent of address X, with the copy on the hard disk. This time, the\ncopy in the main memory  would be the latest and valid and the ones\nin the two caches would be stale and not valid. Therefore, in order to\nprevent stale data from ever being saved on disk or ever being\naccessed by the CPU, certain data coherency  protocols must be\nimplemented between levels in memory hierar chy.\nIn addition, because volatile memory access time is very small (in\nthe order of 100 CPU cycles maximum) as compar ed to the speed of a\nnonvolatile memory (disk or \ufb02ash drive), the tasks of copying and\nmaintaining coher ency between memory levels, except between the\nlowest two levels in the hierar chy, are perfor med in hardwar e.\nCopying and maintaining data coher ency between the nonvolatile\nmemory (e.g., hard disk), known as virtual memory , and the main\nmemory, known as physical memory , requir e certain functions be\nperfor med in software and certain operations in hardwar e. A virtual\nmemory management system decides wher e in physical memory to\nstore the codes and data of one or more programs stored on the hard\ndisk.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2589, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fdb15ce4-838f-487e-9823-720668cf3a12": {"__data__": {"id_": "fdb15ce4-838f-487e-9823-720668cf3a12", "embedding": null, "metadata": {"page_label": "672", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c719a2c-e902-48d4-a205-2311bcccf33a", "node_type": "4", "metadata": {"page_label": "672", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5de0abea9192705284117ad73a5af58e0c96c642589f63b62bfccbac01a41ba3", "class_name": "RelatedNodeInfo"}}, "text": "This chapter presents the architectur e and organization of memory\nhierar chy and provides alternative cache organizat ions and coher ency\nprotocols. Depending on the requir ements, a cache can be designed\nto minimize hardwar e and access time or tra\ufb03c. Power consumption\nand the relationship between a cache organization and system\nperfor mance ar e also discussed.\nThe chapter also presents and illustrates virtual-to -physical address\nmapping schemes, and wher e exactly within the processor chip this\nmapping scheme must be implemented is discussed and alternative\nsolutions ar e presented.\n10.1.1 Memory Hierarchy\nIn Fig. 10.1 , less costly nonvolatile memory is used to build potentially\nunlimited memory storage. DRAM technologies, typically SDRAMs, are\nused to build a large main  (physical) memory, and SRAM technologies\nare used to build small but fast cache memories inside the pr ocessor .\nProgram code and data are copied from the nonvolatile storage to\nthe main memory and from there to the L2 cache and then to the two\nL1 caches during program execution. Only a small fraction of each\nlower -level memory content can be retained in the next higher -level\nmemory . In addition, because DMA transfers (Chap. 9) and burst\nmemory transfers ( Chap. 7 ) are more e\ufb03cient, pages (e.g., each 4 KB)\nare transfer red between a nonvolatile storage and main memory .\nBlocks (e.g., 32 B or 64 B), also called a cache block or cache line,\nare transfer red between main memory and the L2 cache, and even\nsmaller cache lines are transfer red between the L2 cache and each of\nthe L1 caches. Instruction cache lines are transfer red from the L2\ncache to Ic and data cache lines between the L2 and Dc.\nA request from the CPU to access memory always  goes \ufb01rst to the\nIc if the address indicate s an instruction or to the Dc if the address\nindicates data (also see Fig. 8.5 in Chap. 8). If the copy of the target\nmemory block is in Ic or Dc, the access is called a cache hit.\nOtherwise, the access is called a cache miss , and the request is\nforwar ded by the Ic or Dc to the uni\ufb01ed L2 cache, which contains both\ninstructions and data. Again, the access is called a cache hit if the\ncopy of the block is in the L2 cache and a cache miss otherwise. If it is\na cache hit, the L2 cache  transfers a copy of the block, if instructions,\nto Ic or, if data, to the Dc. On the other hand, if the access is a cache\nmiss, the L2 cache forwar ds the r equest to main memory .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2459, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "549d37f0-6146-4610-8490-b4a21300e4f9": {"__data__": {"id_": "549d37f0-6146-4610-8490-b4a21300e4f9", "embedding": null, "metadata": {"page_label": "673", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b463cebc-ee15-47a2-b61c-a156191dddd4", "node_type": "4", "metadata": {"page_label": "673", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "ef97451e3a096115067c8cbf65048a626da1b9bec77b591abe0c745116f14859", "class_name": "RelatedNodeInfo"}}, "text": "In modern computer syste ms, a program is typically not loaded into\nmain memor y in its entirety. Instead, program and data pages are\ncopied from the nonvolatile storage to main memory as needed. The\nmodi\ufb01ed data pages are copied back to nonvolatile storage to free up\nspace in main memory . The instruction pages, however, are discar ded\nif they ar e not r eferenced for some time and memory space is needed.\nThis process is called paging , and it involves the OS and requir es\nhardwar e to implement a virtual memory organization , discussed\nin Sec. 10.4 .\nSpeci\ufb01cally, if a page in main memory contains a target instruction\nor data block on L2 cache miss, a copy of the block is transfer red to\nthe L2 cache. Otherwise, if the page is not in main memory, the\nrequest causes a page fault interruption (Chap. 9), and the execution\nof the program is suspended and contr ol is returned to the OS. The\nexecution of the program resumes once the page is loaded into main\nmemory .\nAs was discussed in Chap. 8, during the entire time that a cache\nmiss is being resolved, the processing core (CPU) is idle and does not\nexecute instructions. Cores that implement multithr eading can switch\nto execute instructions from a di\ufb00er ent thread. Moder n processors are\ntypically designed with three levels of cache mem ories, as illustrated\nin Fig. 10.2. Each of the processing cores communicates with its own\nL2 cache, and all the L2 caches communicate with a shared third-level\nL3 cache, thus creating a UMA system within the processor chip. A\nshared cache  has the advantage of sharing cache lines used by two or\nmore threads, but also has the disadvantage of one thread causing\nthe removal of blocks used by another thr ead.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1713, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "971bcef0-fb2d-4ef5-81ea-5d4c1518ca9a": {"__data__": {"id_": "971bcef0-fb2d-4ef5-81ea-5d4c1518ca9a", "embedding": null, "metadata": {"page_label": "674", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4e37e7d8-b83b-4221-bbb4-d676c85330d4", "node_type": "4", "metadata": {"page_label": "674", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "272c0ea4bcf1f1878e5959b3cb1442fd2b8c7ab238f535928ef1825644f069e5", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 10.2  Example of a \ufb01ve-level memory hierar chy.\nFor example, consider Thread 0 and Thread 1 from the program\nexample in Sec. 8.4.4  (Chap. 8). Recall that each thread operates on\ndi\ufb00er ent array elements, computing their sum as sum[0] by Thread 0\nand sum[1] by Thread 1. Thread 1 then outputs the quantity sum[0] +\nsum[1]. With a shared L3 cache, Thread 1 would be able to access\nsum[1] from L3, saving one main memory access. In general, with the\nL3 shared cache, not only would the execution of two communicating\nthreads be faster, but also the execution would generate less main\nmemory tra\ufb03c. An Intel\u2019s Xeon-E7-4870 (Nehalem architectur e)\nprocessor has 10 cores, each attached to a 256KB L2 cache and then\nto a 30-MB shared L3 cache. The processor can access a maximum of\n32-GB main memory space.\nMemory Latency\nThe memory  hierar chy reduces average latency because programs\ncontain loops, and data accesses are typically sequential. Consider\nthe memory hierar chy shown in Fig. 10.1. Suppose a block in main\nmemory contains the instructions of a small for-loop. The \ufb01rst time\nthat the for-loop executes , the request to fetch the \ufb01rst instruction will\nresult in a cache miss. The block would then be copied from main\nmemory to the L2 cache and from there to Ic. Therefore, the latency\nto transfer a copy of a block fr om main memory to Ic can be long.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1365, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "24d7eea2-8aa2-4657-953d-5cedac6b80d9": {"__data__": {"id_": "24d7eea2-8aa2-4657-953d-5cedac6b80d9", "embedding": null, "metadata": {"page_label": "675", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0cf36054-4a67-4372-a5b0-dfda28bc7112", "node_type": "4", "metadata": {"page_label": "675", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "22fecebf69b1e39faa76f68d0b7891b2ccea43b85750a19b9e6d74068d1c16f5", "class_name": "RelatedNodeInfo"}}, "text": "However, once the block is loaded into Ic (a smaller SRAM), the\nsubsequent instructions from that block are fetched more quickly\n(e.g., within 1 CPU clock cycle) from Ic. Therefore, this reduces the\naverage mem ory latency for executing the for-loop. The same is true\nwhen data is accessed sequentially from main memory . It takes a\nlonger time to access the \ufb01rst data item in each data block that\ncauses a miss, but the subsequent accesses from the block in Dc (also\na smaller SR AM) would be quick er.\nIn general, how soon each instruction in a program is executed\nagain gives an indication of how much temporal locality  exists in\nthe program. Because the instructions in a small for-loop are\nfrequently executed and once an instruction executes it will soon\nexecute again (due to a small loop), high temporal locality is said to\nexist in the for -loop.\nLikewise, in what order a program\u2019s data structu re elements are\naccessed during execution  indicates how much spatial locality  exists\nin the program. For example, consider a for-loop that processes an\narray. During  the execution of the for-loop, if the array elements are\naccessed from sequential memory addresses, then there is a high\nspatial locality among the elements accessed fr om main memory .\nNote that temporal locality may also apply to program data\u2014for\ninstance, if the same set of data elements is accessed within a loop.\nLikewise, spatial locality would apply to pr ogram instructions.\nCache hit is deter mined in terms of probability of an access\nresulting in a hit. For example, while executing a program, if 95% of\nthe time instructions are found in Ic, then the instruction hit ratio\n(also called the hit rate) is 0.95, resulting in an instruction miss\nratio  (also called a miss rate) of 0.05 (1.0 \u2013 0.95). How often data is\nfound in Dc determines a program\u2019s data hit and miss ratios. L2 and\nL3 caches are uni\ufb01ed (both contain instructions and data). Thus, they\nwould provide hit and miss ratios for the entire program. A high or low\nhit ratio depends on how much temporal and spatial localities exist in\nthe pr ogram.\nWhile a good programme r is expected to be mindful of temporal\nand spatial locality properties when writing programs, compilers do\nrearrange codes (e.g., switching nested loops) when possible to\nimprove data spatial locality of pr ograms during e xecution.\nExample 10.1.  Consider the memory hierar chy shown in Fig. 10.1. Given the following\ninformation, estimate its average memory latency . Also assume peak main memory\nbandwidth.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2531, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "65bc75da-3766-4fba-aca3-24105abc60de": {"__data__": {"id_": "65bc75da-3766-4fba-aca3-24105abc60de", "embedding": null, "metadata": {"page_label": "676", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "10ace7a1-7cd4-419a-86b1-e93a4e4183c1", "node_type": "4", "metadata": {"page_label": "676", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "99bea9a209b0c60786efcf44120731ce08de44f9d6e87aa534d90f936dc9ef2c", "class_name": "RelatedNodeInfo"}}, "text": "Solution:  For peak perfor mance, the time requir ed to activate a row and issue a column\naddress is ignor ed. This can happen when SDRAM memory operations to access multiple\nblocks are overla pped. For example, consider the SDRAM timing diagram shown in Fig. 7.19\n(Chap. 7), where two separate burst accesses (each forming a block) of size 4 are read from\nmemory in sequence. In the \ufb01gure, the \ufb01rst data items in the two blocks are labeled x and y,\nrespectively . Note that memory operations are overlapped. After the \ufb01rst data item x is\naccessed (i.e., appears on the data bus), one new data item is accessed every data bus clock\ncycle. The total time to access data items y, y + 1, y + 2, and y + 3 is only proportional to\nfour data bus clock cycles. If memory is capable of supplying one data item every clock cycle,\nthe mem ory is said to be operating with peak bandwidth. As calcula ted next, the SDRAM can\ndeliver 1.6 GB peak transfer . Therefore, it would take 20 ns to transfer a 32-B block from main\nmemory to L2 cache.\nThere is a 95% chance that a tar get instruction block is in the Ic cache and a tar get data block\nis in the Dc cache. During the 5% (100 \u2013 95) of the time that a target block is not in the L1\ncaches (Ic or Dc), there is a 90% chance that the block is in the L2 cache. Finally, during the\n10% (100 \u2013 90) of the time that the block is not in L2, the block is in main memory . As\ndiscussed earlier, if the block is not in main memory, the execution of the program would be\nstopped and the CPU would be assigned by the OS to execute a di\ufb00er ent program. Therefore,\nthe estim ated average memory latency calculated next does not (and should not) include\npaging delays; however, paging delays ar e included in the pr ogram\u2019s total e xecution time.\n\u00a0\nNote the 1.185 ns average latency is almost the same as the 1 ns latency assumed for both\nL1 caches, which ar e the fastest memories in the memory hierar chy.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1935, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "94d1d4f1-ff33-4bf3-8a0e-d1768e940ff6": {"__data__": {"id_": "94d1d4f1-ff33-4bf3-8a0e-d1768e940ff6", "embedding": null, "metadata": {"page_label": "677", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1f0d9bb1-1ccd-4023-bd79-389b02a2afe6", "node_type": "4", "metadata": {"page_label": "677", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3db9640409765d19bfd953e6e9c95ee9652bd77adbd9f7b0386752e2f1e56de7", "class_name": "RelatedNodeInfo"}}, "text": "10.2 Cache Mapping\nEach lower -level volatile memory in a hierar chy, starting from main\nmemory, has more blocks than there is space in the next higher -level\nmemory . Therefore, each cache memory must implement a method to\nquickly verify if the copy of the requested block is in cache, or if the\ncopy must be transfer red from the next lower -level memory . Because\na cache is simply a fast temporary storage space, a main memory\naddress, issued by the CPU, is partitioned into a block address  and\nan o\ufb00set , which  ident i\ufb01es a speci\ufb01c byte/wor d within the block. The\nblock address is then used to deter mine the location of the block in\ncache called a slot address  (or slot number) or an inde x.\nExample 10.2.  Consider 64 KB main memory, 1 KB L2 cache, and 8 B blocks. Dete rmine the\nnumber of memory blocks, the number of cache slots, the range for block addresses, and the\nrange for slot addr esses.\nSolution:  The number of blocks is deter mined by dividing the main memory size by the block\nsize as follows:\nThe number of slots in the cache is similarly deter mined:\nThe 16-bit (216 B = 64 KB) memory address is partitioned into a 13-bit block address and a 3-\nbit o\ufb00set , as illustrated in Fig. 10.3 . The range for block addresses is 0 to 8191, and the range\nfor slot addresses is 0 to 127. Note that the cache memory can only hold 1.56% (128/8192 \u2217\n100) of total blocks in the main memory .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1404, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3d17982b-a403-4fcc-b1dc-1dd25d019140": {"__data__": {"id_": "3d17982b-a403-4fcc-b1dc-1dd25d019140", "embedding": null, "metadata": {"page_label": "678", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1a6b3f20-6569-46d1-b328-51618d883000", "node_type": "4", "metadata": {"page_label": "678", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3eb4a3182b20183339425a16b0b80376b0bf860da74ab440c19273e2a5cc5ce6", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 10.3  A memory addr ess is made of a block addr ess and an\no\ufb00set; each block is assumed to be 8 B.\nDirect mapping  and set-associative mapping  are two\ncommonly used methods to map a block address to a slot address and\nare used between any two connecting memories in a hierar chy,\nstarting with main memory . In a direct-mapped cache, a block copy\ncan be stored in only one speci\ufb01c cache slot. In a set-associative\nmapped cache, a copy can be stored in a slot among a smaller set of\nslots. Direct-mapped caches are simpler, faster, and more power\ne\ufb03cient because a block copy can only be in one slot.\nFully associative mapping  is often used in some applications\nwher e a cache miss has a much longer latency . In this case, data can\nbe stored in any cache slot, resulting in a higher hit ratio. A fully\nassociative mapped cache, however, requir es more hardwar e, as all\nthe slots are searched in parallel (at the same time). In the following\nsections, direct mappe d and set-associative mapped cache\norganizations are discussed in detail. The application of a fully\nassociative mapped cache in the design of virtual  memory system is\npresented in Sec. 10.4 .\n10.2.1 Direct Mapping\nFor a direct-mapped cache, we need two pieces of information to\nquickly determine whether or not the cache contains a copy of a\ntarget block. One is a slot address, which is deter mined using modular\n(Mod) arithmetic, and the other is called a tag, deter mined using\ninteger division. For example, consider two block addresses, 129 and\n1153, and a cache memory with K = 128 slots. For these two block\naddresses, the corresponding slot and tag values  are calculated as\nfollows:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1667, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bab19f37-9c85-4876-a346-d8724a314b1e": {"__data__": {"id_": "bab19f37-9c85-4876-a346-d8724a314b1e", "embedding": null, "metadata": {"page_label": "679", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e02c9ae-f2e7-4f94-8b84-1a3283ece41c", "node_type": "4", "metadata": {"page_label": "679", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3a8b82862994e8696638fa6efa7abe0071122c51ace20a780fc73e4afb43c0ac", "class_name": "RelatedNodeInfo"}}, "text": "However, if K is a power of 2 (i.e., K = 2m), the mapping is simple\nand requir es no hardwar e, as Eqs. (10.1)  and (10.2)  illustrate for an n-\nbit block addr ess X.\nThis is furthe r illustrated as follows for block addresses X = 16 and\n29 using K = 8 (23):\nCache Organization\nTable 10.1 shows two main memory addresses, 0x408 and 0x240B,\nthat point to byte 0 in block 129 and byte 3 in block 1153,\nrespectively . Only the copy of one of the blocks (shown by its address\nvalue) can be stor ed in slot 1, as illustrated in Fig. 10.4 . The tag, which\nalso is stored in cache, indicates the block address (129 or 1153) that", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 621, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e9834c17-7d59-478c-be33-a0906ecaeafd": {"__data__": {"id_": "e9834c17-7d59-478c-be33-a0906ecaeafd", "embedding": null, "metadata": {"page_label": "680", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74543168-e3d0-45a6-ab32-b1db8373eba9", "node_type": "4", "metadata": {"page_label": "680", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "db1b593079b4de8b3638197c80eab5730cf4fdf00bdca03b08dc5b69176b12a8", "class_name": "RelatedNodeInfo"}}, "text": "the slot contains a copy of. In the \ufb01gure, tag = 9 = (1001)2 indicates\nthat Slot 1 contains a copy of block 1153.\nTABLE  10.1  Direct-Mapped Cache Examples Using 64 KB Main Memory, 1 KB L2 Cache, and\n8 B Blocks\nFIGURE 10.4  A logical view of a dir ect-mapped cache illustrating block\n129 and 1153 mapping to slot 1; also shown is block 1153 copied to\nslot 1. Memory addr esses 0x408 and 0x240B point to a byte in each of\nthe blocks.\nThe cache also stores additional bits per slot that indicate the state\nof a block copy. The bits are used to implement a cache coherency", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 569, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "98316f64-a853-4e39-9df0-abb90f65273c": {"__data__": {"id_": "98316f64-a853-4e39-9df0-abb90f65273c", "embedding": null, "metadata": {"page_label": "681", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bd1e71f0-4068-4970-9bf4-97f3d42c7a3a", "node_type": "4", "metadata": {"page_label": "681", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "20bb22edc86b45dc64cf49bae6617205e55ab43a1919a8b02cb04ecd7cf93b4a", "class_name": "RelatedNodeInfo"}}, "text": "protocol  to make sure no stale data can be sent to the CPU or stored\non disk. These bits are shown as cache coher ency bits (CCB) in the\n\ufb01gure.\nFigure 10.5 illustrates the data path for the direct-mapped cache\nshown logica lly in Fig. 10.4 . The data path consists of a 128-entry tag\nmemory  and a 128-entry line memory . The cache has the capacity\nto store a maximum of 128 blocks. Both the tag memory and the line\nmemory are accessed at the same time using a slot address. The\nincoming tag is compar ed with the tag stored in the tag memory . If\nthe two tags match, the cache access is a hit; otherwise, it is a miss.\nFor perfor mance reasons, while an incoming tag is compar ed with the\ntag stored in cache, the multiple xer (MUX) identi\ufb01es the target byte\n(or word). If the cache access is a hit, the byte is sent to the CPU\n(assuming an L1 cache) on a read cycle, which is illustrated in the\n\ufb01gure. If the access is a miss, the cache contr oller is trigger ed to\naccess the block from its connecting lower memory . Until a cache miss\nis resolved, e xecution of the pr ogram is stalled.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1091, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "06f69ebc-c851-427b-b89f-54c1b17b1037": {"__data__": {"id_": "06f69ebc-c851-427b-b89f-54c1b17b1037", "embedding": null, "metadata": {"page_label": "682", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "acad7d3c-c64e-497d-b395-137ea9e3a60e", "node_type": "4", "metadata": {"page_label": "682", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9b6d83bca07794df1b6b25045e1d6d94c572b2bdf482d5cde6a590d0da07fdde", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 10.5  A dir ect-mapped cache data path with 128 slots and 8 B\nblock illustrating cache r ead.\n10.2.2 Types of Cache Misses\nIn general, a cache miss is classi\ufb01ed as a cold miss, con\ufb02ict miss ,\ncapacity miss , true sharing miss , or false sharing miss . The\nfollowing examples illustrate cold, con\ufb02ict, and capacity misses. The\ntrue and false sharing misses relate to two or more threads accessing\nshared data blocks and ar e discussed in Sec. 10.3 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 455, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b3a60a60-0396-48b1-a2a5-86a7572340e4": {"__data__": {"id_": "b3a60a60-0396-48b1-a2a5-86a7572340e4", "embedding": null, "metadata": {"page_label": "683", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6687e31b-e712-432f-a822-87ca5a9664c4", "node_type": "4", "metadata": {"page_label": "683", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c95217c976e0bf6da98351e8acaf92acb6e86f2470872b4ba4b70f10604eb9b8", "class_name": "RelatedNodeInfo"}}, "text": "Example 10.3.  Consider the direct-mapped cache  shown in Fig. 10.4 . Assuming an L1 cache,\nsuppose the CPU accesses the following memory addresses in order 20 times. Deter mine the\ncache miss ratio for this sequence of memory accesses. Also, deter mine the number of cold,\ncapacity, and con\ufb02ict misses. The addr esses ar e 16-bits, given in he x.\n\u00a0\nA.0x3C10 assume address points to a byte in memory block\nBa\nB. 0x049 Cassume address points  to a byte in memory\nblock Bb\nC. 0x0410 assume address points to a byte in memory block\nBc\nD. 0x1C8 Dassume address points to a byte in memory\nblock Bd\nSolution:  We will \ufb01rst determine the number of cache misses and then use it to deter mine\nthe miss ratio for this sequence of memory accesses. The mapping  of the block addresses to\nslot addresses is given in Table 10.2. In the \ufb01rst round, the four memory addresses generate\nfour cache misses. Those misses associated with blocks Ba, Bb, and Bd are cold misses\nbecause the blocks are copied into three initially empty slots in cache. The address C also\nmaps to the same slot 2 as address A. However, because these two addresses have di\ufb00er ent\ntags, they are pointing to bytes in two di\ufb00er ent blocks in main memory; thus, a copy of Bc\nreplaces the copy of Ba in slot 2, causing a con\ufb02ict miss. It is called a con\ufb02ict miss because\nthere are still empty slots in the cache, but copies of Ba and Bc must still be stored in the\nsame slot 2. In the \ufb01rst r ound, ther e are three cold misses and one con\ufb02ict miss.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1502, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "37a999cc-0482-4a71-9dd0-daa7dc1207ca": {"__data__": {"id_": "37a999cc-0482-4a71-9dd0-daa7dc1207ca", "embedding": null, "metadata": {"page_label": "684", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aeaa3def-8894-4f1c-bf9c-e93459d4f8b1", "node_type": "4", "metadata": {"page_label": "684", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "226a8202c29197b195643896da089c153feed82c4c491ea11a622d786fac1f24", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  10.2  Direct Map of F our A ddresses Given in Example 10.3\nIn the second round, the copies of blocks Bb and Bd are already in\nthe cache and any read/write from these copies results in a cache hit.\nThe copy of Ba, which was replaced with a copy  of Bc in the \ufb01rst\nround, now replaces the copy of block Bc when address A is accessed\nagain, causing another con\ufb02ict miss. Accessing address C again\ncauses yet another con\ufb02i ct miss and replaces the copy of Ba in slot 2\nwith a copy of Bc. In the second round, there are no cold misses but\ntwo con\ufb02ict misses.\nThe hit/miss patter n in the second round repeats for the remaining\n18 rounds, resulting in zero cold and two con\ufb02ict misses per round.\nThe four addresses gener ate zero capacity misses because there are\nstill empty slots available  in the cache. The four addresses, accessed\n20 times, generate 42 total cache misses, resulti ng in miss ratio of\n52.5%, as deter mined by Eq. (10.3) .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 944, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b92fd02-e3dd-4dde-80d2-a045798cc23f": {"__data__": {"id_": "1b92fd02-e3dd-4dde-80d2-a045798cc23f", "embedding": null, "metadata": {"page_label": "685", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "81ffbfc7-3c0b-4e30-8d40-3791f63420e9", "node_type": "4", "metadata": {"page_label": "685", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0829b20362bd5d1c9199a8aaa7841007388f4692d252b1bdb1fc2c2819470bf6", "class_name": "RelatedNodeInfo"}}, "text": "Example 10.4.  Consider the direct-mapped cache illustrated in Fig. 10.4. Suppose main-\nmemory blocks 0 through 255 are accessed 10 times and in order. These blocks correspond to\nmemory addr esses 0x0 to 0x7FF . Deter mine the cache miss ratio for this sequence of memory\naccesses. Also deter mine the number of cold, capacity, and con\ufb02ict misses.\nSolution:  Again, we will \ufb01rst deter mine the number of cache misses and then use it to\ndeter mine the miss ratio for this sequence of memory accesses. The mapping of the block\naddresses to slot addr esses is given in Table 10.3 . In the \ufb01rst round , the copies of the \ufb01rst 128\nblocks (0 to 127) \ufb01ll the entire cache, each causing a cold miss, for a total of 128 cold misses\nbecause slots are initially empty . Each of the next 128 blocks (128 to 255) causes a miss and\nreplaces the copy of one of the blocks 0 to 127 already in cache. For example, a copy of block\n128 r eplaces the copy of block 0; a copy of block 129 r eplaces the copy of block 1; etc.\nTABLE  10.3  Direct Map of Main-Memory A ddresses Given in Example 10.4", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1075, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "96fe7fad-3eac-41bd-8700-0d33a109c03f": {"__data__": {"id_": "96fe7fad-3eac-41bd-8700-0d33a109c03f", "embedding": null, "metadata": {"page_label": "686", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6bfc4933-3cbe-42e9-acaf-50f94033aa06", "node_type": "4", "metadata": {"page_label": "686", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a8ad10f00f9e2db27c01b16562653a064730fda9878c8f008dc20f27c2c0678c", "class_name": "RelatedNodeInfo"}}, "text": "Therefore, in the \ufb01rst round, accessing blocks 128 to 255 would\ngenerate 128 capacity misses (the reason is forthcoming). In the\nsecond round , each of the blocks 0 to 127, whose copies in cache\nwere replace d with copies of blocks 128 to 255 in the \ufb01rst round, will\ncause a capacity miss. A copy of block 0 will replac e the copy of block\n128 now in cache; a copy of block 1 will replace the copy of block 129\nnow in cache; etc. The access of blocks 128 to 255 in the second\nround will replace blocks 0 to 127 already in cache , causing a total of\n256 capacity misses in the second r ound.\nThe capacity  miss patter n in the second round will repeat in the\nremaining eight rounds. On odd-number ed rounds , copies of blocks 0\nto 127 replace the copies  of blocks 128 to 255 in cache, and on even-\nnumber ed rounds (starting at 2), copies of blocks 128 to 255 replace\ncopies of blocks 0 to 127, resulting in 256 capac ity misses in each\nround. The number of total cache misses for 10 rounds is 2560 and\nthe miss ratio is 100%, determined by Eq. (10.4) . There are no con\ufb02ict\nmisses in this case.\nCapacity miss is somewh at di\ufb00er ent and distinct from a con\ufb02ict\nmiss that does not depend on cache size. For example, if the cache\nsize in Example 10.4  were double d from 1 KB to 2 KB, the cache would\nhave enough space to hold copies of all 256 blocks; thus, it would\nresult in only 256 total cold misses in the \ufb01rst round and zero misses\nduring the remaining nine rounds. This will improve the miss ratio\nfrom 100% to 10% (256/2560) and, therefore, the hit ratio from 0% to\n90%. In gene ral, a cache size is \ufb01xed and is deter mined during design.\nHowever, cache simulations can be used to choose a reasonable", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1707, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e86710e3-ca3b-4be3-a038-8d3c4aec89b7": {"__data__": {"id_": "e86710e3-ca3b-4be3-a038-8d3c4aec89b7", "embedding": null, "metadata": {"page_label": "687", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6c95f041-ea0b-493d-a919-438075a2ec39", "node_type": "4", "metadata": {"page_label": "687", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3d40d7d3937ac0bb1c0fe9587ec0491700cb01e94f4373f654af20913ade67b9", "class_name": "RelatedNodeInfo"}}, "text": "cache size that will not result in too many capacity misses. Con\ufb02ict\nand capacity misses ar e sometimes gr ouped together .\nIn general, miss ratio also depends on block size. For example, as\nexpected, with smaller blocks, there will be more cold misses. Using\nlarger block sizes will reduce the number of cold misses. However, the\nrelationship between block size and miss rate is program dependent,\nbut in genera l, when blocks are too small or too large relative to cache\nsize, miss rate incr eases.\n10.2.3 Set-Associative Mapping\nDirect mapping is simple  and requir es less hardwar e, but it has the\ndisadvantage of being too restrictive. Two or more frequently\nreferenced block addresses that map to the same  slot address may\ngenerate frequent cache misses and cause delays, as was illustrated\nby Example 10.3. Figure 10.6 illustrates a program example with two\nsuch blocks located 1 KB apart in memory . The cache is assumed to\nbe 1 KB with an 8 B block size. As illustrated in the \ufb01gure, block 129\ncontains instructions for a \u201csort\u201d routine, and block 1153 contains\ninstructions for a for-loop. As the for-loop executes and the sort\nroutine is called repeated ly, blocks 129 and 1153, which both directly\nmap to slot 1 (Table 10.1), will replace each other\u2019s copy in cache\nrepeatedly . This will increase execution time because the Ic must\nfrequently retrieve instructions in blocks 129 and 1153 from the L2\ncache. This will also increase CPU idle time; however, multithr eading\n(Chap. 8 ) could minimize this CPU idle time.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1531, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b358f0b2-365c-4a5d-b4ef-21f2d528cf53": {"__data__": {"id_": "b358f0b2-365c-4a5d-b4ef-21f2d528cf53", "embedding": null, "metadata": {"page_label": "688", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54a182e8-950e-429d-9878-d5b34b5a4aeb", "node_type": "4", "metadata": {"page_label": "688", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "56499770208cf41a2ec6f3c1a3710e0e6f03d25e787207d54f5d1886a5b44350", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 10.6  A program e xample illustrating the limitations of a dir ect-\nmapped cache; cache is 1 KB and block size is 8 B.\nA set-associa tive mapping is a way to decrease misses due to\ncon\ufb02icts, such as the mem ory access scenario shown in Fig. 10.6 . In a\nset-associative mapping, the cache memory is organized in sets, each\nwith a small (e.g., two, three, four, or eight) number of slots. A block\naddress is directly mappe d to a set address, but not to a slot address\nas is done in a direct-map ped cache. Within each set, a block can be\nstored in one of the slots deter mined by a replacement algorithm ,\nsuch as least  recently used (LRU), cyclic  (in a circular fashion, \ufb01rst-in,\n\ufb01rst out), or random .\nA replacement algorithm is implemented in hardwar e, and this\ncould make set-associative caches even more comple x and slower .\nLRU would requir e the most hardwar e as compar ed to the other two\nreplacement algorithms, and random would requir e the least\nhardwar e. It has been shown that LRU generally is the best in terms of\na lower miss ratio and random is the worst when cache size is small.\nThe performance of LRU and random for large cache sizes is about the\nsame and better than cyclic [1]. For further discussion on\nimplementation comple xities, r efer to the Ex ercises section.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1300, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9bf83a45-4e10-437e-ab14-1e14ca1291f1": {"__data__": {"id_": "9bf83a45-4e10-437e-ab14-1e14ca1291f1", "embedding": null, "metadata": {"page_label": "689", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "96661578-de76-4b54-97a1-944aba26e828", "node_type": "4", "metadata": {"page_label": "689", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "6746367b6e412a66bf5ea2ea9d0130ae6e1b5de9af2556d7c6ab0a0f91a71eea", "class_name": "RelatedNodeInfo"}}, "text": "Figure 10.7 illustrates the mapping of block addresses to a two-\nway (two slots/set) 1 KB set-associative cache, assuming 8 B blocks.\nThe 128 cache slots are grouped into 64 = 26 sets, with two slots in\neach set. A block address is converted to a set address and a tag\nusing Eqs. (10.1)  and (10.2) , with m = 6 instead.  The mapping of two\nmemory addresses, 0x408 and 0x240B, to a two-way set-associative\ncache with 64 sets is given in Table 10.4 .\nFIGURE 10.7  Logical view of a two -way set-associative cache with 128\nslots gr ouped into sets of two slots each.\nTABLE  10.4  The Mapping of Blocks 129 and 1153 to a Two-Way Set-Associative  Cache with\n64 Sets", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 661, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c14ba7b6-dca4-499e-9ba9-c2f0c29dd523": {"__data__": {"id_": "c14ba7b6-dca4-499e-9ba9-c2f0c29dd523", "embedding": null, "metadata": {"page_label": "690", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e872e296-25c4-466a-bcd4-e182d05787d7", "node_type": "4", "metadata": {"page_label": "690", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a9465d85b03fcd4611dbda7c02ddfc3ad0fe5b7d646676f43173791400f796fe", "class_name": "RelatedNodeInfo"}}, "text": "As illustrated in Fig. 10.7, block 1153 is copied to the cache \ufb01rst\n(assuming the memory access scenario shown in Fig. 10.6) and is\nstored in slot 0 of set 1. A copy of block 129, which also maps to set 1,\nis now stored in slot 1 of set 1. Therefore, the execution of the\nprogram in Fig. 10.6  will generate only two cache misses for accessing\nblocks 129 and 1153, as compar ed to many misses if the direct-\nmapped cache of Fig. 10.4  is used.\nCache Organization\nFigure 10.8 illustrates the data path for the two-way set-associative\ncache logically shown in Fig. 10.7. The top tag and line memories are\nreserved for slot 0 in each of the 64 sets. The bottom tag and line\nmemories are reserved for slot 1 in each of the 64 sets. During a\ncache read/write cycle, all four memories are accessed at the same\ntime, and the incoming tag is compar ed with both tags stored in the\ntwo tag memories. If a copy of the target block is in the cache, one of\nthe two tags read from the tag memories will matc h the incoming tag,\nresulting in a cache hit. Otherwise, the copy is not in the cache and\nthe access will r esult in a cache miss.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1125, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5c0f51ae-e77e-4962-bcf1-fd3619158777": {"__data__": {"id_": "5c0f51ae-e77e-4962-bcf1-fd3619158777", "embedding": null, "metadata": {"page_label": "691", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54906c16-4f34-4c80-bcc4-bbd2adf088c5", "node_type": "4", "metadata": {"page_label": "691", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "818131207c3bb9bd26cb38a29d07e97723274ac0e445344ed7cd6d343156b3c0", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 10.8  A data path for a two -way 64-set set-associative cache\nillustrating a cache r ead hit.\nBecause all four memory modules in a two-way set-associate cache\nare accessed at the same time, set-associative caches consume more\npower . One way to reduce power consumption is to use way-\npredicting  set-associative caches, wher e only one of the tag-line\nmemory pairs is searched \ufb01rst. If this produces a cache miss, then all\nthe tag-line memory pairs ar e sear ched ne xt at the same time [ 2].\nThe number  of ways in a set-associative cache needs not be\nmultiples of two. For example, a three-way set-associative cache\nwould requir e three pairs of tag and line memory modules; there are\nonly two such pairs in Fig. 10.8. Intel\u2019s eight-cor e Xeon processor,\nincludes a 24MB shared L3 cache organized as an eight-ported three-\nway (called 24-way) set-associative cache. Eight connecting L2 caches\ncan access the L3 cache  at the same time as long as accesses are\nfrom eight di\ufb00er ent sets.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 995, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c35ca160-d14c-4c1f-b966-2e4ec6beb940": {"__data__": {"id_": "c35ca160-d14c-4c1f-b966-2e4ec6beb940", "embedding": null, "metadata": {"page_label": "692", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5dbf75de-5b89-43df-90d7-d5cfad2b432c", "node_type": "4", "metadata": {"page_label": "692", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7f85e1a9fb351958547a8feddbd8046e65e03285d24517584bd28651723f4ce5", "class_name": "RelatedNodeInfo"}}, "text": "Example 10.5.  Consider the set-associative cache illustrated logically in Fig. 10.7. Suppose\nthe CPU r eferences the addr esses given in Example 10.3  20 times and in order. Deter mine the\ncache miss ratio for this sequence of memory accesses. Also, deter mine the number of cold,\ncapacity, and con\ufb02ict misses.\nSolution:  Table 10.5 presents the calculations to map block addresses to set addresses. In\nthe \ufb01rst round, the addresses generate four cold cache misses. Copies of blocks Bb and Bd\nare loade d into two empty slots in two di\ufb00er ent sets. The addresses for blocks Ba and Bc both\nmap to set 2, but this time, the copies of both Ba and Bc are stored in two separate slots in\nset 2. In the remaining 19 rounds, because all the copies of the four blocks are in the cache,\nnone of the four addresses would cause a cache miss. There are also no capacity misses. The\nnumber of total misses is now four and miss ratio improves to 5% (hit ratio = 95%), as\ncalculated next. This is compar ed to 42 total misses and miss ratio = 52.5% (hit ratio =\n47.5%) using a dir ect-mapped cache (see Example 10.3 ).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1104, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b7d2a6a-b9bb-46c0-920a-999ad2bd9133": {"__data__": {"id_": "0b7d2a6a-b9bb-46c0-920a-999ad2bd9133", "embedding": null, "metadata": {"page_label": "693", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f66b84bf-d464-4ad6-9767-007443a7810c", "node_type": "4", "metadata": {"page_label": "693", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2685aa7384db7b989e46f4391fedfcd9603674765921c13c352d0b1506bd647a", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  10.5  Illustrating Two-Way Set-Associative Mapping of the Addresses Given in\nExample 10.3\n\u00a0\n10.3 Cache Coherency\nEach cache memory must implement a coher ency protocol to ensur e\nthat a read cycle always  returns data from the latest copy of the\nblock, no matter wher e the latest copy is (in a cache or main\nmemory). For example, consider a two-processor system illustrated in\nFig. 10.9 . For simplicity, each processor is shown with one core and an\nL2 cache that connects to the memory bus. The system also contains\na bridge between the memory bus and I/O bus. The DMA contr oller\ntransfers pages between main memory and the disk drive. Also shown\nin the \ufb01gure are the copie s of two memory blocks, Ba and Bb, already\ncopied to some of the cache memories.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 764, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7f0dd1a3-6ef8-4c68-b8de-2d3d2d50164c": {"__data__": {"id_": "7f0dd1a3-6ef8-4c68-b8de-2d3d2d50164c", "embedding": null, "metadata": {"page_label": "694", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ce5d38a9-229d-4925-a638-4616c16b20c6", "node_type": "4", "metadata": {"page_label": "694", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9d09aae0f34001a8387689bde33fc9d40293f8e12e9c57518e068384f9fa50d8", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 10.9  Two-processor UMA ar chitectur e.\nIn the \ufb01gure, processor 1 (P1) may execute a store instruction to\nupdate a wor d, say, in the copy of block Bb in Dc1. Because the copies\nof Bb also exist in other caches and also in main memory, unless the\nother caches and the main memory are made awar e of this update,\nthese copies will be old and di\ufb00er ent from the copy in Dc1. Likewise, a\nDMA transfer may write a block, such as Ba, in main memory wher e\ncopies of Ba ar e in one or mor e caches.\nBecause CPUs take turns to complete a write cycle, copies of blocks\n(if any) are either invalida ted or are updated in the other caches. The\ntwo options are known as invalidation and update cache coher ency\nprotocols. A hybrid cache implements a combination of both\ninvalidation and update coher ency pr otocols.\n10.3.1 Invalidation versus Update Protocols", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 856, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "375f229f-0b1d-476b-8d46-fba4f8be8e12": {"__data__": {"id_": "375f229f-0b1d-476b-8d46-fba4f8be8e12", "embedding": null, "metadata": {"page_label": "695", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0600e155-c1fe-4827-a880-13cf16b0f115", "node_type": "4", "metadata": {"page_label": "695", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "74a13ea388d840898c5f2a24ddf9240f8d9ce4b6a1e8db933b9fa56a9fb4d794", "class_name": "RelatedNodeInfo"}}, "text": "In an invalidation protocol, when a block is update d in one cache, the\nother caches invalidate their copies and thus prevent stale data from\never being accessed. A cache memory with an invalidated copy must\nrequest to receive the updated copy when needed. Invalidation\nprotocols have the disadvantage of invalidating an entire block even if\nonly a single word is updated. This can increase the miss ratio\nespecially when pr ocessors (or cor es) access a shar ed block.\nFor example, suppose P0 in Fig. 10.9  accesses the \ufb01rst half of block\nBb, and P1 the second half of Bb. Each time that P0 writes to its copy\nof block Bb, the copies of Bb in C1 and Dc1 are invalidated. If P1\naccesses block Bb again, there will be a cache miss in Dc1. Dc1 must\nnow request an updated copy of Bb, even though the update was\nmade to the \ufb01rst half of the block and not the second half accessed by\nP1. In this case, the cache miss is called false sharing  because P0\nand P1 are not really sharing data in block Ba. If P0 and P1 were\nindeed acces sing the same one or more data items in block Ba, the\nDc1\u2019s cache miss would be called a true sharing  miss.\nIn an update protocol, each cache memory must broadcast and\ninform other caches of any updates. The caches must update (not\ninvalidate) their copies of the block (if any).  However, update\nprotocols have the disadv antage of increasing overall bus tra\ufb03c due\nto unnecessary updates. For example, suppose P1 is done processing\ndata in block Bb, but Bb is still in C1. Now, each time that P0 writes to\nblock Bb, an update protocol must inform C1 even though P1 no\nlonger needs to access block Bb.\nBecause update protocols  can potentially increase protocol-r elated\ntra\ufb03c, they are not very common. However, a hybrid cache protocol\ncan use an adaptive scheme to utilize the best featur es of the two\nprotocols. For example, a hybrid cache protocol may invalidate a copy\nof a block when the copy has been updated a number of times. In this\ncase, if P1 is done processing block Ba and C1 still has a copy of Ba,\nthe copy would be invalidated thus, preventing futur e unnecessary\nupdates. Two common invalidation protocols, write through  and\nwrite back , are discussed ne xt.\n10.3.2 Snoop Cache Coherence Protocol\nEach cache memory requir es two contr ollers: a cache controller  and\na snoop controller . A cache controller responds to requests it\nreceives fr om its higher -level cache or r equests fr om a pr ocessing cor e", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2457, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7f2ec797-bd00-416f-b087-c5d7ca3b0256": {"__data__": {"id_": "7f2ec797-bd00-416f-b087-c5d7ca3b0256", "embedding": null, "metadata": {"page_label": "696", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "94139bdc-c867-4382-a491-fa903685cfd4", "node_type": "4", "metadata": {"page_label": "696", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "15f9c7be7fb0ef998c110c8e422ad07b2ea94f6e450098376111ff2bfc8d42db", "class_name": "RelatedNodeInfo"}}, "text": "if the contr oller belongs to an instruction or data cache (Ic or Dc). An\nsnoop contr oller responds to requests it receives from its lower -level\ncache or responds to read/write transactions that appear on the\nmemory bus if the contr oller belongs to the lowest-level cache.\nFor example, in Fig. 10.9, the cache contr oller of Dc0 responds to\nrequests it receives from P0. The snoop contr oller of Dc0 responds to\nrequests it receives from cache C0. Likewise, the cache contr oller of\nC0 responds to requests it receives from either Ic0 or Dc0, and its\nsnoop contr oller r esponds to memory bus transactions.\nAssuming an invalidation protocol, if the DMA contr oller in Fig. 10.9\ninitiates a write transact ion to block Ba, the C0\u2019s snoop contr oller,\nwhich continuously monitors (snoops) the memory bus, detects the\nwrite and invalidates its copy of Ba. C0, in turn, communicates with its\nhigher -level cache Ic0 or Dc0 and invalidates the copy of Ba (if any). A\nmemory write transaction initiated by one of the two L2 caches would\nbe similarly detected by the snoop contr oller of the other L2 cache,\nand the copies of the block (if any) in that processor would be\ninvalidated. The cache and snoop contr ollers that implement an\nupdate protocol operate similarly, except that, in this case, cache\ncopies ar e updated with the new values (instead of being invalidated).\n10.3.3 Write-Through Protocol\nWrite-thr ough is an invalid ation protocol. As its name implies, all write\nrequests made by a processing core go \u201cthrough\u201d the cache to update\nmain memory . On a write hit (i.e., cache hit is due to a write cycle),\nnot only the copy of the block in cache is updated \u2014the copy in main\nmemory is also updated. However, if the copy of the block is not\nalready in cache, the write cycle updates main memory, and typically,\nthe copy of the block is not loaded into cache. The reason for this is\nthat because a cache write transaction will always be forwar ded to\nmain memor y, whether a copy is in the cache or not, there is no need\nto copy the block to the cache. This is known as a write through with\nno allocation  cache  protocol, as illustrated by a \ufb01nite state diagram\n(FSD) in Fig. 10.10 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2194, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b121281e-9f9d-4354-b1b8-151e6d2aa856": {"__data__": {"id_": "b121281e-9f9d-4354-b1b8-151e6d2aa856", "embedding": null, "metadata": {"page_label": "697", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3ebc838f-d1e0-49c4-a2f1-b6aa96f14414", "node_type": "4", "metadata": {"page_label": "697", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "740276a072be1499c392e8e46a50b1b015346464557a19cab3a4e4370b9df2c9", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 10.10  A \ufb01nite state diagram illustrating write-thr ough pr otocol\nwith no allocation.\nA write -through cache uses 1 bit per block that indicates the state\nof the block either as valid (\u201cV\u201d) or invalid/not present (\u201cI\u201d), as shown\nin the FSD. The \u201cV\u201d and \u201cI\u201d states are encoded into a 1-bit CCB (Fig.\n10.5) and stored in tag memory . For example, 1 may be used to\nindicate the copy in cache is valid, and 0 indicate s the copy is either\ninvalid or not yet loaded and ther efore not pr esent.\nThe FSD shows \ufb01ve possible transitions as IWM \u2192 I, IRM \u2192 V, VWM \u2192\nV, VRH \u2192 V, and VXWH \u2192 I. The WM, RM, WH, RH, and XWH,\nrespectively, stand for write miss, read miss, write hit, read hit, and\nexternal write hit (a write hit in another cache). F or example, as stated\nearlier for a write hit, a write miss means the cache miss is due to a\nwrite cycle, r ead miss means the miss is due to a r ead cycle, etc.\nThe write-thr ough protocol has the advantage of being simple; a\ncopy of a block can only be in one of two states in each cache.\nHowever, this protocol has the disadvantage of potentially causing\nexcessive bus and cache tra\ufb03c, and thus, it is especially not\nrecommended for multicor e or multipr ocessor systems.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1218, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7d7a2756-3c77-4d52-9c09-a5549386817b": {"__data__": {"id_": "7d7a2756-3c77-4d52-9c09-a5549386817b", "embedding": null, "metadata": {"page_label": "698", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b25244bd-4a17-4080-81c7-2a5af73e30da", "node_type": "4", "metadata": {"page_label": "698", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "67bfc9ffaca8cdba8f7c0741c21d8051d0967246a3b619eee5f0276f7bfb4a06", "class_name": "RelatedNodeInfo"}}, "text": "For example, consider the multipr ocessor system in Fig. 10.9 and\nassume the caches implement the write-thr ough protocol shown in\nFig. 10.10 . Suppose the following code segment runs in P0. Because\nsum is declar ed global, the array elements will not be summed in\nregister; instead, the block that contains sum (e.g., Ba in Fig. 10.9 ) will\nbe updated in caches as well as in main memory each time that the\nnext array element is added to the partial sum. Now because sum will\nbe updated 100 times during the execution of the for-loop, Dc0 will\nneed to issue 100 memo ry transactions to update the L2 cache, and\nthe L2 cache in turn would need to issue 100 write transitions to\nupdate main memory, wasting valuable memory bandwidth.\n10.3.4 Write-Back Protocols\nWrite-back protocols are designed to reduce unnecessary bus and\ncache tra\ufb03c and still keep caches coher ent. A commonly used write-\nback invalidation protocol is known as the MESI (pronounced \u201cmessy\u201d)\nprotocol. Two other MESI-type protocols, called MESIF  (used by Intel)\nand MOESI  (used by AMD), are designed for more e\ufb03cient cache-to -\ncache communication.\nMESI\nIn the MESI protocol, a cache copy of a memory block can be in one of\nfour states: modi\ufb01ed (M), exclusively owned (E), shared (S), and\ninvalid (I) or not present. The FSD of the MESI protocol is shown in Fig.\n10.11 . The \u201cM\u201d means the copy in the cache is modi\ufb01ed (\u201cdirty\u201d) and\nis no longer \u201cclean \u201d\u2014that is, the same as the copy in main memory .\nThe state \u201cE\u201d indicates the cache has the only copy outside main", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1537, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a1d50ce2-baa6-4d6b-a058-1dfa1291f4d5": {"__data__": {"id_": "a1d50ce2-baa6-4d6b-a058-1dfa1291f4d5", "embedding": null, "metadata": {"page_label": "699", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "767f7ce0-44b8-4305-9b71-8a32da287ab2", "node_type": "4", "metadata": {"page_label": "699", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0483391fb31a8e5e0a1190458e31024d5330a57b76404b0efcb9ef05ac396383", "class_name": "RelatedNodeInfo"}}, "text": "memory . The \u201cS\u201d indicates two or more caches contain a copy, and in\naddition, each copy is \u201cclean.\u201d\nFIGURE 10.11  MESI pr otocol \ufb01nite state diagram.\nTable 10.6  descri bes each of the MESI state transitions. The protocol\ngreatly reduc es tra\ufb03c, but is more comple x than the write-thr ough\nprotocol. For example, in order to update a shared (\u201cS\u201d) copy, a MESI\ncache must perfor m the following tasks:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 402, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5af6369e-7bb3-41d6-901b-d3e28ec04dd9": {"__data__": {"id_": "5af6369e-7bb3-41d6-901b-d3e28ec04dd9", "embedding": null, "metadata": {"page_label": "700", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b67151d1-d6f4-44e3-8079-f756d45cfb4c", "node_type": "4", "metadata": {"page_label": "700", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2aad8c1a128aef6c499bb1d7448fd7b481f15498590765743192afe250e779dc", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  10.6  State T ransitions in the MESI P rotocol\n1. The cache (via its snoop contr oller) must infor m all other\ncaches befor e it can modif y an \u201cS\u201d copy . This is to mak e sur e the\ncopies in other caches ar e invalidated \ufb01rst.\n2. The cache then modi\ufb01es its copy of the block and changes\nthe state of the copy fr om \u201cS\u201d to \u201cM.\u201d Its snoop contr oller is\nresponsible for r esponding to a memory r ead/write r equest, which", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 427, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e9fd7ecd-ce51-4c4a-93dd-0364d6d2d8e3": {"__data__": {"id_": "e9fd7ecd-ce51-4c4a-93dd-0364d6d2d8e3", "embedding": null, "metadata": {"page_label": "701", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d2ca0c3f-af02-49fa-961b-466e63a3176d", "node_type": "4", "metadata": {"page_label": "701", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c5651f846c0ee0cc695547176754287c138705a54af369ac9439799d7315f7c6", "class_name": "RelatedNodeInfo"}}, "text": "may be issued by another cache or by a DMA contr oller, for the\nblock.\n3. The cache must write the modi\ufb01ed copy back to memory if\nthe copy is r eplaced.\nA write hit to an \u201cE\u201d copy does not, however, requir e the snoop\ncontr oller to inform other caches; thus, it saves bus transactions and\nreduces cache tra\ufb03c.\nIn many existing compute rs that implement the MESI protocol, it is\ncommon that main memory and not a cache is responsible for sending\nan \u201cS\u201d (clean) copy to a requesting cache. In addit ion, when a copy of\na modi\ufb01ed block in a cache is transfer red from the cache to a\nrequesting cache, the main memory is updated, and thus the state of\nthe copy in both the caches changes to \u201cS.\u201d\nIn a NUMA system the total memory space is divided among\ndi\ufb00er ent nodes, such as the one shown in Fig. 10.12 . Each node of a\nNUMA system includes a communication interface (CI) for internode\ncommunications. The CI of a r equesting node r outes a r emote memory\ntransaction to the CI of a destination node and therefore creates a\nvirtual connection between the two nodes. For example, in the \ufb01gure,\nCI0 and CI1 would make the memory buses in nodes 0 and 1 appear\nconnected, providing seamless communication between nodes 0 and\n1. However, this point-to-point communicatio n can potentially\nincrease latency when several caches request copies of a shared\nblock. For example, consider block Ba in the \ufb01gure. In this case, if the\ncaches imple ment the MESI protocol without the \u201c\ufb02ush2\u201d option (i.e.,\nwithout the arcs Read-X/\ufb02ush2 in Fig. 10.11 ), M3 would need to send a\ncopy of Ba to any cache that requests it. This could potentially make\nM3 a hot spot  that would introduce delays and thus increase average\nlatency . Likewise, if the caches implement the MESI protocol with the\n\u201c\ufb02ush2\u201d option for cache-to -cache communication, the processor with\na shared copy can beco me a hot spot. Two protocols, introduced\nearlier, that r esolve this issue ar e MESIF and MOSEI, described ne xt.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1977, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3867e158-f0c1-4c5a-87c9-208dbe39934c": {"__data__": {"id_": "3867e158-f0c1-4c5a-87c9-208dbe39934c", "embedding": null, "metadata": {"page_label": "702", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4ae2cd3c-972e-422b-800d-460e15ced20d", "node_type": "4", "metadata": {"page_label": "702", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "ecc6b008bed7a89e65c6660bd5ac4d86537c2b3f5509071bbbe6ee685b8d0872", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 10.12  A thr ee-node NUMA system block diagram.\nMESIF\nThis protocol is designed for cache-to -cache communication of shared\n(\u201cS\u201d) copies. When two or more caches contain shared copies of a\nblock, one of the cache copies (the \ufb01rst) is mark ed \u201cF\u201d (forwar d), and\nthe copies of the other caches are mark ed \u201cS.\u201d The cache with the\ncopy in the \u201cF\u201d state is responsible for transfer ring (forwar ding) a copy\nto another cache that is next in line to receive a copy. However, the\ntransmitting cache changes the state of its copy from \u201cF\u201d to \u201cS\u201d after\nthe transfer, and the r eceiving cache stor es its copy in the \u201c F\u201d state.\nBecause only one cache can have the copy of a block in the \u201cF\u201d\nstate, and the state of the copy changes to \u201cS\u201d after one transfer, the\nMESIF protocol prevents any cache from becoming  a hot spot. The \u201cF\u201d\nstate enables  caches to take turns transfer ring a shared block copy to\na requesting cache. Note that in the NUMA organization in Fig. 10.12 ,\nbecause each node contains only a single processor, MESIF would\nenable node-to -node communication of shared copies. If each node\nwas a UMA multipr ocessor system, the cache-to -cache communication\nwould allow each cache within a node to r eceive a shar ed copy (if any)\nfrom a local cache instead of from another node with longer latency .\nThe \u201cM,\u201d \u201cE,\u201d \u201cS,\u201d and \u201cI\u201d states work the same as in the MESI\nprotocol.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1389, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "084b0b63-90d4-41c1-8f57-38a285ccf354": {"__data__": {"id_": "084b0b63-90d4-41c1-8f57-38a285ccf354", "embedding": null, "metadata": {"page_label": "703", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a09df19c-f4df-4544-bec4-72aee698731c", "node_type": "4", "metadata": {"page_label": "703", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3568b4a78e604ae66328f8a284166180ca8712244b03a081304ddb70dd6e02f1", "class_name": "RelatedNodeInfo"}}, "text": "For example, suppose the four-node NUMA system in Fig. 10.12\nimplements the MESIF protocol. Also, suppose each node contains a\ndirectory (not shown in the \ufb01gure) and for each memory block in a\nnode, the directory holds a list of nodes that have  cached copies of a\nblock (if any). Further more, assume that block Ba in Fig. 10.12  was\nloaded in cache C3 (node 3) \ufb01rst and then a copy was sent to cache\nC0 (node 0). The entry for block Ba in the directory of node 3 would\nlist nodes 0 and 3 and would mark node 0 \u201cF.\u201d A request for a copy of\nBa from another cache, say, C1 (node 1), would \ufb01rst go to node 3. The\nCI3 communication interface will check the directory entry for block\nBa and will forwar d the C1\u2019s request to node 0 and then change the\ndirectory entry to also include node 1, but this time it will mark node 1\n\u201cF.\u201d The next time that node 3 receives a request  for an \u201cS\u201d copy of\nBa, a cache in node 1, which has the block in the \u201cF\u201d state, will be\nresponsible for sending a copy. A single node (e.g., node 2) with a\nmodi\ufb01ed cached copy, such as Bb\u2032 wher e\u2032 indicates modi\ufb01ed, will be\nmark ed as \u201cM\u201d in the dir ectory .\nAlso, with the MESIF, like the MESI protocol, main memory must be\nupdated each time that a modi\ufb01ed copy is transfer red to another\nprocessor . In a NUMA architectur e, this requir es a second transaction\nto be sent by the cache with the modi\ufb01ed copy to update the\ncorresponding memory unit. Note that in a MESI cache UMA\narchitectur e, wher e the lowest-level caches and main memory share a\ncommon bus, main memo ry is updated (via its snoop contr oller) when\na transfer of a modi\ufb01ed block on the bus is detected.\nMOESI\nAs opposed to MESIF, this protocol is designed to support cache-to -\ncache communications of modi\ufb01ed copies. The \u201cO\u201d state stands for\n\u201cowned\u201d and is used to share a modi\ufb01ed copy of a block without\nupdating main memory . When a cache issues a request for a copy of a\nblock that is modi\ufb01ed, the cache that has the modi\ufb01ed copy transfers\na copy to the requesting cache and changes the state of its copy from\n\u201cM\u201d to \u201cS.\u201d The receiving  cache, however, stores the copy in the \u201cO\u201d\nstate. The next time that the modi\ufb01ed cache copy is requested, the\ncache with the copy in the \u201cO\u201d state would be responsible for\ntransfer ring a copy to the requesting cache. After the transfer, the\nstate of the copy in the source cache changes from \u201cO\u201d to \u201cS.\u201d The\ndestination cache, however, stores the copy in the \u201cO\u201d state.\nTherefore, systems that implement the MOESI protocol, like those\nimplementing MESIF, pr event a cache fr om becoming a hot spot.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2583, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ef352ff-c3f2-4d41-9382-72fb755c204d": {"__data__": {"id_": "7ef352ff-c3f2-4d41-9382-72fb755c204d", "embedding": null, "metadata": {"page_label": "704", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "50dca4cc-b14e-47ea-98fe-d1653f6ec074", "node_type": "4", "metadata": {"page_label": "704", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "688717604c1f9de82a84b09a283cc6f8a1f70b394a8e6ec663ac8993b47a99a1", "class_name": "RelatedNodeInfo"}}, "text": "Note that in the MOESI protocol, a request for a \u201cclean \u201d copy has to\ncome from the corresponding memory unit unless an \u201cM\u201d or \u201cO\u201d copy\nexists in another cache. In the MOESI protocol, the replacement of an\n\u201cM\u201d or \u201cO\u201d cache copy requir es a transaction to update memory .\nLikewise, in a MOESI NUMA organization, a director y in each node logs\nthe list of caches that have an \u201cS\u201d copy wher e only one is mark ed \u201cO\u201d\n(if any). Also, note that, in the MOESI protocol, an \u201cS\u201d copy may or\nmay not be the same as the copy in the main memory . Directory\nlogging of nodes with modi\ufb01ed cached copies is the same as that in\nthe MESIF pr otocol.\n\u00a0\n10.4 Virtual Memory\nModer n single-cor e, multi core, and multipr ocessor computer systems\nimplement multipr ogramming, wher e severa l single- and/or\nmultithr eaded programs (Chap. 8) execute concur rently. That is, the\noperating system (OS) takes turns and allocates a fraction of CPU time\nto each thread. On a multicor e processor or multipr ocessor system\nwher e there are several processing cores (CPUs), multiple threads\nwould be executing in parallel. If each core also implements\nsimultaneous multithr eading (Chap. 8), an even greater numb er of\nthreads would be e xecuting concur rently.\nIn addition to the OS allocating CPU time to each thread, the OS\nwould need to allocate main (physical) memory space for each\nrunning single- or multithr eaded program, called  a process . While\nindividual processes may not share their allocated memory spaces,\nthe threads of a multithr eaded program do share the memory space\nallocated to the process (i.e., all the threads of a program can access\nthe globally declar ed variables in the program). Therefore, a moder n\ncomputer system must implement the following requir ements\ninvolving the bottom two levels (nonvolatile memory and main\nmemory) in memory hierar chy:\n\u2022 To run a pr ogram too big for the physical memory . The\nprogram contains many instructions and lar ge data structur es that\ncannot be stor ed in their entir ety in the main (physical) memory .\n\u2022 To execute multiple pr ocesses, including those of the OS when\nthere is not enough space in physical memory to stor e instructions\nand data structur es for all the pr ocesses at the same time.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2243, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4d1368f9-8b18-4e30-b5f1-c9cebe34f13a": {"__data__": {"id_": "4d1368f9-8b18-4e30-b5f1-c9cebe34f13a", "embedding": null, "metadata": {"page_label": "705", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1931494f-d371-4df1-82f0-84d2ea03d919", "node_type": "4", "metadata": {"page_label": "705", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7950a8d6ed6e8e7bfe3dc20f7b882f972a85fb85e98abd70a8973317503f5aa0", "class_name": "RelatedNodeInfo"}}, "text": "\u2022 To protect pr ocesses so that one pr ocess cannot access\nanother pr ocess\u2019s memory space without per mission.\nA virtual memory system is a way to implement these three\nrequir ements of a moder n computer system. As each program runs,\nits instructions and data must be copied from the nonvolatile memory\n(e.g., hard disk) to physical memory for execution. However, because\nthe size of physical memory is smaller than the size of the hard disk,\nlike a cache,  only a smal l fraction of each process\u2019s instructions and\ndata on the hard disk can be stored in the available space in the\nphysical memory .\nFor example, a 32-bit CPU that has 32-bit address and 32-bit data\nbuses can only read or write a maximum 4 GB (232 B) memory space,\norganized as a 230 \u00d7 32 memory unit. Even with this much physica l\nmemory space, it is not possible to \ufb01t all the instructions and data\nstructur es for all the processes, including those of operating system,\nin the memory unit.\nTherefore, the total 4 GB memory space that a 32-bit CPU is able to\naccess is interpr eted as a virtual and not a physical space.\nFurther more, in order to be able to run both OS as well as user\nprocesses, half of the 4 GB virtual space (i.e., 2 GB) may be reserved\nfor a user process and the other half (2 GB) for a systems process.\nAlternatively, an additional bit in the CPU status register could\nindicate whether the CPU is operating in user mode and the address\nbelongs to a user process  or whether it is in supervisor mode and the\naddress belongs to a systems process. The allocated virtual memory\nspace to each process (e.g., 4 GB) is further divided into instruction\nand data regions (see Fig. 8.5 in Chap. 8). A very large program (>4\nGB in size), however, would need to be compiled to run on a 64-bit\ncomputer system.\nWhen the OS allocates a fraction of CPU time to each thread, the OS\nis said to be perfor ming a context switch , which  is invok ed by a\ntimer interruption (Chap. 9). During a conte xt switch, the state of a\nthread that was just executing for a fraction of CPU time is saved and\nthe state of a thread that is waiting to execute is restor ed so that the\nexecution of each thread is the same as if no context switching takes\nplace. This gives users the illusion that ther e is one CPU per thr ead.\nA context switch is typically called a thread switch  if the switch\ndoes not change the current virtual address space the CPU is\naccessing. Otherwise, it is called a process switch  wher e the CPU\nwill begin to execute a thread from a new virtual space. In the rest of", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2555, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "86187864-c3fa-4f20-9cef-e788a340a4c4": {"__data__": {"id_": "86187864-c3fa-4f20-9cef-e788a340a4c4", "embedding": null, "metadata": {"page_label": "706", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c17bbe33-1200-4721-8520-f876d0adb457", "node_type": "4", "metadata": {"page_label": "706", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2e54d9ff5c12127831dee9e5c48712e2d2b6f0b4f5f470831018114d672dab26", "class_name": "RelatedNodeInfo"}}, "text": "this section, we will focus on a process switch, which involves\nmemory .\nLike instruction and data blocks that are copied from the physical\nmemory to cache memor y, instruction and data blocks, each called a\npage, are copied as needed from virtual memory (e.g., hard disk) to\nphysical mem ory (refer to DMA transfers in Chap. 9). The content of a\nphysical page if dirty (i.e., modi\ufb01ed) must be copied back on to the\nhard disk befor e it is r eplaced with the content of a new virtual page.\nThe size of each page in a moder n PC system is typically 4 KB (a\nrelatively large block), which makes DMA transfers between the hard\ndisk and the physical memory more e\ufb03cient. If memory space is\ndivided into bigger size pages, for a given process, there would be\nfewer page misses (fault s), much like larger block sizes that would\ncause fewer cache cold misses. Some systems may use variable size\npages, called segments , but here we will focus on a page-based\nvirtual memory management system.\n10.4.1 Virtual Address Translation\nUsing a page-based virtual memory system, Fig. 10.13  illustrates, as\nan example, the state of a system with two processes. In the \ufb01gure,\nProcess 0 is shown with 12 and Process 1 with 9 virtual pages . The\nphysical memory is also shown with eight physical pages . During the\nexecution of a process, the memory system must map and store the\ncontent of process virtual pages in the physical memory as needed.\nThe mapping is fully associative; therefore, the content of a virtual\npage can be stored in any page in the physical memory . However,\nunlike a memory -to-cache mapping, which is perfor med 100% in\nhardwar e, virtual-to -physical memory address mapping is perfor med\npartly in software (i.e., the OS) and partly by a hardwar e module,\ncalled a memory management unit (MMU).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1802, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4f044c3-3ce7-42b4-8e2e-8c50b203c618": {"__data__": {"id_": "e4f044c3-3ce7-42b4-8e2e-8c50b203c618", "embedding": null, "metadata": {"page_label": "707", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0a3e621-2a67-46cc-9fe6-3dfb3a8ff135", "node_type": "4", "metadata": {"page_label": "707", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9f8357a4f1e210d9a12f9733c308ccfcb3abc78e017be19823ef3f9265a9c662", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 10.13  Illustrating virtual-to -physical memory page mapping.\nIn Fig. 10.13 , the virtual pages are number ed 0 to 11 for Process 0\nand 0 to 8 for Process 1. Also shown are, respectiv ely, the mapping of\nProcess 0 virtual page numbers 3, 5, and 8 to physical page numbers\n5, 2, and 7, and Process 1 virtual page numbers 2 and 5 to physical\npage number s 3 and 0, respectively . Physical page numbers 1, 4, and\n6 are shown not occupied and ther efore are free (available).\nA virtual memory system uses a page table  to keep records of\nvirtual-to -physical page mapping information. For example, with 4KB\npages, a 2-GB virtual memory would requir e a page table with 512K\nentries \n . Because each process has its own page table, as the\nnumber of processes increase in a system, so will the number of page\ntables. Therefore, in general, some least accessed  table entries may\nbe temporarily stored on the hard disk and would  be copied back to\nphysical memory as needed.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 974, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bf5b7687-7425-4011-9b38-f54ebf528f0d": {"__data__": {"id_": "bf5b7687-7425-4011-9b38-f54ebf528f0d", "embedding": null, "metadata": {"page_label": "708", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d431aa1c-8e70-4daa-ae42-91320723f4f5", "node_type": "4", "metadata": {"page_label": "708", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0eb12c48b2723ceae7d4b89d344adeb28304a0685b0564b02a8f63ac790731c2", "class_name": "RelatedNodeInfo"}}, "text": "Figure 10.14  conceptually illustrates the mapping of Process 0\nvirtual page numbers 3, 5, and 8 to physical page  numbers 5, 2, and\n7, respectively . In the \ufb01gure, it is assumed that each page is 256 B,\neach virtual memory space is 32 KB (215 B) with 128 virtual pages  \n, and the physical memor y space is 8 KB with 32 physical pages  \n. In this case, a 15-bit virtual address  is viewed consisting of a\n7-bit virtual page numbe r (VPN, the upper 7-bits) and an 8-bit page\no\ufb00set  (the lower 8-bits). A page o\ufb00set, similar to a cache block o\ufb00set,\nidenti\ufb01es the tar get byte or wor d within a virtual or physical page.\nFIGURE 10.14  Illustrating MMU virtual-to -physical addr ess translation\nsteps shown for the virtual pages of P rocess 0 in Fig. 10.13 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 755, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "49b688a4-1d26-46ef-84c8-cf184bb79edc": {"__data__": {"id_": "49b688a4-1d26-46ef-84c8-cf184bb79edc", "embedding": null, "metadata": {"page_label": "709", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c6f211e0-0f9d-4b0a-9b4f-1f2d82c475f4", "node_type": "4", "metadata": {"page_label": "709", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8634f5c2990b997c811a5d990f0d28cd155b26676752e4d171673a5bb9d760f1", "class_name": "RelatedNodeInfo"}}, "text": "Suppose each 128-page table has 16-bit (2 B) entries \n . Each\nentry would hold a 5-bit (25 = 32) physical page number (PPN, if any)\nand a set of status bits, such as a valid bit (v) and access contr ol bits\n(e.g., read, write, dirty, user vs. supervisor). The valid bit, when 1 (v =\n1) indicates the table entry contains a valid PPN.\nSpeci\ufb01cally, the execution of a program starts from virtual address\n0 when a virtual memory system is implemented. Both an instruction\naddress and a data address\u2014for example, during the execution of an\n\u201cLD\u201d or \u201cST\u201d instruction (Chap. 8)\u2014represent virtual addresses. Using\nthe illustration in Fig. 10.14 , the follow ing steps describe the\noperations perfor med by the MMU to translate the 15-bit virtual\naddress 0x0501 to the 13-bit physical address 0x0201 and for the\nphysical mem ory to transfer the corresponding cache line to the\nprocessor :\n1. The MMU would view the 15-bit virtual addr ess 0x0501 as a\n7-bit VPN = 5 (0x05) and an 8-bit page o\ufb00set 0x01. Using the VPN\n= 5 as an inde x, the MMU would access the P rocess 0 page table,\nwhich is stor ed in the physical memory, starting at the page table\nbase addr ess TBA = 0x600, as illustrated in the \ufb01gur e. The table\nentry that cor responds to VPN = 5 contains PPN = 2 = (00010)2\nand valid bit v = 1, which indicates physical memory page 2 is\nvalid (contains up-to -date data). The PPN = 2 is then\nconcatenated with page o\ufb00set 0x01 to cr eate the 13-bit valid\nphysical memory addr ess 0x0201.\n2. Ne xt, the physical memory would transfer the block\ncontaining the content of addr ess 0x0201 as a cache line to\nprocessor, as illustrated in the \ufb01gur e.\nTherefore, two separate physical memory accesses are requir ed for\nthe processo r to receive the content of virtual address 0x0501. During\nthe \ufb01rst access, the MMU accesses the physical memory directly to\ntranslate the virtual address 0x0501 to the physic al address 0x0201.\nDuring the second access, the physical memory , responding to a\ncache miss, transfers the block containing the content of physical\naddress 0x0201 to the pr ocessor .\nIn systems wher e virtua l memory space is very large and thus\nrequir es a large page table, MMU may need to access the physical\nmemory a number of times befor e completing a virtual-to -physical\naddress translation. Multilevel is one way to organize the storage of a\nvery large table. Each entry in a multilevel page  table, except the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2418, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4cde76b-b3c9-4684-aca8-f88c552c5dfb": {"__data__": {"id_": "f4cde76b-b3c9-4684-aca8-f88c552c5dfb", "embedding": null, "metadata": {"page_label": "710", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c47a7c2a-3bb4-4494-9e3c-80f72ee87686", "node_type": "4", "metadata": {"page_label": "710", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c2df9d71f3137fb1cd0b7d9839e1d0487467a12bb1d2a3db567f1b5bf2897349", "class_name": "RelatedNodeInfo"}}, "text": "lowest level, would conta in a TBA for the next lower -level page table.\nThe lowest-level page table would contain PPNs.\nSuppose a system with a 256-B page size has 4 MB (222 B) virtual\nmemory space, or 16K virtual pages \n , much more than the one\nwith only 128 virtual pages shown in Fig. 10.14 . Figure 10.15\nillustrates the organization of the 16K virtual pages as a two-level\npage table. This time, the MMU will view the larger 22-bit virtual\naddress consisting of three parts as shown in Fig. 10.15 : a 7-bit index\nto access the \ufb01rst-level page table (Table 1  in the \ufb01gure), a 7-bit index\nto access the second-lev el page table (Table 2, again in the \ufb01gure),\nand an 8-bit page o\ufb00set (the lower 8-bits).\nFIGURE 10.15  A 2-level page table or ganization.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 758, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0a8f91aa-5802-4265-a4ca-dabc514043ed": {"__data__": {"id_": "0a8f91aa-5802-4265-a4ca-dabc514043ed", "embedding": null, "metadata": {"page_label": "711", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "60ab0e0a-f4a2-4f95-89b2-3a7aacad0db9", "node_type": "4", "metadata": {"page_label": "711", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "57110e0863bfd60459659e5cccc0e99c9615a4295c2e79b2b2590867781fae6e", "class_name": "RelatedNodeInfo"}}, "text": "The MMU would use the \ufb01rst (highest) 7-bit index 0x00 to read TBA\n= 0x40 0 from Table 1 in order to access Table 2. The TBA to access\nTable 1 is 0x600 as shown  in Fig. 10.15 . The MMU would then use the\nsecond 7-bit index to access the target PPN = 2 = (00010)2 and its v\n= 1 from Table 2, the lowest-level page table. The PPN = 2 is then\nconcatenated with the 8-bit page o\ufb00set to create the target 13-bit\nphysical address. As it is illustrated, in this case, it would take two\nphysical memory accesses, as compar ed to only one access in Fig.\n10.14 , for the MMU  to translate a virtual address (e.g., 0x0501) to its\ncorresponding physical addr ess (i.e., 0x0201).\n10.4.2 Translation Lookaside Bu\ufb00er\nIn order to reduce the long latency of a virtual-to -physical address\ntranslation, the most recently referenced PPNs are also kept in a\nspecial fully associative cache memory called a translation lookaside\nbu\ufb00er (TLB). Figure 10.16  illustrates a fully associative TLB\norganization with 32 slots. Instead of tag and data memories that are\nused in direct and set-associative mapped caches, a fully associative\nTLB requires registers to store tags and PPNs. Without a slot or a set\naddress, the search for a target tag is perfor med in parallel, as\nillustrated in the \ufb01gur e.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1275, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a0abde9b-3504-429d-82de-6414c852a500": {"__data__": {"id_": "a0abde9b-3504-429d-82de-6414c852a500", "embedding": null, "metadata": {"page_label": "712", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7544ce3c-7874-457d-9776-144e26e5a513", "node_type": "4", "metadata": {"page_label": "712", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "417cbfe0162710e5f853633b78df261cdca522f286b89f1856ad8a55143faf73", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 10.16  The data path of a fully associative TLB illustrating a\nTLB r ead (not all details ar e shown). A miss will cause the MMU to\ntranslate the virtual addr ess to a physical addr ess.\nA TLB requir es no cache coher ency bits. Instead, as shown in the\n\ufb01gure, it holds the status bits from the page table including a dirty (d)\nbit. Initially, the \ufb01rst time that a data page is accessed, its PPN in the\nTLB is mark ed not dirty (d = 0). If the processor writes (either write-\nthrough or write-back) and therefore modi\ufb01es a block from that page,\nthe d bit in the TLB is set to 1. The d bit when 1 indicates the page in\nthe physical memory is modi\ufb01ed, and that the page must be copied to", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 692, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "848ab4ef-3b4d-4cc9-a26e-3cdfac742c3b": {"__data__": {"id_": "848ab4ef-3b4d-4cc9-a26e-3cdfac742c3b", "embedding": null, "metadata": {"page_label": "713", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2f50e948-a4fd-43e2-b0c5-e4218ab7250a", "node_type": "4", "metadata": {"page_label": "713", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "ba17a02b0a7d972cfe916e762bcbe6f3f23b97f3f5c7f37e8b56431bf6c6e7d3", "class_name": "RelatedNodeInfo"}}, "text": "the hard disk befor e it is replaced with the content of a newly\ntranslated virtual page. Also, a TLB, being fully associative, must\nimplement a slot r eplacement algorithm.\nA replacement algorithm that requir es less hardwar e, as compar ed\nto, say, LRU, is to use a single use ( u) bit in each tag r egister as shown\nin the \ufb01gure. Each time that a PPN is accessed from the TLB, its u bit\nis set to 1. All the u bits would then be periodically reset to 0 so that\nthe list of pages that are not accessed recently is identi\ufb01ed. Any time\nthat a TLB access results in a miss, the MMU would  start a new virtual-\nto-physical address translation, and would then select one of the slots\nwith its u = 0. If the d bit in the selected slot is 1 (indicating a\nmodi\ufb01ed page in physical memory), the d bit in the page table for the\nmodi\ufb01ed page would be set to 1. The slot will then be updated with\nthe newly deter mined PPN.\n10.4.3 Processor Organization\nFigure 10.17  illustr ates three processor internal organizations.  In Fig.\n10.17 (a), two TLBs quickly trans late two virtual addresses, one for\ninstruction and one for data (if any), to their corresponding physical\naddresses befor e each physical address is applied to its respective L1\ncache. This organization has the advantage of using physically\naddressed caches  as opposed to virtually addressed caches  used\nin Fig. 10.17 (b). Its disadvantage, however, is a relatively long L1\ncache latency .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1446, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a9b0b53a-5763-48bb-9e05-b244f982554c": {"__data__": {"id_": "a9b0b53a-5763-48bb-9e05-b244f982554c", "embedding": null, "metadata": {"page_label": "714", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9a6532be-06cd-4b9c-83d3-c9650834f70d", "node_type": "4", "metadata": {"page_label": "714", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "492e73bd8baa832dc2ede16c5aac8301681b014412d414dd4c47f9bf3dc297a3", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 10.17  Alter native pr ocessor or ganizations: ( a) long L1 cache\nlatency; ( b) short L1 cache latency, but OS must \ufb02ush caches on each\nprocess switch; ( c) short L1 cache latency but its size is tied to page\nsize.\nThe organization in Fig. 10.17 (b), which uses virtually addressed\ncaches, requires a single TLB to quickly translate  a virtual address\nfrom the lowest-level cache (L2 in this case) to its corresponding\nphysical address befor e an access from the physica l memory is made.\nThis organization, however, is not very common, as it requir es the OS\nto \ufb02ush all the caches during a process switch. Without a \ufb02ush, caches", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 637, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b27e9f92-a9f1-44f1-9973-e3ea08fff93d": {"__data__": {"id_": "b27e9f92-a9f1-44f1-9973-e3ea08fff93d", "embedding": null, "metadata": {"page_label": "715", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e1b81a5-1b43-4a8e-817c-ae5eab8ca694", "node_type": "4", "metadata": {"page_label": "715", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "47770e78d81f6bf9b17487ede4de1d3aacb4977d5b9eb510b79109d34f77cc0e", "class_name": "RelatedNodeInfo"}}, "text": "would not be able to di\ufb00er entiate between the content of, for\nexample, VPN = 5 of Process 0 from VPN = 5 of Process 1 in Fig.\n10.13 . The advantage of this organization is that the design does not\nincrease the latency of L1 caches.\nIn the organization of Fig. 10.17 (c), a TLB is embedded with each of\nthe L1 cache s. As illustrated in Fig. 10.18 , an L1 tag memory retains\nPPNs as tags. During a cache access, a hit/miss is deter mined by\ncomparing a PPN produce d by the TLB with the one read from the tag\nmemory . Such a cache is said to be virtually addressed but physically\ntagged, such as the one used in the AMD Opter on pr ocessor .\nFIGURE 10.18  The or ganization of a TLB embedded with the cache.\nThis organization has two advantages: (1) it uses physically\naddressed caches; and (2) the latencies of the L1 caches are the\nlowest, the same as in Fig. 10.17 (b). The disadvantage of this\norganization, however, is that the size of each L1 cache has to be the\nsame or smaller than the page size. For example, if the page size is 4", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1039, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "24ec82ac-8e02-493f-8465-dd514877425b": {"__data__": {"id_": "24ec82ac-8e02-493f-8465-dd514877425b", "embedding": null, "metadata": {"page_label": "716", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b1a9e740-9397-40a1-9594-f6f0241a1683", "node_type": "4", "metadata": {"page_label": "716", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "065a8a1f98468cd359302f23b8c7462d8f15e84168faf5a818567d29d9dff009", "class_name": "RelatedNodeInfo"}}, "text": "KB, then an L1 cache has to be a maximum of 4 KB. A high-\nperfor mance processor using this organization may need to\nimplement a virtual memory system with lar ger page sizes.\nIn addition to the TLBs in Fig. 10.17  (a) and (c), it is possib le for a\nprocessor to contain a second-level (L2) TLB, similar to an L2 cache.\nAn L2 TLB would store a larger set of the recently referenced PPNs. If\nthe search for a PPN in one of the L1 TLBs results in a miss, the search\nwill continue with the L2 TLB. If the search still results in a miss, the\nMMU would be trigger ed to translate a target VPN to its corresponding\nPPN. An L2 TLB, typically being larger than an L1 TLB, would be\nimplemented as a dir ect- or set-associative mapped cache.\n\u00a0\nReferences\n1. John Hennessy and David P atterson, Computer Ar chitectur e: A\nQuantitative Appr oach , Mor gan K aufman, 5th ed., W altham, 2012.\n2. Inoue K oji, Ishihara T ohru, Murak ami K azuaki, W ay-predicting set-\nassociative cache for high perfor mance and low ener gy\nconsumption, ACM, 1999, 173-275.\n\u00a0\nExercises\n10.1. W e would lik e to impr ove the estimated average memory\nlatency in Example 10.1 . Suppose, instead of SDR AMs, the\nmemory unit is designed using DDR SDR AMs. R ecalculate the\naverage memory latency .\n10.2. The estimated average memory latency in Example 10.1  is\ncomputed for peak perfor mance. Suppose in the worst-case\nscenario none of the r equest and r esponse transactions can be\noverlapped. R ecalculate the estimated average memory latency,\nassuming that every SDR AM access (fr om the time a r ow addr ess\nis issued until the \ufb01rst data item appears on the bus) tak es \ufb01ve\nSDRAM clock cycles. Ignor e the time r equir ed to deactivate a r ow.\n10.3. Consider the following four memory locations accessed N times\nin a loop by CPU, and suppose a memory addr ess is partitioned", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1841, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6b7b754-b1ff-413a-bb8a-09e952a57f11": {"__data__": {"id_": "e6b7b754-b1ff-413a-bb8a-09e952a57f11", "embedding": null, "metadata": {"page_label": "717", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b9733cf5-0ddd-42de-ace3-947310a4fb14", "node_type": "4", "metadata": {"page_label": "717", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "be3746e7cc15204f1e8e82d153d0bd85e3bcb2a0c199a4a5460b36a7868b61bc", "class_name": "RelatedNodeInfo"}}, "text": "into tag, slot, and o\ufb00set, as shown. Do the following:\n0x3C1C (16-bit addr ess)\n0x0421\n0x041F\n0x0C88\na. Deter mine the number of misses in the \ufb01rst r ound,\nassuming the cache is initially empty .\nb. Deter mine the total number of misses for N rounds,\nassuming the cache is initially empty .\nc. Suppose the cache mapping is changed to a two -way set\nassociative. Calculate the tag, set, and o\ufb00set \ufb01eld sizes, and\nthen deter mine the number of misses in the \ufb01rst r ound,\nassuming the cache is initially empty .\nd. Deter mine the total number of misses for N rounds,\nassuming the cache is initially empty and a cyclic r eplacement\npolicy (if needed) is used.\n10.4. R epeat Exercise 10.3 (a) thr ough (d) for the following four\naddresses:\n0x0C1C (16-bit addr ess)\n0x0521\n0x041F\n0x4D28\n10.5. R epeat Exercise 10.3 (a) thr ough (d) for the following four\naddresses:\n0x3C1F (16-bit addr ess)\n0x042C\n0x0460\n0x3C1D", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 905, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5ba2e76-996e-4a3a-aeb3-997b50e84c97": {"__data__": {"id_": "c5ba2e76-996e-4a3a-aeb3-997b50e84c97", "embedding": null, "metadata": {"page_label": "718", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "af7165b2-2c06-48fd-971f-588eb69ba380", "node_type": "4", "metadata": {"page_label": "718", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "596674fce89237c7d84e9f8298628c7f231a88cf7399bafee95d82d082cf060d", "class_name": "RelatedNodeInfo"}}, "text": "10.6. R epeat Exercise 10.3 (a) thr ough (d) for the following four\naddresses but assume a four -way set-associative cache for parts\n(c) and (d):\n0x3C17 (16-bit addr ess)\n0x3817\n0x3917\n0x1C17\n10.7. Suppose main memory is 64KB, cache is 4KB, and block size is\n16B. Deter mine the tag, slot, and o\ufb00set \ufb01eld sizes for dir ect-\nmapped cache.\n10.8. Consider a four -way set-associative cache. Discuss the\ncomple xity (e.g., har dwar e requir ed) of implementing one of the\nfollowing r eplacement algorithms.\na. Cyclic: Slots within a set ar e selected in cyclic, \ufb01rst-in, \ufb01rst\nout fashion (i.e., slot 0, 1, 2, 3, 0, 1, 2, etc.).\nb. LRU: The least r ecently used slot is selected to be\nreplaced. (Hint: Consider a four -element LRU algorithm using a\n4 \u00d7 4 matrix with 1-bit entries. Suppose the four slots ar e\nnumber ed 0 to 3. Each time that one of the slots is r eferenced,\nthe cor responding four r ow entries in the matrix ar e set to 1\nand then the cor responding four column entries ar e set to 0.\nFor example, suppose slot 0 is accessed \ufb01rst; then r ow 0 of the\nmatrix will be (0111)2, and the r emaining r ows will be (0000)2.\nSuppose slot 2 is accessed ne xt; then the r ows of the matrix,\nin order, will be (0101)2, (0000)2, (1101)2, and (0000)2. The\nLRU slot is the one when its cor responding r ow is 0 = (0000)2.)\nc. Random: A slot within a set is randomly selected to be\nreplaced.\n10.9. Consider the write-thr ough pr otocol in Fig. 10.10 . Deter mine\nwhich F SD transition will tak e place when the high-level language\nprogram statement \u201c A = 1;\u201d e xecutes the \ufb01rst time.\n10.10. Consider the MESI cache pr otocol in Fig. 10.11 . Deter mine\nwhich F SD transitions will tak e place when the high-level\nlanguage pr ogram statement \u201c A = A + 1;\u201d e xecutes the \ufb01rst\ntime.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1776, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "69ba29e3-db5f-422e-8c54-26cbf3481c34": {"__data__": {"id_": "69ba29e3-db5f-422e-8c54-26cbf3481c34", "embedding": null, "metadata": {"page_label": "719", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ea730a95-560a-44ef-933a-8e91c37e2a50", "node_type": "4", "metadata": {"page_label": "719", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "874bda50c63d5198646894dc954f936609df831c39bdec75eeb3d64f19dad974", "class_name": "RelatedNodeInfo"}}, "text": "10.11. Consider the MESI IRM \u2192 E and EWM \u2192 M transitions that tak e\nplace when variables that ar e not shar ed ar e accessed. State\nhow pr ogrammers can use this infor mation when writing a\nmultithr eaded pr ogram so the pr ogram runs mor e e\ufb03ciently on a\nmulticor e or multipr ocessor system.\n10.12. Consider a two -processor system with two MESI caches, C0 and\nC1. Suppose the pr ocessors e xecute two thr eads, T0 and T1, that\nshare variable A. Outline a scenario when the MESI transition\nEXWH \u2192 I will tak e place, assuming memory block BA contains A.\n10.13. Consider the following two thr eads, T0 and T1, and the system\nin Fig. 10.9 . Assume initially x = 0 and y = 0. Suppose P0\nexecutes T0, P1 e xecutes T1, Bx contains x, and By contains y.\nUse the following table to indicate the state transitions of block\nBx and Bx in the caches as T0 and T1 e xecute. In the assembly\ncode listings, the e xecution or der of memory r eference\ninstructions ar e shown as comments. F or example, \u201cST A (y)\u201d of\nT0 executes \ufb01rst (//1), then \u201c LDA (x)\u201d of T1 e xecutes ne xt (//2),\netc. Also, state the number of times memory is updated or will\neventually be updated in each case.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1170, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "448ebf56-92fe-49ef-b2e5-4ba96bda8c60": {"__data__": {"id_": "448ebf56-92fe-49ef-b2e5-4ba96bda8c60", "embedding": null, "metadata": {"page_label": "720", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9ab87de2-fbc9-47c8-b455-eda1baf0341a", "node_type": "4", "metadata": {"page_label": "720", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1c816c3ee7df064d7b2944c575fecf9167d2e4e1cdfb1c6dd500aa882fe81a2e", "class_name": "RelatedNodeInfo"}}, "text": "a. Write-thr ough pr otocol\nb. Assume MESI pr otocol\nc. Assume MESIF pr otocol\nd. Assume MOESI pr otocol\n10.14. R epeat Ex ercise 10.13, e xcept that this time, T0 and T1\nexecute the memory r eference instructions in a di\ufb00er ent or der,\nas given in the following table.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 269, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e39a2a6a-5805-4d0b-987c-9b6fbadaecba": {"__data__": {"id_": "e39a2a6a-5805-4d0b-987c-9b6fbadaecba", "embedding": null, "metadata": {"page_label": "721", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "21d7109b-89b8-49fd-934b-3b055fdbfae3", "node_type": "4", "metadata": {"page_label": "721", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8b8cf566e40e84cb6cb477a1e230177596fd0a6be39e4a4778b0f3b4abb58e88", "class_name": "RelatedNodeInfo"}}, "text": "10.15. Brie\ufb02y e xplain how when a cache becomes a hotspot, it would\nincrease average memory latency .\n10.16. In each of the following ar chitectur es, state when will memory\nbe updated:\na. Bus-based UMA with MESI pr otocol\nb. NUMA ar chitectur e with MESIF pr otocol\nc. NUMA ar chitectur e with MOSEI pr otocol\n10.17. Suppose a system has 16 KB virtual memory space, 16 B page\nsize, and 2 KB physical memory . Do the following:\na. Deter mine the number of virtual and physical pages.\nb. Assuming that each page table entry is 2 B, what is the\nmaximum size of a page table?\nc. Design a page table or ganization to translate a 16-bit\nvirtual addr ess to an 11-bit physical addr ess.\n10.18. Consider a TLB; answer the following questions:\na. Brie\ufb02y e xplain the purpose for a TLB (e.g., what if no TLB\nis used?).\nb. Explain why a TLB should be designed as fully associative\ncache (e.g., what if it is implemented as a dir ect-mapped\ncache?).\n10.19. Discuss the bene\ufb01ts of using a use ( u) bit versus the\nimplementation of LRU algorithm in har dwar e. Also see Ex ercise\n10.8.\n10.20. Computer security (secur e virtual memory): See Ex ercise 11.32\n(also see Sec. 11.11).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1166, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4f10a778-98bb-4fdc-8cc9-6a46b5dee8e2": {"__data__": {"id_": "4f10a778-98bb-4fdc-8cc9-6a46b5dee8e2", "embedding": null, "metadata": {"page_label": "722", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "029032a8-c7fb-4478-adb1-d46f68484ed4", "node_type": "4", "metadata": {"page_label": "722", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5e40cb9c2a433372bcc7915a2d19929987b3f4c79585d770d390c72389edd6b0", "class_name": "RelatedNodeInfo"}}, "text": "10.21. Computer security (virtual memory r eplay attack): See Ex ercise\n11.33 for how to detect virtual memory r eplay attacks (also see\nSec. 11.11).\n10.22. Computer security (memory authentication task): See Ex ercise\n11.34 (also see Sec. 11.9.2 and Sec. 11.11).\n10.23. Computer security (pr eventing infor mation leak age): See\nExercise 11.35 for how to implement randomized encryption\n(also see Sec. 11.11).\n10.24. Computer security (secur e program e xecution): See Ex ercise\n11.37 for how to set up a trusted pr ogram for secur e execution\n(also see Sec. 11.11).\n10.25. Computer security (pr eventing infor mation leak age mor e\ne\ufb03ciently): See Ex ercise 11.38 for how to pr event infor mation\nleakage using less memory (also see Ex ercise 10.22).\n10.26. Computer security (or ganization of virtual addr ess space to\nsupport secur e execution mode): See Ex ercise 11.39 for how to\nallocate multiple virtual addr ess spaces (also see Sec. 11.11.8).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 952, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9ed296af-2752-4a87-a338-16b2ad7f8456": {"__data__": {"id_": "9ed296af-2752-4a87-a338-16b2ad7f8456", "embedding": null, "metadata": {"page_label": "723", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ee2b1074-0c5a-44e0-a28d-028a5b272fc5", "node_type": "4", "metadata": {"page_label": "723", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "640c712981365e24485529ce3177d37f9384679a18cbcf12fc287ee2fbd761fc", "class_name": "RelatedNodeInfo"}}, "text": "CHAPTER 11\nComputer Architecture:\nSecurity\n\u00a0\n11.1 Introduction\nThroughout the previous chapters, we focused on digital design\ntechniques and compute r architectur e concepts to improve\nperfor mance. Additional techniques and concepts are needed to\ndesign a secur e computer . Today, more people and\norganizations are using computers, and thus, not only are they\ngenerating large amounts of data, but also creating new\napplication software, some possibly with security holes. This\ncreates oppo rtunities and bene\ufb01ts for a range of attack ers, from\nan individual hacker to a cyber -war army. Many organizations,\nsuch as gover nment (e.g., military), \ufb01nancial institutions (e.g.,\nbanks), infrastructur es (e.g., power grids), servi ce industries\n(e.g., law \ufb01rms), commer cial businesses (e.g., e-commer ce),\nindustrial complexes (e.g., factory contr ol systems), and social\nnetworking companies (e.g., Facebook) all have digital assets\n(programs, documents, data, etc.) that need pr otection.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 989, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ed1a545-f6a9-401c-b814-cb5de8be93e5": {"__data__": {"id_": "4ed1a545-f6a9-401c-b814-cb5de8be93e5", "embedding": null, "metadata": {"page_label": "724", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "919c220e-7685-48cd-a141-3dc8db69bb8d", "node_type": "4", "metadata": {"page_label": "724", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a6abac7c8853825f8a8c0537d13e1ca5f4a9efd0709aa62c5c772e40a091178b", "class_name": "RelatedNodeInfo"}}, "text": "Assets, especially those in electric power grids and industrial\nfactory contr ol systems, may have numer ous security problems\n[1]. For example, they can become a cyber -war target for an\nenemy country that is willing to spend time and resour ces to\ndevelop a comple x cyber -weapon. All security problems,\nhowever, can be characterized as having one of three security\nproperties  as follows:\nCon\ufb01dentiality . Concealing assets and/or pr eventing\nunauthorized access (e.g., eavesdr opping). This includes\nprograms, documents, data, etc., stor ed on the har d disk\nand, in some cases, instructions and data stor ed in\nmemory .\nIntegrity . Ensuring that unauthorized modi\ufb01cations of assets\nare detectable and, if possible, pr eventable. F or example,\ncode injection  would change the integrity of a pr ogram in\nmemory, and illegal data modi\ufb01cation would change the\nintegrity of a database.\nAvailability . Preventing attacks that deny service to\nlegitimate users. These attacks can have many for ms and\ninclude server overload . A malicious attack can consume\nresour ces lik e memory and network bandwidth, and may\ncause overloading that slows down or stops the computer\nfrom car rying out its intended services.\nHow importa nt each of the three security propertie s is for an\norganization depends on the types of assets and how they are\nused. For instance, the integrity of bank accounts, perhaps\nmore so than their con\ufb01dentiality, is critical for a bank er;\nmaintaining accurate balances is more importan t than, say,\nsafeguar ding knowledge  of assets. Likewise, while it is\nnecessary, for example, for students to have access to\ncomputers at university campuses, an interruption and thus\nunavailability of computers for a few hours may not be that\ncrucial. On the other hand, all three properties would be\nessential for a gover nment agency such as the military .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1864, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "acc08f8c-65f2-444f-9bf8-e6dfe80da91c": {"__data__": {"id_": "acc08f8c-65f2-444f-9bf8-e6dfe80da91c", "embedding": null, "metadata": {"page_label": "725", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5848da35-33bb-4c46-8fd9-3f9954d37f8e", "node_type": "4", "metadata": {"page_label": "725", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "818b622db8cb14d9187d24c08608ce58d219a2071e5a878819213f43a1997ebc", "class_name": "RelatedNodeInfo"}}, "text": "While the scope of computer security is large and covers\nmany subject areas, this chapter presents an introduction to\ncomputer security topics  related to computer architectur e. In\naddition, even within the computer architectur e domain, the\nscope is large and evolving; new concepts and methods are\ncurrently being resear ched. The chapter introduces computer\nsecurity for computer architects and presents heuristic\nsolutions. Others, including information-\ufb02ow tracking methods,\nare deferred to the Further Readings section and elsewher e. The\ninformation \ufb02ow-tracking techniques requir e every critical bit or\nword in memory to be marked as secur e or not secur e. For\nexample, data enter ed via an I/O device would be tagged as not\nsecur e, and systems data would be tagged as secur e. A mark ed\ndata item would then be track ed as it enters the CPU. Contr ols\nwould be implemented to prevent unauthorized modi\ufb01cations of\nCPU state (i.e., registers). These methods require additional\nmemory space to store tags and may requir e altering hardwar e\ndesign practices (logic circuits, data path, memory\norganization) pr evalent today .\nWher e a piece of software or hardwar e is developed and\ninstalled can lead to security problems. This is especially\nimportant today when many software and hardwar e companies\nrely on using third-party modules that may not be designed or\nimplemented correctly or that may contain Trojans (illicit codes\nor HDL models). Software security policies and mechanisms are\noften based on some proven models, such as those used in\nmilitary, and hardwar e security policies and mechanisms are\nbased on a set of techniques to prevent an attack.  The chapter\npresents examples of known software security models and their\napplications, as well as an introduction to security policy\nmechanisms applicable to har dwar e.\nWhile there may be unlimited ways for attack ers to exploit\nsoftware security holes, software attacks are typically the result\nof inserting invalid data or copying data from one section to\nanother in memory . For example, consider a poorly written C\nprogram that uses the \u201cstrcpy\u201d (string copy) library function call\nto copy its command-line argument into a locally declar ed array", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2223, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "27eb8b18-c1ef-4326-88b5-a5d64d85fc8d": {"__data__": {"id_": "27eb8b18-c1ef-4326-88b5-a5d64d85fc8d", "embedding": null, "metadata": {"page_label": "726", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "72b6d932-5027-4e91-a335-ef3501da9fa5", "node_type": "4", "metadata": {"page_label": "726", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "711a1d4dfa0fa8f8f4e5360b5d63087ea26d3ec145e3e377e7d717332c177a6f", "class_name": "RelatedNodeInfo"}}, "text": "(a bu\ufb00er) within a subroutine. In this case, an attack er may use\na speci\ufb01c argument value to \u201cspoof \u201d and cause a bu\ufb00er\nover\ufb02ow attack  [2]. In general, attack ers may use a statically\nor dynamica lly allocated  bu\ufb00er in a program to modif y the\nmemory stack area wher e subroutine return addresses are\nstored. They may then use the bu\ufb00er to embed malicious codes\nand change a subroutine  return address on the stack in order\nto, for example, run malicious software (malwar e) or invok e and\nuse tools available on the system in privileged mode. Software\nattacks can be used, for example, to intentional ly disrupt or\noverload a system, making it unavailable or too slow to conduct\nbusiness as normal. An attack er may gain access  to classi\ufb01ed\ndocuments, modif y a database, or trigger a hardware Trojan\nthat could cause a hardwar e malfunction, leak secret\ninformation, etc.\nAttack ers may also use spoo\ufb01ng and other techniques to\nperfor m physical attacks  [3\u22125] when they have exclusive\naccess to a system. An attack er may be able to use\nsophisticated equipment to spoof or observe signal values for\nthe purpose of gaining  access to a portable device or\nperfor ming reverse-engin eering tasks on the device. The\nchapter also introduces spoo\ufb01ng and other techniques used to\nperfor m sof tware/physical attacks.\nBecause, in general, there are too many security holes to \ufb01ll,\nit is not possible to secur ely design, develop, and install every\npiece of hardwar e, \ufb01rmwar e, and software used in a secur e\nsystem. What is necessary, however, is to have a trusted\ncomputing base (TCB) to implement a secur e system [6]. TCB,\nwhich must be designed to be secur e and dependable (i.e.,\nremain trustworthy), referrers to a minimum set of hardwar e\nand \ufb01rmwar e and their secur e implementation (design, develop,\nand install) requir ements. In addition, depending on the security\nrequir ements of a system , TCB may include software that not\nonly must be implemente d secur ely, but the software must also\nexecute securely. The following is a list of security application\nareas:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2075, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b2524302-4a0c-4aa0-8d8f-25c183b4316c": {"__data__": {"id_": "b2524302-4a0c-4aa0-8d8f-25c183b4316c", "embedding": null, "metadata": {"page_label": "727", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4e384c2-f5b0-4c84-93c0-9bbcbfa0f5b0", "node_type": "4", "metadata": {"page_label": "727", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5fa4e2872d6d1ba40c892b33db7ce5b533bf9679b166fef79db9a48c4e4df24c", "class_name": "RelatedNodeInfo"}}, "text": "\u2022 For a handheld device to secur ely e xchange data with a\nhost computer and guar d against physical attacks\n\u2022 For system designers to implement security policy\nmechanisms to pr event unauthorized access to systems\nresour ces: passwor d \ufb01les, systems stack memory ar ea, etc.\n\u2022 For system designers to implement security policy\nmechanisms when the commodity operating system (OS)\nfrequently is compr omised [ 3, 7\u20139]\n\u2022 For sof tware companies to be able to develop and build\nsecur e application-dependent security policy mechanisms\n\u2022 For a sof tware company to secur ely distribute pr ograms\nfor remote installation\n\u2022 For a user to be able to conceal infor mation in the for m\nof documents, data, pictur es, etc., and stor e it secur ely on a\nlocal or r emote disk drive; secur ely send and r eceive e-\nmails; perfor m secur e remote login; etc.\n\u2022 For a company to implement security policy mechanisms\nto prevent unauthorized access to its vital business\nresour ces: personnel data, customer data, intellectual\nproperties, etc.\n\u2022 For an entertainment company to tar get the delivery of\nits pr oducts to only authorized handheld devices\n\u2022 For a cloud computing company to pr ovide certi\ufb01ed\nexecution service to its customers, for e xample\nFinally, the chapter introduces con\ufb01dentiality and integrity\ntechniques used in the implementation of software/physical\nsecurity policy mechanisms, and provides architectur e\nexamples of coprocessor - and processor -based TCB and their\napplication ar eas.\n11.1.1 Security Engineering\nMethodology", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1533, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "06893ac7-854d-4d75-ada5-af22a4a3bffa": {"__data__": {"id_": "06893ac7-854d-4d75-ada5-af22a4a3bffa", "embedding": null, "metadata": {"page_label": "728", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "51fe871e-6ec2-4837-a652-b35b674a7f51", "node_type": "4", "metadata": {"page_label": "728", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "46265ed3d88f2276cc97c60280929bb3e5bbdf6fe90a477d88826b058803cb9d", "class_name": "RelatedNodeInfo"}}, "text": "The security engineering methodology (SEM) shown in Fig. 11.1\nprovides a step-by -step procedur e for designers  to identif y\npotential threats; develop requir ed security policies and\nmechanisms; and design, verify, and evaluate a computer\narchitectur e for security . The analysis of usage scenarios and\npotential security problems de\ufb01nes the scope of security risks.\nUsage scena rios are often application depende nt and may\ninvolve a wide class of systems, such as embedded systems,\nreal-time systems, and distributed systems, and may cover\nmany indus tries, including IT, manufacturing, healthcar e,\nbusiness, etc. [10\u201311]. The analysis of threat model, security\npolicy, and security mechanisms identi\ufb01es a possible list of\nthreats and requir ed security policy and mechanisms for each\nthreat.\nFIGURE 11.1  A security engineering methodology [ 12].\nTo better understand the SEM, Table 11.1 presents the\ndevelopment of a paper-based security mechanism for\nchanging students\u2019 grades as an e xample of university assets.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1022, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "427a6952-b8e2-40b0-8e44-f1129e37c912": {"__data__": {"id_": "427a6952-b8e2-40b0-8e44-f1129e37c912", "embedding": null, "metadata": {"page_label": "729", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f757476d-0bf9-4b51-a42c-47bc6bdaa407", "node_type": "4", "metadata": {"page_label": "729", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8b4aab40a56998ae3641406fec66fe28b52f02f78aba358bbc7e8db8c9819df8", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  11.1  Developing a Paper-Based Security Mechanism to Change Students\u2019\nGrades\nIn Fig. 11.1, the usage scenarios may be expressed as a set\nof use cases , and a thr eat model as a list of threat vectors . In\ngeneral, a threat vector can be viewed as the attack path that\ncould lead to stealing, damaging, or disabling a personal,\nbusiness, IT, or other asset.\nTable 11.2  lists data storage and remote server connection as\ntwo examples of compute r use cases. Viruses and other types", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 487, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5d38804-0f61-492c-b26f-531c78f9faa5": {"__data__": {"id_": "c5d38804-0f61-492c-b26f-531c78f9faa5", "embedding": null, "metadata": {"page_label": "730", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cb09eeb7-13dc-4f01-ba2b-b7b108428e5e", "node_type": "4", "metadata": {"page_label": "730", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5456728f10d7c15cb4ebc4a0bee73a6c7028574c078dec52558ea9c254e1dc29", "class_name": "RelatedNodeInfo"}}, "text": "of malwar e, as well as the theft or other loss of a computer, can\npresent certain security risks. A malwar e can delete, modif y,\nand/or steal data stored on the hard disk. A lost or stolen\ncomputer (e.g., desktop, laptop, etc.) or a handheld device\n(e.g., smartphone) that contains valuable information can be a\nsecurity risk; data stored on the hard disk or \ufb02ash memory is\nsusceptible to tampering. In addition, if the lost device belongs\nto a company, there is a chance that someone will wrongfully\ngain access to servers in the company and cause damage;\nimportant company \ufb01les may be deleted or modi\ufb01ed, or\nproprietary company business infor mation may be stolen.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 668, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "09268533-bdd2-4eb2-b2ed-97f0c43f507f": {"__data__": {"id_": "09268533-bdd2-4eb2-b2ed-97f0c43f507f", "embedding": null, "metadata": {"page_label": "731", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "986eef28-a71f-4aed-9c0f-9ef72e76bd0f", "node_type": "4", "metadata": {"page_label": "731", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "820f8d25c9d39970eab9a1256a12c392b632abddfe0eb6b48020be30ce67efe4", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  11.2  Five Steps of SEM Applied to T wo Computer Usage Scenarios\nEach of the two use cases in the table includes potential\nsecurity vulnerabilities, a threat model, a security policy, and a\nlist of securit y mechanisms. However, the security mechanisms", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 259, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "944a4ee7-68f3-4760-9845-4d76610d55e7": {"__data__": {"id_": "944a4ee7-68f3-4760-9845-4d76610d55e7", "embedding": null, "metadata": {"page_label": "732", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "737d3138-22c9-40c5-8814-926b5fb812f3", "node_type": "4", "metadata": {"page_label": "732", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b727672bbc0d77f12b070c6406ba218082f90632e98576568d504155ebda137b", "class_name": "RelatedNodeInfo"}}, "text": "are described  in layman\u2019s terms, and more precise solutions will\nbe pr ovided later .\n11.1.2 Threat Classes\nThreats may be grouped into two broad categories:\noperational  and developmental.\nOperational Threats\nOperational thr eats depend on asset types and usage scenarios,\nsuch as those listed in Table 11.2. Operational threats also\ndepend on the tools used in the implementation of security\nmechanisms. While a security mechanism itself might be well\ndesigned, the tools (e.g., \u201clocks\u201d) might be weak; for example,\nthe \u201clocks\u201d themselves might be of poor qualit y and easily\nunlock ed. Other examples of operational threats are brie\ufb02y\ndiscussed ne xt.\nDevices, such as smart meters installed by utility companies\nin houses or portable devices used by the military or during an\nemer gency by \ufb01re\ufb01ghters or emer gency medical personnel,\nmay face additional threats. These devices may requir e a\nsecur e communication channel with a host computer, but an\nattack may cause communication interfer ence, for example,\nduring an emer gency .\nRemotely installed devices that are physically accessible, as\nwell as portable devices,  are also subject to physical attacks.\nFor example, an embed ded device that is installed in an\nautomobile and tracks the vehicle\u2019s odometer reading may be\ntamper ed with in order to change and reduce the odometer\nreading of an old car. Likewise, a high-tech portable  device may\nbe hack ed to modif y or r everse engineer its functions.\nDevelopmental Threats\nThese threats depend on trust models used for software and\nhardwar e development, as well as delivery and installation of\nsoftware. Incomplete speci\ufb01cations, incor rect implementations,\nand improper security policies and mechanisms are, in general,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1734, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a3613171-8ac8-4ad8-9a69-2e4fe20b9dfe": {"__data__": {"id_": "a3613171-8ac8-4ad8-9a69-2e4fe20b9dfe", "embedding": null, "metadata": {"page_label": "733", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5b8380ab-1b08-4888-b05c-9213208ff1b0", "node_type": "4", "metadata": {"page_label": "733", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "ded629840dacf5792056dd1d4af6e7fdddd5e56ca3a01495b379e411ba98e1db", "class_name": "RelatedNodeInfo"}}, "text": "the three sources of software, hardwar e, and \ufb01rmwar e\nvulnerabilities. Often, these vulnerabilities are unintentional,\nbut they ar e sometimes intentionally caused by designers.\nFor instance, large integrated chip (IC) designs, especially\nprocessors, can include designer -injected maliciou s circuits, for\nexample, by adding extra lines of hardwar e description\nlanguage (HDL) code on purpose in the design [13]. In general,\nan intentionally caused vulnerability is harder to detect during\nvalidation. Many factors, including the growing use of third-\nparty \u201csoft\u201d components (e.g., Verilog models) in hardwar e\ndesigns, incr ease vulnerability to attacks.\n11.1.3 Access Control and Types\nThe data storage security  mechanisms described in Table 11.2\nare designed to protect data stored on the hard disk from\nmalwar e or physical attacks. Other usage scenarios requir e\nmechanisms to restrict access. For example, in an organization,\nwho should be able to access an employee\u2019s personal data\n(e.g., salary, Social Security number, etc.)? The answer might\nbe that perhaps only an employee\u2019s supervisor should be\nallowed to examine employee\u2019s personal data, and the data\nshould r emain con\ufb01dential to all other employees.\nLikewise, in a computer system, only systems programs, not\napplication programs, should be able to access systems data.\nSuch security mechanisms are called access control . The\naccess control list (ACL) used, for examp le, in Linux/Unix\nsystems decides which \ufb01les and directories (folders) each user\ncan access. Users can use the command \u201cchmod\u201d to assign\nread (r), write (w), and/or execute (x) rights to each of their \ufb01les\nand folders. For instance, for \ufb01le foo, which initially had\nread/write (rw-) permission assigned to all users, the command\n\u201cchmod 640 foo\u201d assigns  read/write (rw- indicated by 110 in\nbinary) to the owner (i.e., Joe Smith), read-only (r-- indicated by\n100 in binary) to the users in the group (e.g., system people),\nand no acces s (--- indicated by 000 in binary) to all other users.\nThis is illustrated as shown:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2059, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5e078a40-9fbf-4f7b-89ed-56ca9d20e905": {"__data__": {"id_": "5e078a40-9fbf-4f7b-89ed-56ca9d20e905", "embedding": null, "metadata": {"page_label": "734", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4093de1b-3cdc-4f18-b83e-669a8af42b6e", "node_type": "4", "metadata": {"page_label": "734", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "01764c90d629d931fa43f92c564578e250f3ffb19405eec60ec89fbbfef12094", "class_name": "RelatedNodeInfo"}}, "text": "With the ACL, even if \ufb01les and folders are not concealed, they\nwill remain con\ufb01dential and not accessible to some users. The\nLinux/Unix ACL is an example of a discretionary access\ncontrol  because each user decides what access rights he or\nshe wants to assign to each of his or her \ufb01les and folders. On\nthe other hand, a mandatory access control , which may be\nrule based, enfor ces a set of con\ufb01dentiality and integrity\nsecurity rules  to all subjects (people and programs)  or all assets\n(objects) in an organization. For example, if only employees\nwith the title of supervisor are permitted to examine\nemployees\u2019 personal data, then the mandatory access contr ol is\ncalled a capability list  (CL) [ 14, 15]. Each  subject is assigned a\nlist of capabi lities\u2014a set of permitted actions that the subject is\nallowed to do with respect to all the objects in an organization.\nOn the other hand, a mandatory access contr ol that is\norganized by objects, not by subjects, is called a mandatory\nACL, similar to the Linux/Unix discretionary ACL example\ndiscussed earlier . To illustrate an example, Table 11.3 presents\nan access control matrix  created from a university\u2019s grading\npolicy .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1183, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "54a671ea-3a50-439d-87e7-7879cb2619de": {"__data__": {"id_": "54a671ea-3a50-439d-87e7-7879cb2619de", "embedding": null, "metadata": {"page_label": "735", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "602183d4-35dc-420f-90b2-6356eca9890a", "node_type": "4", "metadata": {"page_label": "735", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d59e7070a7a4fffe763c3480059417b50816efb3383e58a38fe5f98c3a8140c5", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  11.3  An A ccess Contr ol Matrix for Students\u2019 Grades\nIn the table, the rows are subjects (instructors, students,\netc.), columns are objects  (courses), and the matrix entries are\na set of access rights to students\u2019 grades. The access rights are\nde\ufb01ned as read (R or r), write (W or w), both read and write, or\nneither read nor write. The capital letters R and W indicate read\nand write access for all grades in a single course. The lower case\nletters r and w indicate a read and write access to a single\ngrade, respe ctively . No-read and no-write accesses are shown\nas blanks in the table. The matrix is shown with one department\nchairperson p, two instructors x and y, two students s1 and s2,\none sta\ufb00 employee e, and three courses labeled A, B, and C.\nThe matrix entries also show instructor x can assign (R/W)\ngrades to students enrolled in courses A and C, instructor y can\nassign grade s to students enrolled in B, student s1 can read (r)\nher or his grades in courses A and C, and studen t s2 can read\nhis or her grades in courses B and C. The matrix contains no\nsingle write (w) access rights.\nAn access contr ol matrix would produce a CL if the matrix is\nstored in terms of its rows. For example, chairperson p,\ninstructor x, and student s1 each has the following  list of\ncapabilities, shown as a r elation:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1324, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d9d96d07-6d71-43a0-aee5-5577d1de6946": {"__data__": {"id_": "d9d96d07-6d71-43a0-aee5-5577d1de6946", "embedding": null, "metadata": {"page_label": "736", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "990d2433-d43a-4cbe-ab72-b42d985ea07b", "node_type": "4", "metadata": {"page_label": "736", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5134a931864d4409320b959a92d2b062cff4283e2da22b09d0445739997c0455", "class_name": "RelatedNodeInfo"}}, "text": "For example, the assign ed capabilities for instru ctor x are\nread access and write access to all grades in courses A and C.\nThe assigned capabilities for student s1 are read access to his\nor her grade in each of the courses A and C.\nOn the other hand, as shown next for courses A and B, an\naccess contr ol matrix would produce a mandator y ACL if the\nmatrix is stor ed in ter ms of its column data:\nFor example, course A\u2019s access list indicates chairperson p\nand sta\ufb00 e have read access to all students\u2019 grades, x has both\nread and write access to all grades, and student s1 has only\nread access to his or her grade. Because an ACL is a data-\noriented mechanism, it is easier to change rights for an object\u2014\nfor instance, to add student s3 to course A.\nA program that wants to access an object (e.g., a \ufb01le, data\nitem, certain memory locations, network connectio n, USB port,\netc.) must be listed in the object\u2019s access list; otherwise, access\nis denied. In contrast, a CL is subject oriented, and thus a\nsubject can delegate (i.e., pass) its assigned capability list fully\nor partially to another subject. For example, instructor x can\ndelegate his/her capability item \u201c(C, W)\u201d to chairperson p, who\nthen becomes the responsible person (not instructor x) to\nassign (enter) grades to all students in course C.\nWhile an ACL-based system is easier to implement, a CL-\nbased system can provide better protection; a user or process\ncan only access objects that are in its capability list. A CL-based\nsystem can also provide \ufb01ner protection; a delagetee\u2019s\nresponsibilities could be limited to a subset of data, memory\nlocations, tasks, etc. F or instance, instructor x can delegate only", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1682, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6a08947-9e9f-4597-937a-7f0f15ae30d1": {"__data__": {"id_": "e6a08947-9e9f-4597-937a-7f0f15ae30d1", "embedding": null, "metadata": {"page_label": "737", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f55f5c3e-d03c-4f12-a66b-9a3b152808e1", "node_type": "4", "metadata": {"page_label": "737", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "460e6601d07fe2d0bc7a892eb0b5ef574b3915d09be218e329fe7e6e752bbb90", "class_name": "RelatedNodeInfo"}}, "text": "the responsib ility of assigning a single grade, such as (C, w(i)),\nto chairperson p, wher e index i identi\ufb01es a single student, such\nas s2, in course C. However, once a capab ility is delegated,\nthere is no contr ol; the capability could again be delegated to\nanother subject. A system may use a hybrid approach to take\nadvantage of both ACL and CL schemes. The discussions on\nother access contr ol schemes, such as role based and originator\nbased, ar e defer red to elsewher e.\n11.1.4 Security Policy Models\nCon\ufb01dentiality and integrity security policy models must be\nable to create a comple te security perimeter for a computer\nsystem that covers all its hardwar e and software components.\nAs an example, consider the Flame virus that can activate a\ncomputer\u2019s audio system to listen in and transfer o\ufb03ce chatter\nthrough the network, captur e screenshots, log keystrokes, and\neven steal data from Bluetooth-enabled cell phones that are\nnear the computer . Likewise, the Stuxnet cyber -weapon is able\nto enter an industrial contr ol system through a universal serial\nbus (USB) port and change the operating speci\ufb01cations of the\ncontr ol syste m\u2014for example, it can cause an industrial motor to\nspin too fast and actually cause physical damage.\nA mandatory access contr ol is typically de\ufb01ned based on\nsome proven con\ufb01dentiality and integrity security policy\nmodels, like those used in military and business envir onments.\nSecurity policy models are characterized as multilevel\n(hierar chical) or multilateral  (compartmental). The following is\na description of some well-known multilevel and multilateral\nsecurity policy models.\nMultilevel Models\nA multilevel model is used in places wher e access to\ninformation is naturally hierar chical, like the military or a\nmedical o\ufb03ce. In the military, both subjects (people) and\nobjects (e.g., documents) are assigned clearances and\nclassi\ufb01cations, such as, \u201ctop secret,\u201d \u201csecr et,\u201d \u201ccon\ufb01dential,\u201d", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1942, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9438799c-6a01-451b-ba86-e8c3900786e2": {"__data__": {"id_": "9438799c-6a01-451b-ba86-e8c3900786e2", "embedding": null, "metadata": {"page_label": "738", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "80fef2b3-ec36-4731-a0f6-99a83f5b59c3", "node_type": "4", "metadata": {"page_label": "738", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2b479089c459d74160f12084a5bbaa4cfbdbc862b5dc4b6e31e5840ffa23217a", "class_name": "RelatedNodeInfo"}}, "text": "and \u201cunclassi\ufb01ed.\u201d In a medical o\ufb03ce, only doctors are\npermitted to access certain patient medical records. A security\npolicy model  is then used  to contr ol who can read or write each\ntype of document or a medical r ecord.\nBell-LaP adula  (BLP) [16] is a multilevel security model that\nwas designed to enfor ce con\ufb01dentiality in the military . The BLP\u2019s\n\u201cno write down \u201d policy prevents an employee with a higher\nclearance from writing or appending a document with a lower\nclassi\ufb01cation level. In addition, the policy prevents the \ufb02ow of\ninformation  from a highe r classi\ufb01ed object to a lower classi\ufb01ed\nobject. For instance, a corrupted army general with top-secr et\nclearance will be prevented from reading a classi\ufb01ed document\nand then transfer ring the information to an unclassi\ufb01ed\ndocument. This is known as the *-property  of the BLP model.\nIn a compute r system, the *-property can prevent  the general\nfrom copying a classi\ufb01ed  \ufb01le to a USB \ufb02ash memory, which\nwould have a low classi\ufb01 cation in the system. (Also, all high-\nclearance personnel may be prevented from taking smart\nphones into their o\ufb03ces.)\nThe BLP\u2019s \u201cno read up\u201d policy prevents subjects that have\nlow clearan ces from accessing objects that have high\nclassi\ufb01cations. The policy can prevent an unclassi\ufb01 ed employee\nin the military from reading a top-secr et document. The policy\ncan also prevent malwar e that was downloaded from the\nInternet, and thus is assigned a low clearance in the system,\nfrom accessing a high-classi\ufb01ed object, such as the passwor d\n\ufb01le or con\ufb01dential user data.\nThe integrity Biba  [17] mode l enforces \u201cno write up\u201d and\n\u201cno read down \u201d policies. Both subject s and objects are\nassigned integrity levels (or labels); for instance, system \ufb01les\nare labeled high and netw ork \ufb01les low. The \u201cno write up\u201d policy\ncan prevent  a low-labeled malwar e downloaded from the\nInternet from modif ying a high-labeled systems data, such as\nreplacing a subroutine return address stored on the system\u2019s\nstack. The \u201cno read down \u201d policy can be used to lower the\nintegrity label of a systems program as soon as the program\nreceives data from the network. In this case, even if malwar e is", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2174, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6e41b1cb-2db2-498f-a9c3-5860c7bb5025": {"__data__": {"id_": "6e41b1cb-2db2-498f-a9c3-5860c7bb5025", "embedding": null, "metadata": {"page_label": "739", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2c996bc3-3aee-426c-aa62-1a1e02782593", "node_type": "4", "metadata": {"page_label": "739", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "ba9cc255f7ade3ccb11c1b4fd1e095b01148efc120dc33a59b8f9f38d0f2f067", "class_name": "RelatedNodeInfo"}}, "text": "somehow able to gain an administrator privilege (i.e., [forks a\nroot shell]), its integrity label will still be low and thus it cannot\nwrite the passwor d \ufb01le, for example. However, the malwar e\nwould still be able to read (up) the passwor d \ufb01le and therefore\nwould be able to transfer (write down) the \ufb01le through a\nnetwork connection unless the BLP policies are also\nimplemented.\nWith both BLP and Biba policies implemented, \u201cwriting up,\u201d\n\u201cwriting down,\u201d \u201creading up,\u201d and \u201creading down \u201d will not be\npermitted. As a result, the combined policies produce a stronger\nsecurity model. However, the combination can potentially\ncreate access restrictions in some applications, such as a\ndatabase, when data sharing might be necessary . An example\nimplementation of Biba is the LOMAC, a mandatory access\ncontr ol extension to the commer cial o\ufb00-the-shelf Linux OS [ 18].\nMultilateral Models\nA multilateral model is used in places wher e access to\ninformation is not hiera rchical but compartmental, such as\nseparation of duties in business transactions or activities that\nare deemed to cr eate con\ufb02icts of inter est.\nThe BLP model for con\ufb01dentiality does not apply to\nnonhierar chical service- oriented businesses such as law \ufb01rms,\naccounting \ufb01rms, and advertising agencies that may have\ncompeting clientele. An employee of these service industries\nmay receive sensitive client information that must be protected\nand not shared with other clients in the same indus try. This type\nof information con\ufb01dentiality is not multilevel, but rather\nmultilateral. The Chinese Wall [19] multilateral model is\ndesigned to pr event con\ufb02ict of inter est.\nFor example, a law \ufb01rm that has clientele from various\nindustries (e.g., banks, oil companies, etc.) should  not allow its\nemployees to engage in activities that have a con\ufb02ict of inter est\nand may result in sharing one client\u2019s business information\n(e.g., Citiban k\u2019s) with another in the same sector (e.g., Wells\nFargo Bank).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1964, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bb8b6e27-ea3b-45be-b08f-72bcffa1e360": {"__data__": {"id_": "bb8b6e27-ea3b-45be-b08f-72bcffa1e360", "embedding": null, "metadata": {"page_label": "740", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2c617a33-69e0-42ce-bfc9-ac0d53dc83dc", "node_type": "4", "metadata": {"page_label": "740", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f2fc7575135c37099c40c133bcdbed3153ca1388c2ff514f08434e1f4443e7d1", "class_name": "RelatedNodeInfo"}}, "text": "Likewise, Biba, a multilev el integrity model, does not work in\ncommer cial environments. For example, a subject (an employee\nin a compan y or software) that enters an order to purchase\nmerchandise should be di\ufb00er ent from the subject that receives\nthe merchandise and pays for it. In this case, a multilateral\nintegrity model, such as the Clark- Wilson  [20] model that\nimplements the principles of separation of duties in business\ntransactions, is used. Table 11.4 presents a summary of these\nsecurity policy models.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 518, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bcf18004-0b85-4112-9bfc-c6de82b0b7b5": {"__data__": {"id_": "bcf18004-0b85-4112-9bfc-c6de82b0b7b5", "embedding": null, "metadata": {"page_label": "741", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f5d050ad-4e19-4162-a2fc-a0ad1dc3b596", "node_type": "4", "metadata": {"page_label": "741", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "791c387576118f41753eaa073cbef9055ad870a3dc3a681f4ed94ac78b1eb2b2", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  11.4  Multilevel and Multilateral Security P olicy Models", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 64, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a5f94873-3416-43fd-977e-4effa9116288": {"__data__": {"id_": "a5f94873-3416-43fd-977e-4effa9116288", "embedding": null, "metadata": {"page_label": "742", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d0f4c974-e38a-4fd3-b521-55e3c4cb00e3", "node_type": "4", "metadata": {"page_label": "742", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "75046257a2d31018a05c57a5cd1a46d38b2b1f7d4c5be4988251b6ca8efdc6f2", "class_name": "RelatedNodeInfo"}}, "text": "11.1.5 Attack Classes\nDevelopmental threats, as discussed earlier, can produce\nunintentional and sometimes intentional vulnerabilities in the\nform of backdoors. A hardwar e backdoor attack is generally due\nto the presence of one or more malicious circuits (hardwar e\nTrojans) withi n hardwar e modules used to build a system. Given\nthe large size of the mode rn ICs, malicious circuits in the design\nare unlikely to be discover ed during validation. Moreover,\nalmost all FPGAs now built elsewher e and some ICs may contain\na remotely activated \u201ckill switch\u201d [21]. Thus, hardwar e\nbackdoor attacks could present serious security risks. After the\nIC is fabricated and insta lled in a system, a malicious circuit\nmay be trigger ed remot ely, either by using malwar e or by\nhaving full access to the system and executing  a triggering\nprogram.\nOn the other hand, malwar e such as viruses and spywar e are\nexamples of attacks due to generally unintentional backdoors in\nsoftware, which are exploited by attack ers. Physical attacks are\npossible when special equipment is interfaced to the hardwar e\nto alter its behavior during its normal operation. Both software\nand physical attacks use similar attack mechanisms.\nThere are still other types of attacks known as side-channel\nattacks that are not due to backdoors, but rather are based on\nsome side information gather ed while a program is executing.\nExamples of information used for side-channel attacks are\nprogram execution time, known as a timing attack  (see Sec.\n11.5.3 ), electr omagnetic radiation and acoustic signals that\nnaturally are released during execution [22, 23], and cache-\nbased side-channel attacks [ 24].\n\u00a0\n11.2 Hardware Backdoor Attacks\nFigure 11.2 illustrates three triggering mechanisms for\nhardwar e Trojans. In this case, an attack er uses a triggering", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1825, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "05778a2a-094a-4fd7-a82d-2d04c87cd688": {"__data__": {"id_": "05778a2a-094a-4fd7-a82d-2d04c87cd688", "embedding": null, "metadata": {"page_label": "743", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c27eecb4-a924-4dcb-a3f1-bee4ed903bbb", "node_type": "4", "metadata": {"page_label": "743", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "35a4b3ecf5c4f5d7099215434e8ffd7877c01701e3ee10cd5deb907c2d8ca26a", "class_name": "RelatedNodeInfo"}}, "text": "input  to cause the multiple xer (MUX) to select the result\ngenerated by the malicious circuit instead of that produced by\nthe original circuit. A triggering input may be data, contr ol (e.g.,\ninstruction), or time dependent. Also, it may consists of one\ndata item or one contr ol or both, a sequence of data or contr ol\ninputs or both, or a coun ter (timer) to trigger an attack. The\nlatter case is called a ticking time bomb.\nFIGURE 11.2  Examples of har dwar e Trojans [ 12]: (a) A one data\nor contr ol trigger ed Trojan; A data or contr ol sequence trigger ed\nTrojan; ( b) A timer trigger ed Trojan (a ticking time bomb).\nIn addition, an attack may be classi\ufb01ed either as\nnoncomputational , which targets memory,  registers, MUXs,\nand other items that do not operate on data and simply store or\nroute it, or computational , which  targets arithmetic  logic units\n(ALUs), decoders, \ufb01nite state machines (FSMs), etc. that\nmanipulate incoming data.\nFurther more, a hardwar e backdoor attack can potentially take\nmany forms. For example, if the output of the MUX in Fig. 11.2\nis a data item and the attack causes a change in data values, it\nis called a corrupter attack . On the other hand, if the output", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1204, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "606632c2-0837-4acd-a806-81333f8aacba": {"__data__": {"id_": "606632c2-0837-4acd-a806-81333f8aacba", "embedding": null, "metadata": {"page_label": "744", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dcb73c98-7e62-42bc-a609-4bc0b94950de", "node_type": "4", "metadata": {"page_label": "744", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d6cd56a5954c62f972bbca195bd5e3634e011d3e08a4e9a7ffa9d56727db04c4", "class_name": "RelatedNodeInfo"}}, "text": "bits of the MUX represent contr ol signals and potentially cause\nmore events to follow, it is called an emitter attack  [13].\nA backdoor attack may alter and simplif y cryptography\nalgorithms implemented in hardwar e, generate more cache\nmemory tra\ufb03c, cause computational errors, consume more\npower, etc. The following sections provide examples of data,\ncontr ol, and timer backdoor attacks.\n11.2.1 Data and Control Attacks\nFigure 11.3 illustrates two hardwar e Trojan examples with a\nsingle instru ction and a three-instruction sequence triggering\nmechanisms. In Fig. 11.3( a), the Trojan is trigger ed by an \u201cADD\u201d\ninstruction with a speci\ufb01c operand \u201c11001100...\u201d, and in Fig.\n11.3( b), a three-inst ruction sequence\u2014\u201c ADD 0,\u201d \u201cADD 0,\u201d and\n\u201cST 0\u201d\u2014triggers the Trojan. The instructions are just examples\nand assumed  to be of type Acc-IS A (Chap. 8). The triggering\ninputs for both types of Trojans would normally be selected in\nsuch a way that it is unlikely for the Trojans to be detected\nduring testin g. For example, what are the chances of randomly\nselecting an \u201cADD\u201d instruction with the speci\ufb01c operand\n\u201c11001100...,\u201d or three instructions \u201cADD 0,\u201d \u201cADD 0,\u201d and\n\u201cSTM 0\u201d in or der during cir cuit testing?\nBoth the Trojans requir e an attack er to gain access to the\nhardwar e, either directly or via malwar e, and input the\nnecessary triggering inputs. The attack er must be able to\nexecute the \u201cADD\u201d instruction for the circuit in Fig. 11.3( a) or\nthe three instructions in sequence for the circuit in Fig. 11.3( b)\nto trigger an attack.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1545, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c0877ad4-b3a6-4d36-b67a-eb3cbcdde036": {"__data__": {"id_": "c0877ad4-b3a6-4d36-b67a-eb3cbcdde036", "embedding": null, "metadata": {"page_label": "745", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "94f845ae-9ae7-4b21-b610-60d9deb4567f", "node_type": "4", "metadata": {"page_label": "745", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2e43ed04e3d950fb9ae289351232f41f929efd551b9762208faa30dda20c4136", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.3  Examples of har dwar e Trojan triggering\nmechanisms: ( a) a single instruction; ( b) a sequence of\ninstructions.\n11.2.2 Timer Attack\nA timer trigger ed Trojan, illustrated in Fig. 11.4 , does not require\nthe attacker to have access to hardwar e. As soon as the counter\ncounts down to 0, the Trojan will be activated. Because most\ntests, especially those that are random, are not long and only\nrequir e a few millions of cycles, the size of the counter would\nonly need to be large enough to escape detection during\ntesting.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 535, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e141240-b899-4fcc-825a-7aafce0d7fb0": {"__data__": {"id_": "4e141240-b899-4fcc-825a-7aafce0d7fb0", "embedding": null, "metadata": {"page_label": "746", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "90fa99b1-bde8-4ece-9547-f04a2e29560d", "node_type": "4", "metadata": {"page_label": "746", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1f78e8bf9390e1a794815a8a28037834cf21c2ac5ca82352fbccc264a61c106b", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.4  Examples of a timer -based cor rupter and emitter\nbackdoor : (a) a ticking time bomb corrupter  backdoor; ( b) a\nticking time bomb emitter  backdoor .\nIn Fig. 11.4( a), an attack will switch the data generated by an\noriginal ALU with the data output by the malicious ALU, thus\ncorrupting the result. In Fig. 11.4( b), when writing to certain\nmemory locations, an attack could alter the signals of the cache\ncontr oller to emit additional activities in the downstr eam\nmemory and thus leak information. Many other examples of\nsuch Trojans can be thought of that are left to the reader\u2019s\nimagination.\n11.2.3 Security Policy Mechanisms\nOne way to detect possible hardwar e backdoors during circuit\ndesign cycle  is to take advantage of the fact that hardwar e\ndesigner team s are typically hierar chically organiz ed, and each\nteam does not design all the modules necessary for a comple x\nIC (e.g., processor). Each team may design their own modules,\nand may also need to interconnect their modules with other in-\nhouse or third-party \u201csoft\u201d modules, such as some hardwar e\ndescription language (HDL) modules. However, while some in-\nhouse modul es may have to go through code review and other\nquality contr ol techniques to ensur e their trustworthiness,\nothers may still contain Trojans that can lead to security\nproblems.\nThe following sections give examples of hardwar e backdoor\nsecurity policy mechanisms.\nData Obfuscation\nA security policy that prevents a single input triggering attack is\ndata con\ufb01dentiality . However, depending on the type of the\nuntrusted circuit module, di\ufb00er ent policy mechanisms are\nneeded. If the untrusted module is noncomputational, such as\nthe one shown in Fig. 11.5, only a simp le data con\ufb01dentiality\ntechnique known as data obfuscation [25] is needed to prevent", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1810, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9139a574-5210-4581-af17-64611b7c0a97": {"__data__": {"id_": "9139a574-5210-4581-af17-64611b7c0a97", "embedding": null, "metadata": {"page_label": "747", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "05c52de5-c3c1-4ffa-a21d-c65bdb3bf441", "node_type": "4", "metadata": {"page_label": "747", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "46d49d609a684024869aaa647a8558702a958cd9559f4b42f5de1940fafc4b5a", "class_name": "RelatedNodeInfo"}}, "text": "an attack. In the \ufb01gure, an output (00110011)2 from the trusted\nmodule is XORed with a random number to obfuscate the data\nbefor e it is input to the untrusted module. In this case, when an\nattack er generates the triggering input (00110011)2 to activate\nthe Trojan in the untrusted noncomputation module, the data\nactually presented to the triggering circuit changes to\n(10010001)2, and, ther efore, prevents an attack.\nFIGURE 11.5  Untrusted noncomputational module interface with\ndata obfuscation.\nHomomorphic Encryption\nData obfuscation, however, is a bit di\ufb03cult when it is used with\na single input triggering Trojan in a computational  module. For\ninstance, if the untrusted computational module  perfor ms a\nsquar e function, then a more comple x data obfuscation", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 770, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "30f262cd-6882-4b6b-918d-1f53a0161c52": {"__data__": {"id_": "30f262cd-6882-4b6b-918d-1f53a0161c52", "embedding": null, "metadata": {"page_label": "748", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cc652998-77c7-49be-88b1-578a100be085", "node_type": "4", "metadata": {"page_label": "748", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8b76a6d509a2da5dde2a868f2792f7074fe7e1ae74c3ec6dce6533faec9049d7", "class_name": "RelatedNodeInfo"}}, "text": "technique known as homomorphic computation,  also called\nhomomorphic encryption,  may be used [25\u201326]. Two functions, f\nand g, are said to have a homomorphic relationship if the\nequality in Eq. (11.1)  holds.\nFor example, if f is the multiplication function and g is the\nsquar e functi on, then f has a homomorphic relationship to g, as\nillustrated:\nSuppose a design team decides to incorporate an untrusted\nHDL model of \ufb02oating-po int squar e function in the design of a\nprocessor . In this case, in order to prevent a single input\ntriggering attack, either the design team must incorporate the\nhomomorphic encryption discussed earlier in the hardwar e, or", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 657, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "28a8c827-bb8b-4e62-b861-76e09018c668": {"__data__": {"id_": "28a8c827-bb8b-4e62-b861-76e09018c668", "embedding": null, "metadata": {"page_label": "749", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "53b1ee23-8b0c-4e24-aa72-e5fdf2d02c2d", "node_type": "4", "metadata": {"page_label": "749", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "6a53907b95083b61e21f29c49cfda4f67f204916e8bf7a45e68dead72287229e", "class_name": "RelatedNodeInfo"}}, "text": "in systems that use the processor the homomorphic encryption\nis implemented in sof tware, for e xample, as follows:\nIn this case, because y is generated randomly and is used to\nconceal x, the quantity x * y is also random, making  it an\nunlikely triggering input. The squar e function comp utes (x * y)2\nand not x2, which could trigger an attack. The quantity x2 is\nthen secur ely computed by dividing the quantity (x * y)2 by the\nquantity y * y.\nThe advantage of homomorphic encryption is that operations\nfor a computation are perfor med on encrypted (concealed) data\nand not on the original known values. For example, in order to\nillustrate another application and an advantage of\nhomomorphic computation, suppose the \u201csquar e\u201d function in\nthe previous code represents a unique remote function call for\nwhich a homomorphic relationship exists. Suppose the function\nis only available on a remote computer (e.g., a cloud) and the\nuser does not want the value x (representing some secret input,\nfor example, medical data) to be sent over the network or be\naccessible at the remote computer . In this case, the user is able\nto conceal (encrypt) inputs applied to the remote function\nwithout exposing the actual inputs to the outside world and still\nis able to secur ely use a remote function. Refer to the Exercises\nsection for a potential pr oblem with homomorphic computation.\nIn addition, for some functions such as the squar e root, while\nthe homomorphic relationship \n  exits when both x\nand y are positive numbe rs, the relationship does not hold with\nnegative numbers. F or instance,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1588, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "47ad9582-a9fa-4f3a-80b5-2648637073c8": {"__data__": {"id_": "47ad9582-a9fa-4f3a-80b5-2648637073c8", "embedding": null, "metadata": {"page_label": "750", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "10afecce-3625-4507-83a6-d9fee956a9d4", "node_type": "4", "metadata": {"page_label": "750", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "dc436a43dea823280ecac4eb36cb35d529dd978158c095c2f13bd209723ab883", "class_name": "RelatedNodeInfo"}}, "text": "In theory, in terms of circuit size, the cost of imple menting a\ncomputational module that also implements a hardwar e\nhomomorphic encryption/decryption algorithm can be\nunacceptably lar ge.\nSequence Break er\nIf a speci\ufb01c input sequenc e triggers an attack, a security policy\nto prevent such attacks is to alter the or der in which a sequence\nof inputs is presented to an untrusted module. Random\nreordering of the inputs and inserting dummy inputs within the\nnormal inputs are examples of policy mechanisms used to\nprevent input sequence attack. Many moder n processors, such\nas a dynamic ally schedul ed superscalar CPU (Chap. 8), already\nreorder instructions to improve perfor mance; thus, it may be\npossible to introduce some randomness to this task. Random\nordering of the inputs, however, may not work for memory read\noperations. In such cases, and for those wher e reordering due\nto data depe ndencies does not work, dummy inputs should be\nused. For instance, to alter the order of memory accesses, extra\nload instructions with pseudo -randomly generated memory\nlocations can be inserted within a large sequence  of load and\nstore instructions [ 25].\nPower Reset\nA security policy for preventing a time bomb attack is to stop\nthe counter from reaching the trigger value. A policy\nmechanism to do this is to frequently reset power to the\nuntrusted module. How often an untrusted module must have\nits power reset would be deter mined based on how many clock\ncycles the module was tested. Because it is not known which\ntype of backdoor may exist in an untrusted module, data\nobfuscation, input sequence reordering, and power reset all\nmust be implemented to pr event an attack.\nDuplication\nAn alternative but potentially costly solution is to use\nduplication in scenarios wher e attack prevention techniques", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1811, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fa9f3008-901f-4b5c-b427-70df0c56f0e9": {"__data__": {"id_": "fa9f3008-901f-4b5c-b427-70df0c56f0e9", "embedding": null, "metadata": {"page_label": "751", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a17f23e2-02f4-4e7e-9fb6-4cb204daf602", "node_type": "4", "metadata": {"page_label": "751", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "025ebcce2b99aeebf3e495a33d63a33ad27dec0185223ae1ad59ffa34eb28492", "class_name": "RelatedNodeInfo"}}, "text": "may not work. Figure 11.6 illustrates an example of using a\nmodule duplication technique, wher e each copy of module X is\ndesigned by two teams, A and B. The outputs from the two\ncopies are compar ed. As long as the outputs are the same, the\ncopies are consider ed free from attacks. However, this requir es\nthat the modules be designed following the exact same\nspeci\ufb01cation; any small variation in the design could result in a\nfalse-positive backdoor attack.\nFIGURE 11.6  Module duplication to detect har dwar e backdoor\nattacks [ 12].\nAutomatic HDL Code Analysis\nAnother technique to potentially detect a backdoor is to\nautomatically analyze the HDL (e.g., Verilog) codes  and tag the\nmodules for possible backdoors. The tagged modules are then\nwatched for malicious activities during run time [ 27].\nTable 11.5 presents the summary of hardwar e backdoor\nattacks and a list of potential security policies and mechanisms\nto prevent attacks.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 941, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "09fa47e0-27fb-4328-9998-f9faf79dfd97": {"__data__": {"id_": "09fa47e0-27fb-4328-9998-f9faf79dfd97", "embedding": null, "metadata": {"page_label": "752", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "92983b45-c61c-42d2-97e3-d3a38da5db37", "node_type": "4", "metadata": {"page_label": "752", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "15ecd035441b7230f5067b1c41a88bb4ed24ca21bcb7f30ec3dbf551b862d186", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  11.5  Summary of Security P olicies and Mechanisms for Har dwar e Backdoors\n\u00a0\n11.3 Software/Physical Attacks\nSpoo\ufb01ng , splicing , repla y, and man-in-the-middle  are four\ntypes of software and physical attack mechanisms. They can be\nused to physically monitor the behavior of, alter the functions\nof, or reverse engineer a computing device. Physical attacks are\noften called hardware attacks , but this should not be\nconfused with har dwar e backdoor attacks discussed earlier .\nThese types of attack techniques, however, are detectable if\nappropriate con\ufb01dentiality and integrity security policy\nmechanisms using cryptography ar e implemented.\n11.3.1 Spoo\ufb01ng\nA spoo\ufb01ng attack, as was discussed earlier, is caused by\nillegally inserting information (program code or data) into the\nsystem, as illustrated in Fig. 11.7 . A virus can insert invalid  data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 858, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "64727e0e-9664-478f-a98a-264663566ef6": {"__data__": {"id_": "64727e0e-9664-478f-a98a-264663566ef6", "embedding": null, "metadata": {"page_label": "753", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e52ee238-2792-41c3-9e67-e8f02fcba7c7", "node_type": "4", "metadata": {"page_label": "753", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "bf272f72e13f71fcc329141fe0b80eca7375cd802f8f5fc78e2b1c2627343f81", "class_name": "RelatedNodeInfo"}}, "text": "on the hard disk or memory . An attack er who gets physical hold\nof a computi ng device could use specialized tools to conduct a\nphysical spoo\ufb01ng attack. For example, the attack er can\nintercept a memory transaction and spoof his or her data in\nplace of the data in memory . Spoo\ufb01ng violates data integrity .\nFIGURE 11.7  Illustrating a spoo\ufb01ng attack [ 28]: a di\ufb00er ent value\nis inserted in a tar get location.\n11.3.2 Splicing\nA splicing attack is caused by illegally transposing information\n(instruction or data) with another one already in the system, as\nillustrated in Fig. 11.8. Malicious software that copies\ninstructions from one memory section to another is an example\nof a splicing attack and so is a physical attack that intercepts a\nmemory transaction and supplies the processor with previously\naccessed but di\ufb00er ent data fr om memory .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 848, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "523b6e35-dbdb-4e38-9d7d-46c6e3bbc238": {"__data__": {"id_": "523b6e35-dbdb-4e38-9d7d-46c6e3bbc238", "embedding": null, "metadata": {"page_label": "754", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8f57ab49-0a4a-4d46-94cb-c97e8920e702", "node_type": "4", "metadata": {"page_label": "754", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1d1efa55db1cad324e4b9f53e57974c02016e59956f3951d70fedc3a479cf38e", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.8  Illustrating a splicing attack [ 28]: data in location 5\nis replaced with the data in location 1.\nA splicing attack can occur unnoticed even if data is kept\ncon\ufb01dential; the attack er simply replaces one set of con\ufb01dential\ndata with another set. Splicing attacks also violate data\nintegrity, but one must integrate data location information (e.g.,\nmemory address, register number, etc.) in the integrity security\nmechanism to detect such attacks. An attack er that changes an\ninstruction physical page number A with B in a page table is an\nexample of a splicing attack [29]. In this case, the attack er can\nforce the OS or an applica tion process to instead start executing\ninstructions fr om physical page B.\n11.3.3 Replay\nA replay attack is cause d by illegally replacing data with an\nearlier version in the system, as illustrated in Fig. 11.9 . A replay\nattack is similar to a splicing attac k, except that the replaced\ndata is not relocated from another region in the system. For\nexample, an attack er saves a speci\ufb01c data item at a memory\nlocation and uses it later when the same location is read again.\nLikewise, at the hardwar e level, an attack er can intercept a", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1184, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e86dd8c6-3c05-4e2e-896d-39f2a4af9cad": {"__data__": {"id_": "e86dd8c6-3c05-4e2e-896d-39f2a4af9cad", "embedding": null, "metadata": {"page_label": "755", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e75767b7-e639-4500-85f6-cd520f40647a", "node_type": "4", "metadata": {"page_label": "755", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4ff952b528603304dee7a4a305f6ff19532d1606fd0e464c872fab938d50ff4a", "class_name": "RelatedNodeInfo"}}, "text": "memory transaction for address X in order to save a copy of the\nmemory content for later use [30]. The attack er then waits  for a\nwrite-to -memory transaction for address X to complete. The\nnext time that a read transaction for address X is detected, the\nattack er supp lies the previously saved, but now old, content to\nthe pr ocessor .\nFIGURE 11.9  Illustrating a r eplay attack [ 28]: data in location 5\nat time t2 is r eplaced with data in location 5 at time t1.\nA replay attack may not need to happen in such a direct way.\nAn attack er may enable both new and old data to remain in the\nsystem. For example, a replay attack may map a single virtual\naddress to two di\ufb00er ent physical addresses and cause new data\nto be stored in one physic al location but access older data from\nthe second physical location.\nA replay attack also violates data integrity, but in a di\ufb00er ent\nway\u2014everything about the replaced data appears  valid except\nthat it is not current. For example, a replay attack can cause an\nolder and lower reading of electricity usage to be\ncommunicated from a smart meter to the utility company .\nReplay attacks are much harder to detect; neither keeping", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1170, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a4c538ca-2685-43f9-b397-f7f6514751b3": {"__data__": {"id_": "a4c538ca-2685-43f9-b397-f7f6514751b3", "embedding": null, "metadata": {"page_label": "756", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "523450c1-510d-40f3-a15c-dd4fc778f9a0", "node_type": "4", "metadata": {"page_label": "756", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "964355b9fa6daa1de8b9f3d9330c2837d18f90db1bfc9df2321fb601ccc83dd5", "class_name": "RelatedNodeInfo"}}, "text": "information con\ufb01dential nor implementing simple integrity\nmechanisms can help to detect them. A more comple x security\nmechanism that integrates timing information (e.g., bus\ntransaction number, communication session identi\ufb01er, etc.) is\nnecessary to detect r eplay attacks.\n11.3.4 Man-in-the-Middle\nA man-in-the-middle attack can happen in scenarios when two\nsubjects (people, software, \ufb01rmwar e) are communicating\nwithout using adequate con\ufb01dentiality and integrity\nmechanisms. A malicious subject may intercept messages\nbeing exchanged betwee n two legitimate subjects and then\neither copy the message (i.e., eavesdr op) or substitute a\ndi\ufb00er ent message in place of the original message, as\nillustrated in Fig. 11.10 . The A and B entities are unawar e of\nentity C. Both A and B think they are communicati ng with each\nother .\nFIGURE 11.10  Illustrating a man-in-the-middle attack. The A and\nB entities ar e unawar e of entity C.\n\u00a0\n11.4 Trusted Computing Base\nA TCB encompasses secur e design, development, installation,\nand functioning of hardwar e and \ufb01rmwar e and possibly software", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1087, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "311ddd02-1346-4b0c-9a30-1b2794352a53": {"__data__": {"id_": "311ddd02-1346-4b0c-9a30-1b2794352a53", "embedding": null, "metadata": {"page_label": "757", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "17ae0aa6-cb85-4a88-ad09-0c3a4bd07b44", "node_type": "4", "metadata": {"page_label": "757", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b0f4c2521a68f5c9913842878c2da2ee21201d0b37015d690e29e43939f16c63", "class_name": "RelatedNodeInfo"}}, "text": "modules responsible for maintaining security in a system. The\nhardwar e modules must be protected from backdoor attacks so\nthey continu e to operate correctly. We call this a trusted\nhardwar e module (THM). Firmwar e must also be secur ely\ndesigned, developed, and installed. We call this trusted\n\ufb01rmwar e module (TFM), which would be embedde d in THM, a\ntamperpr oof IC. Also, in some secur e system application areas,\none or more security -related software modules must also\nsecur ely execute. In this case, the software modules must\nsecur ely be designed, developed, and installed. Such a software\nmodule is called a trusted sof tware module (TSM).\nA THM- TFM would be organized as a secur e coprocessor\n(SCP), for example, a cryptoprocessor  that operates as an\nembedded system responsible for providing cryptography\nservices to the OS as well as application software. The SCP\nwould be responsible for generating secur e cryptography\nkeys (see Sec. 11.5) for protecting the con\ufb01dentiality and\nintegrity of \ufb01les and data stored locally or remotely on a server\nand keys requir ed for secur e communication. The TFM, being\nembedded in the THM, is protected from software spoo\ufb01ng,\nsplicing, and replay attacks, but not from physical  attacks. The\ntrusted platfor m module (TPM) as an example SCP is discussed\nin Sec. 11.10 .\nA THM-TFM-TSM, on the other hand, would be organized as a\ngeneral-purpose secur e processor (SP) for maximum\napplicability . An SP may support multiple secure execution\nenvironments , each implemented as a secur e execution mode\n(SXM) to run an arbitrary  TSM. Depending on the application\narea, an arbitrary TSM may requir e con\ufb01dentiality or integrity or\nboth of its instructions, as well as con\ufb01dentiality or integrity or\nboth of its data. An SP-based system can support all security -\nrelated application areas, including those supported by an SCP.\nAn example of security application areas that would requir e an\nSP is the implementation of mandatory access contr ols (Sec.\n11.1.4) when a commodity OS frequently is compr omised or\nwhen a portable device must be pr otected fr om physical attacks\n[31\u201333]. Further more, handheld devices, such as a smart", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2182, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c9b53925-1974-4b79-bc8d-6825dc54d187": {"__data__": {"id_": "c9b53925-1974-4b79-bc8d-6825dc54d187", "embedding": null, "metadata": {"page_label": "758", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "321e694a-e991-4684-bcfa-24eb8d245c41", "node_type": "4", "metadata": {"page_label": "758", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "fc77f96223f636de5f8abb603a74104be7c881bfe097eb9e7495ea448e921411", "class_name": "RelatedNodeInfo"}}, "text": "phone, may requir e a power -e\ufb03cient SP. Consider, for example,\nthe digital rights management [34] policies that would permit\nan encrypted media \ufb01le to be decrypted only by a target\nhandheld device.\nBecause a TSM may be subject to software attacks, an SXM\nmust implement the necessary security policy mechanisms to\nprotect a TSM from spoo\ufb01ng, splicing, and replay attacks, as\nwell as physi cal attacks if the system is a portable device. SXMs\nare discussed  in Sec. 11.11, and the architectur e of an SP for\nmaximum pr otection is pr esented in Sec. 11.12.\nOther examples of security application areas that requir e a\nTCB include software piracy prevention, cloud computing, and\ncerti\ufb01ed execution. For instance, consider the Search for\nExtrater restrial Intelligence (SETI) project [35] and a general-\npurpose distributed computing project at www.distributed.net\n[36] that utilize at-home computing power from thousands of\nvolunteer users to conduct research in many areas important to\npublic and academia. A user can download a free program that\nanalyzes resear ch data, for example, from the radio telescope\nfor SETI. However, withou t certi\ufb01ed execution, it is not possible\nto verif y the cor rectness of the r esults.\n\u00a0\n11.5 Cryptography\nCon\ufb01dentiality is enfor ced by applying an encryption algorithm,\nalso called a cipher , to scramble  and conceal the information in\na plainte xt document, e-mail message, authentication data,\nmemory content, etc. The output of a cipher is called a\nciphertext . Likewise, a decryption algorithm, also called a\ncipher, unscrambles a cipherte xt and generates the original\nplainte xt, as illustrated in Fig. 11.11 .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1655, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "353676b0-3187-4c87-b937-c2c37eb3b809": {"__data__": {"id_": "353676b0-3187-4c87-b937-c2c37eb3b809", "embedding": null, "metadata": {"page_label": "759", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0ed317aa-e899-4a1e-8f27-04e3bc41be77", "node_type": "4", "metadata": {"page_label": "759", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a37700c2cc311409550bd77e8a90b69dbff3f8b3f4811fabf5ddbe293166f41c", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.11  Illustration of encryption/decryption cryptography .\nA cipher is called secur e if its generated cipherte xt does not\ncontain any information that could be used to obtain the\noriginal plainte xt input. A symmetric-k ey cipher  uses a single\ncryptography key for both encryption and decryption. An\nasymmetric-k ey cipher , on the other hand, uses one key for\nencryption and a di\ufb00er ent key for decryption. In practice, only\ncryptography keys need to be secret; ciphers (the algorithms),\nhowever, can be known [ 37].\nA cipher is called a stream cipher  if it encrypts or decrypts\nits input one bit at a time. Otherwise, a cipher is called a block\ncipher , wher e it encrypts/decrypts its input one block (multiple\nbits) at a time. For inputs that are longer than one block, there\nare multiple ways, called modes of operation , in which a\ncipher is repeated to encrypt/decrypt the remaining input\nblocks. Examples of symmetric-k ey and asymmetric-k ey ciphers\nare discussed ne xt.\n11.5.1 Symmetric-Key Ciphers\nFigure 11.12  illustrates an 8-bit linear feedback shift register\n(LFSR) as an example of a simple symmetric-k ey cipher, called\na stream cipher . The cipher is designed using a parallel-\nload/right-shif t register with four tap bits: 4, 5, 6, and 8. The tap\nbits are number ed starting with 1 and refer to the register bits\nfrom right to left. The four tap bits are XORed to generate the\nnext lef t-input (LI) bit as the r egister is shif ted right.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1471, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e21a50e7-67b8-4ea3-8063-0f9312da8f49": {"__data__": {"id_": "e21a50e7-67b8-4ea3-8063-0f9312da8f49", "embedding": null, "metadata": {"page_label": "760", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e749d402-f0e2-4390-b5eb-67064c15ecfa", "node_type": "4", "metadata": {"page_label": "760", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "40d230df5e0e247d5d0eb523c863cee654d1e4398e92fd59c8c524bac56d2a11", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.12  Illustration of an 8-bit LF SR cipher with tap bits 4,\n5, 6, and 8.\nThe register is initialized with a secret key, and as the\nregister shifts right, the bits that are shifted out create a key-\nstream  one bit at a time. For example, after 16 shifts, the LFSR\ngenerates a 16-bit key-stream; after 32 shifts, it generates a 32-\nbit key-stream; etc. The period  of a key-stream, which is\ndeter mined by the selected tap bits, is the number of shifts\nbefor e the key-stream repeats. A key-stream is bitwise XORed\nwith an equal-size plainte xt stream to generate an equal-size\ncipherte xt stream one bit at a time. Likewise, the key-stream is\nbitwise XORed with a cipherte xt stream to generate its\ncorresponding original plainte xt str eam one bit at a time.\nThe initial secret key is carefully selected so that the register\ncontent does not become  zero as it shifts right. In the \ufb01gure,\nthe LFSR cipher is initiali zed with an 8-bit secret key = 8\u2019hEB\n(hex in Verilog) and requir es 16 clock cycles to encrypt the 16-\nbit plainte xt = 16\u2019hAFE0 to its cor responding 16-bit cipherte xt =\n16\u2019h44CF . Likewise, the register is initialized with the same\nsecret key = 8\u2019hEB befor e the 16-bit cipherte xt = 16\u2019h44CF  is", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1226, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "092aaf3b-92d1-42f3-beb1-de10a7c4d62d": {"__data__": {"id_": "092aaf3b-92d1-42f3-beb1-de10a7c4d62d", "embedding": null, "metadata": {"page_label": "761", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1d7ce415-6604-4995-a43a-4ee24bccf562", "node_type": "4", "metadata": {"page_label": "761", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b71dd9bec51017608b9930806595e19590766819a6a2c37ada878841d108bbcb", "class_name": "RelatedNodeInfo"}}, "text": "decrypted, in 16 clock cycles, to generate the original 16-bit\nplainte xt = 16\u2019hAFE0.\nA5/1\nA5/1 is a practical stream cipher and uses three 19-, 22-, and\n23-bit LFSRs, as illustrated in Fig. 11.13 . The three LFSRs are\nlabeled X, Y, and Z, respectively . The symbol \n  indicates bitwise\nXOR. The LFSRs are not shifted during every clock cycle;\ninstead, register bits x8, y10, and z10 are used as inputs to a\nmajority circuit that outputs m = 1 if two or more of the inputs\nare 1, or m = 0 if two or more of the inputs are 0. For exampl e,\nif x8 = 0, y10 = 0, and z10 = 1, then m = 0, and if x8 = 1, y10 =\n1, and z10 = 0, then m = 1.\nFIGURE 11.13  The A5/1 str eam cipher .\nThe x8, y10, and z10 bits are individually compar ed (XNOR ed)\nwith m to either enable or disable each register during the next\nclock cycle. For example,  if \n  then register X is enable d;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 862, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7fa9a13d-99e9-4d43-ade8-82e8fd6fb638": {"__data__": {"id_": "7fa9a13d-99e9-4d43-ade8-82e8fd6fb638", "embedding": null, "metadata": {"page_label": "762", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fa17b2e1-0e5b-4b3b-9d9a-b8a22f146159", "node_type": "4", "metadata": {"page_label": "762", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "cd12912fadd0b24a84301e3c33519547c942dd54600f34b2f10317a9448fea14", "class_name": "RelatedNodeInfo"}}, "text": "otherwise, X is disabled during the next clock  cycle. This\nintroduces additional randomness to the key-stream. The bits\nx18, y21, and z22 are used to generate the key-stream. The initial\nsecret key is 64 (19 + 22 + 23) bits long.\nBlock Ciphers\nData Encryption Standar d (DES) is one of the oldest block\nciphers. It operates on 64-bit blocks and uses a 56-bit key.\nAdvanced Encryption Standar d (AES), the most common today,\nis recommended by the National Institute of Standar ds and\nTechnology (NIST) [ 38].\nAdvanced Encryption Standard (AES)\nThe 128-bit AES cipher (the standar d) requir es a 128-, 192-, or\n256-bit key to encrypt/decrypt blocks of 128-bits. If the number\nof bits in a plainte xt input is not divisible by 128, the plainte xt is\npadded with extra bits. AES organizes each input block into\ncolumns and rows. An encryption step requir es 10, 12, or 14\nrounds of operations, depending on the length of the key. Each\nround involves certain byte substitutions using a lookup table,\nrow shifting, column mixing, and bitwise XOR operation to\ngenerate the input for the next round. The output of the last\nround is a 128-bit cipherte xt. Depending on the mode of\noperations (discussed next), decryption operations may be\nperfor med in the reverse order or in the same order as\nencryption.\n11.5.2 Modes of Operation\nFigure 11.14  illustrates the application of the AES cipher in\ncipher block chaining (CBC) mode. Each encryption step starts\nwith a bitwise XOR of the current 128-bit plainte xt block and the\npreceding 128-bit cipherte xt block; thus, the word \u201cchaining\u201d in\nthe name. The \ufb01rst plainte xt block, however, is XORed with a\n128-bit randomly generated, but not necessarily secret,\ninitialization vector (IV).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1728, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "61d0f5c0-fc5c-4e57-9e3c-9a00075dceed": {"__data__": {"id_": "61d0f5c0-fc5c-4e57-9e3c-9a00075dceed", "embedding": null, "metadata": {"page_label": "763", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "53dbe7f9-f544-4cc4-a993-0398357ef3c4", "node_type": "4", "metadata": {"page_label": "763", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "fbc059284a63b9a3b6b29887493fde674f77ce73b7127b793ccfbc23d86e3a44", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.14  Illustrating the AES cipher in CB C mode: ( a)\nencryption; ( b) decryption.\nWhile the blocks of a plaintext are encrypted recursively in\nCBC mode, as illustrated in Fig. 11.14( a) and also outlined in\nTable 11.6, the blocks  of a cipherte xt can be decrypted in\nrandom order and even in parallel. In the table, the letter E\nstands for encryption; D for decryption; K for secret key; P0, P1,\netc., for plainte xt blocks 0, 1, etc.; and C0, C1, etc., for\ncipherte xt blocks 0, 1, etc.\nTABLE  11.6  Encryption/Decryption in CB C Mode", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 544, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "efd41c02-20c7-43d8-a6bd-e9d8305762ac": {"__data__": {"id_": "efd41c02-20c7-43d8-a6bd-e9d8305762ac", "embedding": null, "metadata": {"page_label": "764", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "434571bf-0853-4752-8101-b070b6c7f9ae", "node_type": "4", "metadata": {"page_label": "764", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9a6971c33fe424f8094a70517d6892d28442a88ff5c4ae7072ea85ac5bd7e38f", "class_name": "RelatedNodeInfo"}}, "text": "Another common mode of operation is the counter mode\n(CTR), as outlined in Table 11.7. It uses a sequence of IVs for\nconcur rent processing. The function E(IV, K) indicates the\nencryption of an IV with K, which is then XORed with the \ufb01rst\nplainte xt block P0 to generate the \ufb01rst ciphertext block C0. The\nIV is then incremented and is used to encrypt the next plainte xt\nblock ( P1) independent of C0. This process continues until all the\nplainte xt blocks ar e encrypted.\nTABLE  11.7  Encryption/Decryption in CTR Mode\nThe CTR mode has the advantage of using a single  cipher for\nboth encryption and decryption. Note that, in the table, no\ndecryption (D) cipher is used. In addition, blocks can be\nencrypted or decrypted concur rently. For example, a 16-block\nplainte xt can be partitioned into two groups of eight blocks,\nsuch as, blocks P0 to P7 in one group and blocks P8 to P15 in\nanother group. The blocks of each group can then be processed\nconcur rently, for example, using two threads. One thread\noperates on blocks P0 to P7 and uses IV to IV+7, and a second\nthread operates on blocks P8 to P15 and uses IV+8 to IV+15.\nMany processors, including those of Intel and AMD, have\nimplemented the AES instruction set, wher e CBC, CTR, and\nother modes can be implemented in sof tware [39].\n11.5.3 Asymmetric-Key Ciphers", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1321, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b5bd5186-429f-4421-b240-7ed922add1d3": {"__data__": {"id_": "b5bd5186-429f-4421-b240-7ed922add1d3", "embedding": null, "metadata": {"page_label": "765", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "73388de3-854e-4f2c-b9d6-93c92508e410", "node_type": "4", "metadata": {"page_label": "765", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4be0688e9f3e584fe5fdbb2190a118176743a1120c2496d350fb84a7bbd9d84b", "class_name": "RelatedNodeInfo"}}, "text": "An asymmetric-k ey cipher, as stated earlier, requir es two keys,\none for encryption and another one for decryption. The primary\napplication of asymmetric-k ey cryptography, as illustrated in\nExample 11.1, is for communication. In the example, Alice and\nBob r epresent two subjects as people, pr ograms, or har dwar e.\nExample 11.1.  Suppose Alice would like to send a secret message to Bob. Alice and\nBob each  have a nonsecr et public key and a secret private key. Also, suppose, no one\nelse will send a secret message to Bob and pretend to be Alice or alter Alice\u2019s\nmessage in any way .\nSolution:  Because Alice is only concer ned with keeping the message con\ufb01dential,\nAlice and Bob can use the following two steps:\n1. Alice uses Bob\u2019s public k ey to encrypt her private\nmessage to Bob.\n2. Upon r eceiving the message, Bob uses his private k ey\nto decrypt the message.\nSince no one else know s Bob\u2019s private key, only Bob can\ndecrypt Alice\u2019s encrypted message.\nRSA\nRSA, which stands for Ron Rivest, Adi Shamir and Leonar d\nAdleman, the names of the three people who developed it, is an\nasymmetric-k ey cipher that requir es one key for encryption and\na di\ufb00erent key for decry ption. Each plainte xt or cipherte xt is\nviewed as an integer number . For example, using the ASCII\ncoding scheme, the string message \u201cHELL O\u201d consists of \ufb01ve 8-\nbit ASCII codes; that is, 2\u2019h48 or 72 for character H, 2\u2019h45 or 69\nfor E, 2\u2019h4C or 76 for L, 2\u2019h4C or 76 for the second  L, and 2\u2019h4F\nor 79 for O .\nThe string may be partitioned and viewed as \ufb01ve separate\nASCII codes with decima l numbers 72, 69, 76, 76, and 79, or\nviewed as single large 40-bit number : 40\u2019h48454C4C4F (hex in\nVerilog). Othe r partitions of the string into integer numbers are\nalso possible. For examp le, the string may be partitioned into\nthree 16-bit numbers: 16\u2019h4845 = 18501, 16\u2019h4C4C = 19532,\nand 16\u2019h4F00 = 20224. The last partition is padded with an 8-\nbit 0 to mak e it a 16-bit number .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1955, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4703e6b-a42d-46a9-a060-9f75766f7a8a": {"__data__": {"id_": "f4703e6b-a42d-46a9-a060-9f75766f7a8a", "embedding": null, "metadata": {"page_label": "766", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "af4ee144-dd6b-4874-999c-fe160eb12564", "node_type": "4", "metadata": {"page_label": "766", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "eadfa84946e8ecd1a3ba4e8b786d89f41999f53298a3b02e098d891d4eaeffe8", "class_name": "RelatedNodeInfo"}}, "text": "For simplicity, it is assumed that the string \u201cHELL O\u201d is\npartitioned into \ufb01ve plainte xt integer numbers as P0 = 72, P1 =\n69, P2 = 76, P3 = 76, and P4 = 79. The string can then be\nencrypted, one number at a time, using, for example, CBC or\nCTR mode of operation discussed earlier . However, asymmetric\nciphers, as discussed next, are not designed to encrypt large\ninputs.\nThe RSA requir es two relatively prime numbers as keys: a\npublic key (e) used for encryption, and a private key (d) used\nfor decryption. Equation (11.3) de\ufb01nes the relationships\nbetween an n-bit plainte xt P and its n-bit cipherte xt C.\nAssuming that the public  key e = 5 and n = 91, Eq. (11.4)\nillustrates the encryption of a plainte xt P = 72 to its cipherte xt\nC = 11, which is the remainder of 725 divided by 91. (Note that\nfor 8-bit plainte xt ASCII codes, n has to be 256).\nEquation (11.5)  illustrates the calcula tions requir ed to\ndecrypt C = 11 and obtain its corresponding original plainte xt\nnumber P = 72 using private key d = 29 and n = 91. Note that\nthe integer quantity 1129 is too big to compute using a\ncalculator or even some computers. It must be divided into\nsmaller for ms until each for m is small and computable.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1210, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1897280a-b836-4ff9-904c-c1dc94d11a44": {"__data__": {"id_": "1897280a-b836-4ff9-904c-c1dc94d11a44", "embedding": null, "metadata": {"page_label": "767", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d73c732e-1f8f-46f7-9146-4820bb89278d", "node_type": "4", "metadata": {"page_label": "767", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3d65f3b1c39fe114d978c493c365c56d91d2ba8f23cde5f6d2243ca681ca40fb", "class_name": "RelatedNodeInfo"}}, "text": "A very large integer quan tity Xy may be written as Xa+b, Xa*b,\nor Xa*b+c. Equation (11.6) illustrates Xa*b+c mod n divided into\nsmaller for ms.\nIf, for example, quantity Wb is still too big a number in Eq.\n(11.6) , the quantity is again successively divided into smaller\nforms until all such quant ities are small numbers and the result\nof each mod function can be computed.\nThe following is an algorithm to deter mine an RSA encryption\nkey e and decryption key d [40, 41]. Public keys are secur ely\nstored in a trusted center, such as the public key infrastructur e\n(PKI).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 574, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8104c6fe-eeb9-41e2-8f30-867d180cb20b": {"__data__": {"id_": "8104c6fe-eeb9-41e2-8f30-867d180cb20b", "embedding": null, "metadata": {"page_label": "768", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1d95946b-d63d-4cb7-90c7-ba8f420c706d", "node_type": "4", "metadata": {"page_label": "768", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "bc6fcfb576165fb59c34d5665ebc0f93a439663a492c4ecfcb0589e0dac4fecc", "class_name": "RelatedNodeInfo"}}, "text": "1. Select two prime numbers p and q; for e xample, p = 7\nand q = 13.\n2. Deter mine n = p * q; that is, n = 7 * 13 = 91.\n3. Deter mine m = (p \u2212 1)( q \u2212 1); that is, m = (7 \u2212 1)(13\n\u2212 1) = 6 * 12 = 72.\n4. Find a prime number e such that e is relatively prime to\nm and e < m; that is, gcd( e, m) = 1 and e < m, wher e\n\u201cgcd\u201d stands for gr eater common divisor; for e xample,\nselect e = 5.\n5. Find an integer \n  wher e k is an integer number\nand d < m; for e xample, for \n . If ther e is\nno such integer k, select a di\ufb00er ent value for e in step 4\nand r epeat step 5. If ther e are no such e and d values,\nselect two di\ufb00er ent prime numbers in step 1 and r epeat.\n6. Use the values of e and n as public (known) and d as\nprivate (unknown) infor mation; that is, use e as a public\nkey and d as a private k ey.\nIt is also possible to reverse the order and \ufb01rst select a value\nfor d and then deter mine a value for e according to the\nrequir ements of steps 4 and 5.\nThe RS A cipher r equir es mor e computations when P, C, e, and\nd are very large numbers. For instance, a 128-character\nmessage may be interpr eted as a 1024-bit integ er (128 * 8)\nmessage, one of 256128 possible combinations made with 128\nASCII characters. This implies that P and C can be a very large\nnumber <21024. The encryption of a 1024-bit P would result in a\n1024-bit cipherte xt C, also containing 128 ASCII characters.\nBecause typical processors do not have, for examp le, a 1024-bit\narithmetic unit requir ed for 1024-bit RSA cipher, large\narithmetic functions must be either implemented in software or\nas a copr ocessor in har dwar e [42].\nThe bigger the values of cipherte xt C and the decryption key\n(d) are, the harder it is, requiring many days, month s, or even\nyears of computations, to break the RSA cipher . One possible", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1797, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "789a4a51-3638-4177-afb0-fa10c023525e": {"__data__": {"id_": "789a4a51-3638-4177-afb0-fa10c023525e", "embedding": null, "metadata": {"page_label": "769", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7d023df5-c0b1-478b-91d2-4b439b0f1708", "node_type": "4", "metadata": {"page_label": "769", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1fe5fbfd1ff721d3ab2e062446bccd79ee3bf032c610e278763a133937333121", "class_name": "RelatedNodeInfo"}}, "text": "technique is to use a brute-for ce approach and examine every\npossible decryption key value until the right key is identi\ufb01ed\nand the resultant P makes sense. However, given a 2048-bit C,\nit could take a prohibitively long time to deter mine the\ncorresponding 2048-bit P. A timing attack has been used to\nreduce the list of possible  decryption key values based on the\namount of time requir ed to perfor m decryption, much like a\nthief guessing the numbers requir ed to unlock a combinational\nlock based on how long it takes a person to turn the dial to\nunlock the lock.\nExample 11.2.  Suppose  Alice would like to send  a secret message to Bob, and she\nalso wants to make sure no one else is able to send a secret message to Bob and\npretend to be her .\nSolution :\n1. Alice uses her private k ey and encrypts her secr et\nmessage. Since no one else knows Alice\u2019s private k ey, the\nencrypted message, in a way, has her signatur e.\n2. Alice then uses Bob\u2019s public k ey and encrypts her\nalready encrypted message; thus, only Bob can access the\nmessage and not anyone else who knows Alice\u2019s public k ey.\n3. After receiving the message, Bob \ufb01rst uses his private\nkey and decrypts the message.\n4. Bob then uses Alice\u2019s public k ey and decrypts the\nsecret message Alice sent.\nThese four steps requir e four applications of the RSA cipher :\ntwo for encry ption by Alice and two for decryption by Bob. This\nis a disadvantage, considering the signi\ufb01cant processing time of\nthe RSA cipher . However,  Alice and Bob could use the steps in\nExample 11.2 to share a symmetric key and use it instead to\nexchange large messages. Symmetric ciphers are faster and\nrequir e fewer  key bits to achieve the same level of security as\ncompar ed to asymmetric ciphers; for example, 3072-bit RSA is\ncomparable to 128-bit AES [ 43].\nExample 11.3.  Suppose Alice and Bob would like to exchange many secret\nmessages. Therefore, they decide  to be e\ufb03cient and use a symmetric-k ey cipher\ninstead of an asymmetric-k ey cipher, such as the RS A.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2011, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "65b62ded-4030-422d-8398-38a797e71792": {"__data__": {"id_": "65b62ded-4030-422d-8398-38a797e71792", "embedding": null, "metadata": {"page_label": "770", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "81aefaea-93ca-4574-8ade-5699321c3199", "node_type": "4", "metadata": {"page_label": "770", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "baff9c04cbafd5555a47182aaa5363dec85e088cd9dcddbb6776cc498d17a812", "class_name": "RelatedNodeInfo"}}, "text": "Solution :\n1. Alice and Bob use the four steps outlined in Example\n11.2 for Alice to send a message containing, for e xample, a\n128-bit symmetric k ey to Bob.\n2. Both Alice and Bob now know a common secr et key\nthat they can use to e xchange secr et messages using a\nsymmetric-k ey cipher such as AES.\nWith both Examples 1.2 and 1.3, there is a chance for a man-\nin-the-middle attack. For instance, suppose Mary is able to\naccess Alice\u2019s hard disk or perfor ms a timing attack and\ndiscovers Alice\u2019s private key. Mary then is able to intercept and\naccess Alice \u2019s secret symmetric key in Example 11.3. Once\nMary knows the symmetric key, she can monitor secret\nmessages exchanged between Alice and Bob. Therefore,\nadditional security policy  mechanisms are needed to detect\nman-in-the-middle attacks.\nExample 11.4.  Suppose Alice wants to send Bob a symmetric key and she wants to\nmake sure there is no chance for any man-in-the-middle attacks. Also, assume the\ncommunication medium is secur e and any data transmission errors (if any) can be\nresolved.\nSolution : Both Alice and Bob need to include randomly generated numbers unknown\nto an adversary in their message s to make sure they are communicating with each\nother and not with a middle man [44]. In the followin g \u201cptxt\u201d stands for plainte xt,\n\u201cctxt\u201d for cipherte xt, \u201cpr \u201d for private k ey, and \u201cpu\u201d for a public k ey.\n1. Alice uses Bob\u2019s public k ey (Bpu) and encrypts a\nrandom number ( r1) plus her name or an ID number\n(IDAlice); r1 is generated by a trusted sof tware. Alice sends\nthe encrypted message to Bob and waits for a r esponse.\n2. Bob\u2019s r eceives the message and uses his private k ey\n(Bpr) to decrypt the message and discover r1 (labeled r1Bob-\nrcvd).\n3. Bob uses Alice\u2019s public k ey (Apu) to encrypt and send\nboth r1Bob-r cvd and another random number ( r2) that his\ntrusted sof tware generated to Alice. Bob then waits for a\nresponse fr om Alice.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1918, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "002f2653-7965-4f66-88c2-d0abc4fe448a": {"__data__": {"id_": "002f2653-7965-4f66-88c2-d0abc4fe448a", "embedding": null, "metadata": {"page_label": "771", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c1186e2d-3397-4b9f-8dc5-182fb14726bc", "node_type": "4", "metadata": {"page_label": "771", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "83fcbdee61798f0279aa96fec1170c7d3116655c0725a9b8b8a4597130fced5f", "class_name": "RelatedNodeInfo"}}, "text": "4. Alice r eceives the message and uses her private k ey\n(Apr) to decrypt the message and discover both r1 (r1Alice-\nrcvd) and r2 (r2Alice-r cvd). Alice compar es r1Alice-r cvd with r1. If\nthe two values ar e the same, Alice knows the message\ncame fr om Bob and not fr om someone else.\n5. Alice then uses Bob\u2019s public k ey (Bpu) and encrypts and\nsends r2Alice-r cvd back to Bob.\n6. Alice also generates a plainte xt symmetric k ey (Ksym-\nptxt) and encrypts the k ey as Ksym-ctxt1  using her private k ey\n(Apr). She then uses Bob\u2019s public k ey (Bpu) and encrypts\nKsym-ctxt1  to generate Ksym-ctxt2  that she sends to Bob.\n7. Bob uses his private k ey (Bpr) and discovers the r2 he\nhad sent to Alice ( r2Bob-r cvd). Bob compar es r2Bob-r cvd and\nr2. If the two values match, Bob knows he is\ncommunicating with Alice.\n8. Bob then \ufb01rst uses his private k ey to discover Ksym-ctxt1\nfrom Ksym-ctxt2 , and then he uses Alice\u2019s public k ey to\ndiscover Alice\u2019s Ksym-ptxt  from the Ksym-ctxt1.\n9. Bob sends an acknowledgement message encrypted\nwith Ksym-ptxt  to Alice.\nThese steps are summari zed here using E for encryption, D for\ndecryption, and symbols {} for concatenation:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1168, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5b00810-2901-4a8b-972a-1f2754e029df": {"__data__": {"id_": "c5b00810-2901-4a8b-972a-1f2754e029df", "embedding": null, "metadata": {"page_label": "772", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "287635ec-41d8-436e-93fe-ea984371ca14", "node_type": "4", "metadata": {"page_label": "772", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4c18a0040383c769da3d0109b93739c3738ea07c1398d86c8c63450cc1334ee6", "class_name": "RelatedNodeInfo"}}, "text": "Elliptic Curve Cryptography (ECC)\nThere are other asymm etric-k ey ciphers. The elliptic curve\ncryptography (ECC) requir es smaller public/private key sizes to\nprovide the same level of security as compar ed to RSA. For\nexample, 2048-bit RSA provides the same level of security as\n224-bit ECC, and 3072-bit RSA is comparable to 256-bit ECC\n[42, 43]. Further more, because both RSA and ECC ciphers\nrequir e about the same amount of processing time with equal\nkey sizes, ECC is more cost e\ufb00ective in terms of both requir ed\nkey storage space and processing time. This makes ECC\nadvantageous when compar ed to RSA, especially in handheld\ndevices where less power consumption is desirable.\nMathematically, however,  ECC is more comple x. Its description\nis defer red to te xtbooks on cryptography .\n\u00a0\n11.6 Hashing\nHashing is like a \ufb01ngerprint used for message authentication. A\nhash function  converts the entire message into a unique hash\nvalue , also called a hash code, or simply just a hash, which is a", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1002, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d99d904b-2a04-4a81-aa6d-87d3acdd2b6f": {"__data__": {"id_": "d99d904b-2a04-4a81-aa6d-87d3acdd2b6f", "embedding": null, "metadata": {"page_label": "773", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9c211d74-d1cb-4d2d-9b9a-81fd53693b1a", "node_type": "4", "metadata": {"page_label": "773", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "23a550ee5d56a0ac571da5a032bc9dfb7608ce304413bd5e5ac451b97fc9afca", "class_name": "RelatedNodeInfo"}}, "text": "number in the order of only a few bytes. A message is validated\nby verifying a received hash value with the one computed from\nthe received  message, as illustrated in Fig. 11.15 . If the two\nhash values match, the message is consider ed valid; otherwise,\nthe message, the hash, or both have been modi\ufb01ed.\nFurther more, a hash funct ion is always one-way; it is impossible\nto retrieve the original message from a hash value of only a few\nbytes. A hashing function is called standard  if no secret key is\nused to generate a hash.\nFIGURE 11.15  Message authentication using hashing.\nA hash simpli\ufb01es message authentication, which otherwise\ncould be a very di\ufb03cult task, especially if a message is, for\nexample, a pictur e or binary \ufb01le. Figure 11.16  illustrates a\nsimple stand ard hash function using 8-bit bitwise XOR logic. In\nthe \ufb01gure, the ASCII string \u201cHELL O\u201d generates a hash  = 8\u2019h8E.\nIt would be impossible to deter mine the original message\n\u201cHELL O\u201d from its hash value 8\u2019h8E. A standar d hash is also\nknown as a checksum , which is typically used to detect data\ntransmission er rors.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1092, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4d325dbf-28e9-48d0-8167-56d10c0249fc": {"__data__": {"id_": "4d325dbf-28e9-48d0-8167-56d10c0249fc", "embedding": null, "metadata": {"page_label": "774", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "52260c23-8757-4e42-bb01-b539c48ec814", "node_type": "4", "metadata": {"page_label": "774", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "53be0db43034ea879b2912c6fc3c14822e43d45ff08b3f43bc5a42efa14216c8", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.16  A simple standar d hash function using 8-bit\nbitwise X OR; it generates a 1-byte hash for the string message\n\u201cHELL O.\u201d\nExample 11.5.  Suppose Alice wishes to share an important personal message with\nher friends so she decides to digitally sign the message befor e sending it.\nSolution:  In the following, \u201cH\u201d indicates a hashing function, \u201cM\u201d a messag e, and\n\u201cHV\u201d a hash value:\nSoftware companies can also use the technique illustrated in\nExample 11.5 to secur ely distribute noncon\ufb01dential software\nproducts.\nA hash function must  be collision resistant , never\nproducing the same hash  value for two di\ufb00er ent messages. For\nexample, the simple hash function illustrated in Fig. 11.16  is not\na collision-r esistant hash function. The hash of string \u201cWORLD \u201d\nwith the same IV = 8\u2019hCC, as illustrated in Fig. 11.17 , is the\nsame as the hash of string \u201c HELL O.\u201d", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 875, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ff08ab2d-1e74-491e-99d6-81a0a7fc3533": {"__data__": {"id_": "ff08ab2d-1e74-491e-99d6-81a0a7fc3533", "embedding": null, "metadata": {"page_label": "775", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "92a6310d-e968-475e-b20c-690a862f92ed", "node_type": "4", "metadata": {"page_label": "775", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "37945d919e6286619b5ffcae9a51f484b325165d0473b621b475c5c08a7f8760", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.17  An e xample illustrating a noncollision-r esistant\nhash function; two messages\u2014\u201cWORLD \u201d and \u201c HELL O\u201d\u2014\ngenerate the same hash value.\nThe Secur e Hash Algorith m (SHA) that was developed by the\nNIST [38] now includes four hash ing algorithms: the original\nSHA-1, SHA-256, SHA-384, and SHA-512. SHA-1 generates the\nfollowing two hash values for the two strings \u201cHELL O\u201d and\n\u201cWORLD \u201d [45]. The two hash values are very di\ufb00er ent.\nHowever, SHA-1 has since shown to be not collision resistant\n[40].\nEach SHA algorithm successively processes a 512-bit (SHA -1\nand SHA-256) or 1024-bit (SHA -384 and SHA-512) message\nblock and generates a \ufb01nal 160-, 256-, 384-, or 512-bit hash\nvalue, respectively . A message must be padded (if necessary)\nwith extra bits and then concatenated with the size of the\nmessage before hashing. The padding and concatenation create\nan input message that is an integer multiple of block size in\nlength. For example, Fig. 11.18  illustr ates the format for the\ninput message used with SHA-512. The message is \ufb01rst padded\n(as needed) with a 1 followed with zero or more 0\u2019s, and then it", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1118, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "57c9e102-24bd-4b95-9035-a89f872b3321": {"__data__": {"id_": "57c9e102-24bd-4b95-9035-a89f872b3321", "embedding": null, "metadata": {"page_label": "776", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c916c85f-ee99-4d77-b8c7-e5410a277ce4", "node_type": "4", "metadata": {"page_label": "776", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d421dd284760fb45bfee757ffa6460f5120970ecf1da776c178113cc3235223c", "class_name": "RelatedNodeInfo"}}, "text": "is concatenated with the size of the message ( N) represented as\na 128-bit unsigned number . The result becomes an M * 1024-bit\nmessage, with M being an integer number . Table 11.8 presents\na list of pr operties for each of the SHA algorithms.\nTABLE  11.8  Properties of Secur e Hash Algorithms\nFIGURE 11.18  The message for mat used with the SHA -512 hash\nalgorithm.\nAn SHA, like the simple hash function illustrated in Fig. 11.16 ,\nstarts with a k-bit known IV, wher e k is typically less than the\nblock size n (k < n), and perfor ms several compr ession rounds\nto generate a hash value  for the \ufb01rst block, which  is then used\nas the IV to hash the next block. This process continues until\nthe \ufb01nal hash, also called a message digest , is generated. Any\nchange made to the message will result in a di\ufb00er ent hash\nvalue that will not match the one transmitted with the original\nmessage. The SHA algorithms could be used either with\nplainte xt or cipherte xt input.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 966, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9d672dbf-896c-4836-a572-6b25a5cb81eb": {"__data__": {"id_": "9d672dbf-896c-4836-a572-6b25a5cb81eb", "embedding": null, "metadata": {"page_label": "777", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3778621a-a86b-4563-966b-13693507d78b", "node_type": "4", "metadata": {"page_label": "777", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "bc2e53e7bf687958a384f018e585778fa9222f2b079a630b9914fa969328504f", "class_name": "RelatedNodeInfo"}}, "text": "11.7 Cryptography Hash\nA standar d hash cannot be protected. It is still possible for an\nadversary to alter both the message and its hash without\ndetection. Cryptography hash algorithms, on the other hand,\nrequir e a secret key to generate a hash value. In this case, the\nhash is called a keyed hash . Two examples of keyed hash\nalgorithms ar e discussed ne xt.\n11.7.1 Message Authentication Code\nA message authentication  code (MAC), also called a cipher MAC\n(CMA C), requires a cipher to generate a secur e hash. For\nexample, Fig. 11.19  illustrates the generation of a MAC using\nthe AES-CB C cipher with n-bit blocks and a k-bit key (K). The n-\nbit keys K1 and K2 in the \ufb01gure depend on the message size\nand are deter mined from K and a constant that depends on n\n[40]. If the message size is an integer divisible by n, then\nconstant K1 is used; otherwise, the last block is padded with 1\nfollowed by 0\u2019s to create an n-bit last block and the constant K2\nis used . A few bytes from the last cipher block are selected as\nthe MA C.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1032, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "41301b75-9803-4cf6-8dcb-99dc2e22b9df": {"__data__": {"id_": "41301b75-9803-4cf6-8dcb-99dc2e22b9df", "embedding": null, "metadata": {"page_label": "778", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0339c43f-4026-4aec-8643-161e64410fe4", "node_type": "4", "metadata": {"page_label": "778", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "596c06d24a81c4735919e80a3acedf0233071af1d9aab6984e0b3b0fc28bdfd8", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.19  The AES-CB C-MA C; the MA C is m bits long wher e\nm \u2264 n.\nThe combine d abbreviat ions AES-CB C-MA C means an AES\ncipher in CBC mode is used to generate a MAC. AES-CB C-MA C\nhas the advantage of perfor ming both encryption and keyed\nhashing at the same time.\nIf an accidental or intenti onal modi\ufb01cation is made  to one or\nmore of the input blocks, the algorithm produce s a di\ufb00er ent\nMAC. Therefore, it is not possible for an adversary who doesn\u2019t\nknow the secret key to alter the input and still generate the\nsame MAC. However, both the sender and the receiver need to\nknow the secret key and the technique used to generate a MAC.\nIn addition, a MAC may be generated for a plainte xt or\ncipherte xt input.\n11.7.2 Hash MAC\nAs opposed to a CMAC that requir es a cipher, a hashed MAC\n(HMA C) requir es a more e\ufb03cient (less computationally\nintensive) standar d hashing algorithm, such as SHA-256. An\nHMAC could be computed in two hashing cycle s using two\nadditional secret (S) codes Si (input S) and So (output S),\nderived from a secret key K and two integer constan ts called\ninput pad ( iPAD) and output pad ( oPAD).\nThe iPAD and oPAD do not make the hashing  algorithm more\nsecur e; instead, they are used to improve the quality of the\nsecret key through a technique known as whitening  [46]. For\nexample, given an initial 16-bit key = 16\u2019h1234 and iPAD =\n8\u2019h36, a 32-bit Si is generated as follows using bitwise XOR (\n)\nas the whitening technique:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1463, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab4c367f-e282-4758-a27b-311454fc47d2": {"__data__": {"id_": "ab4c367f-e282-4758-a27b-311454fc47d2", "embedding": null, "metadata": {"page_label": "779", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9b8f441c-5445-43d4-b380-c13b990915d7", "node_type": "4", "metadata": {"page_label": "779", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c1616ead9e071f0d0fc41e8b653c2ae07a037347aace56f19713c7b763ce687b", "class_name": "RelatedNodeInfo"}}, "text": "Given a message M, a secret key K, the iPAD and oPAD\nconstants, and a standar d hash algorithm H, an HMAC is\ngenerated as follows:\n\u00a0\nThe HMAC Algorithm:\n1. Generate Si from K and iPAD, as illustrated in Eq.\n(11.7) ; that is, Si = K \n iPAD+. The original secr et key may\nneed to be padded with 0\u2019s, and iPAD is repeated as\nneeded to cr eate Si of desir ed length.\n2. Generate a hash value ( HV) for Si concatenated with M;\nthat is HV = H({ Si, M }), wher e {} indicates concatenation.\n3. Generate So using K and oPAD (e.g., oPAD = 8h\u20195C ). So\nis generated in a similar way as Si; that is, So = K \n oPAD+.\n4. Generate the HMA C for So concatenated with HV; that\nis, HMAC = H({ So, HV }).\nEquation (11.8)  summarizes these four steps.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 731, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6106c48c-4aa8-4f61-a990-7ac2846b7032": {"__data__": {"id_": "6106c48c-4aa8-4f61-a990-7ac2846b7032", "embedding": null, "metadata": {"page_label": "780", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e8d7f23-9740-4191-bba5-3c47ef423529", "node_type": "4", "metadata": {"page_label": "780", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2beb762fa22bb7f0308b0c311e641029ff4142ae5da45a9abf2981452c71f80c", "class_name": "RelatedNodeInfo"}}, "text": "11.8 Storing Cryptography Keys\nthrough Hardware\nAs was discussed at the start of the chapter, con\ufb01dentiality and\nintegrity are fundamental to computer security . However,\nstoring cryptography keys on the hard disk creates a security\nrisk and a threat to the system. Secur ely storing many secret\nkeys, such as those used in an organization, requir es creating a\nkey structur e tied to a secret key inside a tamperp roof IC. This\nis known as data storag e through hardware  or binding\ndata to platform .\nThe NIST lists a set of recommended key sizes and derivation\ntechniques [38]. For examp le, 2048-, 3072-, or 4096-bit key\nsizes for the RSA, or 256- or 384-bit key sizes for the ECC are\nrecommended for public key encryption. Likewise , 256-, 384-,\nand 512-bit SHA ar e recommended for hashing. AES-CB C-MA C is\none of the recommendat ion for protecting both con\ufb01dentiality\nand integrity . For integrity only, a 128-bit HMAC using SHA-256\nis recommended. Readers are referred to the NIST documents\nfor application-speci\ufb01c recommendations. The secure storage of\ncryptography keys must be maintained by a trusted computing\nbase (T CB).\n11.8.1 Keychain Organization\nA key structur e, or keychain , is organize d hierar chica lly as a\ntree with parent and leaf nodes. Figure 11.20  illustrates an\nexample organization of one or more keychains, each with one\nor more nodes [47, 48]. In the \ufb01gure, a parent node is shown by\na square, and it refers to a storage k ey requir ed to protect the\ncontent of its childr en nodes. A leaf node, shown by a diamond,\nrefers to a signature k ey, also called a signing k ey. It is used,\nfor example,  to encrypt the hash of an e-mail message or the\noutput of a program to certif y results. A leaf node , shown as a\ncircle, indicates a smal l amount of data, for example, a\nsymmetric key used to encrypt a large data \ufb01le. A key structur e\nmay also include other leaf nodes, such as an attestation", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1928, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5255204f-12ed-464f-b321-8f9519ad8f81": {"__data__": {"id_": "5255204f-12ed-464f-b321-8f9519ad8f81", "embedding": null, "metadata": {"page_label": "781", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ac75df57-a701-4ff5-aaa3-60259267ac6d", "node_type": "4", "metadata": {"page_label": "781", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b919e028d7a74464acafc45bfcb21747853f67f16e2f8e782745fe8d05d385ef", "class_name": "RelatedNodeInfo"}}, "text": "identity key (AIK). It is an asymmetric key tied to the platfor m\nand used, for e xample, in server authentication applications.\nFIGURE 11.20  Keychains tied to an SRK inside a tamperpr oof IC.\nThe root parent node is protected by a secret root key (SRK)\nsecur ely stored inside a tamperpr oof IC. Secret keys based on\nphysical unclonable functions (PUFs) have been shown to be\nresistant to many types of attacks [49\u201351]. An arrow indicates a\nkey derivation. Each parent and leaf node contains  a set of key\nmaterial  that includes  a unique number called nonce  (number\nused once) and may also include one or more constants that\nidentif y a key type. The k eys themselves ar e not saved; only the\nkey material of each node is secur ely saved. In addition, an", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 759, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "79cf62c2-9334-4e1a-addf-1525555cf99c": {"__data__": {"id_": "79cf62c2-9334-4e1a-addf-1525555cf99c", "embedding": null, "metadata": {"page_label": "782", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c41120c3-1c0b-4f23-9cc9-f77ffca0c948", "node_type": "4", "metadata": {"page_label": "782", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "cec02f706921e50976e0552f2f46aacf5ddc6c170f39673765b4fa01d638002b", "class_name": "RelatedNodeInfo"}}, "text": "authorized user typically  may need to provide one or more\ncorrect passcodes, known as an authdata , befor e a child key\ncan be used. A keychain may be organized in several ways [48,\n52\u201355], such as the ones discussed ne xt.\n11.8.2 Storage and Access\nFigure 11.21( a) illustrates a 10-node keychain with 4 parent\nnodes labeled 0, 2, 5, and 7, and 6 leaf-nodes labeled 1, 3, 4, 7,\n8, and 9. The nonce N0 is assigned to root parent Node 0, N1 is\nassigned to data leaf Node 1, N3 is assigned to signatur e leaf\nNode 3, etc. As shown in Fig. 11.21( b), a record is created for\neach node and secur ely stored either locally or remotely on a\nserver . Each record contains a key identi\ufb01cation number, for\nexample, the node number; a parent identi\ufb01cation number; the\nnames of a cipher and a hashing algorithm, referred to as\ncryptography algorithm identi\ufb01ers; the encrypted key material;\nand k eyed hash for the entir e record.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 919, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "148cb244-9b08-4e52-813a-ae0bfd684051": {"__data__": {"id_": "148cb244-9b08-4e52-813a-ae0bfd684051", "embedding": null, "metadata": {"page_label": "783", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f9c5373e-65a4-4004-b5f4-531f514338c0", "node_type": "4", "metadata": {"page_label": "783", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0cb98eea7ba74a816c4154ee717fa772b6a4d04dd6adbc1dfb81179f30884c22", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.21  An e xample k ey structur e: (a) a keychain; ( b) a\nnode as a r ecord [53, 55].\nThe SRK is a secur e unique key embedded in each  SCP or SP\nchip. The key may be programmed into the chip during setup\nthrough a set of secur e I/O mechanisms without OS intervention\n[55]. In the \ufb01gure, the key of root parent Node 0 is used to\nprotect its two childr en nodes 1 and 2; the key of the data leaf\nNode 1 is used to protect, for example, a 128-bit AES key used\nfor encrypting a large user \ufb01le or a large application data; the\nkey of par ent Node 2 is used to pr otect its four childr en nodes 3,\n4, 5, and 7; etc.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 619, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "50df09f4-c388-4f22-a571-c39453cdd296": {"__data__": {"id_": "50df09f4-c388-4f22-a571-c39453cdd296", "embedding": null, "metadata": {"page_label": "784", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "40f18496-5090-4d41-a7df-8998b620b53b", "node_type": "4", "metadata": {"page_label": "784", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8307c2e0d8099c876b6b95c0e257c42304d5364d5d395a23d36b373920419769", "class_name": "RelatedNodeInfo"}}, "text": "A keychain is maintained using trusted \ufb01rmwar e module\n(TFM) in SCP or using a trusted software module (TSM) executed\non the SP (also see Sec. 11.4). TFM/TSM (TFM or TSM) would\ninclude a set of application programming interfaces (APIs), such\nas \u201cAdd2K eychain \u201d and \u201cEncrypt \u201d used by an OS or an\napplication pr ogram to r equest secur e cryptography services.\nIn the following example,  it is assumed that each  node may\nuse di\ufb00er ent encryption and hashing algorithms. In addition, for\nsimplicity, no authdata  is requir ed. All items mark ed plainte xt\n(\u201cptxt\u201d) are consider ed secur e within an SCP or an SP. The\nexamples assume an application is requesting security services\nfrom SCP or SP .\nExample 11.6.  Application software requests TFM, if SCP, or TSM, if SP (indicated as\nTFM/TSM), to add par ent Node 0 to k ey chain A in Fig. 11.21 .\nSolution:\nApplication task:\nUsing the following API, a request is sent to TFM/TSM to add\nroot parent Node 0 and create a keychain; TFM/TSM  will use the\napplication-pr ovided cipher0  and hash algorithm algHash0  to\nencrypt and perfor m a keyed hash of the key material. The\nparent of r oot Node 0 is Null.\nAddkey2K eychain (Keychain _A, 0, Null, cipher0, algHash0,\nnodeT ype0, R0)//nodeT ype: par ent\nTFM/TSM task:\nGenerates a nonce and then uses SRK to encrypt both the\nnonce and the Node 0\u2019s key material. The record is also keyed-\nhashed using SRK. The concealed record is returned to the\napplication for storage. In the following, \u201cnodeT ype\u201d indicates\nparent or leaf (data) node , R indicates a reference to key record\ndata structur e in memor y, \u201cKID\u201d indicates a key node ID (a\nnumber), \u201cPID\u201d indicates a parent node ID (a number), \u201cEKM\u201d\nindicates encrypted k ey material, N is a nonce, and HV is a hash\nvalue. SRK is the secur e root key stored in the SCP chip if TFM\nimplements the APIs, or in the SP chip if the TSM impalements", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1885, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b128012f-c83f-4cc8-9ecb-a0f802767f9b": {"__data__": {"id_": "b128012f-c83f-4cc8-9ecb-a0f802767f9b", "embedding": null, "metadata": {"page_label": "785", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d65b417f-6785-49b9-8f57-097ee233edef", "node_type": "4", "metadata": {"page_label": "785", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "a9747a04efb7bd2800bc12e6fe5068e5bcb592c9729049440b3af50a8e485cc7", "class_name": "RelatedNodeInfo"}}, "text": "the APIs. Speci\ufb01cally, TFM/TSM use SRK to perfor m the following\ntasks because KID = 0 and PID = null:\nExample 11.7.  The application software requests  TFM/TSM to add data leaf Node 1\nto par ent Node 0 in k eychain A in Fig. 11.21 .\nSolution:\nApplication task:\nUsing the following API, the TFM/TSM is instructed to add an\nencryption key node to parent Node 0 in keychain A; the\napplication provides cipger1  and algHash1  for encrypting and\nkeyed hashing of Node 1\u2019s key material, wher e \u201cK\u201d stands for a\nkey (also see Example 11.6 ).\nTFM/TSM task:\nPerforms the following operations because PID = 0:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 600, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc802f69-14e8-406b-82f5-402baf5219de": {"__data__": {"id_": "cc802f69-14e8-406b-82f5-402baf5219de", "embedding": null, "metadata": {"page_label": "786", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "60244075-a856-4e9f-8c67-d3c4fb4f665c", "node_type": "4", "metadata": {"page_label": "786", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "353e66643c15c690c1aa502b1f7087eae4ee182974c405505f684d23ced77904", "class_name": "RelatedNodeInfo"}}, "text": "Example 11.8.  The application software requests TFM/TSM to encrypt application\ndata using data-leaf k ey number 1 in Fig. 11.21 .\nSolution:\nApplication task:\nUsing the following API, the TFM/TSM is instructe d to encrypt\napplication data using encryption key 1 from keychain A, wher e\ndataptxt and datactxt reference the application data structur es in\nmemory . (Also see Examples 11.6  and 11.7.)\nTFM/TSM task:\nGenerates encryption key 1 using the key materia l of data leaf\nNode 1, and then encrypts the application data using the\napplication-pr ovided cipher . Application data as cipherte xt is\nreturned to the application.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 628, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5842e20c-881f-43e0-9952-a92757f4a647": {"__data__": {"id_": "5842e20c-881f-43e0-9952-a92757f4a647", "embedding": null, "metadata": {"page_label": "787", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6553cad4-099b-44a7-972d-363dc4433020", "node_type": "4", "metadata": {"page_label": "787", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2eed90965e743a1e4ba234edd49e6f5e3df129e8c27511b4edf25f79cb3d786b", "class_name": "RelatedNodeInfo"}}, "text": "Table 11.9 illustrates hypothetical records for Nodes 0 to 9 in\nFig. 11.21( a); only four records are shown. The fact that in the\n\ufb01gure, the keychain parent Node 0 is concealed by the SRK\ninside an IC; Nodes 1 and 2 are concealed by parent Node 0;\nNodes 3, 4, 5, and 7 are concealed by Node 2; Node 6 is\nconcealed by Node 5; and Nodes 8 and 9 are concealed by\nNode 7, the k eychain is said to be sealed thr ough har dwar e.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 423, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9fe3d8ae-c571-4fa2-9edc-5d24b9e659c8": {"__data__": {"id_": "9fe3d8ae-c571-4fa2-9edc-5d24b9e659c8", "embedding": null, "metadata": {"page_label": "788", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5d4d00b2-7ac7-4ea9-bcc0-9950258f4883", "node_type": "4", "metadata": {"page_label": "788", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "98c0533d46db0de5bb882c2f3365256da27a1630dcd743f7048a3110abb2c8da", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  11.9  Recorded K eychain in Fig. 11.21( a) Using the F ormat in Fig. 11.21( b)\n11.8.3 Application Example: Keychain\nas Access Control\nThe farther away a node  is from the root of a keychain, the\nmore computations are necessary to deter mine a key. Thus, a\nkeychain can be used to implement a multilevel access contr ol\n(Sec. 11.1.4) using a hierar chical authdata generation scheme.\nFigure 11.22  illustrates the data organization of a company that\nhas three departments. In each department, the data is\nclassi\ufb01ed into several security levels. In the Project Department,\nfor example,  data is classi\ufb01ed into four classi\ufb01cations as those\naccessed by engineers, by production engineers, by project\nleaders, and by the director . Anyone who has the role and\nprivileges of an \u201cengine er,\u201d for instance, would be able to\naccess all the data that is classi\ufb01ed as \u201cengineering data.\u201d A\nproduction engineer would be able to access all the \u201cproduction\ndata\u201d as well as all the \u201cengineering data.\u201d The director,\nhowever, would be able to access the \u201cdirector data\u201d as well as\nall the other data in their department.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1112, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "988a4fa8-0417-490a-b358-06d23f95c4dc": {"__data__": {"id_": "988a4fa8-0417-490a-b358-06d23f95c4dc", "embedding": null, "metadata": {"page_label": "789", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "13dce4f4-5a0e-4c38-833b-fae01f2f8466", "node_type": "4", "metadata": {"page_label": "789", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "174e98c7362ed91a323af0242dd2c4f9ee1d6b5b71bf61490db642cc463ea34d", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.22  An access contr ol keychain [ 54].\nThe keychain is organized using an SRK-protected RSA\npublic/private key pair for each class of data (four in Fig. 11.22 )\nand a prime nonce to each node [54]. An initial authdata is then\ncomputed for each data class j \u2265 0 using all the public keys in\nthe path from class j to class 0. To access a leaf node k in class\nj, an authdata is derived using the assigned initial  authdata of\nclass j, all the private keys in the path from class j to class 0,\nand the nonce assigned to node k.\nThus, the computation of an authdata\u2014for example, for the\nlowest classi \ufb01ed \u201cengine ering data\u201d\u2014would involve only one\nprivate key, while the computation of an authdata for a top\nclassi\ufb01ed \u201cdirector data\u201d would involve four private keys,\nmaking the \u201cdir ector data\u201d mor e secur e.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 814, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5e277f85-28c2-4743-a65b-a0e96fb41dc7": {"__data__": {"id_": "5e277f85-28c2-4743-a65b-a0e96fb41dc7", "embedding": null, "metadata": {"page_label": "790", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "459be725-b836-41c4-a46e-4e06e145eafe", "node_type": "4", "metadata": {"page_label": "790", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f4bbfbd5dd68535a81ec96d57f4ceb6cd3ad9eb794bc2d6beaf81825711c3ba9", "class_name": "RelatedNodeInfo"}}, "text": "11.9 Hash Tree\nWhile the keychain in Fig. 11.21  is concealed through hardwar e,\nit remains unprotected from replay attacks (Sec. 11.3.3). A\nmalicious software can save the entire keychain, wait for the\nkeychain to be updated, and then cause a replay attack. That is,\nit replaces the updated keychain with the one it has saved, and\ntherefore, prevents access to some conceale d data and\npotentially makes the system unavailable to the legitimate\nusers. There is no way to detect a keychain replay attack unless\na hash of the keychain is saved inside a tamper proof IC. The\nhash of the tree would need to be recomputed every time that\nthe keychain is updated and every time that a key from the\nkeychain is used. Given that a keychain could be large and may\ncontain thousands of keys, this could be a costly task unless a\nhash tr ee, discussed ne xt using e xamples, is used.\n11.9.1 Application Example: Keychain\nAuthentication\nFigure 11.23( a) illustrates the keycha in shown in Fig. 11.21( a)\norganized also as a hash tree, also known  as a Merkle hash\ntree [56]. The arrows go in both directions\u2014fr om a parent node\nto a child node when gene rating a key, and from a child node to\na parent node when generating a hash. Instead of computing\nthe hash of an entire keychain each time the keychain is\nupdated or a key is used (a computationally intensive task),\nonly the hash of childr en nodes of each parent node is\ncomputed and stored in the parent node. The hash of the root\nnode, called the secur e root hash (SRH), is stored inside an IC,\nas illustrated in the \ufb01gur e.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1571, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b43c4c85-a7e5-41a2-8cbc-4ace70b5884e": {"__data__": {"id_": "b43c4c85-a7e5-41a2-8cbc-4ace70b5884e", "embedding": null, "metadata": {"page_label": "791", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7e98414-23b7-4308-b98b-3a81c2a03dd5", "node_type": "4", "metadata": {"page_label": "791", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "aa6ed856e14cad816b19846de2959e1bf085d30cf4434515c14cbcfc032c8500", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.23  A keychain or ganized as a Merkle hash tr ee.\nFigure 11.23( b) shows the structur e of a record used for\nparent nodes. In this case, instead of the record hash value\n(RHV) (Fig. 11.21( b)), each parent record contains the hash of\nits childr en records. Figure 11.24  illustr ates an example of a\nkeychain hash tree using mock values as node contents. An 8-\nbit bitwise XOR, for illustration purposes, is used as the hashing\nfunction. Each parent node in the \ufb01gure is assumed  to contain a\n16-bit conten t plus, as indicated in Fig. 11.23( b), a space for a", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 570, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2a292172-dfa4-4d66-9d7c-68fe23b0b8ba": {"__data__": {"id_": "2a292172-dfa4-4d66-9d7c-68fe23b0b8ba", "embedding": null, "metadata": {"page_label": "792", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5e2393e7-e018-4140-94f0-83b5a468225e", "node_type": "4", "metadata": {"page_label": "792", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1c76669cda7de48f073d669920cdd45e6d48f6a9038766fc0bdc54cda912bb27", "class_name": "RelatedNodeInfo"}}, "text": "hash computed from the content of its childr en nodes. A leaf\nnode contains only a 16-bit data and no hash value.\nFigure 11.24( a) illustr ates the calculation of the root hash\n8\u2019hC0 (hex in Verilog) for the original hash tree. The hash would\nbe stored as an SRH inside the chip. In Fig. 11.24( b), the\ncontent of a child node is shown changed from 16\u2019h23 45 to\n16\u2019h23 55\u2014a one-dig it change. This results in a new root hash\nvalue of 8\u2019hD0. If the change is a result of a normal update,\n8\u2019hD0 will replace SRH = 8\u2019hC0. On the other hand, if the\nchange is the result of an attack, the change would be detected\nbecause the new hash = 8\u2019hD0 would not match SRH = 8\u2019hC0\nstored inside the IC.\nFIGURE 11.24  Computing a r oot hash using an 8-bit bitwise X OR\nas the hash function: ( a) an original hash tr ee with r oot hash  =\n8\u2019hC0; ( b) a modi\ufb01ed hash tr ee with di\ufb00er ent root hash  =\n8\u2019hD0.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 889, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4a013f55-1010-43f8-b1a3-d1ccf30578bc": {"__data__": {"id_": "4a013f55-1010-43f8-b1a3-d1ccf30578bc", "embedding": null, "metadata": {"page_label": "793", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c05fed33-e00f-484b-b565-377ffd5b153f", "node_type": "4", "metadata": {"page_label": "793", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9a42bc58b2c7bfb8c390d5f14345ba07699652afb887ea62fdab90baaa501163", "class_name": "RelatedNodeInfo"}}, "text": "11.9.2 Application Example: Memory\nAuthentication\nA Merkle hash tree has other applications, such as the n-ary\nhash tree shown in Fig. 11.25  used for memory authentication.\nThe integrity of a TSM can be protected by authenticating its\ninstructions and data in memory . Each node has exactly n\nchildr en nodes. For n = 2, the tree is binary . An entire virtual or\nphysical mem ory, or just a section, can be organized as an n-\nary hash tree with a mem ory block at each node. A leaf block\ncontains instructions or data, but a parent block contains only\nthe hash computed fr om the contents of its childr en blocks.\nFIGURE 11.25  An n-ary hash tr ee with leaf nodes (cir cle) and\ndata and par ent nodes (r ectangle) as hash values.\nFigure 11.26  illustrates a binary hash tree with four data\nblocks as leaf nodes and three hash blocks as parent nodes. In\nthe \ufb01gure, the size of each block is assumed to be two bytes\n(2B), and an 8-bit bitwise XOR is used as the hash function.\nEach parent block stores two 8-bit hash values, one from each\nof its two childr en blocks. The hash of the root block is stored as", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1106, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "886505a2-1da8-4912-a512-0114d8c3cf0f": {"__data__": {"id_": "886505a2-1da8-4912-a512-0114d8c3cf0f", "embedding": null, "metadata": {"page_label": "794", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "af61b768-cc92-4f1c-9535-fb5bb3ab3107", "node_type": "4", "metadata": {"page_label": "794", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4d99ffcab5d599f53b3f86c34e71eb8914734bd4a506a10c550f0f2e5f8d2d1f", "class_name": "RelatedNodeInfo"}}, "text": "an SRH inside an IC. In the \ufb01gure, the original SRH = 8\u2019h00. Any\nchange made  to a block (leaf or parent) will result in a di\ufb00er ent\nroot hash. Note that a change in a node\u2019s content only changes\nthe hash values in the path from the node to the root node.\nThus, only the contents of a small subset of blocks  are a\ufb00ected\nwhen the content of a single block is updated.\nFIGURE 11.26  A binary memory authentication hash tr ee\nillustrating a change in one of the leaf memory blocks.\nThere are many ways to organize an n-ary hash tree. For\nexample, a hash tree with 32-B blocks may be organized as a\n32-ary hash tree with 1-B hash values, as a 16-ary tree with 2-B\nhash values, as an 8-ary tree with 4-B hash values, or as a\nbinary tree with 16-B (128-bit) hash values. In addition, the\nparent block s may be stored with the leaf blocks in the same\nmemory or maintained separately .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 878, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3a4bcd10-95e2-4541-aa2d-e39d0a226376": {"__data__": {"id_": "3a4bcd10-95e2-4541-aa2d-e39d0a226376", "embedding": null, "metadata": {"page_label": "795", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "56cbb6db-0771-4812-825e-198a63625322", "node_type": "4", "metadata": {"page_label": "795", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "85ea04303313fb6a203ecef08d0ac75e6e50eb8a44f8dd5bf8091772b3565956", "class_name": "RelatedNodeInfo"}}, "text": "11.10 Secure Coprocessor Architecture\nAn SCP is as an embedded system and as it was discussed\nearlier in Sec. 11.4 includes a trusted \ufb01rmwar e module (TFM).\nBecause the instructions and data of \ufb01rmwar e are not\naccessible from outside of the chip, TFM is not subject to\nspoo\ufb01ng, splicing, or replay attacks. However, because an SCP\nmust communicate with the other components on the platfor m\nto exchange data, the SCP may be subject to physical attacks if\nan attacker is able to get a physical hold of the platfor m. For\ninstance, any data that SCP must access from main memory is\nnot secur e.\nThe required cryptographic algorithms may be implemented\nin software as part of the TFM, but many are very time\nconsuming and, therefore, for perfor mance reasons , they would\nbe implemented in hardwar e. Figure 11.27  shows the\norganization of an SCP containing a minimum set of requir ed\nmodules. It includes nonvolatile memory to store an secret root\nkey (SRK), a random number generator, and\nencryption/decryption and hash algorithms implemented in\nhardwar e. The SRK may be a symmetric key [53] or the priva te\nkey of a public/private k ey pair [ 47].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1150, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2ad6efd6-9e6e-4e27-b898-86abb8e79b90": {"__data__": {"id_": "2ad6efd6-9e6e-4e27-b898-86abb8e79b90", "embedding": null, "metadata": {"page_label": "796", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25d1d366-8544-4b12-bcc1-adbe9a428023", "node_type": "4", "metadata": {"page_label": "796", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "63368bc3387f13366124cf7f3a1552caaac311bd8747208c67e77dc5599ad151", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.27  A secur e copr ocessor as an embedded system.\nRandom access memory (RAM) is used during the execution\nof the TFM and to temporarily store keys from a keychain (also\nsee Sec. 11.8.2 ). The RAM may be also used to store an SRH if\nthe TFM also manages a k eychain pr otected by a hash tr ee.\nThe smart card [57] and trusted  platfor m module (TPM) [47,\n52, 58] are two examples of SCP. However, the smart card has\nvery limited capabilities.\n11.10.1 Trusted Platform Module\nThe TPM is designed to provide total platfor m security; it\nveri\ufb01es the validity of the hardwar e and OS software\ncomponents during startup. The OS and even  application\nprograms can use APIs to access secur e services of the TPM.\nTPM\u2019s speci\ufb01cation is developed by a consortium of industry\nrepresentatives, known as the Trusted Computing Group (TCG).\nMany companies, including AMD, HP, IBM, Intel, and Microsoft,\nare members of the TCG. Figure 11.28  illustrates a block\ndiagram of the TPM chip as an embedded system. The\nnonvolatile storage is used to store an endorsem ent key (EK),\nan SRK, and \ufb02ags to enable or disable certain functions. EK is a\nsecret key embedded in the chip, typically by the manufactur er.\nSRK is used to protect TPM-generated keys. An Attestation\nIdentity Key (AIK) is a private key generated based  on SRK and\nis used for multiple purposes, including platfor m authentication.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1388, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a3fad1c8-a1ab-4125-a73a-94cad965c63b": {"__data__": {"id_": "a3fad1c8-a1ab-4125-a73a-94cad965c63b", "embedding": null, "metadata": {"page_label": "797", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dc4e40d6-a244-4fe2-9048-aeb4d4feae8b", "node_type": "4", "metadata": {"page_label": "797", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "20e89ffb4fb7768a56eacdb0f27e0accda59c5c2aa44531f71eb142b7f5b5b8e", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.28  The ar chitectur e of the TPM [ 58].\nThe random number generator  may use the thermal noise\nin the chip [59] to generate nonce as needed. The RSA Engine\nperfor ms RSA encryption and decryption. The RSA Key\nGenerator  is used to generate asymmetric RSA keys. The\nSHA-1 Engine  is used for hashing purposes.\nThe Opt-In module allows a user to opt in or opt out\naccor ding to the privacy guidelines of the manufactur er of the\nplatfor m. With the opt-in mechanism enabled, a user is\nprompted befor e a featur e or service is provided . The opt-in\nmechanism is disabled by default. With the opt-out mechanism\nenabled, the user is prompted to either keep or disable a\nparticular featur e or function. By default, the opt-out\nmechanism is enabled.\n\u00a0\n11.11 Secure Processor Architecture\nAn SP may implement multiple secur e execution modes (SXMs),\nas was discussed in Sec. 11.4, to create the desir ed secur e\nexecution environment for a given TSM. An SP may provide\nsoftware developers with the option to choose the protection\nlevel of a program as integrity only, con\ufb01dentiality only, or both", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1101, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2cd1078c-b0d2-4c04-aa26-f6c947622d09": {"__data__": {"id_": "2cd1078c-b0d2-4c04-aa26-f6c947622d09", "embedding": null, "metadata": {"page_label": "798", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cb89d966-59ae-4dd8-a35d-f2538499a397", "node_type": "4", "metadata": {"page_label": "798", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f5c43fd491a747771d228551fb5b278c4e6599e523dd6f908224188e4a88cc05", "class_name": "RelatedNodeInfo"}}, "text": "and whether the protection should apply to program code\n(instructions and static data), to program dynamic data, or both\nto program code and data [ 30]. While program static data never\nchanges, dynamic data is generated during program execution,\nincluding dynamically generated code produced by just-in-time\ncompilers.\n11.11.1 Program Code Integrity\nPrograms (i.e., trusted software modules, TSMs) executing in\ncode integrity secur e execution mode (CI-SXM) are protected\nfrom spoo\ufb01n g and splicing attacks. Replay attacks are not an\nissue because program code (including static data) does not\nchange durin g execution. Hash values are used to verify the\nvalidity of instructions and static data during  execution.\nHowever, because moder n processor chips contain cache\nmemories and cache transactions are in blocks, one hash value\nper block (i.e., cache line) is su\ufb03cient.\nThere are two ways the hash values of program code blocks\nmay be organized in memory [31, 55]. One option is to include\na hash value embedded within each block with instructions and\nstatic data, as illustrated  in Fig. 11.29 . For example, assuming\nthat SP is a 32-bit RISC processor and the lowest (e.g., L2)\ncache lines are 64 B each, the \ufb01gure illustrates a 128-bit (16-B)\nkeyed hash (e.g., HMAC) embedded in each block. A hash is\ncomputed for every 48-B program code, named a code block ,\nthat could contain 12 4-B instructions or static data words. A\nblock  refers to 64 B of memory content.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1470, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f6ec15ca-6dda-4f52-a218-b207b74c0c9d": {"__data__": {"id_": "f6ec15ca-6dda-4f52-a218-b207b74c0c9d", "embedding": null, "metadata": {"page_label": "799", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8ee4965-07c7-4bdb-8d31-d7630c1399b1", "node_type": "4", "metadata": {"page_label": "799", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "9f92e250453a465c99de2e9758c6a18107fb95a8b498b8d66e3eb53af0d4baed", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.29  Program blocks with embedded hash values,\nassuming 64B blocks [ 55].\nEach code block that is loaded into the cache must be\nauthenticated by computing and comparing each code block\u2019s\nhash with the hash embe dded in the block. If the two hashes\nmatch, the block is considered valid and the hash bytes are\nchanged to NOP (no operation) instructions befor e the block is\nstored in the cache. On the other hand, if the two hash values\ndo not match, the block is mark ed invalid in cache, and an\nexception is raised that terminates the execution of the\nprogram.\nAlternatively, the hash values can be kept separately and not\nembedded within the blocks. One way to do this is to build the\nmemory from 72-bit ECC (error correcting code) synchr onous\ndynamic random access  memory (SDR AM) modules. In this\ncase, 72-bit memory content is made of 64-bit program code\nand an 8-bit hash value in place of an 8-bit ECC [31]. The SP,\nhowever, would need to use the lowest-level cache with 128-B\ncache lines. The program binary would be divided into blocks of\n128 B each, consisting of 16 64-bit content. A 128-bit (or 16-B)\nkeyed hash is computed for each 128-B block and is stored as\n16 8-bit hash quantities in the 16 ECC \ufb01elds reserved for each\nblock, as illustrated in Fig. 11.30 . During a cache miss, 16 72-bit\nmemory contents are transfer red from memory into the SP.\nEach 72-bit memory content contains 64-bits program code and\none of the 16 8-bit hash quantities. If the SP-computed 16-B\nhash value matches the 16-B hash read from memory, the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1550, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d8260154-eeff-4e4c-ac1d-1b983bdfec12": {"__data__": {"id_": "d8260154-eeff-4e4c-ac1d-1b983bdfec12", "embedding": null, "metadata": {"page_label": "800", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5a2dfb51-e907-486d-b1ae-7b069f5248ac", "node_type": "4", "metadata": {"page_label": "800", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "21b3b5def1b975d8d32f2ebd8df35d7221ea720126dc8a83669c8e7ec0f69268", "class_name": "RelatedNodeInfo"}}, "text": "cache line is mark ed valid. A 16-B hash is not stored in the\ncache. Although, in this case, a 16-B hash value cannot be used\nfor error correction, it can, however, be used to detect multiple\nbit er rors.\nFIGURE 11.30  Program instructions and static data blocks in\nmemory designed fr om ECC SDR AMs; the hash values ar e\nstored in the space r eserved for the ECC bits.\nProgram Compilation\nTwo di\ufb00erent memory block organizations for code integrity\nwere discussed earlier . Consider the block or ganization shown in\nFig. 11.29  wher e a hash is embedded in each block. In this case,\neach memory block only partly contains instructions or data.\nTherefore, the compiler would need to take into account the\nlocation of the hash bytes when computing jump/branch\naddresses.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 768, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b56e1f25-69c0-491f-a189-76cc53003d1a": {"__data__": {"id_": "b56e1f25-69c0-491f-a189-76cc53003d1a", "embedding": null, "metadata": {"page_label": "801", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0a027264-3433-47e2-9e87-5988d43b6bad", "node_type": "4", "metadata": {"page_label": "801", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "4d8ee08760196b6711b4c9355b666edb681669a74ae185cc3341b375082478ce", "class_name": "RelatedNodeInfo"}}, "text": "11.11.2 Operational Security\nMechanisms\nThe binary of the SXM program must not only be secur ely\ndistributed and installed, but also secur ely loaded in memory\nduring execution. The set of procedur es similar to those\noutlined in [55, 60, 61] must be followed to install and load the\nprogram. In the following sections, a set of security mechanisms\nfor software distribution and installation, as well as loading\nbinary into memory for e xecution, ar e discussed.\nSecure Binary Distribution\nIf the TSM is developed to be deliver ed for public distribution, a\nprogram plaintext binary (binaryptxt) would need to be hashed\nin case an unauthorized modi\ufb01cation is made to the program.\nThe hash of the binary \ufb01le is encrypted to create a header\nrecord using the private key (PRcompany ) of the developer . The\nrecord would be attached  to the binary \ufb01le for secur e delivery .\nAn example of public distribution is illustrated next, using Easym\nto indicate an asymmetr ic cipher (e.g., RSA), H to indicate a\n(standar d) hashing algorithm such as SHA-256, \u201cPU\u201d to indicate\na public k ey.\nProgram binary may also be deliver ed to a speci\ufb01c device\nusing instead the public k ey (PUdevice ) of the device as follows:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1205, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1d116111-c4b8-4c68-8315-39c4abbbec54": {"__data__": {"id_": "1d116111-c4b8-4c68-8315-39c4abbbec54", "embedding": null, "metadata": {"page_label": "802", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "60969f08-e885-47d4-87b4-299b5b6eeb88", "node_type": "4", "metadata": {"page_label": "802", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "909c6607e61969b9be9cfe3d5c05f8416a79f555e54bae64461500dd5d2c0a3a", "class_name": "RelatedNodeInfo"}}, "text": "For device-speci\ufb01c delivery, the header record can only be\nencrypted by the device using its private key (PRdevice ); the\nprogram can only be e xecuted by the tar get device.\nSecure Program Installation\nFor secur e installation of a TSM, the installer program would\nneed to have access to the SRK of the SP and possibly a\npasswor d provided by an authorized party (a person) who\ninstalls the program [61]. The installer program generates a\nsecret program-speci\ufb01c signing key (e.g., Ksym-pr og-sign ) within\nthe SP and uses the key to hash each of the program code\nblocks during installation.\nOne way to do this is to use an installer TFM (i.e., an\nembedded installer trusted \ufb01rmwar e) to ensu re that the\ninstaller program remains secur e from attacks. In this case, the\ninstaller input argument s, such as the size and location of\nuninstalled TSM binary in memory and the installation key\ninformation (e.g., PUcompany ) are stored by the OS in a known\nmemory space befor e the \ufb01r mwar e can install the pr ogram.\nFigure 11.31  is an illustration of installation steps for a CI-SXM\nprogram using the block organization in Fig. 11.29 . The hash of\neach code block is stored with the code block to create a\nprogram block.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1219, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "567df745-4ee3-4a9f-bb60-f9f577a7ae7b": {"__data__": {"id_": "567df745-4ee3-4a9f-bb60-f9f577a7ae7b", "embedding": null, "metadata": {"page_label": "803", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "abe9725e-d4cc-426d-9701-f9165afb2385", "node_type": "4", "metadata": {"page_label": "803", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "61c41e4dd1665c43995ecc3ab87a47c85cc3debff2b4b320d58cc2744e45c593", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.31  Secur e installation for pr ogram code integrity\nSXM [ 30].\nThe hashing of just each code block will detect spoo\ufb01ng\nattacks during execution. However, in order to also detect\nsplicing attacks, the starting address of each block, referred to\nhere as a block address , is also used to compute the hash of\neach code block. The installer -generated signing key Ksym-pr og-\nsign (e.g.,  a random number) is also encrypted using the\nprocessor SRK befor e it is stored (on the hard disk) with the\ninstalled binary, as illustrated in the \ufb01gure. The following\noutlines the requir ed steps to install a program for CI-SXM using\nthe block organization in Fig. 11.29 . Also, Hkeyed indicates a\nkeyed hash, code_blockj indicates program code (instructions", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 756, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "efe3a180-4a90-4f48-b178-efb5aa7fb27b": {"__data__": {"id_": "efe3a180-4a90-4f48-b178-efb5aa7fb27b", "embedding": null, "metadata": {"page_label": "804", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "82429bda-c8e0-479a-9f37-22e6fa37882a", "node_type": "4", "metadata": {"page_label": "804", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "76819c8cf4444a263b5c1ac7b88ffaf3b192c55a27e1d4f54874ebd8501c92c8", "class_name": "RelatedNodeInfo"}}, "text": "and static data) section s within blockj, n is the number of\nblocks, and HV stands for hash value.\nSteps to install a program for CI-SXM:\nSecure Loading Executable Binary\nThe loader program must also have access to the SRK within\nthe SP in order to decrypt and store the installer -generated\nsigning key Ksym-pr og-sign  in a special register inside the SP\nbefor e program execution can start. Therefore, like the installer\nprogram, the basic loade r program is a TFM. Both the installer\nand loader \ufb01rmwar e must not leak processor secrets. The OS\naccesses and stores loader input arguments in memory so the\nloader can extract the signing key befor e the execution of the\nTSM can be started.\nDepending on the TSM protection level, the loader program\nmay need to perfor m additional initialization, which will be\ndiscussed later, befor e program e xecution can begin.\n11.11.3 Program Code Con\ufb01dentiality\nTSMs compiled to execute in code (instructions and static data)\ncon\ufb01dentiality secur e execution mode (CC-SXM) must be kept\ncon\ufb01dential on the hard disk as well as in memory . The\nprotection of instructions and static data integrity, however, is\nnot required in this mode; thus, no hash values are needed. The\ninstaller \ufb01rmware (see Sec. 11.11.2 ) generates an encryption\nsymmetric k ey Ksym-pr og-enc  to individual ly encrypt program code", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1343, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6f869875-9856-4a5f-8465-39e1cd9376ee": {"__data__": {"id_": "6f869875-9856-4a5f-8465-39e1cd9376ee", "embedding": null, "metadata": {"page_label": "805", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54e224f0-3c80-4bd2-9084-49271f5e021c", "node_type": "4", "metadata": {"page_label": "805", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "041a9dbb3e5639c9a274956b26361042ab21cd3b71ea57b6b44b61b71455ae14", "class_name": "RelatedNodeInfo"}}, "text": "blocks. In addition, in order to prevent information leak, the\nblock address is included in the encryption of each block in case\ntwo blocks have the same content. This is illustrated next using\na block address to create an IV for a symmetr ic-key cipher\n(Esym), such as AES.\nSteps to install a program for CC -SXM:\n11.11.4 Program Code Integrity and\nCon\ufb01dentiality\nThis secur e execution  mode, indicated as CICC-SXM,\nimplements the protection of both integrity and con\ufb01dentiality\nof a TSM\u2019s code (instr uctions and static data). It is the\ncombination of CI-SXM and CC-SXM discussed earlier .\nSteps to install a program for CICC -SXM:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 634, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a04858c7-f7cc-4c24-abea-92a264143195": {"__data__": {"id_": "a04858c7-f7cc-4c24-abea-92a264143195", "embedding": null, "metadata": {"page_label": "806", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5285a6c0-d572-4bd3-8d46-267a0266ee7f", "node_type": "4", "metadata": {"page_label": "806", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "723cc9d72dedfaa99146d1a9e99f581f6e558b2aff212f0a321b2a213144c1f6", "class_name": "RelatedNodeInfo"}}, "text": "11.11.5 Program Data Integrity\nDynamic data is generated during execution, and contrary to\nstatic data, values chang e in memory . TSMs that are compiled\nto execute in data integrity secur e execution mode (DI-SXM)\nmust be protected from replay attacks in addition  to spoo\ufb01ng\nand splicing attacks. Recall that a replay attack can replace an\nupdated value in memory  with a saved older value. Therefore, a\nhash value alone comput ed for each block, as discussed for CI-\nSXM, will not detect replay attacks. A hash tree is necessary to\ndetect replay attacks of data blocks. Figure 11.32  illustrates a\nbinary hash tree with data blocks as leaf nodes and hash blocks\nas parent nodes. It is assumed that each block is 32 B and each\nparent block can hold two 128-bit hash values computed from\neach of its childr en blocks.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 818, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d2d3917b-9336-462c-869f-c9eb3faf5219": {"__data__": {"id_": "d2d3917b-9336-462c-869f-c9eb3faf5219", "embedding": null, "metadata": {"page_label": "807", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14c13d83-48df-4eff-8eff-0785b57eda96", "node_type": "4", "metadata": {"page_label": "807", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "aaccafcb26485ab6936ff9c89a17589572be9282d2a4f66c62afdc0a95400db7", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.32  Illustrating an update to the hash tr ee of dynamic\ndata blocks; numbers ar e block addr esses.\nIn this case, the loader \ufb01rmwar e (see Sec. 11.11.2 ) generates\na session signing key (e.g., Ksym-session-sign ) and then creates\nan initial hash tree using the session key befor e TSM execution\nin the DI-SXM can start. The \ufb01gure also shows the tree\norganization in memory . The number shown below each block is\na block  address. Leaf blocks are in the high-addr ess section of\nthe memory and parent blocks in the low-addr ess region. The\nhash of block 1 (the root block) is stored as an secure root hash\n(SRH) inside the SP; note that block 0 is not used.\nIn theory, each time a modi\ufb01ed block is evicted  from the\nlowest-level cache and leaves the secur e perimeter of the SP, a\nnew SRH must be computed. This requir es that parent blocks in", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 852, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "23c54143-ba4f-4b2b-b97e-5f0dac0bdca5": {"__data__": {"id_": "23c54143-ba4f-4b2b-b97e-5f0dac0bdca5", "embedding": null, "metadata": {"page_label": "808", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dac36450-5f05-4548-af08-418037cab426", "node_type": "4", "metadata": {"page_label": "808", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3fb915a988af66ffe25908ad233c3622d594e548090d868f13166582b64ab54d", "class_name": "RelatedNodeInfo"}}, "text": "the path from the evicted block all the way to the root block\nmust also be updated, as was illustrated in Fig. 11.26 . However,\nin practice, because cache memories are inside SP and thus are\nconsider ed secur e, this updating of the parent blocks can be\nstopped as soon as a parent block in the path from the leaf\nblock to the SRH is found in cache.\nFor example, suppose both leaf (i.e., data) block 14 and its\nparent block 7 are in cache, and block 14 is updated, shown as\n14\u2032 in the \ufb01gure. Now suppose block 14\u2032 is evicted from cache\n(shown crossed out) at time t0. Because block 7 is in cache and\nconsider ed valid, the hash  of block 14 (Hash14 ), which is stored\nin block 7, is replaced with the newly computed Hash 14\u2032 at time\nt1. There is no need to continue and update parent blocks 3 and\n1 and the SRH. The next time that block 14\u2032 is read from\nmemory and loaded into cache, block 7\u2032, assuming it is still in\ncache, would still contain Hash 14\u2032, the most recent hash of\nblock 14\u2032.\nNow, suppose block 15 is loaded next from memory and\nblock 7\u2032 is still in cache. Hash 15 must be compar ed with the\nhash stored in block 7\u2032. Because Hash 15, originally computed\nfrom the data in block 15, is still contained in block 7\u2032, block 15\nwould be consider ed valid if its hash matches with Hash15 . The\nprocess is the same; block 3, the parent of block 7\u2032, is updated\nwhen block 7\u2032 is evicted from cache; block 1 is updated if block\n3\u2032 is evicted from cache ; and SRH is updated if block 1\u2032 is\nevicted from cache. This reduces the overhead of maintaining a\nhash tr ee, which will be discussed in mor e detail in Sec. 11.12.\nThe tree organization of Fig. 11.32  works if the size of the\ndynamic data space is declar ed in advance in the program and\nthe space is pre-allocate d in physical memory . On the other\nhand, in order to allocate data memory space dynamically\nduring run time, a di\ufb00er ent mechanism using paging (also see\nChap. 9) is needed. In this case, the hash tree is a virtua l tree\nand its nodes  are blocks from virtual address space. One way to\norganize such a hash tree is to construct a two-level tree\nconsisting of only root pages and leaf pages. A page consists of\nseveral blocks. For example, a 4-KB page would contain 1 to 64", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2245, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "394923a6-d9e8-4b2e-ac27-205e34f354b1": {"__data__": {"id_": "394923a6-d9e8-4b2e-ac27-205e34f354b1", "embedding": null, "metadata": {"page_label": "809", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ef1aa146-846d-47e5-90b7-44a2e61cb4db", "node_type": "4", "metadata": {"page_label": "809", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8392704097a8e575284b7c24555498f1b7c192186df88f9b7bf49b8bd05c019b", "class_name": "RelatedNodeInfo"}}, "text": "64-B data blocks. Such a hash tree may be constructed as\nfollows [ 30]:\n1. Or ganize each dynamic data block in each leaf page\nwith an embedded hash value, as was illustrated for code\nblocks in Fig. 11.29 . For example, assuming that each hash\nvalue is 16 B, each 64- B dynamic data block would contain\n48-B data and 16- B hash. A 4-KB leaf page would contain\n3072 B (48 B * 64) dynamic data and 1024 B (16 B * 64)\nhash values.\n2. Compute a checksum (using a bitwise X OR) of all the\nembedded hash values of each leaf page and stor e it in a\nblock in a r oot page. A 4-KB r oot page would stor e a\nmaximum of 256 16- B checksums in 64 blocks\u2014four 16- B\nhash values in each block. In addition, a r oot page can hold\nchecksums for 1 to 256 leaf pages.\n3. Compute an accumulative checksum (again using\nbitwise X OR) of all the checksums in all the r oot pages and\nstore it as an SRH inside SP .\nAs needed, more leaf and root pages are dynamically\nallocated. A virtual hash tree also protects leaf and root pages\nthat migrate back to the hard disk. If there is an unauthorized\nchange made to a page on the disk, the change can be\ndetected the next time a modi\ufb01ed page is copied back to\nmemory and blocks fr om this page ar e accessed by SP .\nBecause the integrity of every data block that is loaded into\ncache must be veri\ufb01ed, the secur e loader \ufb01rmwar e (discussed\nearlier) must  create an initial hash tree for those blocks that are\nallocated prior to the start of pr ogram e xecution.\n11.11.6 Program Data Con\ufb01dentiality\nDC-SXM is similar to CC-S XM, except that because  data blocks\nchange in memory during program execution, it may be\npossible for an adversary  to \ufb01nd out, for example , that a data\nblock in memory has the same value at di\ufb00er ent times. In order", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1764, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f9b60c87-0550-4454-a4cd-32043597f46c": {"__data__": {"id_": "f9b60c87-0550-4454-a4cd-32043597f46c", "embedding": null, "metadata": {"page_label": "810", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c6a26695-af0b-4ee1-8472-02518911b51b", "node_type": "4", "metadata": {"page_label": "810", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2249ffaa93cdbed8e505c8f3d7ad355ca140cff55bbaad7edf8c8376c0f50c82", "class_name": "RelatedNodeInfo"}}, "text": "to prevent such information leaks, a randomized encryption\nof data blocks is needed [33]. Each time that a modi\ufb01ed data\nblock in cache gets evict ed, in addition to the block-addr ess a\nunique numb er is also used to encrypt the block using a session\nencryption key (Ksym-session-enc ) generated by the loader . The\nloader \ufb01rmwar e also perfor ms the initial randomized encryption\nof any allocated data blocks befor e the execution of the TSM\ncan begin. The session  key, like the other keys, remains\nsecur ely inside the SP .\nIn this case, even if the content of the block at times remains\nthe same, the encrypted copy of the block would be di\ufb00er ent.\nAlso, because  dynamic data is generated at run time, the most\nrecent uniqu e number assigned to each block is saved in\nmemory and then is accessed to decrypt the block the next\ntime that the block is loaded from memory . For randomized\nencryption, there are two options to generate unique numbers\nfor each data block:\n1. Random sequence.  A sequence of unique numbers\nfor each block is randomly generated. The following\nillustrates a randomized encryption of data_blockj using a\nrandom sequence. RNj indicates a random number\nassigned to data_blockj and Yj is a memory location used to\nsave RNj. The IV of the cipher (e.g., AES) is cr eated fr om\nthe block addr ess and its assigned random unique number .\nAn IV = {block_addr ess, RN} may be padded with 0\u2019s to\ncreate the right size IV for the encryption. Each time that\nthere is a cache miss for data_blockj, its cur rent RN, stor ed\nin location Yj, is r ead to cr eate the IV used to decrypt the\nblock. A new RN is generated each time a block (modi\ufb01ed\nor not) is evicted fr om the cache. Note that, using an initial\nRN (e.g., RN0) for each block j during initialization by the\nloader is not necessary . However, using an initial RN\nsimpli\ufb01es the ar chitectur e of the pr ocessor .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1886, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db5fddf4-11e8-4c29-b27c-a74c808b8cb2": {"__data__": {"id_": "db5fddf4-11e8-4c29-b27c-a74c808b8cb2", "embedding": null, "metadata": {"page_label": "811", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4d131bb2-3a7b-46c6-945c-eae54ecf85de", "node_type": "4", "metadata": {"page_label": "811", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "90154e51e31cbed853a2a7b691be4f10e304ca3c703fe53cd86e593363fd8116", "class_name": "RelatedNodeInfo"}}, "text": "One must make sure a random number assigne d to each\nblock is indeed unique; but because there is no way to know\nthis in advance, it is possi ble that, in some cases, some random\nnumbers might not be unique for some blocks. If, for instance,\nshort 32-bit random numbers are used, then there is a higher\nchance that some numbers may be repeated for a given block if\nthe block is accessed many times. On the other hand, although\nusing large random numbers for each block may reduce the\nprobability of repeats, more memory space is needed to store\nlarge random numbers.\n2. In-order sequence.  A sequence of unique numbers,\nsuch as 0, 1, 2, etc., is sequentially generated for each data\nblock. The following illustrates randomized encryption of\ndata_blockj using an in- order sequence, assuming that the\ninitial in- order number 0 is assigned by the loader and is\nstored in memory location Yj.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 889, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0309724c-475a-4b65-b8bf-a612db274fc0": {"__data__": {"id_": "0309724c-475a-4b65-b8bf-a612db274fc0", "embedding": null, "metadata": {"page_label": "812", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7e456279-80be-4544-ba7a-1e4e487bd836", "node_type": "4", "metadata": {"page_label": "812", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "922f24d3eb7f55ab05232f7b089a842bbc17f0b2c4e462712d7e98215f6d6b7d", "class_name": "RelatedNodeInfo"}}, "text": "While using in-order sequences will guarantee unique\nnumbers are assigned to a block each time the block is evicted\nfrom cache, one must make sure that each sequence is not\nexhausted while the program is still executing. For example, if a\ndynamic data item is updated once every 100 ns in memory, a\n32-bit in-order sequence (i.e., 0, 2, 3, ..., 232 \u2212 1) will over\ufb02ow\nin about 429 (232 * 100 ns/109 ns) seconds, or about 7.16\nminutes. A 64-bit in-order sequence, on the other hand, will\nover\ufb02ow in about 58.5K years. However, like large random\nnumbers, more memory space would be needed to store large\nin-order sequence of unique numbers.\nIn general, there are two options to minimize the requir ed\nmemory storage space using in- order sequences:\n1. Using short in-order sequences.  In this case, each\ntime the in- order sequence for one of the blocks over\ufb02ows\nwhile the pr ogram is still e xecuting, the SP stops the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 916, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "baf96e59-ac46-42a1-9862-8b1327b07d49": {"__data__": {"id_": "baf96e59-ac46-42a1-9862-8b1327b07d49", "embedding": null, "metadata": {"page_label": "813", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4bf83302-492d-47a5-aabd-ae033fdadfce", "node_type": "4", "metadata": {"page_label": "813", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3c950b9189d38e81a40352a6336b7718aec150b8a17c6bf74ee5b68ea1b8b49d", "class_name": "RelatedNodeInfo"}}, "text": "execution of the pr ogram, generates a new session k ey\n(Ksym-session-enc ), and encrypts all the data blocks using the\nnew k ey and the initial unique number (e.g., 0) in each\nsequence befor e the e xecution of the pr ogram can r esume\n[30, 33]. However, the time r equir ed to r e-encrypt all the\ndata blocks can be long if this scheme is used for TSMs that\noperate on a lar ge number of data blocks.\n2. Using split in-order sequences.  In this case, blocks\nare organized into small gr oups, for e xample, 256 blocks in\neach gr oup. A16-bit in- order unique number is assigned to\neach block and a longer (e.g., 48-bit) in- order unique\nnumber is shar ed with all the blocks in one gr oup [ 62]. To\nimplement randomized encryption of each block within a\ngroup, the concatenation of the shar ed 48-bit unique\nnumber of the gr oup with the block\u2019s 16-bit private unique\nnumber cr eates a long 64-bit in- order unique number for\nthe block. However, each time one of the short sequences\nin one gr oup over\ufb02ows, the cor responding shar ed 48-bit\nunique number is incr emented, the private short in- order\nsequences in that gr oup ar e initialized, and all the blocks in\nthat gr oup ar e re-encrypted. Because no new session k ey is\nrequir ed and the number of blocks in each gr oup is\nrelatively small as compar ed to a TSM\u2019s total number of\ndata blocks, with split in- order sequences, the length of\ntime r equir ed to r e-encrypt only the blocks in one gr oup is\nmuch shorter as compar ed to the time r equir ed in Option 1.\nThis is illustrated ne xt using data_blocki,j to indicate a data-\nblock j in gr oup i. Each time data-blocki,j is evicted fr om\ncache, its assigned short 16-bit private unique number is\nincremented. A fter 65,536 evictions, the block\u2019s shar ed 48-\nbit unique number is incr emented and is used with an initial\n16-bit unique number (e.g., 0) to encrypt all the (256)\nblocks in gr oup i. Assuming that the loader stor es the initial\n48-bit unique number (e.g., 0) assigned to gr oup i in\nmemory location Xi and the initial short private 16-bit\nunique number (e.g., 0) assigned to data_blocki,j in Yj, the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2125, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8799645b-9a04-4eb2-8840-3be229a37fd5": {"__data__": {"id_": "8799645b-9a04-4eb2-8840-3be229a37fd5", "embedding": null, "metadata": {"page_label": "814", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d60d19e5-0d02-4f11-ab43-dfde5aa2ea53", "node_type": "4", "metadata": {"page_label": "814", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "348224ec59511ed0b6578b3b3f02504029e7ebee4086f65c952d4c6aeccfe98b", "class_name": "RelatedNodeInfo"}}, "text": "following illustrates the randomized encryption of\ndata_blocki,j using split in- order sequences:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 97, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad1650f6-29ea-4f75-b44a-9e8125d8a33f": {"__data__": {"id_": "ad1650f6-29ea-4f75-b44a-9e8125d8a33f", "embedding": null, "metadata": {"page_label": "815", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "20108313-1141-4a3a-a5f1-03614ecb7358", "node_type": "4", "metadata": {"page_label": "815", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "46c37d0f2b08ae0537a44e43b385b1aff1b26f224eb56333776da3f16b81ade4", "class_name": "RelatedNodeInfo"}}, "text": "The unique numbers assigned to the most referenced\nblocks may be saved in a specialized cache inside the SP\nto impr ove perfor mance.\nThe re-encrypting task of all (Option 1) or some (Option 2)\nblocks will be managed as part of the TSM process. If the TSM is\ninterrupted, its corresponding re-encrypting task will be also\nstopped, and it will r esume when e xecution of the TSM r esumes.\n11.11.7 Program Data Integrity and\nCon\ufb01dentiality\nIn DIDC-SXM,  each dynamic data block must be encrypted, as in\nDC-SXM, and must be hashed and a hash tree must be\nmaintained, as in DI-SXM. In addition to protecting the integrity\nof each  data block, each block\u2019s assigned unique number, used\nfor implementing randomized encryption, must be protected as\nwell. Howeve r, it has been shown that there is no need to\nmaintain a hash tree for data blocks and another hash tree for\nthe assigned  unique numbers in order to detect replay attacks\n[63, 64]. A single hash tree for the unique numbers, which\nwould be smaller than the hash tree for data blocks, is su\ufb03cient\nto detect r eplay attacks. F urther more, the unique numbers need\nnot be encrypted [65]. Note that, the data blocks are still\nhashed, as illustrated next, but maintaining a hash tree for data\nblocks as in Fig. 11.32  is not needed. The hash value of each\ndata block may be embedded within each block or stored\nseparately, as was illustrated for code blocks in Fig. 11.29  or\nFig. 11.30 , respectively .\nFigure 11.33  illustrates the organization of dynamic data\nblocks with embedded hash values and the hash tree for the\ndata blocks\u2019 assigned unique numbers. In the \ufb01gure, each\ncache block is assumed to be 64 B and contains a 48-B data\nblock and a 16-B (128-bit) hash. Assuming that a long (64-bit)\nunique numb er is used for each dynamic data block, eight such\nnumbers can be stored in each 64-B cache block (8 = 64 B/64\nbits).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1880, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ecc1f837-61e0-4c66-820c-adc01601992e": {"__data__": {"id_": "ecc1f837-61e0-4c66-820c-adc01601992e", "embedding": null, "metadata": {"page_label": "816", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c0b22d21-8a86-47d1-a5bf-ad3c902ab8e3", "node_type": "4", "metadata": {"page_label": "816", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2042652ebcb4b6d31468341502ad270781978b6de74bd532863822122243e37a", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.33  Protecting dynamic data: ( a) dynamic data block\nwith embedded hash; ( b) hash tr ee for dynamic data unique\nnumbers.\nFigure 11.34  illustrates a sophisticated replay attack using\nthe data block organizati on shown in Fig. 11.33  with arbitrary\nunique numbers assigned to each block. The attack er replays\nboth the cache block (data and embedded hash) and its\nassigned unique number . The attack er replaces both block 1\nand its assigned unique number 23 at time t2 with an older\ncopy saved at time t1. However, because the hash tree of the\nunique numb ers will detect 17 as an invalid numbe r at time t2,\nthe execution of the process will be stopped, preventing the\nattack er from achieving the intended goal.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 724, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d5648f18-da04-4b61-ad4e-39f011bb6e79": {"__data__": {"id_": "d5648f18-da04-4b61-ad4e-39f011bb6e79", "embedding": null, "metadata": {"page_label": "817", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "84ea4b0e-914d-4385-9d51-3c1534e2b746", "node_type": "4", "metadata": {"page_label": "817", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f56674317f69c52391c38cdc59ee7c39512e9aa62f23396d59bc98974329bc76", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.34  Illustrating a r eplay attack of a block and its\nsequence number .\n11.11.8 Program Code and Data\nIntegrity and Con\ufb01dentiality\nThe CICC-SXM and DIDC- SXM combination provides maximum\nprogram protection. This combined execution mode requir es\nfour secret keys as Ksym-pr og-enc  and Ksym-pr og-sign  generated by\nthe installer \ufb01rmwar e and Ksym-session-enc  and Ksym-session-sign\ngenerated by the loader \ufb01rmwar e (Sec. 11.11.2 ). The \ufb01rst two\nkeys are used for the encryption and hashing of program code\nblocks (includ ing static data). The latter two keys are used for\nthe encryption and hashing of program data blocks and\nmaintaining a hash tree for the data blocks\u2019 assigned unique\nnumbers used for randomized encryption of data blocks. This\nrequir es that the two types of blocks must be distinguishable so\nthat the SP can use the right keys with each type of block\nduring e xecution. Ther e are two possible solutions, as follows:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 947, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "722f4187-7cfd-4b93-a8ee-7d78b1093e12": {"__data__": {"id_": "722f4187-7cfd-4b93-a8ee-7d78b1093e12", "embedding": null, "metadata": {"page_label": "818", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a331c541-af37-4df5-b11c-ac9c04277608", "node_type": "4", "metadata": {"page_label": "818", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "162dcf33ca42904cf7425c93c3d8b3c9ec5ecd98d15bad882d65c15e3edb2a20", "class_name": "RelatedNodeInfo"}}, "text": "1. Physical Memory Organization.  One option is to\nsplit the main (physical) memory space into two r egions: a\nnon-SXM, including DMA access r egion, and an SXM r egion,\nwhich also includes a hash tr ee region. This option,\nhowever, may r equir e a security k ernel (part of operating\nsystem, OS) or a DMA transfer initiated by a trusted\nroutine.\nIf the SXM memory space  reserved for code and data are\nfurther partitioned into code and data regions, then if the\naddress indicates a code  region (Fig. 8.5 in Chap. 8), the\nSP would use program keys to decrypt and authenticate an\nincoming cache block. On the other hand, if the memory\naddress indicates a data block, the SP would use session\nkeys to decrypt and authenticate an incoming cache block.\nAlternatively, if the SXM virtual pages are mapped to\nanywher e in the reserved SXM memory region (outside the\nhash tree region) and additionally randomized encryption\nof SXM data blocks is used, then number 0 could be\nassigned to each code block and a non-zer o unique\nnumber to each data block [33]. Each  time that there is a\nmiss at the lowest-level cache, if the block\u2019s unique\nnumber is 0, the block is consider ed a code block, and\nprogram keys would be used to decrypt and authenticate\nthe block; otherwise, if the unique number is non-zer o,\nindicating a data block, the SP would use session keys to\ndecrypt and authenticate the block. As stated earlier, zero\nand non-zer o unique numbers need not be encrypted.\nHowever, a hash tree is used to authenticate the zero and\nnon-zer o assigned numbers.\n2. Virtual Memory Organization.  Another option is to\nuse an additional virtual memory space, separate fr om the\nSXM and non-SXM virtual spaces, for the hash tr ee. Using a\nseparate virtual space will allow an entir e SXM virtual\naddress space, divided into code and data r egions, to be\nused by an SXM pr ogram (i.e., TSM). F or any hash tr ee\nblock that is cached, its virtual block addr ess is also saved\nin the lowest cache so it can be used to deter mine the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2020, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b3a3a3b1-2382-4cf2-b5a8-f99597f63050": {"__data__": {"id_": "b3a3a3b1-2382-4cf2-b5a8-f99597f63050", "embedding": null, "metadata": {"page_label": "819", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7b608ee9-b540-47b0-a7ed-abdcf4932ab9", "node_type": "4", "metadata": {"page_label": "819", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c3d9fc947a5d7df39c860b61fb5f441a4e9b7804382c6f8d7bef61336dcfcf4b", "class_name": "RelatedNodeInfo"}}, "text": "virtual addr ess for the cor responding par ent hash node,\nassuming physically addr essed caches ( Chap. 10 ).\nFurther more, a separate translation look-ahead bu\ufb00er (TLB)\nmay be used for translating a hash tr ee virtual page\nnumber to its cor responding physical page number . Hash\ntree blocks may be saved in a separate cache memory for\ne\ufb03ciency . If the virtual memory address (stor ed in the\ncache) indicates a code block, the SP would use pr ogram\nkeys to decrypt and authenticate an incoming cache block.\nOn the other hand, if the virtual memory addr ess indicates\na data block, the SP would use session k eys to decrypt and\nauthenticate an incoming cache block. Again, in addition, if\nrandomized encryption of data blocks is used, the unique\nnumbers assigned to each data block, which would be\nsaved in the virtual memory space r eserved for the hash\ntree and its leaf blocks, need not be encrypted.\n11.11.9 Handling Interruption\nInterrupts requir e the state of the CPU (i.e., register contents\nand interrupt return address) to be saved upon interruption and\nthen restored when the contr ol is returned to the interrupted\nprogram ( Chap. 9 ). In SXM, the register contents and the return\naddress must be secur ely saved to detect attacks. The amount\nof extra resour ces requir ed inside an SP depends on whether\nthe SP is designed to execute only one SXM program  (i.e., single\nTSM process ) at a time [55] or multiple TSMs (i.e., SXM\nmultipr ocessing) concur rently [31\u201333].\nSingle Secure Execution Environment\nIn this case, only one TSM at a time can execute in SXM,\nindicated as SXM- OP (one process). Therefore, only one SXM\nstate needs to be protecte d upon interruption. This can be done\nby encrypting and hashin g SXM register contents using the SP\u2019s\nSRK. In addition, the encryption of register contents may be\nrandomized to protect against any register information leak by\nusing a unique number (e.g., a nonce randomly generated). The", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1950, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a2435507-aca2-4a1c-a1ee-c816fdfada04": {"__data__": {"id_": "a2435507-aca2-4a1c-a1ee-c816fdfada04", "embedding": null, "metadata": {"page_label": "820", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eec00015-75a7-467b-8806-f6de9dff3bfd", "node_type": "4", "metadata": {"page_label": "820", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "89b61e22c50a040f1094988b7af7955caeffad1f44241f21ed94541dba3532ba", "class_name": "RelatedNodeInfo"}}, "text": "encrypted register contents are then stored back into their\nrespective registers so they can be saved in memory by the\ninterrupt handler (IH). The hash value, the interrupt return\naddress, and the nonce (if any) are secur ely kept inside the SP.\nThe requir ed cryptography keys and their key materials, as well\nas the SRH (if any), also r emain inside the SP .\nWithin the SP, registers and cache lines are tagged\u2014for\nexample, with 1 for SXM and 0 for non-SXM. Any read/write of a\ntag-1 registe r or tag-1 cache line by a non-SXM process or any\nread of a tag-0 register or tag-0 cache line by an SXM process\nwill result in an exception. An SXM process can write any\nregister or data block, thereby changing its tag to 1. Upon\ninterruption, the SP clears all SXM-tagged registers, \ufb02ushes\nSXM-tagged data blocks from caches, and changes  the SP from\nSXM to non-SXM befor e turning contr ol to the IH .\nThe SP may execute non-SXM programs in addition to one\nTSM (SXM program), all in a time-sharing envir onment. While a\nTSM is running, the OS cannot start to execute another SXM\nprocess. Upon returning from an interruption, the SP compar es\nthe return address with the one stored internally. If the two\naddresses match, the SP switches to SXM, decrypts the restor ed\nencrypted register contents, and resumes the execution of the\nSXM process. Otherwise, the return address indicates either the\nresumption of an interrupted non-SXM process if the address\nindicates non-SXM (Sec. 11.11.8) or an attack, in which case an\nexception would be raised.\nMultiple Secure Execution Environments\nIn this case, the SP is designed to execute multiple SXM and\nnon-SXM processes in a time-sharing envir onment. A key table\nwould be used to store the interrupted SXM process state under\nthe process ID. For example, a non-zer o ID is used to identif y an\nSXM process and ID = 0 to identif y a non-SXM process. The SP\nresour ces (i.e., registers and cache lines) are also tagged by\nprocess ID. The table may be a private key table  (embedded)\nwithin the SP or a virtual k ey table  that r esides outside the SP .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2091, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11a0eea7-2a1b-4f30-b669-a436176111a9": {"__data__": {"id_": "11a0eea7-2a1b-4f30-b669-a436176111a9", "embedding": null, "metadata": {"page_label": "821", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "77a23b09-8130-42b8-8401-2fd16a0e5fdd", "node_type": "4", "metadata": {"page_label": "821", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "6c836d4e138f35848d5bc9be9cc8b7c9b685e5870702018aba272680489e7c62", "class_name": "RelatedNodeInfo"}}, "text": "If a private key table is used, the SP can only execute a \ufb01xed\nnumber of SXM processes in a time-sharing envir onment. If\nthere is an interruption,  cryptography keys, return address,\nregister contents, etc. are saved in the private table, SXM\nregisters are clear ed; and SXM data blocks are clear ed from\ncaches befor e the contr ol is turned to the IH. Alternatively,\ninstead of saving register contents in the private table, which\nwould requir e maintaining a larger table, register contents may\nbe processed as in SXM- OP. Register contents are encrypted,\nhashed, and then stored back in the registers to be saved by\nthe IH in memory, and the hash along with the other\ninformation is saved in the table.\nOn the other hand, becau se a virtual key table may be copied\non the hard disk, its size can grow as needed to allow the\nexecution of any number of SXM processes in a time-sharing\nenvir onment. However, the processor state (cryptography keys,\nregister contents, return address, etc.) must be encrypted using\nthe SP SRK befor e being stored under the process ID in the\nvirtual table. The pages of the virtual key table are mapped to\nphysical mem ory pages by the OS, just like how program virtual\npages are mapped to physical pages (Chap. 10). A hash tree,\nsimilar to the one discussed in Sec. 11.11.5 , is used to\nauthenticate memory pages associated with the virtual key\ntable.\nMaintaining a virtual k ey table adds a delay to the handling of\ninterrupts when compar ed to having an on-chip private key\ntable. This delay, howev er, can be reduced if the recently\naccessed physical page addresses associated with the virtual\nkey table are kept in a specialized cache memory within the SP\nfor quick access.\nResuming from an interruption when using a private or virtual\nkey table is handled similar to that described for the SXM- OP.\nHowever, since there can be more than one running SXM\nprocess, the return address is compar ed with that saved in the\nkey table under the process ID; if the two addresses match,\nexecution of the SXM pr ocess is r esumed.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2059, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "161b1984-a9ef-455c-9837-c68ae3b5313c": {"__data__": {"id_": "161b1984-a9ef-455c-9837-c68ae3b5313c", "embedding": null, "metadata": {"page_label": "822", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b458660-b582-4e63-b461-3bb2f53a5281", "node_type": "4", "metadata": {"page_label": "822", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b6ff0ede58e1548dc2efe34e6cf7e8d0b3cab71056bc952bf970bf1be8cfdccf", "class_name": "RelatedNodeInfo"}}, "text": "11.12 Design Example: Secure\nProcessor\nThis section presents the architectur e, including data path and\nsample SXM instructions , of an SP. The data path includes a\nstandar d processor core and the modules requir ed for secur e\nexecution. An e xample application of TSM is also pr esented.\n11.12.1 SP Speci\ufb01cation\nThe following list speci\ufb01es the featur es and limitations of an\nexample SP:\n1. The SP supports the e xecution of only one SXM pr ocess\nat a time (i.e., SXM- OP; see Sec. 11.11.9).\n2. The SP implements the CICC-SXM and DIDC-SXM\ncombination for maximum pr ogram pr otection. Thr oughout\nthis section, the ter m SXM will mean maximum pr ogram\nprotection that includes maintaining con\ufb01dentiality and\nintegrity of a trusted sof tware module (TSM) code and data.\n3. The SP includes a set of SXM instructions used to\nenable or disable SXM.\n4. The SP contains a set of SXM status bits that indicates\nthe SP status as either SXM or non-SXM.\n5. A TSM code blocks (including static data) ar e encrypted\nand hashed to detect code spoo\ufb01ng and splicing attacks (if\nany). The code blocks ar e organized by compiler in the\nformat shown in Fig. 11.29 . When necessary, the ter m\n\u201cprogram block\u201d is used to r efer to a cache block with an\nembedded code block and hash value, as illustrated in the\n\ufb01gure. Further more, the ter ms TSM and \u201cSXM pr ogram\u201d\nmay be used inter changeably . \u201cSXM pr ocess\u201d r efers to a\nrunning TSM.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1421, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4a0b69a2-c4d3-4a4d-99a4-e11f41148e7e": {"__data__": {"id_": "4a0b69a2-c4d3-4a4d-99a4-e11f41148e7e", "embedding": null, "metadata": {"page_label": "823", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "98d8d2b0-f15c-4957-bd3d-a394496b2209", "node_type": "4", "metadata": {"page_label": "823", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "144a4a3e0bbf433235bb624dfc412f05670314aabf8a62a3da1d5895748c8238", "class_name": "RelatedNodeInfo"}}, "text": "6. SXM pr ogram data blocks, which dynamically change\nduring e xecution, ar e encrypted and a hash tr ee is\nmaintained to detect dynamic data spoo\ufb01ng, splicing, and\nreplay attacks (if any).\n7. The encryption of dynamic data blocks is not\nrandomized.\n8. An SXM pr ogram is entir ely self -contained with library\nroutines statically link ed at compile time. The pr ogram does\nnot call e xternal library or systems r outines.\n9. Data blocks ar e statically declar ed in the SXM pr ogram\nand memory space is allocated during compile time; no\nmemory space is allocated during run time.\n10. A r egion in main (physical) memory is r eserved for SXM.\nThe r egion is also partitioned into pr ogram code (including\nstatic pr ogram data) and dynamic data r egions. The most\nsigni\ufb01cant addr ess bit identi\ufb01es each r egion; 0 identi\ufb01es\nthe code r egion and 1 identi\ufb01es the data r egion. The data\nregion is further partitioned into data and hash tr ee\nregions, as shown in Fig. 11.35( a). A hash tr ee of dynamic\ndata blocks with four leaf (dynamic) blocks is shown in Fig.\n11.35( b).\n11. An SXM pr ogram is consider ed small enough to \ufb01t in its\nentirety in the SXM code r egion. Ther efore, no virtual-to -\nphysical addr ess translation is perfor med in SXM.\n12. L2 is the lowest cache memory and uses a write-back\ncoher ency pr otocol such as the MESI pr otocol ( Chap. 10 ).\n13. The SP contains an encryption/decryption and hashing\nengine  (EDHE) implemented in har dwar e as an embedded\nsystem within the SP . It is used to decrypt and hash an\nincoming SXM code block, to decrypt an incoming SXM\ndynamic data block, and to encrypt an outgoing modi\ufb01ed\nSXM data block.\n14. The SP also contains a hash tr ee engine (HTE)\nimplemented in har dwar e, which is also an embedded\nsystem within the SP . It is used to authenticate an incoming", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1822, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d43128ca-b024-4b39-a57e-5a23cebbd196": {"__data__": {"id_": "d43128ca-b024-4b39-a57e-5a23cebbd196", "embedding": null, "metadata": {"page_label": "824", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "214c155e-49f0-4476-a356-f2716d035307", "node_type": "4", "metadata": {"page_label": "824", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "af0f7e046de47bb4a1e7bc025697616feb51be3dd3061589b55fa7973fc8fcd0", "class_name": "RelatedNodeInfo"}}, "text": "SXM data block using the hash tr ee and to update the hash\ntree when a modi\ufb01ed data block is evicted fr om the L2\ncache.\n15. Both EDHE and HTE r equir e trusted \ufb01r mwar e wher e each\nis secur ely installed by the motherboar d manufactur er.\n16. The perimeter of the SP is the security boundary of the\nsystem. Ther efore, caches ar e secur e and contain\ninstructions and data in plainte xt.\n17. The SP also includes the trusted pr ogram installer and\nloader \ufb01r mwar e (Sec. 11.11.2). The loader \ufb01r mwar e\ncommunicates with the OS to perfor m thr ee tasks:\na. The loader \ufb01r mwar e extracts the two pr ogram\ncryptography k eys Ksym-pr og-enc  and Ksym-pr og-sign\ngenerated by the installer and stor es them within the SP .\nb. The loader generates two session cryptography k eys\nKsym-session-enc  and Ksym-session-sign  and stor es them within\nthe SP . Session k eys change each time the e xecution of\nan SXM pr ogram is started.\nc. The loader \ufb01r mwar e creates the initial hash tr ee for TSM\ndata blocks. The initial contents of the data blocks can be\nunknown.\nThe OS starts the e xecution of the SXM pr ogram once the\nloader \ufb01r mwar e completes its tasks.\n18. Inter ruptions ar e handled the same way as was described\nfor SXP -OP.\n19. F or simplicity, we will assume that the SP cor e includes the\nhardwar e to handle inter ruptions. Her e, we will focus on the\nEDHE and HTE data paths.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1384, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eedd0c22-2488-4ab7-9bfd-753cf76e5a0d": {"__data__": {"id_": "eedd0c22-2488-4ab7-9bfd-753cf76e5a0d", "embedding": null, "metadata": {"page_label": "825", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "68df540e-eabd-44ae-9a65-78dbaeb6eab4", "node_type": "4", "metadata": {"page_label": "825", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "42aa43755e6a0425018dd35995df0cb2597299e20623144b7f5329f064899fa9", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.35  The or ganization of an SXM pr ogram code and\ndata in memory : (a) memory map; ( b) hash tr ee (shown as a\nbinary tr ee).\n11.12.2 Processor Architecture\nFigure 11.36  illustrates the data path of the SP. It includes a\nprocessor core, L1 and L2 caches, and the modules requir ed to\nimplement the SXM. A set of registers is used to store\ncryptography keys, Ksym-pr og-enc  and Ksym-pr og-sign , generated by\nthe installer \ufb01rmwar e and extracted by the loader \ufb01rmwar e, and\ntwo session keys, Ksym-session-enc  and Ksym-session-sign , generated\nby the loader \ufb01rmwar e to protect the TSM\u2019s (dynamic) data\nblocks during e xecution.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 639, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "796d1853-bc68-4207-a319-1d73b0259337": {"__data__": {"id_": "796d1853-bc68-4207-a319-1d73b0259337", "embedding": null, "metadata": {"page_label": "826", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e191071-500e-439d-8d4a-3c439202f9a5", "node_type": "4", "metadata": {"page_label": "826", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3023961a67a78baa46369c3fef90ad5741214505ffe5eea6216f83bd78ff884a", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.36  The data path of the e xample SP . The SXM\nimplements CICC and DIDC secur e execution modes.\nThe EDHE is responsible for decrypting and hashing an\nincoming SXM program block or SXM data block and encrypting\na modi\ufb01ed outgoing data block. An SXM program block contains\na code block and an embedded hash. A code block contains\ninstructions and/or static data. Because the contents of code\nblocks are not expected to change, these blocks are deleted\nfrom caches when they are replaced. The HTE is responsible for\nmaintaining a hash tree for SXM data blocks. EDHE and HTE are\ndiscussed later in this chapter .\nThe SP data path also includes a 2-bit SXM status register\n[55]; the two register bits are called secur e execution enable\n\ufb02ag (SXEF) and secur e execution active \ufb02ag (SXAF). The SXEF\nenables both EDHE and HTE. The SXAF is used to ensur e there\nis only one SXM process currently running. When SXAF is active,\nit prevents the OS from starting another SXM process as long as", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 992, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7dd5a0c3-1b31-4c67-8787-6d156169bf27": {"__data__": {"id_": "7dd5a0c3-1b31-4c67-8787-6d156169bf27", "embedding": null, "metadata": {"page_label": "827", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2d2be69b-4ada-4e90-ab5e-9547bc2e76d2", "node_type": "4", "metadata": {"page_label": "827", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "46793b7c2b3efeb3fc5d4b477856cfa390db546d1ebda5ab589b4578c75ddaeb", "class_name": "RelatedNodeInfo"}}, "text": "one is still running. The SP can be in one of three valid modes\noutlined in Table 11.10 . An interruption of an SXM process\nresets SXEF, making it a 0, and a return from an SXM\ninterruption sets SXEF, making it a 1.\nTABLE  11.10  The SP State Based on V alues of SXM Status Bits SXAF and SXEF\nAs shown in Fig. 11.36 , register contents and cache blocks\nused by the current process are tagged as 1 (SXM) or 0 (non-\nSXM). An SXM process can only read SXM-tagged register\ncontents and cached blocks. The process, however, can write\nany register or data block, changing its tag to 1 (SXM). A non-\nSXM process, on the other hand, can only read or write a non-\nSXM-tagged register content or non-SXM-tagged cache block.\nAll the blocks in the combined L2 cache are also mark ed with\nnon-SXM or SXM tags. In addition, instruction blocks in L2 cache\nare tagged \u201cI\u201d and data blocks as \u201cD.\u201d This prevents an SXM\nprocess fr om accessing a data block in cache as instructions.\nTable 11.11  presents a set of SXM instructions. Similar\ninstructions ar e also de\ufb01ned elsewher e [31, 33, 55].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1075, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "34edbc66-01d6-42b4-8b5f-10117075046f": {"__data__": {"id_": "34edbc66-01d6-42b4-8b5f-10117075046f", "embedding": null, "metadata": {"page_label": "828", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8b02826c-3a69-47d5-8d90-7a85312bb61c", "node_type": "4", "metadata": {"page_label": "828", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3a26e588272f2fe1228903f4f7ad76514e4fca8e3c456347e8e5aa99ad83df46", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  11.11  The SXM Instruction Set", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 37, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "120b1017-cef1-4f39-bddf-a9f9d4a666ee": {"__data__": {"id_": "120b1017-cef1-4f39-bddf-a9f9d4a666ee", "embedding": null, "metadata": {"page_label": "829", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5d5ea859-3e92-4f0a-ad3d-a74e5567e5b0", "node_type": "4", "metadata": {"page_label": "829", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "94dde7b7c3d3b51eb9fa5c496ac263bc966ce21e15f7231799030f36de11f859", "class_name": "RelatedNodeInfo"}}, "text": "Application Example: Secure Encryption Service\nConsider a TSM that implements an encryption API. Application\nsoftware, as well as comm odity OS, may use the API to encrypt\napplication- or OS-speci\ufb01c data. For example, consider an\napplication software that uses the API and speci\ufb01es an\nencryption key number in a keychain, the starting memory\naddress of its plainte xt data in memory, and the starting\nmemory address for the destination cipherte xt (refer to Sec.\n11.8.2  for an example). The following outlines the steps the\nTSM uses to secur ely encrypt the application\u2019s data:\n1. The TSM e xecutes instruction \u201cSXM-ENTER .\u201d If SXAF is\n0, and thus switches SP to SXM. Otherwise, if SXAF = 1, the\napplication must wait until a cur rently e xecuting (di\ufb00er ent)\nSXM pr ocess ter minates, r esets SXAF (making it a 0), and\nreturns contr ol to OS, which then can start the secur e\nencryption TSM.\n2. Once the TSM is invok ed, it copies the application\u2019s\nplainte xt, a non-SXM data, into the SXM data r egion in main\nmemory using \u201c LD\u201d (Chap. 8 ) and \u201cST_TO_SXM\u201d\ninstructions.\n3. The TSM secur ely e xtracts the encryption k ey from the\napplication-pr ovided k eychain.\n4. Using the \u201cSXM_LD \u201d and \u201cSXM_ST \u201d instructions, the\nTSM secur ely encrypts the plainte xt, now stor ed in the SXM\ndata r egion in memory, and stor es the cipherte xt, also in\nthe SXM data r egion.\n5. Finally, using the \u201c LD_FROM_SXM\u201d and also \u201cST \u201d (Chap.\n8) instructions, the TSM copies the generated cipherte xt\nfrom the SXM data r egion to the application\u2019s cipherte xt\n(non-SXM) data r egion in memory .\n11.12.3 Encryption Decryption Hashing\nEngine", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1621, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bad80498-0aa4-44f8-bf93-23296d6c114b": {"__data__": {"id_": "bad80498-0aa4-44f8-bf93-23296d6c114b", "embedding": null, "metadata": {"page_label": "830", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "670bbf4a-283b-4dfb-b616-3d078fe1b023", "node_type": "4", "metadata": {"page_label": "830", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2953a1dbba004a5dcbaac4453804af9ab8e17f0ffd7e9eb21047c1e51608738c", "class_name": "RelatedNodeInfo"}}, "text": "The EDHE contains encryption, decryption, and hashing\nfunctions implemented as an embedded system within the SP. It\nperfor ms multiple tasks when SXEF is set to 1. The EDHE\ndecrypts, hashes, and authenticates an incoming program\ncache block,  which includes a code block and an embedded\nhash. It also decrypts an incoming data block when executing\nthe \u201cSXM_LD ,\u201d \u201cSXM_ST,\u201d \u201cLD_FROM_SXM,\u201d or \u201cST_TO_SXM\u201d\ninstruction and encrypts an outgoing SXM-tagged modi\ufb01ed data\nblock. Note, no randomized encryption of SXM data blocks is\nimplemented in the example SP. An unmodi\ufb01ed SXM-tagged\ndata block is deleted from caches when the block is replaced.\nThe block address of an SXM program or data block is also used\nin the encryption, decryp tion, and hashing of the block. The\ninclusion of the block address in the hashing is used to detect\nsplicing attacks (if any).\nCache Line Authentication: Code Blocks\nThe most signi\ufb01cant two address bits (MSB1 and MSB0) identif y\nthe two di\ufb00er ent types of blocks; (00)2 identi\ufb01es a program\nblock and (11)2 identi \ufb01es a data block (Fig. 11.35( a)). Ksym-pr og-\nenc is used to decrypt each SXM program block, and Ksym-pr og-sign\nis used to hash each SXM code block. The session encryption\nkey Ksym-session-enc  is used to decrypt/encrypt an SXM data block.\nFor an incoming SXM program block (a code block plus an\nembedded hash), if the computed hash of the code block\nmatches the embedded hash, the hash values in the program\nblock are replaced with NOP instructions befor e the program\nblock is stored in the L2 cache. The block is mark ed valid in the\ncache and its tag is set to 1 (SXM). Otherwise, the cache line is\nmark ed inval id (I) and an exception is raised, which terminates\nthe SXM pr ocess (to pr event an attack).\nIf an incomin g SXM data block is the result of executing an\n\u201cSXM_LD \u201d or \u201cLD_FROM_SXM\u201d instruction, the block is\nconsider ed an SXM data block. The block is loaded from\nmemory and decrypted (using Ksym-session-enc ) befor e it is stored", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1993, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "758050e3-b96e-46e8-99d4-a48b636f1735": {"__data__": {"id_": "758050e3-b96e-46e8-99d4-a48b636f1735", "embedding": null, "metadata": {"page_label": "831", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a2bb51a4-ddd1-41b2-872d-ccb10b3dba41", "node_type": "4", "metadata": {"page_label": "831", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "420126cf36d4ee538d402ddfb2e21459a17d698fae9594edc7981ba5c3e7beae", "class_name": "RelatedNodeInfo"}}, "text": "in the L2 cache. The data block and its block address are also\nloaded to the HTE for authentication. However, the block in the\ncache is consider ed valid and program execution continues as\nnormal unles s the HTE raises an exception, signaling an attack.\nThe handling of an incoming SXM data block due to a write miss\nas a result of executing the \u201cSXM_ST \u201d or \u201cST_TO_SXM\u201d\ninstruction is the same\u2014t he block is decrypted and loaded into\ncaches, HTE is invok ed to authenticate the block, and the block\nis upda ted in the L1 data cache and mark ed modi\ufb01ed in both\nthe L1 data cache and the L2 cache.\nFigure 11.37  illustrates the EDHE and HTE data paths for a\nread cycle, and Fig. 11.38  illustrates the data paths for a write\ncycle.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 730, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "089d6625-d759-4ff0-b352-7e938466e16d": {"__data__": {"id_": "089d6625-d759-4ff0-b352-7e938466e16d", "embedding": null, "metadata": {"page_label": "832", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b20967fe-1274-4e27-83b4-d8bbdba6e09a", "node_type": "4", "metadata": {"page_label": "832", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "65493298b0dc396c115ffdd15bff7e5d0c82206adf583f2f9909d7e9d8f43a3c", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.37  Loading an SXM block fr om memory; a code block\ndecrypted and authenticated with embedded hash in the\nprogram block; a data block decrypted and authenticated by\nthe HTE (some parts fr om [66]).\nFIGURE 11.38  Write-back data block to memory; data path to\nevict a modi\ufb01ed data block.\n11.12.4 Hash Tree Engine\nThe HTE is responsible for both parsing the hash tree to\nauthenticate an incoming SXM data block and for updating the\nhash tree when a modi\ufb01e d SXM data block is evicted from the\nL2 cache and leaves the secur e perimeter of the SP. However,\nbecause tree parsing takes time, the authentication is\nperfor med in the backgr ound; no data speculative execution is", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 680, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "37d78203-df04-45eb-b3fd-715a5142d8a0": {"__data__": {"id_": "37d78203-df04-45eb-b3fd-715a5142d8a0", "embedding": null, "metadata": {"page_label": "833", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14e9e442-3ba2-49c1-bf31-b1a0706f952f", "node_type": "4", "metadata": {"page_label": "833", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8de0e416d1e5b6cc87777bf549625d231b83875897ac4dc6ae676ddf9a717abf", "class_name": "RelatedNodeInfo"}}, "text": "necessary . A data speculative execution, in this case, means the\nprocessor continues to execute the program, but does not\ncommit the computed results to the registers until the data\nused in the speculative execution is validate d. However,\nbecause there are no known universal techniques to recover\nfrom an attack other than to restart the program [66], the SP\ncan commit the compute d results to registers. That is, on a\ncache miss, an SXM data block that is loaded into the L2 cache\nis mark ed valid (e.g., the state E or S in the MESI protocol), and\nprogram execution continues as usual until the HTE raises an\nexception, which signi\ufb01es an attack. The exception causes the\nSP to terminate the process and return contr ol to the OS; the\nprogram nevertheless may be r estarted.\nCache Line Authentication: Data Blocks\nThe data path of the HTE for authenticating a data block is also\nillustrated in Fig. 11.37 . The HTE recursively operates on the\nnodes of the hash tree, as illustrated by examples in Table\n11.12  using the hash tr ee shown in Fig. 11.35( b).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1060, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8c68952a-f25f-4bbf-8f90-212bfa8edb6f": {"__data__": {"id_": "8c68952a-f25f-4bbf-8f90-212bfa8edb6f", "embedding": null, "metadata": {"page_label": "834", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "00c6fed7-0a02-4a22-ab06-2a22e2ea32f9", "node_type": "4", "metadata": {"page_label": "834", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0466f539b144d55517e6327dbfa5ac41e827aadb5f44e95f2c81a3e681ab24a9", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  11.12  Dynamic Data Block Authentication Examples Using a Hash T ree\nSuppose caches are initially empty and the \ufb01rst data item\naccessed by the SP is in SXM data Block5. When memory\nsupplies Block5, the block is decrypted and stored in the L2\ncache by the EDHE. From there, the block is copied to the L1\ndata cache. At this time, the state of Block5 is assumed to be\nvalid in all the caches. Block5 and its block address are also\nloaded into a bu\ufb00er in the HTE when the block is loaded into the\nSP. Block5 is then authenticated by the HTE. Using the block\naddress, the HTE deter mines that Block2 is the parent block of\nBlock5 and attempts to access Block2 from the L2 cache.\nHowever, because the caches were initially empty, Block2 not\nbeing in the cache causes a miss. When memory supplies\nBlock2, the block is stored in the L2 cache and, along with its\nblock address, is also enter ed into the bu\ufb00er in the HTE. Note\nthat the parent blocks contain hash values and thus need not", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 986, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1a9a38ce-0b5a-4daf-906f-b5935157f0be": {"__data__": {"id_": "1a9a38ce-0b5a-4daf-906f-b5935157f0be", "embedding": null, "metadata": {"page_label": "835", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8912c0e6-624c-4f43-9652-ac58b0e533bd", "node_type": "4", "metadata": {"page_label": "835", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "7d6bbba3ecb6ac6d277205c4e9bed0e77ce2f75691e9042f42a278b13714ba8f", "class_name": "RelatedNodeInfo"}}, "text": "be decrypte d befor e being loaded into the L2 cache, as\nillustrated in Fig. 11.37 .\nThis time, the HTE tries to access Block1, the root and the\nparent block  of Block2. Again, Block1 not being in the cache\ncauses a miss. It is read from memory and loaded into L2, and\nalong with its block address, is also enter ed into the bu\ufb00er in\nthe HTE. Recall that all the blocks, including the hash blocks,\nare marked valid in the L2 cache upon loading. Because Block1\nis the root block, the HTE computes and compa res its hash\n(Hash1 ) with the stored SRH inside the SP. If Hash1  matches the\nSRH, Block 1 is consider ed authentic and is removed from the\nbu\ufb00er, leaving Block2 next in line in the bu\ufb00er to be\nauthenticated.\nThis time, the HTE compu tes the hash of Block2 (Hash2 ) and\ncompar es it with Block1. Hash2 . If the two hash values match,\nBlock2 is consider ed authentic and is removed from the bu\ufb00er,\nleaving Block 5 still in the bu\ufb00er to be authenticated. Finally, the\nhash of Block5 (Hash5 ) is comput ed and compar ed with\nBlock2. Hash5 . Again , if the two hash values match, Block5 is\nconsider ed authentic and is removed from the bu\ufb00er . This\nterminates the parsing of the hash tree to authenticate Block5.\nIf at any time during the tree parsing any two compar ed hash\nvalues do not match, the HTE would raise an exception, which\nwould cause the SP to clear all SXM-tagged registers and \ufb02ush\nthe L1 data cache and all the SXM-tagged L2 data blocks befor e\nterminating the SXM process and returning the control to the\nOS.\nAs illustrated in Table 11.12 , since Block 5 was the very \ufb01rst\ndata block accessed fr om memory, it took the HTE several steps\nto authenticate the block. However, authenticating another\ndata block, such as Block4, would take only one step. This is\nbecause Block2, the parent block of Block4, is already in the L2\ncache (assuming not replaced) and was authenticated when the\nHTE was authenticating Block5, as indicated in the table.\nTherefore, there is no need to continue and verify the hash\nvalues in the path from Block2 all the way to the SRH as was\ndone with Block5.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2101, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aaffe3f6-aa55-432a-bb6a-3b0da1f4dfd7": {"__data__": {"id_": "aaffe3f6-aa55-432a-bb6a-3b0da1f4dfd7", "embedding": null, "metadata": {"page_label": "836", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e653ad23-6bf7-4e88-9fe6-108b90b4c9d3", "node_type": "4", "metadata": {"page_label": "836", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5b8fcaf286e22fdea60fd5e2da27280aa9c70d463d344c65fa5165d303c7cdbf", "class_name": "RelatedNodeInfo"}}, "text": "In the \ufb01nal example, SXM data Block7 is loaded into the\ncache and, along with its address, is also enter ed into the bu\ufb00er\nin the HTE. Its hash value (Hash7 ) would  need to be comp uted\nand compar ed with Block 3.Hash7 . However, because Block3 is\nnot in the cache, Block3 is loaded from memory  into the L2\ncache and, along with its address, is also enter ed into the bu\ufb00er\nin the HTE. Because Block1 is alr eady authenticated and valid in\nthe cache, as shown in the table, Hash3  is computed and\ncompar ed with Block1. Hash3 . If the two hash values  match,\nBlock3 is consider ed authentic and is removed from the bu\ufb00er,\nleaving Block7 in the bu\ufb00er yet to be authenticated. The HTE\ncomputes and compar es Hash7  with the Block3. Hash7 . If the\ntwo hash values match, data Block7 is consider ed authentic and\nis removed fr om the bu\ufb00er .\nNote that, while Block5 was being authenticated Block4 and\nBlock7 may be enter ed into the bu\ufb00er . The HTE authenticates\ndata blocks in the \ufb01rst come \ufb01rst service (FCF S) order.\nHash T ree Update\nThe HTE also computes a new SRH when a modi\ufb01ed SXM data\nblock is evicted from the cache. This is illustrated by examples\nin Table 11.13  using the data path show n in Fig. 11.38  and the\nhash tr ee in Fig. 11.35( b).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1252, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "400ae7e4-c76c-41da-8539-0b5cba62024a": {"__data__": {"id_": "400ae7e4-c76c-41da-8539-0b5cba62024a", "embedding": null, "metadata": {"page_label": "837", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0f70974c-08c3-4554-af19-8b870cff9e11", "node_type": "4", "metadata": {"page_label": "837", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "18028883ac425fc7e1ca1fc551b151625e93a6a3d72def7c0da165ebdbee123a", "class_name": "RelatedNodeInfo"}}, "text": "TABLE  11.13  Hash T ree Update Examples\nSuppose SXM data Block5\u2032, wher e \u2032 indicates the block is\nmodi\ufb01ed, is in the L2 cache. Also, suppose Block 5\u2032 is evicted\nfrom the cache, and thus will be encrypted and copied to\nmemory . In order to update the hash tree, the encrypted\nBlock5\u2032, along with its block address, is copied to the bu\ufb00er in\nthe HTE as the block leaves the L2 cache. Because the caches\nare inside the SP and therefore are consider ed secur e, the HTE\nonly needs to update Block2, the parent block of Block5.\nAssuming that Block2 is not in the cache, this would cause a", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 584, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "61b8552c-4f53-4c68-96e0-87100e7a9652": {"__data__": {"id_": "61b8552c-4f53-4c68-96e0-87100e7a9652", "embedding": null, "metadata": {"page_label": "838", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f8faa598-1d19-435c-95e1-ecd15be9f5a4", "node_type": "4", "metadata": {"page_label": "838", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f9e4d676253deda9c1355f984bbb778227e1fbbf60977777cc3a56c77cc1e666", "class_name": "RelatedNodeInfo"}}, "text": "cache miss. Block2 would be copied from memory to the L2\ncache and authenticated by the HTE, which also requires Block1\nto be authenticated, as it was discussed earlier for the read\ncycle.\nThe content of Block2\u2032 in the L2 cache changes to {Hash4 ,\nHash5 \u2032}, wher e {} indicates concatenation, and Block5\u2032 is\nremoved from the bu\ufb00er, completing the hash tree update.\nNext, suppose Block4\u2032 is evicted from the L2 cache. Assuming\nthat Block2\u2032 is still in the cache, this update will not cause a\ncache miss and will be quick, changing Block2\u2033  to {Hash4 \u2032,\nHash5 \u2032}, where \u2033 indicates two updates. The eviction of Block7\u2032\nrequir es Block3 to be updated with Hash7 \u2032. However, assuming\nthat Block3 is missing in the cache, it will be loaded from\nmemory, authenticated, and then updated. This causes\nBlock3. Hash7  to be replaced with Hash7 \u2032 in the cache and\nBlock7\u2032 to be r emoved fr om the bu\ufb00er .\nNext, suppo se Block2\u2033 that contains {Hash4 \u2032, Hash5 \u2032} is\nevicted from the cache. Block2\u2033 and its block address are also\nenter ed into the bu\ufb00er in the HTE. From its block address, it is\ndeter mined that Block1, the parent of Block2, must now be\nupdated. Assuming that Block1 is still in the cache, after the\nupdate, the content of Block1\u2032 becomes {Hash2 \u2033, Hash3 }, and\nBlock2\u2033 is r emoved fr om the bu\ufb00er .\nTable 11.13  also illustra tes the eviction of Block1\u2032, which\ncauses the HTE to update the SRH with Hash1 \u2032, and then the\neviction of Block3\u2032, which causes Block1\u2032 to be reloaded and\nauthenticated and then modi\ufb01ed with Hash3 \u2032. Note that hash\nblocks need not be encrypted when they leave the SP or\ndecrypted when they ar e loaded into the cache.\nThe SP introduces additional overhead when compar ed to a\nstandar d processor . As illustrated in Fig. 11.37 , each SXM\nprogram and data block is decrypted, requiring a cipher, befor e\nit is loaded into the L2 cache. In addition, hash tree parsing or\nupdating generates additional cache tra\ufb03c, which could slow\ndown the execution of an SXM process. However , a separate\ncache may be used to store hash blocks to improve\nperfor mance.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2083, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f179f5e3-94bf-4a95-bbec-4c2eb3a59d5e": {"__data__": {"id_": "f179f5e3-94bf-4a95-bbec-4c2eb3a59d5e", "embedding": null, "metadata": {"page_label": "839", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3d4fec62-7bf7-4026-a564-6476782b2c96", "node_type": "4", "metadata": {"page_label": "839", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "ab3de3bd69b2224a969a5025e42ca7f4538aef0f2921f199896ee7a4ae2fd884", "class_name": "RelatedNodeInfo"}}, "text": "11.13 Further Reading\nWhile we provided an introduction and backgr ound information,\nwe also discussed protecting the cryptography keychain\nthrough hardware, a memory authentication mechanism, and\ncompartmentalization of the execution envir onmen t by creating\nSXMs. The following is a sample list of other types of runtime\nhardwar e check ers:\n\u2022 A pr ocessor may be implemented with a har dwar e\nsecur e return addr ess stack (SR AS) that can be used to\ndetect bu\ufb00er -over\ufb02ow attacks [ 67, 68]. Even if malicious\nsoftware is able to cause a bu\ufb00er over\ufb02ow and spoof a new\naddress (e.g., addr ess of a virus) into the memory stack, the\nreturn addr ess will be di\ufb00er ent fr om that stor ed inside the\nSRAS within the pr ocessor, and thus, no jump will tak e place\nto execute the virus. This would be similar to using a private\nor virtual table discussed in Sec. 11.11.9 , limited to r eturn\naddresses only, but for all types of pr ocesses.\n\u2022 The har dwar e array bound check er uses the base\naddress and size of the ar ray to monitor out- of-bound er rors\n[69].\n\u2022 Har dwar e monitors can detect abnor mal pr ogram\nbehavior . This includes cr eating intra- and interpr ocedural\ncontr ol-\ufb02ow monitors in har dwar e [70]. The monitor would\nbe an F SM-based check er and would use pr ogram contr ol-\n\ufb02ow and data-\ufb02ow graphs deter mined during compilation to\ndynamically monitor jump (intrapr ocedural) and call/r eturn\n(interpr ocedural) addr esses. An F SM and a table would be\nused to k eep track of all per missible caller -callee\nrelationships. The table stor es the call/r eturn addr esses and\nis used to map an addr ess to an F SM state. An invalid\ncall/r eturn addr ess indicates an invalid behavior that causes\nthe F SM to enter an invalid state.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1750, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "369b21d4-7686-45c7-ab39-5950218c51c8": {"__data__": {"id_": "369b21d4-7686-45c7-ab39-5950218c51c8", "embedding": null, "metadata": {"page_label": "840", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fff21f70-85ff-4b02-8a2f-57045caa7af8", "node_type": "4", "metadata": {"page_label": "840", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3933b578f0dcb1802d48d5215cc30d53c7dc221203414e299715333cb7c70395", "class_name": "RelatedNodeInfo"}}, "text": "\u2022 A pr ogram pr o\ufb01ling\u2013based check er veri\ufb01es whether or\nnot a pr ogram follows a nor mal e xecution path [ 71]. All\npossible pr ogram paths ar e recorded during some training\nruns, and the r ecord is used by the check er to detect an\ninvalid path. The training time must be long enough to\nreduce the number of false positives.\n\u2022 Dynamic tracking of pr ogram infor mation \ufb02ow in\nhardwar e [72\u201375]. An integrity policy is implemented within\nthe pr ocessor that pr events an OS-tagged low-integrity\ninput data to be used as high-integrity data. An input is\nmark ed as low-integrity data if it enters the system, for\nexample, thr ough a device contr oller interface (DCI) such as\na USB host contr oller interface. T ainted data values would\nbe pr evented fr om being used as instructions or memory\naddresses (pointers). Gate-level infor mation \ufb02ow tracking\n[74] hardwar e requir es a shadow logic for every gate to\ntrack the trustworthiness of each bit. Each input bit and,\nthus each output bit, is mark ed as trusted (0) or untrusted\n(1). Ther efore, simply using an untrusted bit does not\nalways mean the r esult is also untrusted. That would\ndepend on the gates used to pr ocess the untrusted bit. F or\nexample, using an AND gate with one trusted input x = 0\nand one untrusted input y = 0 or 1, the output will be 0 and\ntrusted. An instruction set ar chitectur e (ISA) data path using\nthis methodology r equir es that the pr ogram pointer (PP) is\nnever conditionally modi\ufb01ed and ther e are no indir ect\nmemory load/stor e instructions. If the condition is untrusted,\nthen the content of the PP would be untrusted, and this will\nlead to untrusted content for all r egisters and potentially all\nmemory space. Ther efore, all the instructions that depend\non a condition must be converted to pr edicated instructions,\nand all unbounded loops must be converted into bounded\nloops (to pr event timing infor mation leaks) using a counter\nwith a ter mination condition wher e all the instructions within\nthe loop ar e predicated with the negation of this ter mination\ncondition. The counter is initialized by a special instruction\n(\u201ccountjump\u201d) and is decr emented by 1 every iteration until", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2183, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2158a3aa-350a-4c5e-bb32-44b7a70fd294": {"__data__": {"id_": "2158a3aa-350a-4c5e-bb32-44b7a70fd294", "embedding": null, "metadata": {"page_label": "841", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7972099b-d1cb-4c2e-b93d-42237ac77784", "node_type": "4", "metadata": {"page_label": "841", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b7f37c83e94a67fb61b7ff40e504660474af4f03156665bb4c6d32625b494e77", "class_name": "RelatedNodeInfo"}}, "text": "it reaches 0. W ith this mechanism, a loop (including nested\nloops) is e xecuted as an entity, and when it completes, it\ncauses the PP to incr ement and thus e xit the loop without\nbranching. Untrusted infor mation \ufb02ow via har dwar e Trojans\nand physical attacks that may tamper with memory content\nis not consider ed. It has been shown that while shadow logic\nwould incr ease the size of the cir cuit (e.g., by 70% in one\nstudy), it does not negatively a\ufb00ect clock fr equency .\n\u2022 Code and data r eplication to detect attacks by\ncomparing the behavior of multiple copies of a running\nprogram [ 76]. With each r eplication, a di\ufb00er ent memory\nlayout is used to detect memory access er rors, a di\ufb00er ent\nhashing scheme is used with each copy to pr otect the\nintegrity of critical data, and a di\ufb00er ent encryption scheme\nis used with each copy to better pr otect data con\ufb01dentiality .\n\u2022 Protect availability by implementing a better memory\nbandwidth allocation scheme. A memory contr oller (MC)\ntypically employs a variety of algorithms to prioritize and\nschedule the outstanding cache misses supplied by\nmemory . A \ufb01rst come \ufb01rst serve (FCF S) scheduler, for\nexample, may also assign the highest priority to column\naccesses fr om the cur rent active r ow (Chap. 7 ) to incr ease\nmemory thr oughput and the ne xt highest priority to the\noldest nonactive r ow among the r emaining outstanding\nrequests [ 77, 78]. However, a malicious thr ead that \ufb02ushes\nthe MC with random (addr ess) transactions could potentially\nincrease the number of r ow accesses and thus incr ease stall\ntimes for other thr eads. A stall-time fair memory scheduler\n(STFM) uses memory-slowdown  values to better schedule\nmemory r equests [ 79]. In this case, the memory contr oller\ncomputes a memory -slowdown ( S) value for each thr ead\nthat has a list of outstanding transactions as the ratio of the\naverage stall-time  if memory is shar ed with other thr eads\n(Tshared) and the expected stall-time  if the thr ead is\nexecuted alone ( Talone). That is, S = Tshared/Talone. An\nunfair ness ( U) parameter then is computed as U = Smax/Smin", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2106, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "40c19cc3-5de8-4b2e-9153-61ea87e1cb73": {"__data__": {"id_": "40c19cc3-5de8-4b2e-9153-61ea87e1cb73", "embedding": null, "metadata": {"page_label": "842", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bd49c06a-9c55-4ebb-ba7f-be96dc08c4c3", "node_type": "4", "metadata": {"page_label": "842", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "bf9cd2d1681951d2f5ad67cb37b26731e2a8793fcc835d6a45dcca35c5500e46", "class_name": "RelatedNodeInfo"}}, "text": "wher e Smax and Smin are the maximum and minimum\nmemory -slowdown values among all the outstanding\nrequests. If U is less than some acceptable value (i.e., U <\na), then the scheduler would use an algorithm to incr ease\nmemory thr oughput\u2014for e xample, by assigning a higher\npriority to burst transactions. On the other hand, if U \u2265 a\nand thus ther e is unfair ness in the pr ocessing of the\noutstanding memory r equests, the r equests fr om a thr ead\nwith S = Smax would be assigned top priority . The FCF S\nscheduling is then used to prioritize transactions among all\nthe top priority r equests.\n\u00a0\nReferences\n1. M. M. Olama, J. J. Nutar o, V. Protopopescu, and R . A. Coop,\nSecurity concer ns and disruption potentials posed by a\ncompr omised AMI network: risks to the bulk power system,\nThe 2012 Inter national Confer ence on Security and\nManagement (S AM\u201912), Las V egas, 2012, pp. 133-137.\n2. A program e xample illustrating bu\ufb00er over\ufb02ow attack,\nhttp://www .cse.scu.edu/~tschwarz/coen152_05/L ectur es/Bu\n\ufb00erOver\ufb02ow .html .\n3. Champagne David, \u201cScalable security ar chitectur e for\ntrusted sof tware,\u201d a Ph.D. dissertation, P rinceton University,\n2010.\n4. Mark us G. K uhn, Cipher instruction sear ch attack on the\nbus-encryption security micr ocontr oller DS5002FP, IEEE\nTransactions on Computers , vol. 47, no . 10, October 1998,\npp. 1153-1157.\n5. Huang Andr ew, Hacking the Xbo x: An Intr oduction to\nReverse Engineering , No Star ch Press, San F rancisco, 2003.\n6. Butler Lampson, Mart\u00edn Abadi, Michael Bur rows, and Edwar d\nWobber, Authentication in distributed systems: theory and", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1591, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6d44d683-8a3e-452a-91f3-60b9f92ef7a1": {"__data__": {"id_": "6d44d683-8a3e-452a-91f3-60b9f92ef7a1", "embedding": null, "metadata": {"page_label": "843", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "20d2d2aa-0ea4-463e-b729-34a2aad0fe1b", "node_type": "4", "metadata": {"page_label": "843", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f39bb75d2faa9ac463661096ce3c5bde09e083f18aefb6bdb2d27b3445080019", "class_name": "RelatedNodeInfo"}}, "text": "practice, SOSP \u201891: Proceedings of the Thirteenth A CM\nSymposium on Operating Systems P rinciples , pp. 165-182\n7. Hoglund, Gr eg. and Butler, James, Rootkits: Subverting the\nWindows K ernel, Addison- Wesley P rofessional, 2005.\n8. Elias L evy, Appr oaching zer o, Security & P rivacy , IEEE\nVolume: 2, Issue: 4. pp. 65-66.\n9. Tal Gar\ufb01nk el et al., T erra: a virtual machine-based platfor m\nfor trusted computing, Proceedings of the Nineteenth A CM\nSymposium on Operating Systems P rinciples  (SOSP \u201903),\n2003, pp. 193-206.\n10. Michael F ey, Brian K enyon, K even R eadon, Brandon R ogers,\nand Charles R oss, Security Battlegr ound: An Ex ecutive F ield\nManual , Intel P ress, 2012.\n11. Thomas A . Fuhrman, The new old discipline of cyber\nsecurity engineering, SAM \u201912 , 2012, pp. 547-553.\n12. Ruby L ee, Simha Sethumadhavan, Edwar d Suh, and David\nGrawock, T utorial on security for computer ar chitects, ISCA\nSecurity T utorial, San Jose, Califor nia, June 4, 2011.\n13. Adam W aksman and S. Sethumadhavan, T amper evident\nmicroprocessors, In: Proceedings of the 31st IEEE\nSymposium on Security and P rivacy , 2010.\n14. Mark S. Miller et al., Capability Myths Demolished , SRL,\n2003, pp. 42-49.\n15. Capability -Based Computer Systems, available fr om:\nhttp://www .cs.washington.edu/homes/levy/capabook/Chapte\nr1.pdf .\n16. D. E. Bell and L. J. LaP adula, Secur e Computer Systems ,\nMitre Corporation, Bedfor d, MA, 1977.\n17. K. J. Biba, Integrity Consideration for Secur e Computer\nSystems , Mitr e Corporation, Bedfor d, MA, 1977.\n18. Timothy F raser, LOMAC: Low W ater-Mark Integrity\nProtection for COTS Envir onments , 2000 IEEE Symposium on\nSecurity and P rivacy, 2000 (S&P 2000), pp. 230-245.\n19. David D. C. Br ewer and Michael J. Nash, The Chinese wall\nsecurity policy . In Proc. of the IEEE Symposium on Security\nand P rivacy , Oakland, IEEE P ress, 1989, pp. 206-214.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1876, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1038dd1e-ab60-4adb-bacb-8216281486c1": {"__data__": {"id_": "1038dd1e-ab60-4adb-bacb-8216281486c1", "embedding": null, "metadata": {"page_label": "844", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "becec475-812f-4f9f-bc4d-472d13dd6123", "node_type": "4", "metadata": {"page_label": "844", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "52e6030e7fa27408dabb7d5a81914b5beffb9cfe04cb2c3123c54fb417a02429", "class_name": "RelatedNodeInfo"}}, "text": "20. David D. Clark and David R . Wilson, A comparison of\ncommer cial and military computer security policies, IEEE,\n1987, pp. 184-194.\n21. Sally A dee, \u201cThe Hunt for the Kill Switch,\u201d IEEE Spectrum,\nMay 2008, pp. 35-39.\n22. K. Gandol\ufb01 et al., Electr omagnetic analysis: concr ete\nresults, In: Proceedings of 3r d Inter national W orkshop on\nCryptographic Har dwar e and Embedded Systems (CHES) ,\n2001, pp. 251-261.\n23. D. Asonov and R . Agrawal, K eyboar d acoustic emanations,\nIn: Proceedings of the IEEE Symposium on Security &\nPrivacy , May 2004, pp. 3-11.\n24. Zhenghong W ang and R uby B. L ee, A novel cache\narchitectur e with enhanced perfor mance and security, In:\nProceedings of the 41st Annual IEEE/A CM Inter national\nSymposium on Micr oarchitectur e (Micr o-41), 2008, pp. 88-\n93.\n25. Waksman and S. Sethumadhavan, Silencing har dwar e\nbackdoors, SP \u201811 P roceedings of the 2011 IEEE Symposium\non Security and P rivacy , pp. 49-63.\n26. Craig Gentry, A fully homomorphic encryption scheme,\nPh.D. dissertation, spring 2009, Stanfor d University .\n27. M. Hicks, S. T . King, M. M. K. Martin, and J. M. Smith,\nOvercoming an untrusted computing base: detecting and\nremoving malicious har dwar e automatically, In: Proceedings\nof the 31st IEEE Symposium on Security and P rivacy , 2010.\n28. Reouven Elbaz, David Champagne, Catherine Gebotys,\nRuby B. L ee, Nachik eth P otlapally, and Lionel T orres,\nHardwar e mechanisms for memory authentication: a survey\nof existing techniques and engines, Trans. on Comput. Sci.\nIV, LNCS 5430, 2009, pp. 1-22.\n29. Champagne, David, Elbaz, R eouven, and L ee, R uby B., The\nreduced addr ess space (R AS) for application memory\nauthentication, In Proceedings of the 11th Inter national\nConfer ence on Infor mation Security  (Taipei, T aiwan,\nSeptember 15-18, 2008, pp. 47-63.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1815, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cea14d14-80e4-45c5-88b8-9dfd4a139a20": {"__data__": {"id_": "cea14d14-80e4-45c5-88b8-9dfd4a139a20", "embedding": null, "metadata": {"page_label": "845", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ecd46053-e3f1-4493-8de3-f6b437a8e188", "node_type": "4", "metadata": {"page_label": "845", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2755b66b47ae8bb3ff6348735a4351559362b67715bfdee70a7d9b26cfe1e3d1", "class_name": "RelatedNodeInfo"}}, "text": "30. Austin R ogers, Designing cost-e\ufb00ective secur e processors\nfor embedded systems: principles, challenges, and\narchitectural solutions,\u201d a dissertation, University of\nAlabama in Huntsville, 2010.\n31. D. Lie, C. Thekk ath, M. Mitchell, et al., Ar chitectural support\nfor copy and tamper r esistant sof tware, Proc. of the 9th Intl\nConf. on Ar chitectural Support for P rogramming Languages\nand Operating Systems (ASPL OS-IX) , 2000, pp. 168-177.\n32. G. Edwar d Suh, Dwaine Clark e, Blaise Gassend, Marten van\nDijk, and Srinivas Devadas, AEGIS: ar chitectur e for tamper -\nevident and tamper -resistant pr ocessing, Proceedings of the\n17th Annual Inter national Confer ence on Super computing\n(ICS \u201903) , 2003, pp. 160-171.\n33. G. Edwar d Suh, Dwaine Clark e, Blaise Gassend, Marten van\nDijk, and Srinivas Devadas, AEGIS: ar chitectur e for tamper -\nevident and tamper -resistant pr ocessing, Computer Science\nand Arti\ufb01cial Intelligence Laboratory (CS AIL), MIT, 2004. (An\nextended version of [48]).\n34. Qiong Liu, R eihaneh Safavi-Naini, and Nicholas P aul\nSheppar d, Digital rights management for content\ndistribution, P roceedings of the Australasian infor mation\nsecurity workshop confer ence on A CSW fr ontiers 2003 -\nVolume 21, Australian Computer Society, January 2003.\n35. Sear ch for Extrater restrial Intelligence (SETI),\nhttp://setiathome.ssl.berk eley.edu/ .\n36. Distributed.net , http://www .distributed.net/Main_P age.\n37. Auguste K erckho\ufb00s, La cryptographie militair e, Journal des\nSciences Militair es,\nhttp://www .petitcolas.net/fabien/k erckho\ufb00s/ .\n38. National Institute of Standar ds and T echnology (NIST),\nhttp://csr c.nist.gov/publications/ .\n39. AES-NI instruction set, http://sof tware.intel.com/ .\n40. William Stallings, Cryptography and Network Security ,\nPearson P rentice Hall, 4th ed., 2006.\n41. RSA calculator,\nhttps://www .cs.dr exel.edu/~jpopyack/Intr oCS/HW/RS AWorks\nheet.html .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1915, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4536a512-727a-4c68-9f83-5bc1a77f2ea1": {"__data__": {"id_": "4536a512-727a-4c68-9f83-5bc1a77f2ea1", "embedding": null, "metadata": {"page_label": "846", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "792994ae-b0fb-4f88-8752-0dc43b03bfe4", "node_type": "4", "metadata": {"page_label": "846", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "388c0d5130a77c51f43ab2904ea1d0101edcfa5777dddb65967f5e4c9cf03308", "class_name": "RelatedNodeInfo"}}, "text": "42. Francis Cr owe, Alan Daly, and W illiam Mar nane, Scalable\ndual mode arithmetic unit for public k ey cryptosystems,\nInformation T echnology : Coding and Computing , Vol. 1,\n2005, pp. 568-573.\n43. E\ufb03ciency of ECC Cipher,\nhttp://www .certicom.com/inde x.php/the-basics- of-ecc.\n44. R. Needham and M. Schr oeder, Using encryption for\nauthentication in lar ge network ed computers,\nCommunications of the A CM, Volume 21 Issue 12, Dec.\n1978, pp. 993-999.\n45. SHA-1 calculator, http://www .sha1.cz/\n46. Richar d Spillman, Classical and Contemporary Cryptology ,\nPearson P rentice Hall, 2005.\n47. Hans Brandl, Trusted Computing: The T CG Trusted Platfor m\nModule Speci\ufb01cation , In\ufb01neon T echnologies A G, Embedded\nSystems 2004.\n48. Chu-Hsing Lin, Hierar chical k ey assignment without public-\nkey cryptography, Computers and Security , Vol. 20, No . 7,\n2001, pp. 612-619.\n49. Blaise Gassend, Dwaine Clark e, Marten van Dijk y, and\nSrinivas Devadas, Silicon physical random functions,\nProceedings of the 9th A CM Confer ence on Computer and\nCommunications Security (CCS \u201902) , 2002, pp. 148-160.\n50. Yohei Hori, Hyunho K ang, T oshihir o Katashita, and Ak ashi\nSatoh, P seudo -LFSR PUF : A compact, e\ufb03cient and r eliable\nphysical unclonable function, 7th Inter national Confer ence\non Recon\ufb01gurable Computing and FPGAs (R eConF ig \u201911) ,\nCancun, Quintana R oo, Me xico, 2011, pp. 223-228.\n51. G. Edwar d Suh, Charles W . O\u2019Donnell, and Srinivas\nDevadas, AEGIS: a single-chip secur e processor, Information\nSecurity T echnical R eport  (2005) 10, pp. 63-73.\n52. Sundeep Bajik ar, Trusted platfor m module (TPM) based\nsecurity on notebook PCs: white paper, Intel Corporation,\nJune 2002.\n53. Je\ufb00ry Dwoskin and R uby L ee, Har dwar e-rooted trust for\nsecur e key management and transient trust, CCS\u2019-07,\nAlexandria, V irginia, 2007, pp. 389-400.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1837, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "257564cc-88ef-4540-88f5-5314097b20f7": {"__data__": {"id_": "257564cc-88ef-4540-88f5-5314097b20f7", "embedding": null, "metadata": {"page_label": "847", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "52821e6a-c922-4d20-9fe4-872de3241e3f", "node_type": "4", "metadata": {"page_label": "847", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f959489faad4e7016ff10148c8830a6ecba52a61485d02d16c54090d679ee6a3", "class_name": "RelatedNodeInfo"}}, "text": "54. Weiping P eng, Y ajian Zhou, Cong W ang, Y ixian Y ang, and\nYuan P ing, A new hierar chical k ey authdata management\nscheme for trusted platfor m, International Confer ence on\nMultimedia Infor mation Networking and Security , 2010, pp.\n463-467.\n55. Ruby L ee et al., Ar chitectur e for pr otecting critical secr ets\nin micr oprocessors, 32nd Inter national Symposium on\nComputer Ar chitectur e, 2005 (ISCA \u201805), pp. 2-13.\n56. Ralph C. Merkle, P rotocols for public k ey cryptography, In:\nIEEE Symposium on Security and P rivacy , 1980, pp. 122-\n134.\n57. Smart car d basics, http://www .smartcar dbasics.com/ .\n58. TCG Speci\ufb01cation Ar chitectur e Overview, Speci\ufb01cation\nRevision 1.2 28 April 2004,\nhttp://class.ee.iastate.edu/tyagi/cpr e681/papers/T CG_1_0_Ar\nchitectur e_Overview .pdf.\n59. Y. Wang, H . Zhang, Z. Shen, and K. Li, Ther mal noise\nrandom number generator based on SHA -2 (512), in\nProceedings of the 4th Inter national Confer ence on Machine\nLearning and Cyber netics , Guangzhou, China, 2005, pp.\n3970-3974.\n60. M. Milenk ovi\u0107, A . Milenk ovi\u0107, and E. Jovanov, A framework\nfor trusted instruction e xecution via basic block signatur e\nveri\ufb01cation, In: Proceedings of the 42nd Annual A CM\nSoutheast Confer ence , 2004, pp. 191-196.\n61. D. Kir ovski, M. Drinic, and M. P otkonjak, Enabling trusted\nsoftware integrity, In: Proceedings of the 10th Inter national\nConfer ence on Ar chitectural Support for P rogramming\nLanguages and Operating Systems (ASPL OS-X), 2002, pp.\n108-120.\n62. Chenyu Y an, R ogers B, Englender D, Solihin D, and\nPrvulovic, M, P erformance and security of memory\nencryption and authentication, Computer Ar chitectur e,\n2006. ISCA \u201906. 33r d Inter national Symposium on Digital\nObject Identi\ufb01er, 2006, pp. 179-190.\n63. A. Rogers, L ow over head har dwar e techniques for sof tware\nand data integrity and con\ufb01dentiality in embedded systems,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1878, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "472eeb2a-c9b9-4326-919e-257744bc7b05": {"__data__": {"id_": "472eeb2a-c9b9-4326-919e-257744bc7b05", "embedding": null, "metadata": {"page_label": "848", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fecb8cb7-09ce-4d21-b160-465a5536dfdb", "node_type": "4", "metadata": {"page_label": "848", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "54e41fcc2336b03a9aec6c469ffceaa57cbfea1b30a9ebcc68dddfcbc3e7c3ce", "class_name": "RelatedNodeInfo"}}, "text": "master\u2019s thesis, Electrical and Computer Engineering\nDepartment, University of Alabama in Huntsville, 2007.\n64. B. Rogers, S. Chhabra, Y . Solihin, and M. P rvulovic, Using\naddress independent seed encryption and bonsai Merkle\ntrees to mak e secur e processors OS- and perfor mance-\nfriendly, In: Proceedings of the 40th Annual IEEE/A CM\nInternational Symposium on Micr oarchitectur e (MICRO -40),\nChicago, IL, 2007, pp. 183-196.\n65. Jun Y ang, Lan Gao, and Y outao Zhang, Impr oving memory\nencryption perfor mance in secur e processors, IEEE T rans on\nComputer , 2005, pp. 630-640.\n66. Blaise Gassend, G. Edwar d Suh, Dwaine Clark e, Marten van\nDijk, and Srinivas Devadas, Caches and Merkle tr ees for\ne\ufb03cient memory authentication, MIT -LCS- TR-857, 2002.\n67. J. P. McGr egor, D. K. K arig, Z. J. Shi, and R . B. L ee, A\nprocessor ar chitectur e defense against bu\ufb00er over\ufb02ow\nattacks, Proc. IEEE Intl. Conf . on Infor mation T echnology :\nResear ch And Education (ITE 2003) , August 2003, pp. 243-\n250.\n68. R. B. L ee, D. K. K arig, J. P . McGr egor, and Z. J. Shi, Enlisting\nhardwar e architectur e to thwart malicious code injection,\nProc. Intl. Conf . on Security in P ervasive Computing  (SPC-\n2003), lectur e notes in computer science, Springer V erlag,\nMarch 2003.\n69. Joe Devietti, Colin Blundell, Milo M. K. Martin, and Steve\nZdancewic, Har dBound: ar chitectural support for spatial\nsafety of the C pr ogramming language, Proceedings of the\n13th Inter national Confer ence on Ar chitectural Support for\nProgramming Languages and Operating Systems (ASPL OS-\nXIII), 2008, pp. 103-114.\n70. Divya Ar ora, Srivaths R avi, Anand R aghunathan and Niraj K.\nJha, Secur e embedded pr ocessing thr ough har dwar e-\nassisted run-time monitoring, Proceedings of the Confer ence\non Design, Automation and T est in Eur ope (D ATE \u201905) , 2005,\npp. 1530-1591.\n71. Tao Zhang, Xiaotong Zhuang, Santosh P ande, and W enke\nLee, Anomalous path detection with har dwar e support,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1967, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92b5d58e-ebca-481a-895b-6d75f66a06d5": {"__data__": {"id_": "92b5d58e-ebca-481a-895b-6d75f66a06d5", "embedding": null, "metadata": {"page_label": "849", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a96e638b-6971-4d64-976e-6a44ce20f7ae", "node_type": "4", "metadata": {"page_label": "849", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "98ef7ba0443c1bf8e0411b0c1bc332fb8b8a214c760eccd32eb15e930de78561", "class_name": "RelatedNodeInfo"}}, "text": "Proceedings of the 2005 Inter national Confer ence on\nCompilers, Ar chitectur es and Synthesis for Embedded\nSystems (CASES \u201905) , 2005, pp. 43-54.\n72. G. Edwar d Suh, Jaewook L ee, and Srinivas Devadas, Secur e\nprogram e xecution via dynamic infor mation \ufb02ow tracking,\nProceedings of the 11th Inter national Confer ence on\nArchitectural Support for P rogramming Languages and\nOperating Systems (ASPL OS-XI), 2004, pp. 85-96.\n73. Shashidhar Mysor e, Bita Mazloom, Banit Agrawal, and\nTimothy Sherwood, Understanding and visualizing full\nsystems with data \ufb02ow tomography, Proceedings of the 13th\nInternational Confer ence on Ar chitectural Support for\nProgramming Languages and Operating Systems (ASPL OS-\nXIII), 2008, pp. 211-221.\n74. Mohit T iwari, Hassan M. G, W assel Bita, et al., Complete\ninformation \ufb02ow tracking fr om the gates up, Proceedings of\nthe 14th Inter national Confer ence on Ar chitectural Support\nfor Programming Languages and Operating Systems\n(ASPL OS-XIV), 2009, pp. 109-120.\n75. Guru V enkataramani, Ioannis Doudalis, Y an Solihin, and\nMilos P rvulovic, Fle xiTaint: a pr ogrammable accelerator for\ndynamic taint pr opagation, In: 14th Inter national Symp. on\nHigh P erformance Computer Ar chitectur e (HPCA) , 2008, pp.\n173-184.\n76. Ruirui Huang, Daniel Y . Deng, and G. Edwar d Suh, Orthrus:\ne\ufb03cient sof tware integrity pr otection on multi-cor es,\nProceedings of the 15th Inter national Confer ence on\nArchitectural Support for P rogramming Languages and\nOperating Systems (ASPL OS-XV), 2010, pp. 371-383.\n77. Scott Rixner, Memory contr oller optimizations for web\nservers, Proceedings of the 37th Annual IEEE/A CM\nInternational Symposium on Micr oarchitectur e (MICRO -37\n2004) , pp. 355-366.\n78. Scott Rixner, W illiam J. Dally, Ujval J. K apasi, P eter Mattson,\nand John D. Owens, Memory access scheduling, P roceedings\nof the 27th Annual Inter national Symposium on Computer\nArchitectur e (ISCA \u201900) , 2000, pp. 128-138.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1948, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "997672ca-989f-4edc-a14b-c1984f0542fa": {"__data__": {"id_": "997672ca-989f-4edc-a14b-c1984f0542fa", "embedding": null, "metadata": {"page_label": "850", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6355056a-b513-43c0-933a-a64b07a06d45", "node_type": "4", "metadata": {"page_label": "850", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "1e4945a4815c12cba36ec1046a029f01ba7ac8ef166aa779ef9b517a18b21537", "class_name": "RelatedNodeInfo"}}, "text": "79. Onur Mutlu and Thomas Moscibr oda, Stall-time fair memory\naccess scheduling for chip multipr ocessors, Proceedings of\nthe 40th Annual IEEE/A CM Inter national Symposium on\nMicroarchitectur e (MICRO 40) , 2007, pp. 146-158.\n\u00a0\nExercises\n11.1 List various security issues that users, or ganizations (e.g.,\nmilitary, banks), application pr ograms, and systems (e.g.,\npersonal computers, cloud, handheld devices) might face.\n11.2 Consider a gover nment o\ufb03ce issuing passports. F ollow\nthe SEM and the e xample in Table 11.1  to develop a\nsecurity mechanism for \u201cissuing a har d-to-forge passport.\u201d\n11.3 Give a r eason as to why a mandatory access contr ol is\nneeded in an or ganization.\n11.4 Consider a bank with safe deposit bo xes that customers\ncan r ent. The bank needs to select a secur e scheme to\nallow only authorized access to safes. In addition,\ncustomers wish to have mor e freedom and occasionally\nallow their friends or r elatives to access their bo xes. For\neach of the following techniques, itemize what the bank\nand the owner of a safe need to do and what pr otections\nare needed to pr event an unauthorized person fr om\naccessing a safe or denying access to a legitimate owner .\na. Derive a secur e mandatory A CL-based scheme that\nthe bank can use. Hint: Each customer gives the bank a\nlist of names that can also access the safe.\nb. Derive a secur e capability list-based scheme that the\nbank can use. Hint: Bank issues each customer n keys to\ngive to a friend or a r elative.\n11.5 What is a multilevel security policy model?\n11.6 What is a multilateral security policy?", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1588, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fabc3e3a-9393-4dbf-ab7d-644fa1658a22": {"__data__": {"id_": "fabc3e3a-9393-4dbf-ab7d-644fa1658a22", "embedding": null, "metadata": {"page_label": "851", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fd2346c0-b51a-4e83-aee8-9a274c889e4e", "node_type": "4", "metadata": {"page_label": "851", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "11bbcf595935f0071aacf171fd47e477b39d9abb5adf1eeac99066f8197912af", "class_name": "RelatedNodeInfo"}}, "text": "11.7 Brie\ufb02y e xplain the BLP\u2019s *-pr operty .\n11.8 Which policy model could be used to pr event the Stuxnet\nmalwar e from changing the speci\ufb01cations of an industrial\ncontr ol system?\n11.9 Stuxnet is designed to sear ch for a speci\ufb01c contr ol system\nknown as a pr ogrammable logic contr oller (PLC). Which\npolicy model could be used to pr event Stuxnet fr om\ntransfer ring the contr ol system infor mation thr ough the\nnetwork?\n11.10 Flame malwar e is designed to \u201csuck\u201d infor mation\n(keystr okes, scr eenshots, audio, etc.) fr om a computer\nsystem and send it over the Inter net to those who contr ol\nit. Which policy model could be used to pr event Flame\nfrom transfer ring data thr ough the network?\n11.11 Why does the sof tware that implements an access contr ol\nmechanism and the system that runs it need to r emain\ntrustworthy?\n11.12 Suppose a CPU uses an 8-bit car ry look-ahead adder\n(CLA). Use two CL A modules, but purposely modif y one of\nthe CL As so it outputs the wr ong r esults. F or example,\nchange the cor rect e xpression \n  With\nbillions of transistors in a typical pr ocessor, it would be\nhard to detect ther e are two adders. Do the following:\na. Design a single input triggering har dwar e Trojan that\noutputs wr ong r esults af ter it is trigger ed using the input\n0xAA.\nb. Suppose you apply 50 unique test vectors to test the\nadder . What ar e the chances of detecting the T rojan?\nc. Suppose the adder is a 32-bit CL A with the same\nexact T rojan with trigger input 0xA AAAAAAA. Deter mine\nthe chance of detecting the T rojan with one million tests.\n11.13 Suppose a MOD 24 counter is used to cr eate a time bomb\nTrojan.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1643, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dc529e8a-d3e1-47a5-bc45-853c6614bfd7": {"__data__": {"id_": "dc529e8a-d3e1-47a5-bc45-853c6614bfd7", "embedding": null, "metadata": {"page_label": "852", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7bb2cc3a-d91e-49d1-aeed-30b6ba3946d2", "node_type": "4", "metadata": {"page_label": "852", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3a8d5c2b87e568055f2b2334547c61462b6e9080da32d9fbfe6294204e6e0c34", "class_name": "RelatedNodeInfo"}}, "text": "a. How many test vectors do you need to trigger the\nTrojan?\nb. Suppose you applied 10M tests and the cir cuit\nwork ed cor rectly. How of ten do you need to r eset power\nin order to pr event a time bomb trigger?\nc. Design a cir cuit that outputs 1 to r eset the power to\nthe module that may use a counter to cr eate a time\nbomb T rojan. Also assume that the number of test\nvectors in part (b) includes tests applied during post\nsilicon testing; that is, befor e mass pr oduction. Sample\nchips ar e manufactur ed for post-silicon testing purposes\nonly in or der to apply mor e tests using actual har dwar e\ninstead of a simulation tool.\n11.14 Design the following 16-bit encryption/decryption cir cuit\nshown in Fig. 11.39 . It uses a multifunction 16-bit input\nregister, a right-shif t register as output r egister, and an 8-\nbit LSFR with a secr et key. The cir cuit operates manually\n(no contr ol unit is r equir ed). V alidate your design.\nFIGURE 11.39  Data path for Ex ercise 11.14.\n11.15 What ar e the thr ee sour ces of development thr eats?", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1046, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1aae7460-e4fb-4829-82de-4559e870feb8": {"__data__": {"id_": "1aae7460-e4fb-4829-82de-4559e870feb8", "embedding": null, "metadata": {"page_label": "853", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "12606390-1b87-4fe5-b1a9-03913afaddc2", "node_type": "4", "metadata": {"page_label": "853", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e5a70885bdf3f86d3857b9878a032cee7e77c87b59ba4a0ad966042b2961db27", "class_name": "RelatedNodeInfo"}}, "text": "11.16 What is the purpose of using homomorphic encryption,\nand in addition to r equiring mor e har dwar e, what potential\nproblem may e xist that would mak e implementation of a\nhomomorphic encryption mor e di\ufb03cult? (Hint: Also r efer to\nFP arithmetic in Chap. 3 .)\n11.17 Design an F SM-based contr ol unit to encrypt/decrypt 16\nbits of data at a time. The block diagram is shown in Fig.\n11.40 . The contr oller starts when signal start is asserted. A\nuser selects a 16-bit input and toggles the switch\nconnected to the DFF to assert the start signal, as\nillustrated in the \ufb01gur e. Once the contr oller starts, signal\nack (acknowledge) is used to r eset the DFF . The\nencryption/decryption data path contains a counter for\ncounting the number of times the multifunction r egisters\nmust shif t. In the block diagram, C.C. stands for\ncombinational cir cuit. When the counter r eaches the right\nnumber, the operation stops and the contr oller r eturns to\nstandby, its initial state. The system should be r eset only\nonce and should work multiple times, each time\nencrypting/decrypting a 16-bit input. (Also see Ex ercise\n11.14).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1125, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f8c5b212-9734-46ef-aa4b-1cf308ea813f": {"__data__": {"id_": "f8c5b212-9734-46ef-aa4b-1cf308ea813f", "embedding": null, "metadata": {"page_label": "854", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "da303fc4-2884-46b7-a71b-472eb1a1a710", "node_type": "4", "metadata": {"page_label": "854", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3ae2e987fccb141714621e694962a900f504ff2c9fe05511fa15617ff9190725", "class_name": "RelatedNodeInfo"}}, "text": "FIGURE 11.40  Data path and contr ol unit for Ex ercise 11.17.\n11.18 Given e = 5, d = 29, and n = 91, use RS A to encrypt P =\n6 and decrypt C = 41.\n11.19 Given e = 5, d = 29, and n = 91, use RS A to encrypt P =\n13.\n11.20 Suppose IV = 8\u2019h77. Deter mine the cipherte xt for\nplainte xt = \u201c HELL O\u201d using RS A in CB C mode and use public\nkey e = 5 and n = 91. F or example, the \ufb01rst P0 = 72 =\n8\u2019h48 is X ORed with 8\u2019h77 befor e it is encrypted to\ngenerate cipherte xt C0; then P1 = 8\u2019h45 is X ORed with C0\nbefor e it is encrypted to generate C1, etc.\n11.21 State why an MA C or HMA C is needed.\n11.22 What is the advantage of an MA C? Also check the\nproperties of AES- GCM online.\n11.23 What is the advantage of an HMA C?\n11.24 Consider a system with 8- B cache blocks and 256- B main\nmemory . Organize this memory as a binary hash tr ee.\nSpeci\ufb01cally, given the memory addr ess of a child block,\nformulate a technique to identif y the memory addr ess of\nits par ent block.\n11.25 Consider a system with 8- B cache blocks and 128- B main\nmemory . Organize this memory as a 4-ary hash tr ee. In a\n4-ary tr ee, each par ent node has four childr en nodes.\nSpeci\ufb01cally, given the memory addr ess of a child block,\nformulate a technique to identif y the memory addr ess of\nits par ent block.\n11.26 A hierar chical access contr ol suitable for har dwar e\nimplementation: R efer to r eference [48] and write an HDL\ncode to generate 8-bit Rji and Nji for given 8-bit IDi, IDj,\nSRK, Ki, and Kj. Use the following data to test your code.\nThen use each of the values for IDi, IDj, Rji, and Nji to", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1579, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fcd6b381-fd40-4066-b397-2297df9fec41": {"__data__": {"id_": "fcd6b381-fd40-4066-b397-2297df9fec41", "embedding": null, "metadata": {"page_label": "855", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1e12b747-3f0c-4549-aeb2-d5b7c356598d", "node_type": "4", "metadata": {"page_label": "855", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "dcd25f0de5193bc0581a777ad6131940b87995bd786c04565932910856b47b2b", "class_name": "RelatedNodeInfo"}}, "text": "compute secr et Ki. Values of Rji, and Nji for all i and j would\nbe public.\n11.27 Explain in what ways a secur e co-processor can impr ove\nthe security of a computer .\n11.28 Outline the basic functions an SP must be able to perfor m\nin a system that runs a TSM.\n11.29 Explain in what ways an SP can impr ove the security of a\ncomputer .\n11.30 Suppose for a DI-SXM pr ogram, a hash tr ee of sequence\nnumbers is cr eated for the pr ogram\u2019s data blocks. What\nwould happen if an attack er perfor ms a block spoo\ufb01ng,\nsplicing, or r eplay attack? W ill each type of attack be\ndetected and why?\n11.31 Suppose for DI-SXM pr ograms, the sequence numbers of\ndata blocks ar e stor ed inside the SP instead of on memory .\nBrie\ufb02y state the advantage and disadvantage of storing\nthe sequence numbers inside the SP .\n11.32 Consider the design of a secur e virtual memory\nmanagement system. Suppose we would lik e to\nauthenticate each virtual page using two -level hash tr ees.\nEach hash tr ee contains one r oot page and several leaf\ndata pages. The hash (using bitwise X OR in this case) of\neach leaf page is stor ed in its cor responding r oot page.\nAssuming that pages ar e 4 KB, cache blocks ar e 64 B, and\neach hash value is 16 B, how many r oot pages ar e needed\nto authenticate 16 MB dynamically allocated virtual\nmemory space?", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1319, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d88d984c-9438-440d-a9ca-365d229189e8": {"__data__": {"id_": "d88d984c-9438-440d-a9ca-365d229189e8", "embedding": null, "metadata": {"page_label": "856", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d7abdfca-0b3f-4b5e-af63-f73a7e2d8c69", "node_type": "4", "metadata": {"page_label": "856", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "bdd9ad6f77132f666ac1aec95f0a7316129aa4cc9fe2c1b6c00a91c3a1c66087", "class_name": "RelatedNodeInfo"}}, "text": "11.33 Consider a hash tr ee of virtual memory data blocks (i.e.,\nthe hash tr ee uses virtual addr esses). Suppose the SP\nimplements physically addr essed caches. In this case, a\nblock\u2019s virtual addr ess is also saved in the lowest-level\ncache. Brie\ufb02y e xplain why saving the virtual addr ess is\nnecessary for pr ocessing the hash tr ee and detecting\nreplay attacks.\n11.34 Consider eight data blocks. Draw the hash tr ee and\nillustrate the authentication of blocks 8, 9, and 14 by the\nHTE. Also, deter mine how many cache misses will r esult\ndue to accessing these blocks. Assume none of the cached\nparent blocks ar e replaced.\n11.35 W e would lik e to compar e the memory space r equir ed to\nmaintain a hash tr ee of sequence numbers assigned to\nmemory data blocks. T wo di\ufb00er ent sequence numbers ar e\ninvestigated: 64-bit vs. 64-bit split (48-bits long and 16-bits\nshort) sequence numbers. Also, assume one long number\nis used for every 16 consecutive blocks, blocks ar e 64B,\neach hash value is 256 bits, and the maximum size of\ndynamic data memory space is 1MB. Deter mine how much\nmemory space is needed to maintain the hash tr ee in each\ncase.\n11.36 Consider a SXM- OP system. Assume the CPU has four\nuser-accessible r egisters and data and addr esses ar e 8-bits\neach. Suppose during an inter ruption, the 8-bit r egister\ncontents and an 8-bit r eturn addr ess ar e hashed using\nbitwise X OR and the hash value is saved inside the CPU.\nThe r egister contents and the r eturn addr ess ar e then\nsaved in memory by the inter rupt handler . If the hash\nvalue is stor ed inside the CPU, show how it can be used to\ndetect spoo\ufb01ng, splicing, and r eplay attacks. If any of the\nattacks cannot be detected, identif y the r eason and\nsuggest a security mechanism. Y ou may assume ther e are\n\ufb01ve r egisters number ed 0 to 4, wher e register 4 is used to\nstore a return addr ess.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1875, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e72e1aec-b700-4746-bdfc-714123578739": {"__data__": {"id_": "e72e1aec-b700-4746-bdfc-714123578739", "embedding": null, "metadata": {"page_label": "857", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "07cb817a-97ac-479b-b7cd-f576870db28d", "node_type": "4", "metadata": {"page_label": "857", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "73ef76c5405d765793dd674dc064471d442b5af76a3f2cc2c9d4061c637a4c95", "class_name": "RelatedNodeInfo"}}, "text": "11.37 An HTE is a micr ocontr oller and e xecutes a \ufb01r mwar e\nlocated inside the SP . For simplicity, consider a hash tr ee of\ndata blocks (as opposed to a hash tr ee of sequence\nnumbers assigned to data blocks). Befor e a pr ogram can\naccess its dynamic data in DI-SXM, the hash tr ee for the\ndynamic data blocks must alr eady e xist. Assuming the SP\nimplements the MESI cache pr otocol, describe how the\ninitial hash tr ee for a pr ogram\u2019s dynamic data blocks would\nbe cr eated. Also assume ther e are other SP state bits so\nthat the OS can invok e the \ufb01r mwar e when necessary and\ncan choose to enable or disable the HTE r ead cycle, which,\nwhen disabled, causes data blocks that ar e loaded fr om\nmemory to not be authenticated. The data memory space\nmay be statistically declar ed during pr ogramming or\nallocated during run time.\n11.38 Suppose split sequence numbers ar e used with each\ndynamic data block. Also assume that the starting addr ess\nand the size of the dynamic data space ar e stor ed within\nthe SP during the time a DI-SXM pr ogram is e xecuting.\nDiscuss/e xplain how a hash tr ee would be updated when\none of the short sequence numbers over\ufb02ows. Also, see\nExercise 11.37.\n11.39 Suppose an SP -based system uses separate virtual\naddress spaces for an SXM pr ocess (code and data), a non-\nSXM pr ocess (code and data), a hash tr ee to pr otect SXM\nprocess data blocks, and a systems pr ocess (code and\ndata). Outline a mechanism the SP could use to identif y\nthe right page table to use with each di\ufb00er ent virtual\naddress.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1542, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "390bf8d6-6e49-47f1-943b-70fccd7c1070": {"__data__": {"id_": "390bf8d6-6e49-47f1-943b-70fccd7c1070", "embedding": null, "metadata": {"page_label": "858", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "597e862f-37cc-4000-b2df-4b6bd52d4dc0", "node_type": "4", "metadata": {"page_label": "858", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e00266dfc8f27fd76b30b2b112e7f6ef2336262efcd8fda95708ef78aa7b76eb", "class_name": "RelatedNodeInfo"}}, "text": "Bibliography\nAbd-El- Barr Mostafa and El-R ewini Hesham, Fundamentals\nof Computer Or ganization and Ar chitectur e, Wiley, 2005.\nAgner F og, \u201cBranch pr ediction in the P entium family,\u201d\nwww.x86.or g/articles/branch/branchpr ediction.htm .\nAltera Quartus II, CPLD, FPGA design tool,\nhttp://www .altera.com/ .\nAnderson John A ., Foundations of Computer T echnology ,\nCRC Press, 1994.\nATI Xenos GPU (for Xbo x 360), www.amd.com .\nBuchanan W illiam J., Introduction to Security and Network\nForensics , CRC Press, 2011.\nCarpinelli John D., Computer Systems Or ganization and\nArchitectur e, Addison W esley, 2001.\nChristof P ., Jan P ., and Bart P ., Understanding Cryptography :\nA Textbook for Students and P ractitioners , Springer,\n2010.\nCiletti Michael D., Starting Guide to V erilog 2001 , Pearson\nPrentice Hall, 2004.\nClements Alan, Principles of Computer Har dwar e, Oxfor d,\n2006.\nCuller David, Singh Jaswinder, and Gupta Anoop, Parallel\nComputer Ar chitectur e: A Har dwar e/Sof tware Appr oach,\nMorgan K aufman , San F rancisco, 1999.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1040, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "46f48424-cd6c-43d9-8ce0-71fba2ba86ee": {"__data__": {"id_": "46f48424-cd6c-43d9-8ce0-71fba2ba86ee", "embedding": null, "metadata": {"page_label": "859", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bcb58c89-afcd-4da4-a800-1d64bf1dde98", "node_type": "4", "metadata": {"page_label": "859", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d75487d19d0d9738e7ab060d80a5a1e47021c3f5bb3fd62a57eec593b931fa72", "class_name": "RelatedNodeInfo"}}, "text": "Easttom W illiam, Computer Security F undamentals , 2nd\ned., P earson, 2011.\nGendrullis T imo, \u201c Hardwar e-based cryptanalysis of the\nGSM A5/1 encryption algorithm,\u201d thesis, May 2008.\nHard drive interfaces, http://www .harddriver eport.com/ .\nHarris David and Har ris Sarah, Digital Design and\nComputer Ar chitectur e, Mor gan K aufmann, 2007.\nHarvey A . F., Data A cquisition Division Sta\ufb00, \u201c DMA\nFundamentals on V arious PC Platfor ms,\u201d National\nInstruments.\nHennessy John and P atterson David, Computer\nArchitectur e: A Quantitative Appr oach , 5th ed., Mor gan\nKaufman, W altham, 2012.\nHwang K ai, Computer Arithmetic P rinciples, Ar chitectur e,\nand Design , Wiley, 1979.\nIntel, \u201c Optimization techniques for integer -blended code,\u201d\nhttp://download.intel.com/design/pentiumii/manuals/242\n81603.pdf .\nIntel QuickP ath,\nhttp://www .intel.com/technology/quickpath/intr oduction.\npdf.\nKatz R . and Bor riello G., Contemporary L ogic Design ,\nPearson, 2005.\nKing S. T ., Tucek J., Cozzie A ., Grier C., Jiang W ., and Zhou\nY., Designing and implementing malicious har dwar e, In:\nProceedings of the 1st USENIX W orkshop on Lar ge-Scale\nExploits and Emer gent Thr eats, April 2008.\nLuebk e David and Humphr eys Gr eg, How GPUs work?  IEEE\nComputer, F ebruary 2007, 96\u2013100.\nMano Mor ris M. and Kime Charles R ., Logic and Computer\nDesign F undamentals , 4th ed., P earson P rentice Hall,\n2008.\nMano Mor ris M. and Ciletti Michael D., Digital Design , 4th\ned., P rentice Hall, 2007.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1479, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0757a05f-e4b7-48ce-804d-2a8f14520e40": {"__data__": {"id_": "0757a05f-e4b7-48ce-804d-2a8f14520e40", "embedding": null, "metadata": {"page_label": "860", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "18befa48-e6ca-4ae4-b08a-cc542b05e467", "node_type": "4", "metadata": {"page_label": "860", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "552d68a908dd1f2013051d0fa2a1b6babc54cff8f4cc61a74c37ecdb884cff08", "class_name": "RelatedNodeInfo"}}, "text": "Marcovitz Alan B., Introduction to L ogic Design , McGraw-\nHill, 2005.\nMicrosoft Keyboar d scan code speci\ufb01cation,\nhttp://www .micr osoft.com/ .\nNorthbridge and Southbridge,\nhttp://www .nvidia.com/page/home.html ,\nhttp://www .intel.com/pr oducts/chipsets/ ,\nhttp://www .amd.com/us/PRODUCTS/ .\nNull Lina and L obur Julia, Computer Or ganization and\nArchitectur e, Jones Bartlett L earning, 2012.\nNVIDIA GeF orce GPUs, www.nvidia.com .\nOsadchy M., P inkas B., Jar rous A ., and Mosk ovich B., Sci\ufb01: a\nsystem for secur e computation of face identi\ufb01cation, In:\nProceedings of the 31st IEEE Symposium on Security and\nPrivacy , 2010.\nPatterson David and Hennessy John, Computer\nOrganization and Design: The Har dwar e/Sof tware\nInterface , Mor gan K aufmann, San F rancisco, 2005.\nSaba A . and Manna N., Digital P rinciples and L ogic Design ,\nJones and Bartlett, 2010.\nSaltzer Jer ome H . and K aashoek M. F rans, Principles of\nComputer System Design: An Intr oduction ,\nhttp://ocw .mit.edu/r esour ces/r es-6-004-principles- of-\ncomputer -systemdesign-an-intr oduction-spring-\n2009/online-te xtbook/pr otection_open_5_0.pdf .\nSamsung har d drives, www.samsung.com .\nShen John P . and Lipasti Mikk o H., Moder n Processor\nDesign , McGraw-Hill, 2005.\nSmith James E. and Pleszun Andr ew R ., Implementing\nprecise inter rupts in pipelined pr ocessors, IEEE\nTransactions on Computers, 1988, 562\u2013573.\nSpansion Flash Memory, http://www .spansion.com .\nStallings W illiam, Computer Or ganization and Ar chitectur e,\nPearson Education, 2010.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1528, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "63343528-87fd-4645-a0e5-e398dda9038e": {"__data__": {"id_": "63343528-87fd-4645-a0e5-e398dda9038e", "embedding": null, "metadata": {"page_label": "861", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0344de18-80c6-4863-9e49-5fd173711df4", "node_type": "4", "metadata": {"page_label": "861", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "c7136a8ae685f96b159f746866f3d8e17553857ff2d22a6146497d599fafe218", "class_name": "RelatedNodeInfo"}}, "text": "Stallings W illiam, Cryptography and Network Security ,\nPearson P rentice Hall, 4th ed., 2006.\nTanenbaum Andr ew, Structur e Computer Or ganization ,\nPearson, 2006.\nUniversal Host Contr oller Interface (UHCI) Design Guide,\nhttp://download.intel.com/technology/usb/UHCI11D.pdf .\nUniversal peripheral interface slave micr ocontr oller (UPI-\n42), www.alldatasheet.com .\nUSB (universal serial bus), http://www .usb.or g/home .\nUSB 3.0 speci\ufb01cation,\nhttp://www .usb.or g/developers/docs/ .\nVahid F rank, Digital Design with R TL Design, VHDL, and\nVerilog , John W iley and Sons P ublishers, 2011.\nVray Jogn Shaley, Interpr ocess Communications in UNIX ,\nPrentice Hall, 2003.\nWakerly J. F ., Digital Design: P rinciples and P ractices , 4th\ned., P rentice Hall, 2006.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 761, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "217adf4e-81e4-42b3-84ce-53f2c9bf30b8": {"__data__": {"id_": "217adf4e-81e4-42b3-84ce-53f2c9bf30b8", "embedding": null, "metadata": {"page_label": "862", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4a34281-36db-4276-a05d-8e3334e4be2b", "node_type": "4", "metadata": {"page_label": "862", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "e6cd2ee303414f9c290448bab101a3b3591ff377ee81bfaaceadf4589db0623b", "class_name": "RelatedNodeInfo"}}, "text": "Index\n\u00a0\nPlease note that index links point to page beginnings from\nthe print edition. Locations are approximate in e-readers,\nand you may need to page down one or more times after\nclicking a link to get to the inde xed material .\n\u00a0\n2\u2019s complement number, 3\n3DNow instruction set, 20\n7400 chip series, 76\n7-segment display unit, 50\nA\nAccess contr ol list, 469\nAccess contr ol matrix, 470\nAccess contr ol, 469\nAccess point, 417\nAddress bus, 281\nAddress str obe, 380\nAddressing modes, 311\nAMD Opter on pr ocessor, 353, 458\nAMD Phenom pr ocessor, 353\nAMD pr ocessors, 307, 353", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 574, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1d72bc69-0073-4277-9b49-63aa41b44732": {"__data__": {"id_": "1d72bc69-0073-4277-9b49-63aa41b44732", "embedding": null, "metadata": {"page_label": "863", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1f10c0d4-df56-4482-be45-f706961b42d5", "node_type": "4", "metadata": {"page_label": "863", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b390c6a5328fe758292d9b5d6c9ae0ffc0bc74c1312a8885de469c07054e3054", "class_name": "RelatedNodeInfo"}}, "text": "AMD Quad FX platfor m, 299\nAnalog-to -digital (A/D), 9\nAntidependence, 353\nApplication pr ogramming interface, 544\nApplication speci\ufb01c IC (ASIC), 9, 75, 155\nArbitrator, 399\nARM Corte x-A8, 307, 357\nArray divider, 139\nASCII codes, 2\nAssembler dir ective, 318\nAsynchr onous inter rupts, 402\nAtomic bus access, 384\nAttestation identity k ey, 499\nAuthdata, 500, 501, 503\nAvailability security pr operty, 463, 504, 536\nB\nBandwidth, 64, 92, 282, 536\nBasic input/output system (BIOS), 384\nBell-Lapadula security policy, 472\nBi-dir ectional. See Bus\nBiased-e xponent, 5, 127\nBiba security policy, 472\nBinary -coded decimal (B CD), 50, 184\nBinding data to platfor m, 498\nBit-parallel design, 96\nBit-serial design, 97\nBlock car ry generate unit (B CGU), 105\nBlock cipher, 485\nBlock r eplacement, 442\nBootloader, 277, 390", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 810, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "813d1bbb-4c58-4bb4-b699-d3db1bf93829": {"__data__": {"id_": "813d1bbb-4c58-4bb4-b699-d3db1bf93829", "embedding": null, "metadata": {"page_label": "864", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "493e6a7d-088b-4892-8bab-10a13462b92c", "node_type": "4", "metadata": {"page_label": "864", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "5ed2013c46651945831fa60b5b9c3b4cb0d287c64dca7ef576e72fcb881d8479", "class_name": "RelatedNodeInfo"}}, "text": "Borrow look-ahead (BL A) subtractor, 108\nBorrow pr opagate subtractor (BPS), 108\nBranch history table, 390\nBranch pr ediction, 382\nBridge, 374\nBu\ufb00er -over\ufb02ow attack, 465, 534\nBulk USB data transfer, 398\nBus, 63\nBus master, 400\nC\nCache coher ency pr otocol, 435\nCache contr oller, 444\nCache hit, 429\nCache line, 429\nCache miss, 429, 445\nCapability -list access contr ol, 470\nCapacity cache miss, 435\nCarry generate unit (CGU), 101\nChecksum, 494, 515\nChinese W all security policy, 473\nCipher, 485\nCipher MA C, 496\nCipher Block Chaining (CB C), 487\nCipherte xt, 485\nClark- Wilson security model, 473\nClock cycle, 155\nClock period, 155\nClock signal, 146\nClock sk ew, 156, 198\nClock-to -output. See Clock-to -q", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 706, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ce894004-cb88-4347-a853-95bef5565f35": {"__data__": {"id_": "ce894004-cb88-4347-a853-95bef5565f35", "embedding": null, "metadata": {"page_label": "865", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b2ef41ec-a7dc-4e17-81f7-6b0a72664ed7", "node_type": "4", "metadata": {"page_label": "865", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "734f589aeb619fb296fba40fa11b89f7458c2d0ed917faa8362aa73122da471b", "class_name": "RelatedNodeInfo"}}, "text": "Clock-to -q, 156\nCloud computing, 25\nCluster, 25\nCode injection, 463\nCold cache miss, 435\nCommunication interface, 448\nComparator logic, 138\nComple x instruction set computer (CISC), 225, 315\nComputational attack, 475\nCon\ufb01dentiality security policy, 463\nCon\ufb01gurable CPU, 218\nCon\ufb01gurable logic block (CLB), 76, 178\nCon\ufb01guration USB descriptor, 418\nCon\ufb02ict cache miss, 435\nConte xt switch, 451\nContr ol bus, 281\nContr ol memory, 227\nContr ol unit, 6, 215\nContr ol USB data transfer, 418\nCoordinate r otation digital computer (CORDIC), 20, 235\nCorrupter attack, 475\nCounter mode cipher, 488\nCryptography k ey str eam, 485\nCryptography k ey whitening, 497\nCryptopr ocessor, 484\nCycles per instruction (CPI), 335\nD\nData bus, 281\nData cache, 427\nData dependence, 353", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 760, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6719e7ff-c1e4-4e06-9e39-a6f51f86f7d0": {"__data__": {"id_": "6719e7ff-c1e4-4e06-9e39-a6f51f86f7d0", "embedding": null, "metadata": {"page_label": "866", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b7a1b02-538a-4df2-8207-32d167042ea1", "node_type": "4", "metadata": {"page_label": "866", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b99ce9b3c1fe7eb0663860b26324f45699c302d9ef081557c51049d29c7890ee", "class_name": "RelatedNodeInfo"}}, "text": "Data Encryption Standar d (DES) cipher, 487\nData-parallel computation, 22\nData path, 6, 215, 271, 282, 305, 374, 435, 464\nData storage thr ough har dwar e, 487\nDeMor gan\u2019s theor em, 34\nDenor mal FP number, 5, 128\nDeter ministic F SM, 174\nDevice contr oller, 374\nDevice contr oller interface (DCI), 9, 374\nDevice driver r outine, 353\nDevice USB descriptor, 418\nDigital rights management, 484\nDigital signal pr ocessor (DSP), 9\nDigital-to -analog (D/A), 9\nDigitizing analog signal, 2\nDiscr etionary access contr ol, 470\nDMA channel, 400\nDMA transfer table, 400\nDouble data rate (DDR) SDR AM, 294\nDRAM refresh cycle, 276\nDual principle, 37z\nDynamic ener gy, 231\nDynamic memory (DR AM), 275\nDynamic power consumption, 233\nE\nEdge trigger ed \ufb02ip-\ufb02op, 151\nE\ufb03ciency, 223, 279, 298, 308\nEmbedded systems, 9, 374\nEmitter attack, 475\nEndpoint USB descriptor, 417", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 851, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "201afeb1-ee4c-4d0e-8e6a-ce8e766ee757": {"__data__": {"id_": "201afeb1-ee4c-4d0e-8e6a-ce8e766ee757", "embedding": null, "metadata": {"page_label": "867", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1186a45a-8103-4cea-9d98-6a1fc4c304b9", "node_type": "4", "metadata": {"page_label": "867", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "2a833f300c147485704d78688a34ffe584a6370840e654497f72a8e04e967f54", "class_name": "RelatedNodeInfo"}}, "text": "Error cor recting code (ECC) SDR AM, 510\nError detection and cor rection, 192, 198\nEspresso minimization sof tware, 54\nEssential prime implicant (EPI), 46\nExceptions, 401\nExter nal cache hit, 445\nF\nFair memory access scheduler, 536\nFalse-sharing cache miss, 444\nFault tolerant F SM, 174\nFeatur e size, 1\nField pr ogrammable gate ar ray (FPGA), 9, 155\nFIFO bu\ufb00er, 185\nFirmwar e, 351, 484\nFlame virus, 471\nFlash memory, 274, 390\nFloating-point (FP) number, 5, 126\nFloating point operations per second (FL OPS), 24, 224\nFloating point unit (FPU), 98\nForwar d branching, 344\nForwar ding unit, 330\nFrame, 398, 416\nFront-side bus (F SB), 376\nFully associative mapping cache, 433, 456\nFused operation, 217\nG\nGlitch, 60, 147\nGlobal branch pr edictor, 352\nGraphic pr ocessing unit (GPU), 9, 20, 269", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 789, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "508af3d3-1ecd-4b74-bfac-25e30ee95d28": {"__data__": {"id_": "508af3d3-1ecd-4b74-bfac-25e30ee95d28", "embedding": null, "metadata": {"page_label": "868", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4c40406a-069f-48db-8ee5-adb03ee42bca", "node_type": "4", "metadata": {"page_label": "868", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "bb483d413598f505a61a5bc469f5d4f4461ac0842535481b84e694ea9202bc2c", "class_name": "RelatedNodeInfo"}}, "text": "Gray code, 184\nH\nHamming code, 192, 510\nHamming distance, 192\nHardwar e backdoor, 473\nHardwar e description language (HDL), 2, 16\nHardwar e inter rupts, 401\nHardwar e Trojan, 473\nHash value, 494\nHashed MA C, 497\nHazar d. See Glitch\nHazar d unit, 332\nHeter ogeneous cor es, 22\nHigh impedance, 61, 284\nHit ratio, 431\nHomomorphic computation, 520\nHost contr oller interface, 9, 374\nHot-spot, 449\nHybrid F SM, 172, 185\nHyperT ransport inter connect, 378\nI\nI/O Contr oller Hub, 377\nI/O ports, 9, 374\nImplicant, 46\nImplicit latch, 158, 179\nInformation \ufb02ow tacking, 464, 535\nInput port, 387\nInstruction cache, 427\nInstruction cycle, 310", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 629, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e0c11d94-56bb-448f-847e-64084c955fec": {"__data__": {"id_": "e0c11d94-56bb-448f-847e-64084c955fec", "embedding": null, "metadata": {"page_label": "869", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aacaf8c6-37c1-4aed-9725-5a09eddee5fd", "node_type": "4", "metadata": {"page_label": "869", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "f876c470cf4f0da68a49ee47d48875e6f9afb9dcb2e9a1d39d9546d7a476d4c9", "class_name": "RelatedNodeInfo"}}, "text": "Instruction pipeline, 307\nInstructions per cycle (IPC), 308, 340\nIntegrated chip, 1\nIntegrity security pr operty, 463\nIntel Cor e i7, 21, 23, 308, 358\nIntel Itanium pr ocessor, 21, 356\nIntel P entium IV pr ocessor, 360\nIntel X eon pr ocessor, 430, 442\nInterface USB engine, 423\nInteger unit, 98\nInterleaving, 295, 300, 341\nInterrupt acknowledge, 407\nInterrupt-driven I/O, 393\nInterrupt handler, 393, 522\nInterrupt priority, 393\nInterrupt r equest, 395\nInterrupt structur e, 393\nInterrupt USB data transfer, 398, 420\nInterrupt vector table, 405\nInvalidation cache pr otocol, 444, 446\nIsochr onous USB data transfer, 398, 417\nJ\nJK \ufb02ip-\ufb02op, 157\nK\nK-Map minimization rules, 46\nKeyboar d key matrix, 391\nKeyed-hash, 496, 500, 510\nL\nLatency, 299, 375, 378, 385", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 754, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "baa89533-a06a-40ab-84a6-68c1310d4560": {"__data__": {"id_": "baa89533-a06a-40ab-84a6-68c1310d4560", "embedding": null, "metadata": {"page_label": "870", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2daa7317-af33-468f-99a1-dfc61f8f03fb", "node_type": "4", "metadata": {"page_label": "870", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3aeb6ac7debb325256a195a2c419439fbf8933d0f180096f2e0646fa6a1dfadb", "class_name": "RelatedNodeInfo"}}, "text": "Leakage cur rent, 234, 276\nLeaking infor mation, 476, 513, 516, 522, 535\nLevel 1 cache, 428\nLevel 2 cache, 428\nLevel 3 cache, 430, 442\nLine memory, 435\nLinear feedback shif t register (LF SR), 485\nLocal memory, 299\nLocal branch pr edictor, 350, 392\nLogic gates, 10\nLogic pr oduct ter m, 34\nLogic sum ter m, 36\nM\nMachine instruction, 8, 311\nMandatory access contr ol, 470, 473, 484\nMealy F SM, 172\nMemory access time, 289\nMemory authentication, 551\nMemory banks, 279\nMemory cell, 274\nMemory contr oller hub (MCH), 374\nMemory cycle, 289\nMemory management unit (MMU), 452\nMemory -mapped I/O, 386\nMemory r ow activation, 277\nMessage digest, 496\nMessage passing system, 24\nMetastability, 152\nMicro-operation, 227\nMicrocontr oller, 374, 390", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 734, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "abd526ab-6ff8-4ddb-bacc-0c1714e20726": {"__data__": {"id_": "abd526ab-6ff8-4ddb-bacc-0c1714e20726", "embedding": null, "metadata": {"page_label": "871", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6f8e84c0-c369-4938-ab0c-8d7113633710", "node_type": "4", "metadata": {"page_label": "871", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "b4db8716cc3c631ae262264d10ea431abf78872f49c78fd39b2273d1cc0c335d", "class_name": "RelatedNodeInfo"}}, "text": "Microinstruction, 227\nMicroprogram, 227\nMicroprogrammed contr ol, 225\nMillion instruction per second (MIPS), 224\nMIPS pr ocessor, 225, 307, 316, 336\nMiss ratio, 431\nMnemonic opcode, 310\nMoor e FSM, 172\nMoor e\u2019s law, 1\nMotherboar d, 377\nMulti-lateral security policy, 472\nMulti-level security policy, 472, 503\nMultiple instruction multiple data (MIMD), 22\nMultipr ogramming, 401, 450\nMultithr eaded pr ogramming, 22, 308, 362\nMultithr eading, 22, 341\nN\nNational Institute of Standar ds and T echnology (NIST), 487,\n498\nNet-list, 17, 75\nNetwork adaptor, 386\nNon-computational attack, 475\nNon-r eturn-to-zero inverted (NRZI), 212, 270, 415\nNon-unifor m memory access (NUMA), 378, 448\nNon-volatile memory, 274\nNonce, 499\nNormal FP number, 5, 128\nNormalizing FP r esult, 133\nNorthbridge, 377\nO", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 788, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e795c7ee-c711-4def-8fd4-6113828beebe": {"__data__": {"id_": "e795c7ee-c711-4def-8fd4-6113828beebe", "embedding": null, "metadata": {"page_label": "872", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f392f1d2-fa9e-4f96-bdf5-95a978d8d461", "node_type": "4", "metadata": {"page_label": "872", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "ef78f98289fe4646f3043747c2f4833908f30f15a3986f0c0504d199fb8f2c9f", "class_name": "RelatedNodeInfo"}}, "text": "Object code, 310\nOut-of-order e xecution, 357\nOutput dependence, 353\nOutput port, 387\nP\nPacket, 283, 415\nPage fault, 401, 430\nPage mode access, 279\nPaging, 430\nParity bit, 195\nParity generator, 198\nPass transistor, 275\nPhysical attacks, 25\nPhysical memory, 429\nPhysically addr essed cache, 458, 521\nPipeline chart, 220\nPipeline \ufb02ush, 331\nPipeline stage, 220\nPlacement-and-r oute, 79\nPlug and play devices, 373\nPoint-to -point communication, 64, 378\nPort-mapped I/O, 346\nPrecise inter ruption, 361\nPredicated instruction, 356, 535\nPrime implicant, 46\nPrimitive gates, 80\nPriority encoder, 73\nPrivate k ey, 489\nProcess switch, 452\nProcess, 451", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 641, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3a0f953c-658b-42d6-ad53-ea3176d35496": {"__data__": {"id_": "3a0f953c-658b-42d6-ad53-ea3176d35496", "embedding": null, "metadata": {"page_label": "873", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "71cedad1-8bb6-4eb7-b829-6019b5930533", "node_type": "4", "metadata": {"page_label": "873", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "fc5a762a8d4130ee207ea06fbb4d08afc47a49e27c26504f5489d6b2ea1a20cf", "class_name": "RelatedNodeInfo"}}, "text": "Processing cor e, 2\nProgram counter . See Program pointer\nProgram pointer, 318\nProgrammable logic device (PLD), 75\nProgrammed I/O, 393\nPropagate-generate unit (PGU), 101\nPseudo instruction, 318\nPublic k ey, 489\nPublic k ey infrastructur e (PKI), 491\nQ\nQuickP ath inter connect, 378\nQuine-McClusk ey algorithm, 51\nR\nRandom access memory (R AM), 274\nRandomized encryption, 516\nRead af ter write (R AW) hazar d, 353\nRecipr ocal division algorithm, 139\nRedundant ar ray of independent disks (R AID), 385\nRegister r enaming, 357\nRegister transfer language (R TL), 16\nRegister window, 309\nRemote memory, 299\nReplay attack, 481, 504, 514, 519\nRestoring division algorithm, 124\nReverse polish notation, 313\nRipple car ry adder (R CA), 99\nRotations per minute, 385\nRounding er ror, 133, 217\nS", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 783, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be9c760c-11e6-41fe-8c6e-a6b3e334f7b4": {"__data__": {"id_": "be9c760c-11e6-41fe-8c6e-a6b3e334f7b4", "embedding": null, "metadata": {"page_label": "874", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d5097fce-5eb6-476e-a268-d1947633d02e", "node_type": "4", "metadata": {"page_label": "874", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "3f8c005d59a58dc41d5df44bdf1ec32dfe08fd6eebaf8186090283201946a0b7", "class_name": "RelatedNodeInfo"}}, "text": "Sampling rate, 2\nScan code, 392\nScore boar ding, 358\nSecret root k ey, 499\nSecur e execution envir onment, 484, 509\nSecur e execution mode (SXM), 484, 509\nSecur e root hash, 504\nSecurity k ey storage, 499\nSeek time, 385\nSense ampli\ufb01er, 277\nSensitivity list, 86, 158\nServer overload, 464\nSession k ey, 512\nShared cache, 430\nShared memory system, 22\nShoot-thr ough cur rent, 232\nSide channel attacks, 474\nSign e xtension, 4\nSignal chasing, 148\nSignal fall time, 58, 234\nSignal handshaking, 381\nSignal polarity, 31\nSignal rise time, 58, 234\nSignatur e security k ey, 499\nSigned magnitude number, 3, 127\nSilicon Graphics\u2019 SGI Altix 4700 system, 299\nSingle instruction multiple data (SIMD), 20, 98, 218, 308\nSingle instruction single data (SISD), 22\nSnoop contr oller, 444\nSoftware inter rupt, 401\nSouthbridge, 377", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 809, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae8ac654-4fd5-4328-8153-c6897ac58924": {"__data__": {"id_": "ae8ac654-4fd5-4328-8153-c6897ac58924", "embedding": null, "metadata": {"page_label": "875", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5fc82b6e-8c20-47c7-ba85-5db4fcd5dc99", "node_type": "4", "metadata": {"page_label": "875", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "8d18ed59292d157cb040e6d09fcc26c1c02aee6dc87a45464dd05349f1a48861", "class_name": "RelatedNodeInfo"}}, "text": "Sparc processor, 307, 344, 345\nSpatial locality, 431\nSPEC CPU2006, 224\nSPEC89, 352\nSpeculative e xecution, 356, 529\nSPECviewperf, 224\nSpeedup, 223\nSplicing attack, 481, 509\nSplit transaction, 383\nSpoo\ufb01ng attack, 481, 509, 534\nStatic memory, 275\nStatic power consumption, 234\nStatus change USB endpoint, 417\nSteaming SIMD e xtension (SEE), 20\nStream cipher, 485, 486\nStuxnet malwar e, 472\nSuperpipelining, 340\nSuperscalar pr ocessor, 340\nSynchr onizing \ufb02ip-\ufb02op, 203\nSynchr onous inter rupts, 401\nSystem- on-chip (SoC), 9, 378\nT\nT \ufb02ip-\ufb02op, 157\nTag memory, 435\nTemporal locality, 431\nTest-bench, 79\nThermal design power, 23, 235\nThird-party modules, 464\nThread, 22, 361\nThread-level parallelism (TLP), 363", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 702, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "22798472-40af-4920-8096-e39a927e4ef7": {"__data__": {"id_": "22798472-40af-4920-8096-e39a927e4ef7", "embedding": null, "metadata": {"page_label": "876", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "db5a0812-25bf-43e2-b40c-33f557a50f2a", "node_type": "4", "metadata": {"page_label": "876", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "d139239ba3033c42ad1b3b8deaf2e5e5d8d50b58700b6269b4ffcdaf4e990156", "class_name": "RelatedNodeInfo"}}, "text": "Thread switch, 452\nThreat vector, 509\nThroughput, 24, 223, 307\nTime slice, 402\nTiming attack, 474, 489\nTransceiver . See Bus\nTransient fault, 166\nTransistor, CMOS 12\nTrap, 401\nTrue color mode, 2\nTrue-sharing cache miss, 444\nTrusted computing base (T CB), 465, 508\nTrusted \ufb01r mwar e module, 484\nTrusted har dwar e module, 484\nTrusted platfor m module, 484\nTrusted sof tware module, 484, 536, 551\nU\nUnicode, 2\nUnifor m memory access (UMA), 378, 430\nUniversal serial bus (USB), 9, 374\nUpdate cache pr otocol, 442\nV\nVertex transfor mation, 20, 261\nVirtual memory, 319, 429\nVirtually addr essed cache, 452\nVolatile memory, 274\nVon Neumann machine, 7\nW\nWait cycle, 380", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 662, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3db4c6fb-c1d6-438b-8246-31d404fbdda6": {"__data__": {"id_": "3db4c6fb-c1d6-438b-8246-31d404fbdda6", "embedding": null, "metadata": {"page_label": "877", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1c3b5c0e-b2e6-4d09-9b4a-4ef3bd5af088", "node_type": "4", "metadata": {"page_label": "877", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}, "hash": "0d6896cc2a197f9d01f5ca82caa2eff61ec9898906e1bbfe7f3742dbe2286e66", "class_name": "RelatedNodeInfo"}}, "text": "Wait queue, 401\nWait state, 380\nWarehouse computing, 25\nWired-logic, 62\nWrite af ter read (W AR) hazar d, 353\nWrite af ter write (W AW) hazar d, 353", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 148, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"629f60a1-f37d-45e2-a7c9-d84d66a80152": {"node_ids": ["5d6e5a9c-271c-49ce-ab9a-fddc20ed5e62"], "metadata": {"page_label": "1", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0a44df04-7921-4620-b824-69101bc14674": {"node_ids": ["6fa431a6-8ebd-4f08-827e-2d202a04ff0e"], "metadata": {"page_label": "2", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "994f125a-7045-404c-821b-dc76ffe0d2ad": {"node_ids": ["a3eafd15-e127-49d6-89d6-f631c5f78bac"], "metadata": {"page_label": "3", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6fd1610d-3ac2-4bbd-98cd-40f1d7b33f19": {"node_ids": ["278ae817-e588-4a02-8320-81c9c79cf502"], "metadata": {"page_label": "4", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e753f969-540b-4f08-924f-c72d4bca31d2": {"node_ids": ["e4ec6e91-8366-4765-a2b7-3b125ccc4265"], "metadata": {"page_label": "5", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e79d47b7-78cc-4bb7-b114-605a6bca14e0": {"node_ids": ["f07a1b6c-bd82-4485-a0ed-a33dc1fb549e"], "metadata": {"page_label": "6", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f1d7e2a7-a732-4805-ad02-e0ed1173a52d": {"node_ids": ["9e5261d5-a5b4-4341-adce-b61575266a9d"], "metadata": {"page_label": "7", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "242809b8-d85d-4fc9-b3c4-0995e1c77fe9": {"node_ids": ["c119bb47-5d6c-452f-b457-449038172449"], "metadata": {"page_label": "8", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b718dbba-4346-417d-8362-4ab55b0a1d65": {"node_ids": ["204c3d99-619a-4861-835f-b3f294f92f17"], "metadata": {"page_label": "9", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "91f8b85c-b71e-4bb5-8a4d-0061d53b1f2c": {"node_ids": ["60bd1459-baf5-463d-accb-159ed54802d4"], "metadata": {"page_label": "10", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8aed8f3d-2b11-485f-9d76-e7af0668c4eb": {"node_ids": ["49190e58-19c7-4abb-afb1-3b3ae330d722"], "metadata": {"page_label": "11", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "388409aa-f003-4090-8b99-c0dde374275e": {"node_ids": ["9c8e5b78-c728-479b-b17d-79da7138ec06"], "metadata": {"page_label": "12", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e2d923a0-2ae0-40de-901e-d26d417024dd": {"node_ids": ["e2b761b1-8ed3-4833-9dc0-b5c240b12c92"], "metadata": {"page_label": "13", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b85c2d9e-6d2f-44da-82ac-981da3d7d9b6": {"node_ids": ["501ce357-7736-4134-8792-e882cbe518b4"], "metadata": {"page_label": "14", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ff696c81-945f-4c5d-bce4-0dd189b445c4": {"node_ids": ["2e008efc-dfa6-4d65-ac60-ba50fa003b3d"], "metadata": {"page_label": "15", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b01f9da2-c494-4419-8198-5d604e30bb2d": {"node_ids": ["23f90950-cd67-4ee9-b3a9-2237c8ff02aa"], "metadata": {"page_label": "16", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1a8cfaba-79d6-4b2c-87a1-fd12719ac2a3": {"node_ids": ["4fb1472d-121c-4190-9a9b-5a6a20e24a16"], "metadata": {"page_label": "17", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "38a957ac-019f-4fe9-a138-c68f13df5f20": {"node_ids": ["cc5012a3-f0e2-47fe-ae41-7c66f8b939e1"], "metadata": {"page_label": "18", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6157ea44-8759-4e1f-8f5e-03e7522cf4eb": {"node_ids": ["b520e438-0065-4259-acad-57a238341bf5"], "metadata": {"page_label": "19", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3495425c-5714-47d8-891a-4bfe10fa6362": {"node_ids": ["19700db9-af11-4d80-80bc-d7b26f6f33ef"], "metadata": {"page_label": "20", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8762bcf9-9473-4885-96c7-2be3eaf9c967": {"node_ids": ["0e50a100-825c-47b3-b0c1-1587e58c0981"], "metadata": {"page_label": "21", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "28d7bb6b-7f9c-492b-a42b-db882f445dae": {"node_ids": ["a8a28c92-984c-4481-b1c6-20abe6fff303"], "metadata": {"page_label": "22", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4a5b617e-66c0-481d-861c-66e8af2e915d": {"node_ids": ["f21ff536-0a13-44c4-a834-4cf7bf4730ac"], "metadata": {"page_label": "23", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "28d33d61-805c-4010-a3a0-31a7e4ee26ed": {"node_ids": ["f18953fb-eba5-4406-a7cd-3fee361422b9"], "metadata": {"page_label": "24", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "cf52630a-d5c7-4b29-b984-57c36e62076c": {"node_ids": ["fd5991fb-494f-4fc5-968e-b7b4cacf9905"], "metadata": {"page_label": "25", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b6b59816-3770-4d69-a1e4-e5da08e3c866": {"node_ids": ["11507109-bad0-4d43-be2e-17433d92825d"], "metadata": {"page_label": "26", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1d324d5a-cff7-4cfb-943e-93d4e6a26302": {"node_ids": ["fa4bba8f-94c0-4935-8712-6757b9dfd1d7"], "metadata": {"page_label": "27", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ad4ee837-15a5-40e0-b683-3fa32b023f89": {"node_ids": ["71ab5fd4-359d-45da-80dc-b98a68564616"], "metadata": {"page_label": "28", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9738033e-e061-48d5-90f3-709abb0c38ee": {"node_ids": ["f01705c6-83be-4f20-8b90-a321cf98c9d8"], "metadata": {"page_label": "29", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5e00bb1b-8aa2-4d70-8526-d96b960536c9": {"node_ids": ["2f297048-8dc9-45d0-b699-c611fbd70cf1"], "metadata": {"page_label": "30", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "350dad45-2353-44c4-9f00-164cca9b0adf": {"node_ids": ["d9d7c3a3-87a3-4619-81a5-d7915b67cafa"], "metadata": {"page_label": "31", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "89343d67-09db-4f1f-9ae9-d43b48307ea8": {"node_ids": ["4d4c3e34-bb4c-4230-ae38-aceb3a1be124"], "metadata": {"page_label": "32", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f341a2ef-a1f7-4239-9524-77d0c50b5d6f": {"node_ids": ["a5bfdc05-5e01-44e1-8dd2-74710cf659fa"], "metadata": {"page_label": "33", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a9a6cac3-58b7-4df0-a1de-5fee6cef8053": {"node_ids": ["01f09f93-c4d9-43a6-a79d-557e13ba95ab"], "metadata": {"page_label": "34", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e5cbc491-0678-48b8-b5cc-a316ac6334b0": {"node_ids": ["327b254a-2e38-4396-8cf2-7496721d5f62"], "metadata": {"page_label": "35", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "378ff420-6be7-47cc-8798-4026aaab998a": {"node_ids": ["df4c06a9-7255-4bce-90d0-e1b462aaa0d1"], "metadata": {"page_label": "36", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1643a85e-7463-425e-84c9-96535274e302": {"node_ids": ["e9a25836-82c0-464d-aa8c-9270f2dd7b8d"], "metadata": {"page_label": "37", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "62cfd6e9-3382-4e50-bc3d-f199bfc81621": {"node_ids": ["17ed6b7f-f8f8-4e2d-98d8-dcc61d2830fa"], "metadata": {"page_label": "38", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ab53415b-088d-42a5-82e1-1cca55ce7de8": {"node_ids": ["ea60d068-2080-4b88-9375-6fc8e79b1fac"], "metadata": {"page_label": "39", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7550842d-33b0-40c1-8ba7-c3e2ebdb933a": {"node_ids": ["a35bb5f6-02a6-44ca-907f-999465778383"], "metadata": {"page_label": "40", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1ee339c3-623c-4513-8dc7-66d228624a00": {"node_ids": ["5f7834ab-d273-4596-a673-a4069e721c68"], "metadata": {"page_label": "41", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5f7d0cb2-972f-4648-9f12-d02878482c4d": {"node_ids": ["2c022f5a-d508-4ac5-84d1-452cbef2f54e"], "metadata": {"page_label": "42", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4aedbd18-9196-4cc0-bdc1-afdd02995c73": {"node_ids": ["2596b1c0-af72-4317-9543-89ff7ef42cd7"], "metadata": {"page_label": "43", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "46ce888b-17d2-464c-8ac7-f0fb720b929a": {"node_ids": ["bd652199-b589-442b-91bc-a4359b65f707"], "metadata": {"page_label": "44", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ceaa6c69-4e31-45fd-9610-e8e962d55c4f": {"node_ids": ["ab316739-0810-4d9d-8941-8f92930ad56d"], "metadata": {"page_label": "45", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e20bb027-906b-4ce8-9e38-6e15e0d83105": {"node_ids": ["48eed796-ecdf-45e0-a4f7-bf8c059ac219"], "metadata": {"page_label": "46", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7c06bb48-f661-44c3-85dd-ca1fa62e24a6": {"node_ids": ["44b800f5-1ffa-4fa6-87a4-d8ed50f3d61f"], "metadata": {"page_label": "47", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5ce3f1ba-5adc-49b9-97a3-b024b79ea91a": {"node_ids": ["5dc4764b-a806-4647-b7d6-48c6ac1a4f34"], "metadata": {"page_label": "48", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b463850d-22f6-4d94-8448-0509305ef7dc": {"node_ids": ["8a0fb68a-fb31-498d-a6ba-9e58ebd00de1"], "metadata": {"page_label": "49", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "82a92e26-8841-421e-b27c-b8f9ae666284": {"node_ids": ["bd435443-63e3-4c10-8f37-45491f9ccd79"], "metadata": {"page_label": "50", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f08c4ce9-910a-49a3-be9c-26ef3374fb4a": {"node_ids": ["af123190-4f37-4fa3-80c2-0f82da44d1ff"], "metadata": {"page_label": "51", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4b50bda4-facd-4247-870e-d56cf27c5536": {"node_ids": ["5c2e04ab-2667-4163-8233-ebd3eb51436d"], "metadata": {"page_label": "52", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "528b80c6-c307-46fb-b541-d277465f5409": {"node_ids": ["0b381fea-f785-4bba-8354-6f6eb4d37330"], "metadata": {"page_label": "53", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a7345415-6734-43db-93a1-81d9e4acf434": {"node_ids": ["f30c2c4a-bb69-4948-a647-f7fc073de20b"], "metadata": {"page_label": "54", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1a53cc2f-980f-4dc5-99d6-8533bb450753": {"node_ids": ["4fd72546-0d79-49ea-b2cb-6857bba9a812"], "metadata": {"page_label": "55", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ef8a6ebb-70c4-409c-8479-e327a494e3c7": {"node_ids": ["52acc970-4701-46e8-8428-f9bcf250041c"], "metadata": {"page_label": "56", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6842edef-b877-4756-8790-9ec5c3b3720a": {"node_ids": ["ca031c89-d67a-43be-b884-cd3285c3a72f"], "metadata": {"page_label": "57", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e5471883-542f-4eff-8cb0-1310aecaf2b1": {"node_ids": ["1ee6a791-61e7-4fef-8e60-4e98f5f3542c"], "metadata": {"page_label": "58", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "dc517f41-dafa-44d7-b82c-17a26d138a11": {"node_ids": ["4cacb3c3-99d1-4c3d-bfa9-c85e8f4f0f31"], "metadata": {"page_label": "59", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "66328e89-b0fd-4f94-92ad-6c665df528ab": {"node_ids": ["4b140f54-0357-491e-af13-a030d6c6446c"], "metadata": {"page_label": "60", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "84ecf00c-7e22-4786-9806-62847f1b8d9c": {"node_ids": ["4bb6380c-8b4f-4712-92aa-e3985f67b239"], "metadata": {"page_label": "61", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "435b278e-ed20-4580-bb2c-cc745ad35184": {"node_ids": ["3684d2b2-528b-4593-bbeb-a444d2bae36a"], "metadata": {"page_label": "62", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8fb47794-89f0-47ab-83d6-f62107bb0020": {"node_ids": ["fbb19643-b3c3-4673-90b4-468f89b4da6e"], "metadata": {"page_label": "63", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "330bab7e-cbd9-4dc2-822d-d12f866cbe37": {"node_ids": ["c9096daf-5b8e-461b-8a54-0fd21b3ccf56"], "metadata": {"page_label": "64", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0aaee9aa-73a1-45fb-85f5-790b29b2db05": {"node_ids": ["97e95a14-f9d7-45e2-9eb7-ae4878d072a3"], "metadata": {"page_label": "65", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "dae8a37e-8c93-477d-ae75-5bafdef17f17": {"node_ids": ["1bfa98f8-4bb7-4e56-b348-e96c05ded3b5"], "metadata": {"page_label": "66", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ab1718f4-ea57-42d8-992a-5bc469317a0d": {"node_ids": ["bf9057a9-810e-40d6-bbd9-5badfe2a3873"], "metadata": {"page_label": "67", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b5c99ce6-84e4-4e9b-b50e-e60429e416c9": {"node_ids": ["59404b79-d1d1-4752-8545-a6e1a855cdb6"], "metadata": {"page_label": "68", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c17643a5-cfb4-4cc3-bc73-0f9092552578": {"node_ids": ["9f8dd68e-9e7d-4c3e-94e7-3240a4c00c2b"], "metadata": {"page_label": "69", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "351d57c5-ff1b-4231-9566-744521573933": {"node_ids": ["1b345c2e-59bc-4087-8df5-0adb4a429518"], "metadata": {"page_label": "70", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7863bb32-00c6-40a3-a6fe-12ae2f4f351e": {"node_ids": ["5b0d3979-4929-4275-abe8-6caffcad2839"], "metadata": {"page_label": "71", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "fe40bc78-0ead-44ee-9816-2f160a50b9b2": {"node_ids": ["a4046ec7-8a26-43cf-8b1e-dd37838c3cee"], "metadata": {"page_label": "72", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ab7d288d-ecc5-43cc-8dbb-80623a56505c": {"node_ids": ["fc028865-6237-4ccf-8cf7-a748e6a2023b"], "metadata": {"page_label": "73", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "332b4bae-4ee8-4c57-be18-19aa34afd4e2": {"node_ids": ["9e277237-7e59-4da4-a144-296b12424889"], "metadata": {"page_label": "74", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ae6c4b9f-d5dc-4a94-8f17-377d82863bb0": {"node_ids": ["b5f368ec-1089-4b69-b333-a7f9224f4b52"], "metadata": {"page_label": "75", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "dcfd519e-5d22-4ce4-8508-c3b9f65a1a86": {"node_ids": ["9e8ed669-25b4-42bb-a1f2-645b3bbecd16"], "metadata": {"page_label": "76", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "09880d95-5468-4783-9494-6f0ab61b510d": {"node_ids": ["3f845c34-5a90-43bf-af68-47db7b602726"], "metadata": {"page_label": "77", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a551cd23-f505-4d1d-9e8f-fb25efa74964": {"node_ids": ["a5ec0108-68d2-435f-9fe8-5559e989197f"], "metadata": {"page_label": "78", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4022ebb5-409c-439f-96dc-9cf38602d3b8": {"node_ids": ["07cef8c7-8037-4e99-b867-e7a6a75f0048"], "metadata": {"page_label": "79", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ff7fbb4c-c0a1-4009-a3b1-5267e2423882": {"node_ids": ["d8b04a2e-91aa-437c-a8dc-1a1db48d981a"], "metadata": {"page_label": "80", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "23802fd5-9f80-4b27-99a1-5e14cef7e0b8": {"node_ids": ["777747a3-a14a-40dc-8980-56b65fa5be12"], "metadata": {"page_label": "81", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "369e441d-40fd-4a08-8fb0-ec7529b99608": {"node_ids": ["04652c64-46e3-4497-b9ac-d717129219d8"], "metadata": {"page_label": "82", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "50db8e63-e50a-4394-9378-ab9e93882b5a": {"node_ids": ["68cf710f-755c-40ea-98b3-1bd0c3ed7172"], "metadata": {"page_label": "83", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b603ea07-9f11-4e53-ab1a-b1b752129b96": {"node_ids": ["30cc1e12-6df4-4705-9a4e-6034499e38f1"], "metadata": {"page_label": "84", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "97c798e6-3503-4a34-be16-b7bea0112ada": {"node_ids": ["cf957e74-7308-4676-a58d-d0cad7c38724"], "metadata": {"page_label": "85", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "bdb3d118-c3e5-470b-b90c-b79de6090700": {"node_ids": ["3b094a16-4e4c-432c-b393-d75173ab0a22"], "metadata": {"page_label": "86", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ed0aa928-2a23-4ac1-a565-84108dc36ab7": {"node_ids": ["ab6c115d-7eea-452f-882d-5c60e1f70eeb"], "metadata": {"page_label": "87", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4d59de42-2c2b-408a-a0de-5c2fe3af7beb": {"node_ids": ["d1359510-8c38-4db6-a819-3a62990ed84b"], "metadata": {"page_label": "88", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2314cbb0-f279-4d22-a1a6-5f6d1d1aa1b0": {"node_ids": ["5829a833-de40-4aa1-bb48-fa6220624f35"], "metadata": {"page_label": "89", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "eb0ba338-007d-4c5a-bac5-e4502d44b1be": {"node_ids": ["6cacef4e-e7d0-4741-ac60-1e39ba5a4525"], "metadata": {"page_label": "90", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c4ba1e8b-3eeb-4f81-8996-b36b1c8b2abb": {"node_ids": ["313831b9-38b8-4617-ab66-029f5454533a"], "metadata": {"page_label": "91", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "287fc8aa-839a-4a17-84c2-c8177a2b15e0": {"node_ids": ["bc1df260-7248-4d17-b0c0-199aedb080df"], "metadata": {"page_label": "92", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a21a626d-d435-4528-b4c0-20264d82c6fc": {"node_ids": ["2656504e-b261-450f-a88e-2fa91d1f01e1"], "metadata": {"page_label": "93", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "56f6a72f-e0e3-47c9-a9da-4c11978d3e41": {"node_ids": ["ea22db90-0651-44e0-b3f0-3f317eeee65b"], "metadata": {"page_label": "94", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2a180203-d19e-4d3e-bc77-d7d09d2ab466": {"node_ids": ["ec211bd9-47d6-4e71-a0f0-06e027cbb023"], "metadata": {"page_label": "95", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b2dd8d90-9fd6-4f28-9b92-6a143da02960": {"node_ids": ["9ba02970-4214-4f80-87ec-59f4bafdc75c"], "metadata": {"page_label": "96", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5c12f777-c88e-459a-ba8f-5d95f41d6c33": {"node_ids": ["92618ffb-7a19-4731-a593-98ccaab5d9c0"], "metadata": {"page_label": "97", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "34cbdfc8-3b8c-436c-bee7-75e6fc34bcf0": {"node_ids": ["5b8b0096-291c-4fd9-b1c1-e01d98633c35"], "metadata": {"page_label": "98", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "03d63983-1162-4749-becb-db8a5e64cffa": {"node_ids": ["c86ea5b5-d3bb-48c1-bd1b-ef56074e5732"], "metadata": {"page_label": "99", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9cab7d73-8f63-4689-b548-6bc241b31d3c": {"node_ids": ["e22ed87e-e137-4631-8fcf-adabd5418603"], "metadata": {"page_label": "100", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5780f2a4-8056-4d6f-a9f7-a5a85a35e01a": {"node_ids": ["0f1045b9-3755-47f3-b629-e94e49697ecf"], "metadata": {"page_label": "101", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "17783aad-177a-481b-836b-3e69ed01b2ce": {"node_ids": ["ad3b5be2-3cca-4a5f-9128-91471dece4d2"], "metadata": {"page_label": "102", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "759fc5b5-a0d5-4d23-9d7b-25cac1fad2d4": {"node_ids": ["159a8653-7d7c-49d4-8d15-de017e0a5e13"], "metadata": {"page_label": "103", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "52d6fbd6-af2b-4e73-844a-3b2eaa1646ab": {"node_ids": ["e78f2f7d-0a7f-4d22-80fa-6542e91b8a7c"], "metadata": {"page_label": "104", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b5a8ff18-37b9-43df-b966-875d76f0aeae": {"node_ids": ["f855f427-b64a-4e1d-968d-a7f278c15474"], "metadata": {"page_label": "105", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "045dd6ae-3c3c-4071-9799-e368813da91c": {"node_ids": ["32563394-d758-4b84-9946-ad06865d3c3d"], "metadata": {"page_label": "106", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "afe4159b-5fd8-4f1d-9e3d-45ca57f060c7": {"node_ids": ["e6dcb63b-8da1-4631-b0a5-e2bcabbe6264"], "metadata": {"page_label": "107", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "686136bb-c390-4921-93b3-bbe9a150c506": {"node_ids": ["e157cab0-442f-4fa4-911b-dda14bd86d03"], "metadata": {"page_label": "108", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2cae75c1-8a5e-4465-a08b-cc4cb4c7213c": {"node_ids": ["fd87f98d-20bd-4157-a846-6cb16e9ca01c"], "metadata": {"page_label": "109", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "fdc47546-6751-4150-a470-279ee05dcf12": {"node_ids": ["e764014f-e8ec-4bb6-8a3e-fd896555ce40"], "metadata": {"page_label": "110", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9f68c38f-4202-44db-9729-9be14a208ea4": {"node_ids": ["d167988d-f703-4a86-8d72-622e14983f80"], "metadata": {"page_label": "111", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "bf848001-9f7a-4371-b4bb-ad61c06dc90e": {"node_ids": ["be8fddbd-5c8b-471f-95c4-eed40d490a3f"], "metadata": {"page_label": "112", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3b206bfe-1882-403d-addb-a5b990ff713f": {"node_ids": ["bae3af04-3a67-4baf-870e-4838f6c6e73e"], "metadata": {"page_label": "113", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "19ae4b10-0cc5-468a-8b55-19f8a9adb5bf": {"node_ids": ["d1dff83e-2a4d-42f8-b96e-8d58b08a9d0d"], "metadata": {"page_label": "114", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "47832c1d-c36e-4954-8375-2e61e249ea2a": {"node_ids": ["731f903c-d5a5-4a85-aec8-d60101149e58"], "metadata": {"page_label": "115", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "30fddddb-546a-4516-8174-abd16085bf3f": {"node_ids": ["688fc2af-c370-477c-a81d-c51c8e2fbaff"], "metadata": {"page_label": "116", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1bfa07d6-dd0b-482f-bc8d-2b71dba2f0d8": {"node_ids": ["1fea8d65-85df-454c-b26e-e9af6fc22b11"], "metadata": {"page_label": "117", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c09d1ef2-5462-4165-8fef-1ec59f47f01b": {"node_ids": ["8c59134b-78b1-4b46-a718-efa793d1993d"], "metadata": {"page_label": "118", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d3eb8a82-0b76-4e8a-85da-7d06fc38f54c": {"node_ids": ["a8275729-0e29-4a09-b309-5e0beee7aba6"], "metadata": {"page_label": "119", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4be7cab3-7353-40e5-a2b4-14cc819ac52b": {"node_ids": ["4f5afdf3-cc05-4e1e-ae0d-ae7fb3478379"], "metadata": {"page_label": "120", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "48aec6ef-0a27-40c4-9912-8a8277039c28": {"node_ids": ["40f8c55f-b280-409d-a775-3da0fac3d656"], "metadata": {"page_label": "121", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e7c53777-0974-4a1a-948b-798307ad4772": {"node_ids": ["f3f5a0c8-03ac-4809-9eb5-1c287d66b1a0"], "metadata": {"page_label": "122", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1747899f-94c5-446a-a482-85f9b3f6489f": {"node_ids": ["8b72387b-0b5a-403c-944f-40f1647fa1b0"], "metadata": {"page_label": "123", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "dee25f30-6c6e-44e1-9d62-bd38cce6aa3d": {"node_ids": ["ec416e8a-5f94-4e90-9e8c-d32a08ed5b1f"], "metadata": {"page_label": "124", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "340374ab-1596-4bbe-b1aa-fdfd288f420e": {"node_ids": ["9a86e6e9-d2e7-4a08-bc99-e7df7d26f0bf"], "metadata": {"page_label": "125", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f6d086e9-246a-43df-8b13-a763d0b05100": {"node_ids": ["013aa009-d146-4783-ad7a-ab43d9ead4ed"], "metadata": {"page_label": "126", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ceac2b5b-f45c-4246-8ff2-b8eb0acbb58a": {"node_ids": ["2263aa65-6a05-466f-abb7-7181f629b27a"], "metadata": {"page_label": "127", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2e540acb-42fa-4e0a-815c-c7c58027fd6f": {"node_ids": ["13368efd-1394-40eb-aa83-751c63e2ba1c"], "metadata": {"page_label": "128", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9402e49f-dcca-4bd1-970c-28a5934a1b6b": {"node_ids": ["98a82720-d1eb-42b3-9f13-c8acb5de115e"], "metadata": {"page_label": "129", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "290d5a3d-1e2f-42d8-94bc-85c97b0695fa": {"node_ids": ["7be6234f-89ed-45ef-8f5a-aad0ad7ea4d5"], "metadata": {"page_label": "130", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e34e455c-e4be-4bc5-b66d-2bf201702c4d": {"node_ids": ["1b690400-5c34-4051-8682-128f91372b5b"], "metadata": {"page_label": "131", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "76079f0d-a68b-4f0b-aa19-11b86ed74018": {"node_ids": ["6392902a-e3ec-492a-8b9a-ec9827b0452c"], "metadata": {"page_label": "132", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5fe12502-54bd-4f60-b451-86d62f1ffc7c": {"node_ids": ["0be8c208-ca8e-4de5-9238-2806ac40b952"], "metadata": {"page_label": "133", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5b242b1b-7e9a-45b7-9b98-bd5db3196056": {"node_ids": ["af0a0109-e3a8-4f34-ad27-c564af81e5fc"], "metadata": {"page_label": "134", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "cc7297bc-102c-4679-b102-d9e36fe328c5": {"node_ids": ["e09895bd-aa63-4e73-838e-8492076ca7ae"], "metadata": {"page_label": "135", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7a332816-5e5b-46e2-b75f-fe2a23e482f7": {"node_ids": ["1ee708ce-208f-4d13-8c31-9961a9e20b64"], "metadata": {"page_label": "136", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ec1d9ee5-af95-4b4e-8e11-c3e55f42ad6a": {"node_ids": ["49f18970-83b0-4172-8d35-158bf4feb377"], "metadata": {"page_label": "137", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "78dd2248-d8b7-428d-855b-a3df42581976": {"node_ids": ["e0fa0776-7c39-49cd-a3cb-5655fdfbcafa"], "metadata": {"page_label": "138", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "19e56ebb-d54f-4a02-a573-2fa08c308f9f": {"node_ids": ["7a88c881-cbbb-4635-9258-24a1880cc6a7"], "metadata": {"page_label": "139", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "cd33d220-8990-4e23-a726-9a729353e8ab": {"node_ids": ["bd008a16-5d04-46ec-957f-096dceb00d58"], "metadata": {"page_label": "140", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "75d69581-fd1f-4b18-95e6-a34a485c324d": {"node_ids": ["5f3007cc-8a7e-4476-8388-d9cd2156d18c"], "metadata": {"page_label": "141", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "07ff47c0-ca64-4cc9-9177-a1ff31658502": {"node_ids": ["25638a3d-16c6-4a37-9464-7736b18ad2e4"], "metadata": {"page_label": "142", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c9e66868-9402-4364-9d1c-98f40f2e9d15": {"node_ids": ["60d4abd6-72b3-45a9-aef7-a5b3bad7b07c"], "metadata": {"page_label": "143", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a6bd1cdc-cff3-4f30-80dd-970a280c0e3f": {"node_ids": ["0983ad47-1de0-427e-919d-1e3f0c3ac5b6"], "metadata": {"page_label": "144", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "02f871bc-c814-4c99-8b68-ffcce9df6d95": {"node_ids": ["a188a12b-fdd1-4d79-baf5-e9e69cefe66d"], "metadata": {"page_label": "145", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3b803f40-4017-4bfd-9b75-11c938b9191d": {"node_ids": ["2669f51b-67b3-41d2-81f9-a0f6eccbec60"], "metadata": {"page_label": "146", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6acd6715-8a2e-48dc-88ae-b9d65fb94717": {"node_ids": ["ca0ef209-3c42-49d6-8459-89088e2c9744"], "metadata": {"page_label": "147", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9d5a39c0-424a-4e3a-acce-145a182b6b0a": {"node_ids": ["0823cb1a-4d8c-41c6-9391-6aab267218b3"], "metadata": {"page_label": "148", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "125b72eb-9ba5-4336-901d-7314c7303e69": {"node_ids": ["06202570-80ab-4b7c-a10f-94728ea9d470"], "metadata": {"page_label": "149", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "cfe4ecb4-33cf-4c82-b9cc-cffb5dd1f236": {"node_ids": ["290fecf9-c8cd-44a7-b982-305b765f583a"], "metadata": {"page_label": "150", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a6d3da09-0aaa-4a87-ab11-5065326bc133": {"node_ids": ["566e2680-2891-481a-b89e-b4d09e916b4c"], "metadata": {"page_label": "151", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "00107f62-db39-4acf-9e7b-0f2e6265abec": {"node_ids": ["6999ee21-640a-4401-b6bc-142834c114ba"], "metadata": {"page_label": "152", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "907dd3c7-8ce2-4da9-a02a-37d2f6fb2520": {"node_ids": ["80bc6235-5aee-4e31-81fa-3277f199675c"], "metadata": {"page_label": "153", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1d2bc850-742a-49c7-98ae-b828f632a827": {"node_ids": ["dceeda7f-8ef1-44fb-a234-4c36069da37c"], "metadata": {"page_label": "154", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d2aa29af-12c6-4b69-a220-9d3f91a257a9": {"node_ids": ["72152277-5a7a-4ecf-8e48-83cfcf418fa5"], "metadata": {"page_label": "155", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2caa2ab1-3d69-4096-89b4-ef86c5deafd1": {"node_ids": ["e4800ab9-88ad-4d94-acda-e64859d11709"], "metadata": {"page_label": "156", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3c5acc39-53b1-4034-845e-e452ed1c3922": {"node_ids": ["3c99bd58-5aa5-4b16-80c6-72d4a02351ca"], "metadata": {"page_label": "157", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f35ea2c0-dced-41a9-a8d9-17a2a2a1559d": {"node_ids": ["97e546f2-8415-40e9-b150-515975c80267"], "metadata": {"page_label": "158", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "19dc8560-d51a-4751-9476-7f78574cf25e": {"node_ids": ["81e0cd74-96ef-4a4b-9519-0795d712cd78"], "metadata": {"page_label": "159", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3aca442a-8d58-4649-a1ce-0c3e42ab0a6b": {"node_ids": ["25b48708-fbe4-434d-b2c1-9182f56d317b"], "metadata": {"page_label": "160", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "dce2fd1c-e062-4acf-ae2b-4ca50df25179": {"node_ids": ["164e2027-4d7c-4392-8701-0542ecafc323"], "metadata": {"page_label": "161", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ec7fa825-0663-4215-a0c1-2a6f924c6f09": {"node_ids": ["12615078-855f-40d3-9f2d-03c5cee6ce11"], "metadata": {"page_label": "162", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "fc1f52aa-27b1-418b-95d0-5e37035d4e61": {"node_ids": ["70539acc-ae39-4f80-9e0c-94a45a0735cc"], "metadata": {"page_label": "163", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c648b129-7f42-4023-8f01-6f56c821dd1c": {"node_ids": ["9b5014b1-b831-4c31-b6f5-c5859cc671a9"], "metadata": {"page_label": "164", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ad87f158-1406-4d1f-9683-958b72a2fc03": {"node_ids": ["181a0ae8-6d62-4e2d-a1e8-c04293458cd0"], "metadata": {"page_label": "165", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9b5e6d32-d4bb-4cc0-af19-ba4c755b87c3": {"node_ids": ["5ceec94b-b6b1-4377-aea4-6cf444a18dcc"], "metadata": {"page_label": "166", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "98e50b48-65ba-4ab7-a00a-7ad91dd3e836": {"node_ids": ["54ac7895-6c4f-4709-b0b2-cf43263b76c1"], "metadata": {"page_label": "167", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5d35d923-ce81-45c9-97c3-7060275b2a50": {"node_ids": ["366113c6-a33c-4386-aa06-f31e8eb76452"], "metadata": {"page_label": "168", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e5631165-2c53-49c1-b2eb-755288942e87": {"node_ids": ["f1f8b2f1-32c2-47db-8bb5-dbbc29c5ce77"], "metadata": {"page_label": "169", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3495f5f8-a641-432b-877c-4f7a6f4a939b": {"node_ids": ["40392377-c668-46c2-b347-9f6ba38e8b52"], "metadata": {"page_label": "170", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a646d20b-dac9-40c9-b9fc-c97e27259412": {"node_ids": ["9686e2be-93ca-41ab-99a2-cc9417fd97e0"], "metadata": {"page_label": "171", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "70f666bf-51f7-4ae6-acb9-d0e54f8e914f": {"node_ids": ["be638277-c48e-4c0d-a4a4-f505ae864c86"], "metadata": {"page_label": "172", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "bb4fa1c4-3387-49cb-88bf-9ef0492402cb": {"node_ids": ["4ff396c9-cc97-4691-adea-147ba8e35480"], "metadata": {"page_label": "173", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5744cdd2-ffde-40ba-ac96-babcd200b9af": {"node_ids": ["bad4a5f8-f1a1-4458-bbf9-e29bae8e8ea6"], "metadata": {"page_label": "174", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d1e49761-2745-4d27-98c9-0184e60183e4": {"node_ids": ["ef3ff959-e082-4010-b00a-301dbed8e9c8"], "metadata": {"page_label": "175", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "cfe425bb-8b21-4ce8-af54-733e218ea7b4": {"node_ids": ["c39cd2bc-1feb-4ef0-ab0e-9b26334d2ba1"], "metadata": {"page_label": "176", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "80376e6b-432e-462f-b50d-ae8902dae753": {"node_ids": ["04088fb4-7f4e-4002-af28-f8e32e985928"], "metadata": {"page_label": "177", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3a2f5e5c-93c4-44a9-addf-b97eb463f419": {"node_ids": ["104cf660-3e13-4cae-94b0-3495708352b6"], "metadata": {"page_label": "178", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5a0fea3b-68d3-4e4b-9dbf-d338912b33d9": {"node_ids": ["8e7fbf93-71ba-4157-989c-c6c256f14195"], "metadata": {"page_label": "179", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "cb6055ca-9bcd-410c-9fe1-3bb4c85638ed": {"node_ids": ["8a57afcc-feb7-44e3-b06b-095f00611f46"], "metadata": {"page_label": "180", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5d2d835f-5636-47d4-b07a-60052bbe5e72": {"node_ids": ["e9e9bb50-de23-46f5-9a94-90bd8014c9a5"], "metadata": {"page_label": "181", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "06602d2f-2c67-4dc0-a4e4-0ed6fe6a2f63": {"node_ids": ["334ac82f-606c-49c0-9abe-70026bc0712b"], "metadata": {"page_label": "182", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "223bbd2f-ad96-4b72-bbe5-27cb71f77de5": {"node_ids": ["36322202-9c60-4019-9ca6-36491cb619fc"], "metadata": {"page_label": "183", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a13ce0df-2f43-4bb9-b737-fd98dabbc243": {"node_ids": ["ef4f3764-b6f4-4da1-8ef1-b17ee5ef545d"], "metadata": {"page_label": "184", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "cbc010d0-b971-4113-aeb7-f771021d97ab": {"node_ids": ["970c67e6-c230-412e-b492-314ac20d7f5f"], "metadata": {"page_label": "185", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "baba5cdf-3059-43ce-954a-cdd8337f1dff": {"node_ids": ["0fd1ff3e-0871-4857-b695-06be97c9fbcb"], "metadata": {"page_label": "186", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "901430c4-ce2b-4276-8279-4b283ff16e43": {"node_ids": ["432f550c-1c06-4055-977c-3f9c346d457b"], "metadata": {"page_label": "187", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e9942dff-800a-4856-a8a2-4cfe44757984": {"node_ids": ["b8422ea3-a083-4246-99c4-4421b472bcb9"], "metadata": {"page_label": "188", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8c08935d-7a63-4750-974d-0ffb532fa72c": {"node_ids": ["73b2aef2-3872-40f8-be2e-70b25d62dad9"], "metadata": {"page_label": "189", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "00adb995-c0bb-4655-9cad-bb24052459c0": {"node_ids": ["21827a71-521d-4478-b5ce-cf094fea0829"], "metadata": {"page_label": "190", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5e826f64-e7e0-46df-8d98-bbadae242f3a": {"node_ids": ["d95a7e89-c10e-457b-b9d4-724b798ec5e3"], "metadata": {"page_label": "191", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8ad7180b-cc9b-4bda-a164-663f7aa7ae9a": {"node_ids": ["e2756b67-8cea-4dca-9a97-e5b1e24db8aa"], "metadata": {"page_label": "192", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b5956b05-b0f7-4a2f-bfb8-10a25b3080d6": {"node_ids": ["f196c075-5f9f-4d91-acbf-3f8ac11f948f"], "metadata": {"page_label": "193", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3f12aef3-0361-42bf-861a-5c0c3ac261bc": {"node_ids": ["28d12037-8a46-4360-be90-6c24c63a47c7"], "metadata": {"page_label": "194", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "26cb638c-9469-4d4f-9766-7818b9220ac2": {"node_ids": ["7bf22f1c-63e3-421a-9b22-2d8fcb7b033a"], "metadata": {"page_label": "195", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "bb324287-5422-4490-bbe0-acdafcd87a9b": {"node_ids": ["0b8358c8-f8b1-4944-9a58-73c6159e5f3e"], "metadata": {"page_label": "196", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a2da856e-c1a1-4424-a0ec-356182ee5529": {"node_ids": ["c7b05aad-3f7d-4e7b-ae42-05e96dff902b"], "metadata": {"page_label": "197", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "954c1f4c-a655-4a34-b79b-cd7a2e470908": {"node_ids": ["9a112d06-0b27-4c8f-a037-6e12cfe43157"], "metadata": {"page_label": "198", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c2e62d55-24d3-49fd-9256-ed43992e7492": {"node_ids": ["1dd07021-a2d0-4ac1-b3f0-42adb2c187e7"], "metadata": {"page_label": "199", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d305e2b0-b95d-4221-ac04-e9a632292d3a": {"node_ids": ["5a827953-e14e-4833-a2a9-e6ddb3a4f2ae"], "metadata": {"page_label": "200", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "11ad9a04-786b-44c3-91a3-475ac8027f4c": {"node_ids": ["380039c4-ca61-49c1-9590-e5ccaf8028cf"], "metadata": {"page_label": "201", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3ab12c9d-7a85-4d83-9971-e305ec2ce763": {"node_ids": ["cd9ab66e-1554-4808-89a8-bfbd586e842b"], "metadata": {"page_label": "202", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2507823d-ae7a-4f37-adbf-f73a41118d3f": {"node_ids": ["8830ec4c-f4a4-4c76-81dc-a0818740f7a4"], "metadata": {"page_label": "203", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "15e5a9c0-0fbf-4067-8ec2-5c3ffbd242ca": {"node_ids": ["7f49fdc1-9453-4320-8112-1e967c14e687"], "metadata": {"page_label": "204", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9e35cd07-2b1c-4c28-848e-a45b19ce7372": {"node_ids": ["6c18fd61-b4d8-49d7-9ac9-332bed0ee58e"], "metadata": {"page_label": "205", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "cc56ba8e-09df-49fd-9b62-7c7e3f7e8f0b": {"node_ids": ["f603714d-0ad8-4faf-a3ad-24d8571aaf9b"], "metadata": {"page_label": "206", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d062b573-7124-48ca-ac8e-4b98ee37c9e1": {"node_ids": ["ed211f3b-5967-4dce-a041-582b2da3967a"], "metadata": {"page_label": "207", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c6084c26-3599-4357-9636-d1296e3d13da": {"node_ids": ["ad04c347-3b0d-4ae8-a75f-c2354588d93f"], "metadata": {"page_label": "208", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ad8f5a53-78aa-449c-ba57-931af1bc6e33": {"node_ids": ["8efaaad4-4648-492b-8de7-806180b5d9e6"], "metadata": {"page_label": "209", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7808aa5c-46d9-4118-b90f-d1a1f9a6850b": {"node_ids": ["fbcc7b0b-4654-47a1-b717-a55a2ae0a92a"], "metadata": {"page_label": "210", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0d6ab4f3-bfc1-4a86-8dff-e693b8b75dc0": {"node_ids": ["e40588ec-fbc7-4a06-ba81-7a422205a73b"], "metadata": {"page_label": "211", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "81c41fab-0e69-45a9-9e02-3ae94bfca27b": {"node_ids": ["aa82b9dd-e5fc-40b4-8fad-929bdb8798cc"], "metadata": {"page_label": "212", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b6e37b3d-5510-47f0-9257-befae6fdd152": {"node_ids": ["e6a2e29e-2c3d-4f44-ac49-1894dd6d49ab"], "metadata": {"page_label": "213", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "43512e3f-ee2d-4115-8e46-9f211baf2524": {"node_ids": ["f4ae878e-b606-47cf-afbe-a45b64d4f494"], "metadata": {"page_label": "214", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ad3bf511-89bb-4a1c-b70d-1e47eef1920a": {"node_ids": ["5bf8df0d-e7af-43a3-aaff-36daf4546ec2"], "metadata": {"page_label": "215", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7850d479-8582-42e5-acc1-33c9a0af5c39": {"node_ids": ["e554ea04-2f9e-4a1e-ba36-63f15fe7d305"], "metadata": {"page_label": "216", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5a384a83-08c1-422b-9d75-3d1b6b7e591b": {"node_ids": ["daa08734-4a3f-404d-bdfd-7a3a76caaecc"], "metadata": {"page_label": "217", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "046984bf-6a90-4226-86f7-4e12e367e53d": {"node_ids": ["619c6156-6f1a-40cd-ae1c-b786e9a33b2f"], "metadata": {"page_label": "218", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "98128fd6-a024-4e91-8fbc-7542ab4289f3": {"node_ids": ["68e9baf0-9678-4b0b-8aa6-0bbc77dc882e"], "metadata": {"page_label": "219", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "09fc4f38-aa4e-4c1e-a0b9-b7508670e6d6": {"node_ids": ["d4cb20ad-6595-4d8a-ad6d-ff8acd2ac54d"], "metadata": {"page_label": "220", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6b32c23b-20b8-455b-b826-847763f6cdda": {"node_ids": ["d6bfd226-5046-4579-ba43-13eefda806ce"], "metadata": {"page_label": "221", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5e847c31-e781-4616-9784-ff9421cd0ea2": {"node_ids": ["485b2e6a-3876-42a7-a1d5-64a599604cc7"], "metadata": {"page_label": "222", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5f778788-2aec-4a43-a630-4af88b35266e": {"node_ids": ["18fd416d-8574-4e28-827f-ebe7189ae583"], "metadata": {"page_label": "223", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "50c669d2-2e37-44a9-9583-e41f72ec05c3": {"node_ids": ["f3a9afd5-1443-4ec1-b917-9dab61c30368"], "metadata": {"page_label": "224", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3c4293d8-d295-4cd2-a603-07d23b4b9cee": {"node_ids": ["fe2570b9-4c5a-4264-9683-89e28751e58e"], "metadata": {"page_label": "225", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f62672fe-84ad-4a41-a2ad-bc37ed30e41f": {"node_ids": ["7390479e-73bf-45d4-af24-c1e57c020fb0"], "metadata": {"page_label": "226", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "44d7d43e-d21e-419e-a0b7-dedf6504b8f6": {"node_ids": ["70726ca8-87bc-41da-acf6-689d99370e15"], "metadata": {"page_label": "227", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "bee42ca5-41a6-4904-a90d-f7400d2417a3": {"node_ids": ["3e441137-b010-41dd-bc74-1a9ceee29fb0"], "metadata": {"page_label": "228", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "caff4e75-787e-495a-a0c2-89ffbcc2e133": {"node_ids": ["b4a5f580-133a-432a-9179-9eb83d28daa0"], "metadata": {"page_label": "229", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "74a0dacc-77c1-47e1-ba86-fad1602c1442": {"node_ids": ["0d1808bb-61c8-4c60-aa38-42c06f438ea1"], "metadata": {"page_label": "230", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "caefa15f-8957-4152-8aa7-c2c0e7ccb352": {"node_ids": ["1781f142-ea7e-458c-8671-28f57054a12b"], "metadata": {"page_label": "231", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e712ac33-47d6-4312-ae2d-4d507d239c0d": {"node_ids": ["9c911061-c280-475e-8e21-dc798b0798c3"], "metadata": {"page_label": "232", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9cc330af-6b00-4698-8a69-ce78f7e311bb": {"node_ids": ["0a868952-a55e-4ab2-81dc-9ac230f3bf16"], "metadata": {"page_label": "233", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "71fef793-0a6c-492e-a03f-880eea16cb18": {"node_ids": ["6ed2ccfd-6e2f-4d98-9484-349e23b38f2e"], "metadata": {"page_label": "234", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c50c0bb2-7df6-4dc4-91a4-4c5742b6ca81": {"node_ids": ["ef2f381f-7802-4c1b-860e-fc1931fb5ec6"], "metadata": {"page_label": "235", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e1d63c2a-80b9-4291-8a67-05641c07fdbc": {"node_ids": ["cb9c2154-364d-42b5-8059-0c3078d71969"], "metadata": {"page_label": "236", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8ff13679-3b43-459d-8e58-996354454863": {"node_ids": ["b192690f-c460-41d0-bf47-933703ce9244"], "metadata": {"page_label": "237", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e6f56514-5dec-4d4a-a9be-d93b6f89bef2": {"node_ids": ["ff283b25-698e-43b0-a6ff-75f17dada13a"], "metadata": {"page_label": "238", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "49c26bcd-1d87-43ce-90a7-2347f567c804": {"node_ids": ["7ca4da36-c6db-440b-83c7-6eb393c3a4bf"], "metadata": {"page_label": "239", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ecccc4f3-9d88-4234-98fa-7368117c1c6f": {"node_ids": ["5d303f2b-a9c3-4d0e-92ac-c56319831895"], "metadata": {"page_label": "240", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ec3b40e1-d906-4812-adee-ed525404832d": {"node_ids": ["a001dd78-f4bf-4aab-b0a2-053f46843602"], "metadata": {"page_label": "241", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9f7a214f-04a6-486e-916d-a6aae8b1c739": {"node_ids": ["3faf2cc3-9ddd-4254-81c0-91e76b3e268e"], "metadata": {"page_label": "242", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "964c5e1c-8778-46b1-8e6d-bdffde3f2bb6": {"node_ids": ["b2b8e6dc-6ad4-46b5-917d-4cd3ce617cb5"], "metadata": {"page_label": "243", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "805bb99a-3473-4756-b914-ab3fe0a51da9": {"node_ids": ["b177c33d-b45d-4f26-9bc8-9ddf63178c24"], "metadata": {"page_label": "244", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a24c9a0a-7cbc-48c3-b3b2-339a2bdd5b1f": {"node_ids": ["83b0a7f2-daba-4e8c-bb68-cb74b4926cf4"], "metadata": {"page_label": "245", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a965a8a9-dd15-4565-bc30-5298c9cba25b": {"node_ids": ["b109d6c1-c239-4244-b87c-9b4b277bc138"], "metadata": {"page_label": "246", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f377e790-8556-442e-ae67-844d189cdd81": {"node_ids": ["f0a51c21-a2eb-491a-89ed-000a3393d819"], "metadata": {"page_label": "247", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6729378c-c0b5-4f7c-82da-1defe160e62d": {"node_ids": ["23c686ac-889c-417e-b37b-6ed31b12889e"], "metadata": {"page_label": "248", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0b091c35-6ea0-41e7-95fd-fb126491912e": {"node_ids": ["9fbfcdf0-49f4-4c09-9c5d-d125eb0a0002"], "metadata": {"page_label": "249", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "bcaec3c1-de55-49d4-9737-5228f2021e55": {"node_ids": ["51dc8d6d-a6d1-44cc-a345-c876173aea37"], "metadata": {"page_label": "250", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6da769e2-2f28-49d8-acee-80a617e8b936": {"node_ids": ["be38b3a4-76bd-4f14-8071-e1a2e705a695"], "metadata": {"page_label": "251", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e48e0742-d4e6-4040-ae24-8b89215a1f2d": {"node_ids": ["a735e59d-4bfe-45d8-8aa8-4602361e8067"], "metadata": {"page_label": "252", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0c04764b-3ee5-4b4b-9e5e-b3bd1743c19c": {"node_ids": ["3bbcb749-fc46-4445-ac61-d901d45bba7d"], "metadata": {"page_label": "253", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "bc9dc249-ad2e-422a-91c6-06d3afc242de": {"node_ids": ["7576405a-387c-490e-9b2e-25621826b39b"], "metadata": {"page_label": "254", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8297c76e-0721-4088-8f30-7730455f5682": {"node_ids": ["bc3f1f76-0a4e-4a06-8c88-67c04060dbfe"], "metadata": {"page_label": "255", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0c412444-1c0e-4375-9468-3d009f6e959f": {"node_ids": ["226292ba-6725-47ec-98cc-ae40bb312694"], "metadata": {"page_label": "256", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "10b9fffa-0d1c-4fa1-812c-36352a8949c5": {"node_ids": ["ab5c3290-4410-4424-ba77-b5379d73ebeb"], "metadata": {"page_label": "257", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6fb36892-17d0-476c-9e06-f9fc3546b239": {"node_ids": ["7d91119a-e518-44ff-b4bb-53c839807903"], "metadata": {"page_label": "258", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d04b13ce-4bb9-49bf-b37b-ffdb361be193": {"node_ids": ["f783c9cd-8a7c-4d89-81a1-f76372e38651"], "metadata": {"page_label": "259", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6b2c2b11-5a35-4fe7-a9c9-cd826e196428": {"node_ids": ["29cf613e-e1f0-43c4-8768-b8694ff735bb"], "metadata": {"page_label": "260", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d4f229ff-f9a6-454f-8c8f-14223b5381e9": {"node_ids": ["0d280986-9132-4b02-b7c0-1b304f8f8681"], "metadata": {"page_label": "261", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "48fd3d4a-0db8-4ea1-8156-20ca595872e4": {"node_ids": ["c480a3e3-887b-44a8-acb2-16dabeac9ae9"], "metadata": {"page_label": "262", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5b58311e-9362-4ec9-b065-d1187bae82f1": {"node_ids": ["d69b14ad-fd83-44c4-8495-7eb5094d4fc7"], "metadata": {"page_label": "263", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ee3f69be-3e0d-4a78-92f5-cfc16c2aa534": {"node_ids": ["dc46949b-b172-4b45-b1a8-29a9e09b08b1"], "metadata": {"page_label": "264", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ab971895-e0e9-47b5-a29d-61b63bdca91e": {"node_ids": ["b9d86eab-2eb6-412d-a3b9-356f61109eff"], "metadata": {"page_label": "265", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f717f52e-dfbd-4fc2-a24e-245cfecb69de": {"node_ids": ["571bdd05-c6d5-42c3-a1b2-87ab05917cab"], "metadata": {"page_label": "266", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f4b8122a-7599-46fb-b398-77181296219e": {"node_ids": ["651cebfe-cf80-42be-bbfb-e6fe78d0050b"], "metadata": {"page_label": "267", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1af51978-8ca5-4853-aed2-b80d20c9b100": {"node_ids": ["9e5a8557-5915-4695-a0a4-b3369df155e4"], "metadata": {"page_label": "268", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e0a109ba-a75c-42bf-bb00-5be1b7a301cf": {"node_ids": ["574b6124-4277-4d2f-9020-a266a0a1de97"], "metadata": {"page_label": "269", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d85fbf35-0c2c-4ca8-ba7f-1a8d417d154a": {"node_ids": ["a69bb3f0-b615-4ad0-95ca-bb3a053a6d5a"], "metadata": {"page_label": "270", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1dee9ce2-ca00-44b2-8f48-76c57551b272": {"node_ids": ["51cd9df0-c775-4a5e-a5de-83f650b803b8"], "metadata": {"page_label": "271", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "dee0be0b-ff5b-47e0-90b6-c9f1e7a0c57b": {"node_ids": ["e6d335d9-a01e-4261-b00c-537b4b4ab7bc"], "metadata": {"page_label": "272", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "14a821c4-ccc2-4045-8a30-6d59b3f77ddf": {"node_ids": ["34e5d780-2ec8-4262-9cf8-af2e29512eb9"], "metadata": {"page_label": "273", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5a02ea50-5f39-4ae8-9c7c-60309c8c9144": {"node_ids": ["ee0ca39a-85ab-4f3e-9454-af1472f18b51"], "metadata": {"page_label": "274", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "90ba6b19-143b-45f9-bfe4-54c0e4cd7791": {"node_ids": ["155407cc-9eee-4f2a-8ab1-8c332b2176e5"], "metadata": {"page_label": "275", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3cfeadb2-ba85-4531-a835-742a85aa0442": {"node_ids": ["41e676e4-c960-4385-b65f-4b7e5dad07db"], "metadata": {"page_label": "276", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "37bc96a4-474f-48e7-b469-32df425f61b1": {"node_ids": ["cb355f64-0441-4fde-866a-4fed5e1331bd"], "metadata": {"page_label": "277", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "cc376b0f-1e3f-4a0b-9fe8-32d23f927510": {"node_ids": ["bcdc2a33-8cca-4e80-b27b-867e6b676cc0"], "metadata": {"page_label": "278", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a945daf6-17f2-4dca-89b2-f34e1245275f": {"node_ids": ["be462abc-b34d-4506-9a49-bb4eef0c764c"], "metadata": {"page_label": "279", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c6614abf-0613-4b79-8034-63242b2e96a5": {"node_ids": ["7bf402a5-067f-40d0-a5b1-5fb3d6836dc4"], "metadata": {"page_label": "280", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8a685682-a834-48b0-9caf-3b70e11a1d6c": {"node_ids": ["30791011-f32f-49d2-8b5f-05024a8cfa6b"], "metadata": {"page_label": "281", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "eb7b8b5a-e649-4567-8187-45a1c0a1e74e": {"node_ids": ["b2dded93-21d9-4a1b-b9fe-d4c7594b15af"], "metadata": {"page_label": "282", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "894f259d-2a60-4d21-96d5-e1cefac39447": {"node_ids": ["17972320-67a0-4971-be28-a346c34d4e1e"], "metadata": {"page_label": "283", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d34f7ce3-0174-4175-9268-0e628e547653": {"node_ids": ["86f33101-1276-4a4a-b8db-97b26f0d6c21"], "metadata": {"page_label": "284", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "635454cb-a99e-42c7-80bd-d3eb22dc2eea": {"node_ids": ["5129cfea-f2bc-40ea-bed3-8e968abd9ebb"], "metadata": {"page_label": "285", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f02d0cc3-9105-4c29-b230-46eab391d9b7": {"node_ids": ["be3a3de4-c31c-4e55-a857-ac6e8d9e4a8d"], "metadata": {"page_label": "286", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "38ddc103-a3fc-4495-a4fa-e027cf952a43": {"node_ids": ["2fcc68de-86ab-4321-8023-b0bfbfa5ede8"], "metadata": {"page_label": "287", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "01734ade-d30a-48e2-b2e3-d863903555a3": {"node_ids": ["42959e03-64ea-43fc-a0c0-073ec69e77de"], "metadata": {"page_label": "288", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6a34e83a-e66d-41c5-b92b-fa1eed20ff23": {"node_ids": ["18fa1e63-afb7-47cd-8671-88dafddb0c31"], "metadata": {"page_label": "289", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "057ecfc8-761c-4320-a092-0899f4c4d07b": {"node_ids": ["c0a8657b-18c3-4e3d-8177-ce712c6279af"], "metadata": {"page_label": "290", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6b45f254-03e0-4433-bcbe-05b71c6926e7": {"node_ids": ["492e200d-bcad-4322-95d4-04f4d0650daf"], "metadata": {"page_label": "291", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6dad700b-8a1b-4404-be87-96f3dd3295f5": {"node_ids": ["6029199c-c754-449a-93f0-e0dd87c3a785"], "metadata": {"page_label": "292", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0853a91f-a960-42c1-b0f6-9baa8f8adc13": {"node_ids": ["ca643294-18fc-48e7-8dc6-b783fc07ff81"], "metadata": {"page_label": "293", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9c7c6b04-d790-4cf5-bffc-16ddd95b1b34": {"node_ids": ["dcc726d1-870b-4cd5-9974-e2bbf83a463a"], "metadata": {"page_label": "294", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d4e57f75-132e-482a-bcdf-270f38acbac1": {"node_ids": ["fd7430d5-9397-4c56-98ba-dcbfd4ceb13e"], "metadata": {"page_label": "295", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "37ec63a4-6df6-4ed0-aaa3-e59ff6a2f35c": {"node_ids": ["e4e824a5-df30-495a-b7fe-6842524e63b5"], "metadata": {"page_label": "296", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "42f50af4-2c73-4f00-a917-911e403c75cd": {"node_ids": ["ec7aed8f-e820-414d-a4c5-9dda249693bd"], "metadata": {"page_label": "297", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3fae26c6-a079-4e1f-ace2-d6aaa5dabf65": {"node_ids": ["80747942-9cd9-4900-807f-da6ec5b0d54f"], "metadata": {"page_label": "298", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "75979810-6419-4098-853f-37f464e898db": {"node_ids": ["fac9007f-450a-425a-b40c-e30c75544317"], "metadata": {"page_label": "299", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f80af379-fd6b-4f95-a291-5b9cfd308078": {"node_ids": ["0fb72b93-51ec-40c3-9788-13d6aa13cfdb"], "metadata": {"page_label": "300", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5cc82101-62d5-412b-86e8-11c3f840df54": {"node_ids": ["a4078a39-41d8-43f6-bd1a-48db5ffb5e99"], "metadata": {"page_label": "301", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c644b6f3-895d-4c0f-bd06-0f5e06fcee78": {"node_ids": ["c9368bbc-79f9-4694-9908-ed69f4c756a3"], "metadata": {"page_label": "302", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1e262d43-1198-41d8-8d8a-6f7670343339": {"node_ids": ["6818f3dc-6f1f-4456-9feb-77498ead4dc6"], "metadata": {"page_label": "303", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e2063691-df5c-4125-b62c-5a263e127ab9": {"node_ids": ["590e8d16-a76a-4666-9118-58d8ba5aec74"], "metadata": {"page_label": "304", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ee6ce97d-029c-4490-b4a3-db07aa31b9e6": {"node_ids": ["0ea476de-5669-41c2-aa82-25e29a286950"], "metadata": {"page_label": "305", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "797a7b73-f4d3-4923-a360-dbf451551192": {"node_ids": ["414d64c9-5f03-4d86-b859-f7036baaccc5"], "metadata": {"page_label": "306", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "16a113c1-82a9-479a-88f8-26f94038b6a7": {"node_ids": ["d25c174c-b087-47c7-9d65-fbb6356c8962"], "metadata": {"page_label": "307", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8d7330c2-535f-4501-a8fe-caa62577b0a8": {"node_ids": ["8e348a71-b2a5-4ca7-9be6-5f762eb62ce5"], "metadata": {"page_label": "308", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "10bc834e-da68-4933-aa76-9d1fff813a21": {"node_ids": ["1760c119-df9b-4b4f-b6f6-7789f0030c34"], "metadata": {"page_label": "309", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "de07417a-628e-4f7f-9be7-e7c3f09dc087": {"node_ids": ["37cf2e54-37be-4762-b087-d6152ccd87c6"], "metadata": {"page_label": "310", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a0deb0fc-1fda-40ad-b4bf-be6825d8c749": {"node_ids": ["8657f37b-79c8-4371-9c8f-3700ae5ddc0a"], "metadata": {"page_label": "311", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f3bd359d-9f66-4f11-a732-0bcef15f73f9": {"node_ids": ["a2eb9f94-3511-41d6-8c92-1d46678989f3"], "metadata": {"page_label": "312", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c4aa7098-4014-4f37-b5db-5f94c771e5e7": {"node_ids": ["3ada6a29-8776-4518-9b12-3a60c51313df"], "metadata": {"page_label": "313", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f0203cc0-ea7d-4276-b67a-223311739df1": {"node_ids": ["eb40f08e-c188-4703-87e5-773280852f3b"], "metadata": {"page_label": "314", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7863a71f-7cab-4460-9eeb-9656fe30e401": {"node_ids": ["79b30b01-f67b-4062-a4c6-df3a52a58c81"], "metadata": {"page_label": "315", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "36b3d26b-7471-4804-bad4-2d1f180c7b7d": {"node_ids": ["6cdf2062-0843-4d57-a47d-ed503874053c"], "metadata": {"page_label": "316", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "403c9c16-6a0c-4263-bf75-6d71428b1af7": {"node_ids": ["8d001a58-9dd0-4307-8d5b-8bc0da7ed588"], "metadata": {"page_label": "317", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "35cf410d-49ab-416c-a813-bdf7f8837d7f": {"node_ids": ["98e2d39c-dc92-4473-8e80-ac345d0790ee"], "metadata": {"page_label": "318", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b95be12b-d1bd-4074-93b9-cd814031fba9": {"node_ids": ["bfdbaae8-2820-4661-aab3-668aa68e030c"], "metadata": {"page_label": "319", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e475547e-556a-4faa-bf6d-5cf450987bfb": {"node_ids": ["7c0275ee-df84-44b7-8759-3d1baefbef45"], "metadata": {"page_label": "320", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "afdf01dc-1776-40ef-9c62-0c15e1d657f2": {"node_ids": ["739a9a25-a065-482f-87a8-d0ea57329ef4"], "metadata": {"page_label": "321", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c4b46bff-69e0-4058-b1ca-f7baca95ca18": {"node_ids": ["0392620d-a857-407e-bf04-f97a7dc7eb34"], "metadata": {"page_label": "322", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "74c8dc61-5119-4df7-946e-e12ba0a878cf": {"node_ids": ["8f5020c5-f04f-4317-a2ef-743d12005452"], "metadata": {"page_label": "323", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d14ef6dd-a376-4161-98ee-09043710f475": {"node_ids": ["d3d4c49b-4d71-4db1-82bb-4b859d6fdba4"], "metadata": {"page_label": "324", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "29a6c8b2-efb7-4c30-b404-82f6daab22af": {"node_ids": ["d91cf7cd-10ba-4cc8-9410-a1adf93f775c"], "metadata": {"page_label": "325", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "16fd39e4-6d54-47fc-991a-51fc9d8db306": {"node_ids": ["f281539d-44f8-4333-938c-cd4499bf0045"], "metadata": {"page_label": "326", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "95f91784-872e-443e-8c5d-9ec857e7f8b4": {"node_ids": ["58e6c758-bff7-4f89-87ad-4e8dbd20feb9"], "metadata": {"page_label": "327", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "805711ff-fc58-4b1e-b7ba-be9c2a90e81e": {"node_ids": ["0dd74447-51c7-4854-82f0-9736c7215f7f"], "metadata": {"page_label": "328", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c5d5f2ee-2d24-481b-aa0f-a1e672d8d7c2": {"node_ids": ["41a39dc4-bcd4-4074-9a55-bc886bcfd57f"], "metadata": {"page_label": "329", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b2b147eb-4e8c-4b59-a4c6-5527018386b8": {"node_ids": ["ce56d7ac-0806-4743-b1aa-9662f833e7d2"], "metadata": {"page_label": "330", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d5bcc824-134e-463e-9879-d9689fa4e72a": {"node_ids": ["2d650689-0f70-4ac1-b387-70398648c26c"], "metadata": {"page_label": "331", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a94daa11-4bc8-43d2-bb55-bfb4fe3fab49": {"node_ids": ["c1b2da40-9f03-4554-8f64-71ff4c049b8b"], "metadata": {"page_label": "332", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "896a0d62-e9cc-409e-ba20-3038a067a5d9": {"node_ids": ["b4d0cd3d-9280-4fef-a6bb-0c29918869f8"], "metadata": {"page_label": "333", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "19c0839d-ad3a-45d0-867e-94c5ec4dce19": {"node_ids": ["b3ef2eca-6d40-4770-8209-934d82c943c5"], "metadata": {"page_label": "334", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7295b5ed-3551-46b9-8585-d83ca6892395": {"node_ids": ["812d3851-a374-44b2-94df-58540d892a69"], "metadata": {"page_label": "335", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0ba57251-0a16-4042-8760-3ebf2c5f8a7e": {"node_ids": ["fb9fe461-854e-4cbb-8722-5620ded0e4b8"], "metadata": {"page_label": "336", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "aa70feb9-2fcc-42b1-b670-634d996a1ffa": {"node_ids": ["bdaa0f2b-5961-4839-834b-bddce0b55741"], "metadata": {"page_label": "337", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1df352b6-b749-4f92-a09e-88dc00117603": {"node_ids": ["e300206d-3ca5-443f-bf2d-419fc84a895b"], "metadata": {"page_label": "338", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2327da6d-0def-41cd-8d06-fc9fc7f37c48": {"node_ids": ["816c1263-f6a2-4f2d-80bd-df4fcc5fca2d"], "metadata": {"page_label": "339", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "13416d19-4476-4a9a-b430-a0fea55ab0a8": {"node_ids": ["beaca39f-fd55-4935-a093-7bf97a456d95"], "metadata": {"page_label": "340", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "905d733b-b320-4f7d-80e6-ec347be1f6e5": {"node_ids": ["d2a77c14-606f-4610-b23f-cab1e642539b"], "metadata": {"page_label": "341", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2dfd9ae9-4c98-4bd8-bfbc-0222226ab9f3": {"node_ids": ["e574579d-3c8c-446b-9b9a-f9d2313b9c43"], "metadata": {"page_label": "342", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a4f3f97d-2692-444f-b286-a4d89a655dc4": {"node_ids": ["7d30d1ce-2395-45d8-ad27-477d1300cdcd"], "metadata": {"page_label": "343", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "41cc6a27-4487-47d6-b684-fd5d26f1a835": {"node_ids": ["853f4537-5804-4440-af1b-d1a9d2636676"], "metadata": {"page_label": "344", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8a8d01f5-6740-4108-97cd-8ae04ff9e1c4": {"node_ids": ["2392e6b6-907b-4cfe-be46-6eff156bee98"], "metadata": {"page_label": "345", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b43723c8-9658-4f9f-9433-bc6872e5f5c7": {"node_ids": ["029704d2-b38e-4046-8f38-435bb0ad0cfa"], "metadata": {"page_label": "346", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "faa39ab5-962e-4a54-a7ee-5e9d1fe4b294": {"node_ids": ["d1bba514-3bd0-45dd-8bc0-b65d9e1c7f13"], "metadata": {"page_label": "347", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "58b8f63e-4b5d-4c68-8925-4db416b624ef": {"node_ids": ["a89614f1-840a-45c9-a643-4d41e1a66157"], "metadata": {"page_label": "348", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "faa9b7cd-ec6c-478b-a740-249ed26ec60f": {"node_ids": ["c917cac0-2364-479a-83d6-f51dfeb7e7f0"], "metadata": {"page_label": "349", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0881a790-589c-4e7b-9b61-81283ad36e34": {"node_ids": ["e8fa8d8e-1fed-4d17-a188-a4d2800e3872"], "metadata": {"page_label": "350", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3fa928d2-45f8-4142-af82-9e149e3f82ee": {"node_ids": ["3d91e25a-c8db-4659-9d34-aa5ba793684a"], "metadata": {"page_label": "351", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e0bce934-aec1-4f8d-a4d1-a58ea3213057": {"node_ids": ["95abdb68-54a0-44c8-b642-f680fa633a93"], "metadata": {"page_label": "352", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "00f2a5f1-29b0-4ee5-b6d1-1c310efee388": {"node_ids": ["10bde0fd-9fbd-47ee-b599-a3d874d61cc3"], "metadata": {"page_label": "353", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a7ea9d83-d97b-4d8d-b994-266604edd55c": {"node_ids": ["cb713036-59dd-40ee-abaf-a6fdecd82038"], "metadata": {"page_label": "354", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "927edddb-f50b-4b6c-ade9-0a1d82003e16": {"node_ids": ["cb9497f2-e42d-4695-b852-82ca391d35e7"], "metadata": {"page_label": "355", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "db65070d-ecb1-4206-8ebf-fc81d8e3bbe3": {"node_ids": ["67887cfa-8fca-44b8-83ad-ddbfd302b0c0"], "metadata": {"page_label": "356", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a7b6d2bf-2ce8-4505-852d-123a1424fd5d": {"node_ids": ["dcc7ee51-3e67-4981-8e73-19a08fa02a3b"], "metadata": {"page_label": "357", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8db30909-9db2-4429-9f5d-22b4c6a91b08": {"node_ids": ["ae70a06f-eec7-4f3d-95e8-687b5e5ec363"], "metadata": {"page_label": "358", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "dd35f9a1-5a21-4e9b-8a74-7c216306b78f": {"node_ids": ["69fd9cdf-86e6-41d8-ac4a-1946979f557d"], "metadata": {"page_label": "359", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "60b45658-c9ce-4001-8283-f7206e997e43": {"node_ids": ["bb6e0f04-0e54-4b28-ade1-e6da52e044ce"], "metadata": {"page_label": "360", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8f4aa600-f146-4a8f-b379-8f0af6bc647e": {"node_ids": ["0c81ce65-235e-4467-a6a0-88b9c84ec756"], "metadata": {"page_label": "361", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c952c7dc-0543-4dfa-8d6b-5601458c8fc7": {"node_ids": ["df2bf765-76c0-47d1-b299-699d2ca2bb57"], "metadata": {"page_label": "362", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "33fae1a3-763a-4980-ae79-0d29c5ae30b9": {"node_ids": ["ae1b25bc-5bcb-46a9-bb46-4fd990eb1b11"], "metadata": {"page_label": "363", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6b7d7ddc-01a0-437c-9dff-20f3352a1ab2": {"node_ids": ["f3e70fd5-da19-44ab-91eb-4c16ecfca0e3"], "metadata": {"page_label": "364", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "868c4946-0500-4f37-9fc2-afbfa857a3ef": {"node_ids": ["6d9aeaa1-259c-430c-8306-3beba2275b78"], "metadata": {"page_label": "365", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "60b39855-be2f-412b-a014-67b2b40b7429": {"node_ids": ["e888290c-4fa5-483b-8979-8132dc3e66ee"], "metadata": {"page_label": "366", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "fc69de6d-d34f-4492-aa46-e919852178de": {"node_ids": ["9f4ae8b7-d195-475b-b539-4a0b32494b70"], "metadata": {"page_label": "367", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "391ea42a-2276-4397-aee4-03baacdd2ff2": {"node_ids": ["3fe3c2de-dabb-4675-acae-5d4f77002e31"], "metadata": {"page_label": "368", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3fd0c1a5-90e1-4cbb-b154-fb21b036b43c": {"node_ids": ["49e082ac-ee79-4fb0-932b-50f8b7ae92be"], "metadata": {"page_label": "369", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8af4c9da-6fa7-4f72-81b8-821435c2d851": {"node_ids": ["174c19cd-820c-41b0-857e-f28bd1b2d9bb"], "metadata": {"page_label": "370", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8da61bb5-1434-4913-a1db-3ed8ff0139ad": {"node_ids": ["b5f11f73-adb4-440e-9229-a95f83f5b77d"], "metadata": {"page_label": "371", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "255afbd0-a37f-4f4a-8c8d-406b0e32e6bf": {"node_ids": ["54b28003-ab8f-4345-9349-29577a095613"], "metadata": {"page_label": "372", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1883e804-6ed5-486c-a939-c0e69afca23f": {"node_ids": ["120eedf0-73ef-4849-a84e-3f12ff8dd2ab"], "metadata": {"page_label": "373", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c74ea664-c253-4e93-9019-5528bb9d7482": {"node_ids": ["52b838ed-d16c-4d0b-b7de-571dd46b86f7"], "metadata": {"page_label": "374", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c191cd8a-5a1a-40d4-8359-e4e0b09e688d": {"node_ids": ["ed747990-d4db-4ab0-8430-3b688efd264b"], "metadata": {"page_label": "375", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1d001377-ee0e-45ea-a11b-3c2887f33afd": {"node_ids": ["83c58c16-faa9-4972-a5d8-4887ade3c927"], "metadata": {"page_label": "376", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6c28ad50-1e4c-4fc8-80a2-7e40788c9dd6": {"node_ids": ["975ad313-da0f-4695-9f1e-e8acae06f65e"], "metadata": {"page_label": "377", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "289db677-2391-478e-9b1c-4b1193b751b7": {"node_ids": ["52be5629-c655-4af3-adb3-a86a8bb89c37"], "metadata": {"page_label": "378", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2f149ff6-101d-4d39-acdc-f6e32b0a5f21": {"node_ids": ["ccdf9cef-54ce-4825-aac3-7d1ef6d24548"], "metadata": {"page_label": "379", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4a096443-a162-47d9-939a-0fb0946c98ac": {"node_ids": ["7ecb579e-0d2e-424f-aab9-f6772bf605f5"], "metadata": {"page_label": "380", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d6dd358b-3b4c-4af0-9d18-49c7ea701347": {"node_ids": ["a5f54fb4-71b9-4015-abeb-8b396255afea"], "metadata": {"page_label": "381", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5ded4edd-68db-4ad0-9da1-7d98cd12debb": {"node_ids": ["ec429d08-a05c-4690-a7cd-2dc53a2850b0"], "metadata": {"page_label": "382", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a853aed6-311d-4435-aaae-d20761d89c00": {"node_ids": ["d32641aa-22c0-48aa-bf55-ba6c7138fb9d"], "metadata": {"page_label": "383", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c07f65d5-a94b-4b55-8ed4-59879e88eb03": {"node_ids": ["4692d605-7fc1-45bd-9af6-e2ff838aad67"], "metadata": {"page_label": "384", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f54364ad-b8a8-4810-bedf-a17c88636320": {"node_ids": ["54ce8925-e9f5-474a-9341-b2cae1c36e9a"], "metadata": {"page_label": "385", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f219b70f-f4a0-4d97-941d-0104df8369e7": {"node_ids": ["9126bb45-11e5-4ca9-9fe3-61ff8e66f5f8"], "metadata": {"page_label": "386", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6ba0f0a3-6855-4d5f-a810-8cf32b168acf": {"node_ids": ["7a63bff0-45ae-48e4-8daf-8212b94844d2"], "metadata": {"page_label": "387", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e115c218-e8fe-4d89-995e-8d77f6d29329": {"node_ids": ["0bf0c6d4-9ca4-4c6b-b6f8-9ec2b0a6b85c"], "metadata": {"page_label": "388", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "829e68b1-b135-4847-a859-d7b204eaa65a": {"node_ids": ["bf4b51ba-822a-4c82-8bb4-4798d23cf2e5"], "metadata": {"page_label": "389", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a61615ef-df3d-4173-a9e2-14a96da682ef": {"node_ids": ["36ab57ad-9a37-46b4-bb6e-61bf1de49e12"], "metadata": {"page_label": "390", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8227dd3a-4b7a-49ea-9282-fbc4ad984b99": {"node_ids": ["a8dcb576-35ef-414e-8d9e-fc6dfce6291c"], "metadata": {"page_label": "391", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "445fd25a-ccf4-4d79-b0cb-547cf5d773fa": {"node_ids": ["186ccfc4-e820-4f57-b434-c71dfee7ec89"], "metadata": {"page_label": "392", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1dd15f7f-56ac-4b7a-80bd-35a5cf936497": {"node_ids": ["6bd674ec-1ff8-4648-99c9-759d1caedae5"], "metadata": {"page_label": "393", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c0e00c40-a006-4394-bb86-7dfe428bc3fd": {"node_ids": ["452ec158-f742-4ce0-8150-4f5040e36a1a"], "metadata": {"page_label": "394", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8aefe9e1-3da1-4b0c-a0eb-c88bcfcf5c35": {"node_ids": ["58788801-2068-4aac-87bb-425efff4305a"], "metadata": {"page_label": "395", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e61def83-4e90-417e-bd0c-609ad1b2ecab": {"node_ids": ["b836ee80-1e16-4a98-ba51-1654b51b289d"], "metadata": {"page_label": "396", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "19755f5e-5c1b-45c5-92bf-0a3918ff1d3d": {"node_ids": ["8fc7757b-c491-4786-aa12-5c82e9bde502"], "metadata": {"page_label": "397", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "63522a09-9807-415a-bdc8-13ad3f868004": {"node_ids": ["d76678a4-a1f4-4c1e-9784-719966e797eb"], "metadata": {"page_label": "398", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d42e1da1-e8d0-4188-8d49-d870a96ae45e": {"node_ids": ["4328d0df-a787-4e3d-a3bd-6ac500dcf8f9"], "metadata": {"page_label": "399", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "638fd362-9e0f-41a7-b3c3-25a9b6266a99": {"node_ids": ["b305704c-1342-4ad0-8f75-4b36186c20bc"], "metadata": {"page_label": "400", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "cb506695-c3ed-477b-810b-f158cea54a96": {"node_ids": ["567cb12e-201f-46fb-9fda-d5d48e6ba7bd"], "metadata": {"page_label": "401", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3b619a66-a90d-4611-8b84-f1400c26bb74": {"node_ids": ["b85a5abf-32d5-46d8-b4e0-1dbcabe7e0c6"], "metadata": {"page_label": "402", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8cd8ae84-425c-43b8-8073-642e3fc6a33a": {"node_ids": ["01e74903-1749-43b9-aeb4-cab2a0d28c3e"], "metadata": {"page_label": "403", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a2cb4083-2ee1-4bab-a7a1-45d1d20d258c": {"node_ids": ["671c270e-54c5-4127-a44d-2c44db901612"], "metadata": {"page_label": "404", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2f039022-0615-4abd-8d02-b418b6f391ff": {"node_ids": ["1e641874-453e-4491-9f58-26ecc3386068"], "metadata": {"page_label": "405", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "bf56cf77-3c0a-4134-8684-108344100996": {"node_ids": ["c61cf845-6ceb-46d8-bac6-7490ddc86007"], "metadata": {"page_label": "406", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "cb404486-d9fe-42f5-a34e-dd174e0fe925": {"node_ids": ["d68dd9d8-869c-4a42-9479-e3759c3a0cdc"], "metadata": {"page_label": "407", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5843ec08-6a84-4be0-9378-123123f7ce99": {"node_ids": ["e36bed3f-0985-4461-95f5-f195ae51802a"], "metadata": {"page_label": "408", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d113e6e0-ab4c-41f6-8080-53d2d985b2ed": {"node_ids": ["6eae4d42-a9de-45d6-99b3-4da7601c0e59"], "metadata": {"page_label": "409", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3572ffc6-e39e-44bb-aef4-21254e195207": {"node_ids": ["5280a483-e787-4ae5-b428-557f21fe9acf"], "metadata": {"page_label": "410", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "aadcf74f-b9a7-4744-a0e9-7fe7be15181c": {"node_ids": ["a3d62345-756f-447c-9d63-3fe3cfc53d30"], "metadata": {"page_label": "411", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5cedaaaf-5d4c-4256-9078-a0578b3bb162": {"node_ids": ["dd2efdbe-7e1c-4c0b-bba1-35a7872904e3"], "metadata": {"page_label": "412", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b0096533-6636-46c8-965e-21d6c495476e": {"node_ids": ["1a5d47c5-f2dd-4382-9831-1c4de21493eb"], "metadata": {"page_label": "413", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f568caf1-38b6-4259-a243-020e8b9847fc": {"node_ids": ["71106dca-3b78-4be0-8acd-9244501f1013"], "metadata": {"page_label": "414", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c0d02e3d-28b5-452f-b631-67a7c910234b": {"node_ids": ["9901e4ed-9f0c-43dd-83d2-d268bfaed3ee"], "metadata": {"page_label": "415", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8c4f6acb-375f-4247-a375-86163978a4db": {"node_ids": ["364b04c1-ae38-4d1d-9f95-42c349dd3f7b"], "metadata": {"page_label": "416", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ca08241d-8020-4baf-a638-9c5dc773408a": {"node_ids": ["75dd6ecb-d894-4f1b-b256-fd5ac689ee59"], "metadata": {"page_label": "417", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "59b4fd11-4d2d-4818-8453-ad8c0ac2ee9e": {"node_ids": ["e4c48f75-305e-4bcf-afc3-15b6b67256a3"], "metadata": {"page_label": "418", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "51000967-d717-43e7-8d27-011ab05a377a": {"node_ids": ["7d2f4331-6c75-4274-adfc-f49275cf6846"], "metadata": {"page_label": "419", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "477d3e3d-6a12-4faf-b0ec-d52ac008b126": {"node_ids": ["d65f0a56-1f14-447f-b67e-92e98a221818"], "metadata": {"page_label": "420", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "476d10c6-b80c-49d6-9432-53e4d51deb03": {"node_ids": ["51fafe83-e48a-4e75-b6cf-3b075a8e7975"], "metadata": {"page_label": "421", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8212dda6-2965-4045-a459-a2f7859ec491": {"node_ids": ["22cc2f77-5311-4f7f-956b-8d41b48e2928"], "metadata": {"page_label": "422", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d9255a00-27af-4637-8714-5c58401a8b1e": {"node_ids": ["43c42c6a-0f4c-4c50-8fed-22fe6d3d5a15"], "metadata": {"page_label": "423", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3ab23acd-13f1-4289-9cb0-2949ae9e5cae": {"node_ids": ["a0a65121-93be-4eda-84b4-0e6efd07b0e7"], "metadata": {"page_label": "424", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "457f1027-efcc-4572-b554-b9cdf2b4b749": {"node_ids": ["279d38c8-7b00-4a3e-a707-c79b6bb8f00c"], "metadata": {"page_label": "425", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4be61f4b-98d2-44f8-94e5-e41919ad1e8a": {"node_ids": ["370990fa-5905-417b-9a6f-ef7af8eec42d"], "metadata": {"page_label": "426", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b537b42c-cedb-49f8-b089-2b8a2b928182": {"node_ids": ["16407134-7c04-4fa5-a4b8-dacf7ced730e"], "metadata": {"page_label": "427", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1e756e56-bb98-40f6-bf40-83043d7e17d9": {"node_ids": ["35128009-e695-45ff-9a69-6c066a0b057a"], "metadata": {"page_label": "428", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d11c5c0e-aca6-4070-b201-0bc26c16f582": {"node_ids": ["e5de7c4a-0125-4f65-8e83-bf08ed0c9953"], "metadata": {"page_label": "429", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "53003ffe-399a-41f5-bec5-5c20a293c219": {"node_ids": ["38a438bd-16dd-4d80-81b3-0732c8531dd1"], "metadata": {"page_label": "430", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e3e49bb7-573e-433e-8009-79a390d40da2": {"node_ids": ["506eb36c-8ee7-429f-9978-dbfd3fb4654a"], "metadata": {"page_label": "431", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8a0648d2-63cd-497b-9e29-0d2a5e650c90": {"node_ids": ["70e475ec-c528-432b-866d-2c3814c1acda"], "metadata": {"page_label": "432", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8590d746-d655-47ad-a100-3d21b3be820b": {"node_ids": ["d0dd3ff5-97a4-484c-9a42-1544cf50ba98"], "metadata": {"page_label": "433", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f55947e5-9e3f-4ed6-a9ee-19f40cef618d": {"node_ids": ["4eadee60-ef8f-419f-a5df-639b22f4d786"], "metadata": {"page_label": "434", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6911cf87-d9c8-4f6f-869f-00dedd0c8633": {"node_ids": ["15e55747-9a63-43d3-b03f-9dc3c1cdf465"], "metadata": {"page_label": "435", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "34b60732-bb92-4e50-901a-42cb4940908a": {"node_ids": ["0572c031-6828-4456-a5dc-9cb450dec021"], "metadata": {"page_label": "436", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "54d10ea7-1df0-4280-9d72-50364112c6c4": {"node_ids": ["bac6609d-3fb2-498b-8573-fae3301cb596"], "metadata": {"page_label": "437", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3c3b6c4b-3bf0-4e1c-ab45-7abb6b68e50c": {"node_ids": ["cbaaa184-6efd-43a7-ab38-865c4d209af7"], "metadata": {"page_label": "438", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "77113889-baf8-480c-855d-79e147f41cc5": {"node_ids": ["67a6ac54-3ddb-4893-8344-1b6373773daa"], "metadata": {"page_label": "439", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "876637c5-60c1-4351-8344-5983a67af204": {"node_ids": ["db583af1-8d7d-4552-82f0-677ae9b7b52c"], "metadata": {"page_label": "440", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b381c1ce-09f3-4916-889b-11d43307e5f7": {"node_ids": ["49972ed5-b58a-438b-b03d-3eac0e2d34bc"], "metadata": {"page_label": "441", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a7d8f5fc-2936-4457-be90-436652008428": {"node_ids": ["cf59f6cc-a95e-4465-a28c-6a223a2931a7"], "metadata": {"page_label": "442", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c6521e71-f6d5-4c16-aefe-0c4cf1dc3c32": {"node_ids": ["41aa052a-4385-44f6-a356-86019e47dcdb"], "metadata": {"page_label": "443", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "73cfcb29-04db-4dcb-a9d5-dd08f4c82c61": {"node_ids": ["9db1119f-9f59-4c77-8ff6-d3b2bba5dc3f"], "metadata": {"page_label": "444", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c47caf3d-9243-44d5-aeb9-5527f91885a4": {"node_ids": ["72a73888-0fc3-43bf-8ad4-dbd08b8c9b74"], "metadata": {"page_label": "445", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6cc4faff-b692-4a03-9146-49fa6020e04d": {"node_ids": ["7442b19e-83e1-4d59-80a8-00f7af0de0df"], "metadata": {"page_label": "446", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f883f8be-4211-4221-bd6b-bb053a70967a": {"node_ids": ["1cda061e-9891-4c9e-aff8-5c37d1ffeaba"], "metadata": {"page_label": "447", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e99fd6fb-484c-4804-a046-f2f1085e445f": {"node_ids": ["6924de96-0525-43ec-8123-25ae4377cf80"], "metadata": {"page_label": "448", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ddc19f2c-bad3-4786-a264-55c2dd89b554": {"node_ids": ["5006a7e7-8fbe-4d6b-a943-e95f09d79b36"], "metadata": {"page_label": "449", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9b216d01-1019-437e-8d59-a6c0e7ec8dc9": {"node_ids": ["605d4dac-b739-4bf8-be5d-d96314fba0ff"], "metadata": {"page_label": "450", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8db5e1ca-33e8-4a25-95b3-3f15d34b6f60": {"node_ids": ["09f49bf7-0eb4-4016-8bf9-c0cb5d598531"], "metadata": {"page_label": "451", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4bfe78b6-f161-4128-b770-63fab47693b7": {"node_ids": ["58894767-3d65-4b70-aeda-8c822727bdd7"], "metadata": {"page_label": "452", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b0596770-ce42-43c3-96e3-e911138fdaee": {"node_ids": ["0c1e2620-ae68-4e3f-84c5-177b134ea99c"], "metadata": {"page_label": "453", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6e01e6c5-3eb1-4824-8a03-44742ec3fb63": {"node_ids": ["2058ba4a-60a1-455e-96e1-1da80e0e1b98"], "metadata": {"page_label": "454", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6f63531a-ad63-4d98-9906-047a5ea1e7c7": {"node_ids": ["f05f7c6e-258f-40e8-8c15-eaefed2c04cd"], "metadata": {"page_label": "455", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "18171836-d597-40ba-80d3-ac3abbd45117": {"node_ids": ["8798d083-bd61-406f-95d6-34b1af422c11"], "metadata": {"page_label": "456", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "99f9bcfb-a2a1-4758-8f83-7b32e281b26c": {"node_ids": ["586479bf-0dd9-4433-a238-3d5d3353c114"], "metadata": {"page_label": "457", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5ecb3515-d8ed-49c1-bbd0-4c28170f162c": {"node_ids": ["23a5c9a1-b618-47d4-8cb4-48b9cca305dd"], "metadata": {"page_label": "458", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8651660d-5f66-4ce3-8d46-8395ccb0208a": {"node_ids": ["aa7d8766-c9ba-4b99-a081-816d76c64da0"], "metadata": {"page_label": "459", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "02951735-9752-42df-b6fa-00fb80db7bc4": {"node_ids": ["9d3606d5-2363-4e51-bbbb-f2d49a8278cc"], "metadata": {"page_label": "460", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "51e483d4-fe6f-494b-91cb-a168a952baa3": {"node_ids": ["a7b2c025-a457-4c3c-8541-2f1303066ff8"], "metadata": {"page_label": "461", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3a91f6fd-06e7-4d31-aee6-7a8cbc758a9a": {"node_ids": ["cd1c1002-6bcd-4a29-8032-e3d58424bc30"], "metadata": {"page_label": "462", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f88d829b-d4d1-4002-964f-e901c153bf51": {"node_ids": ["3dd24298-f384-4df1-9dc9-1e2433d9b022"], "metadata": {"page_label": "463", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2f1d47bb-1c96-4a6e-9f36-414ade1c369e": {"node_ids": ["7565eb2e-d9a0-4b46-9d3a-7691dc611dab"], "metadata": {"page_label": "464", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f58a1067-f3d2-4bce-9037-4f352d3e716e": {"node_ids": ["9ef6293e-d6a2-4ef5-b8f4-3bdfdc4ad282"], "metadata": {"page_label": "465", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ff393923-7299-47d2-a5e7-56c5981d8454": {"node_ids": ["a026b01d-98e1-46fa-8549-acbc33e3ea55"], "metadata": {"page_label": "466", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2207db1a-f0cf-433b-ba25-8e324887beb8": {"node_ids": ["2fa85a0e-f4b9-4bcb-b098-f46aa5d3edb8"], "metadata": {"page_label": "467", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2cd99a0f-41ba-49ef-b66e-f1be7a24e7c4": {"node_ids": ["6033bcce-b187-4def-b2a8-04502d90f5ee"], "metadata": {"page_label": "468", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "bab13340-ac85-4ad3-a4e9-69ce02d53a22": {"node_ids": ["b3cca6bb-3acc-478e-91ea-05bdcac06509"], "metadata": {"page_label": "469", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2901d76f-ddfb-493e-9aff-0917fb98d9b8": {"node_ids": ["6f4513fb-1ed3-4241-a9f2-81897b5c44c0"], "metadata": {"page_label": "470", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8168aa4d-837f-479a-b375-578222b42bd0": {"node_ids": ["545e7709-837e-4b59-a9e6-139829703f28"], "metadata": {"page_label": "471", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6a928a86-1137-4139-a6e0-a1e6545a6e0c": {"node_ids": ["fada4697-ad14-4f5a-a882-8578f1ad3d11"], "metadata": {"page_label": "472", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "423e1ad4-1533-4ac6-93d8-cc2a3d18ec43": {"node_ids": ["c4415407-70c8-48cb-8c32-1c8e0eebfae0"], "metadata": {"page_label": "473", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "aea1591d-b6bd-437c-b8d2-309d7aabbc42": {"node_ids": ["1f9838ca-4eac-4278-aaac-a05eaf61dc85"], "metadata": {"page_label": "474", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d7828f60-d38a-45b5-9bb1-c2cb95111bf7": {"node_ids": ["627cc5b8-ac42-42b2-a61e-be07852220ad"], "metadata": {"page_label": "475", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f17cb0b0-7402-4b3c-88f0-eab703f511bb": {"node_ids": ["d37a05fb-b2ab-4e99-8605-8ff628cb724a"], "metadata": {"page_label": "476", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "369c9a57-5b38-4d7f-8eff-7888a9f14c6f": {"node_ids": ["0188cb5c-7008-474e-90e9-75a66ba06272"], "metadata": {"page_label": "477", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "991a181a-fc94-4561-9218-eeaa28590844": {"node_ids": ["3eff63f7-1679-42ff-b746-07fac5648cbf"], "metadata": {"page_label": "478", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "fcd26150-6916-40e5-83cb-82af0c2ab6ad": {"node_ids": ["b8096c11-7a9d-43a5-9792-034d20e4579c"], "metadata": {"page_label": "479", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8e55505c-1397-4d23-bd25-4a9d56830c6f": {"node_ids": ["8e3ce7ec-f105-43d9-862f-a4353a17947f"], "metadata": {"page_label": "480", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9a6a6d4f-d617-41ae-be02-13fcdff0b31e": {"node_ids": ["9c1c8fb9-2422-42f5-aed3-ebb6dfeab60e"], "metadata": {"page_label": "481", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c7a8b548-9bbd-4641-bb40-b395f555a252": {"node_ids": ["e66973f2-ad3b-4787-86c8-bb5bde4ca951"], "metadata": {"page_label": "482", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "bc43cce8-c2ec-492a-8b09-2de27968178d": {"node_ids": ["c0ea336a-0b24-44fd-9f8f-275e21ddd10f"], "metadata": {"page_label": "483", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4b4643d8-a99b-45b6-9d55-89b9bd53f0b4": {"node_ids": ["056abce1-ea9e-4977-b12f-30027c4f3154"], "metadata": {"page_label": "484", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "035ddaae-0770-4fa2-aa78-8cbff94e1822": {"node_ids": ["35ac07cb-2bd1-47c7-85bf-49de7a6a988f"], "metadata": {"page_label": "485", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6411c440-2548-486c-8860-a1a673ea6408": {"node_ids": ["863116a6-9bb1-4352-979f-fec0fd2c9cec"], "metadata": {"page_label": "486", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "efcef797-7eb8-4574-b0e7-e8bc1c4fd321": {"node_ids": ["92e8c10e-3c3c-416a-9f6f-8abd475d6cdd"], "metadata": {"page_label": "487", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1b163fef-8a3d-4398-9b58-41d3bae4e656": {"node_ids": ["f3c926fa-742f-48c1-a8de-b865088d2931"], "metadata": {"page_label": "488", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "93ba3609-f944-449e-8706-3ec5a2be44d5": {"node_ids": ["a88836dd-8642-4996-9940-6beeeac7ddc1"], "metadata": {"page_label": "489", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "45148a1b-3c36-47d9-8177-a98e37f9a188": {"node_ids": ["2b6c1b23-108b-42d8-96ab-9f14654071f3"], "metadata": {"page_label": "490", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "66000ee8-8c66-4867-aced-a77715019147": {"node_ids": ["ff76df9e-8ec4-4f61-9c81-8a5be4588a84"], "metadata": {"page_label": "491", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "84b500fa-5242-492b-8a71-804751986660": {"node_ids": ["32371bbc-973c-463c-8ee9-f2dfbaec0e23"], "metadata": {"page_label": "492", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7149c17e-c002-40c6-a76b-6cd9990a969a": {"node_ids": ["e8ca6b5c-ece0-440d-ac19-0f5353ac58fc"], "metadata": {"page_label": "493", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8b9c5aa3-5dad-42d2-bff5-8ceb2b237026": {"node_ids": ["461192ca-f068-475a-b5ff-2e940567c183"], "metadata": {"page_label": "494", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1c550740-0641-456a-ba04-019a592cffd7": {"node_ids": ["4379236e-a169-4ae2-bcba-0241d1deba65"], "metadata": {"page_label": "495", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "89d81dc7-cd2f-49f9-9e84-67cb5d75ff77": {"node_ids": ["21f03c25-641a-4bba-8816-2ba018b7e1c6"], "metadata": {"page_label": "496", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "842a3793-e6f7-4ecf-8bf8-5a0c18eefac7": {"node_ids": ["7498755c-9f12-487f-acbe-0ed835edc8df"], "metadata": {"page_label": "497", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "65d10e17-d380-44d4-ac81-bfa62bfb7b23": {"node_ids": ["d9426d67-62ce-4748-9188-03cd1c3a57b9"], "metadata": {"page_label": "498", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6406d3d2-d9e4-41e6-bf26-4c433a70ab1f": {"node_ids": ["8fd6c89b-843f-4d4c-8f60-723b499dd58d"], "metadata": {"page_label": "499", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "abf16e74-d0f3-4d72-97bd-8d89ab7da461": {"node_ids": ["24233e7a-214e-415b-b253-e133e3cbbc10"], "metadata": {"page_label": "500", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "100cbee8-e244-4286-a1eb-818a810949ef": {"node_ids": ["5532232b-fb9d-4d44-b830-eeacc868bc9b"], "metadata": {"page_label": "501", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "670edbce-c53d-43c5-b053-054f9a19acb3": {"node_ids": ["d679a408-a5c1-4d39-8f5c-00e8bff2682a"], "metadata": {"page_label": "502", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "736737ac-cf65-4ac1-bffa-05d0b96508ea": {"node_ids": ["7ae8cc53-18d1-4f12-84a3-05de4e4eb765"], "metadata": {"page_label": "503", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f7da4d14-98f4-40f0-9829-111623ee3192": {"node_ids": ["7e5c9cfc-fdc4-4641-8114-e46095bc664d"], "metadata": {"page_label": "504", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "eb0f707e-ad1e-42f4-8325-a2bfa4f61df0": {"node_ids": ["5e2e438b-41d1-4307-9757-944d1537cf08"], "metadata": {"page_label": "505", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f1c9b2d8-71dd-40d9-87a7-86d6d9732b21": {"node_ids": ["02ecf6f2-5697-482c-8277-326049b790f1"], "metadata": {"page_label": "506", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "666f0c95-b46e-40f2-8ee1-38bd8dac9683": {"node_ids": ["c09093b2-e109-4083-b60b-5f7b1a692872"], "metadata": {"page_label": "507", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e4bbd617-a4b4-4b02-9988-912468ed8fa8": {"node_ids": ["56c2b184-4e3b-4ede-92d1-a620a18d4db9"], "metadata": {"page_label": "508", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7ca4ae93-a141-48f1-9c40-4a9ae36cf277": {"node_ids": ["c483ceb8-abc5-4f08-8104-aa519ecdf310"], "metadata": {"page_label": "509", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "69adc5c1-3549-44d2-94bb-77e5e38305d7": {"node_ids": ["94813b11-2a25-45a0-a680-33beac5c0589"], "metadata": {"page_label": "510", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d9b9ff1c-5951-473f-8c82-5dd6106d763e": {"node_ids": ["c5b0d7e6-9052-4b44-b559-f04b13dbb6c3"], "metadata": {"page_label": "511", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0c65ab96-cbb7-43b0-aa19-9a77363bae87": {"node_ids": ["db85380f-1df5-4ad7-ae36-fb3fe78d123d"], "metadata": {"page_label": "512", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0f8b2fe2-08c0-4d3c-a756-3a7feb069186": {"node_ids": ["4f7e6e3b-3daf-4c23-8e2f-0e7027ddbdf4"], "metadata": {"page_label": "513", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0d34336b-26aa-44a0-8e8b-bb9957e8f982": {"node_ids": ["1615df39-9797-4402-aec9-dcc65526691f"], "metadata": {"page_label": "514", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e7bff352-15f2-4592-9a94-07b0fcd592c1": {"node_ids": ["7b8af254-ac8b-4e5c-a07e-5da58354b5d5"], "metadata": {"page_label": "515", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "25db3167-9976-4578-85d8-d9c3fa348fe7": {"node_ids": ["8017e25b-1acf-4405-be30-e051965e5a0b"], "metadata": {"page_label": "516", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c32bb3b7-6bb2-4aba-9aa6-b08e856a7fdc": {"node_ids": ["2cfe2d10-3391-44aa-bf4e-f1f389649146"], "metadata": {"page_label": "517", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "156554be-74af-486b-ac06-bdeef59d7ee2": {"node_ids": ["385c0983-676c-4905-a241-c5a961a86178"], "metadata": {"page_label": "518", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "de2cd7cb-307d-4c8b-baa6-45cf223d51df": {"node_ids": ["b44d221e-978e-487c-969a-74eeca14e585"], "metadata": {"page_label": "519", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2e91a7fb-ff60-4e67-83bf-b265686eccb8": {"node_ids": ["0b8492d4-ecea-46a0-b1eb-8c2b8fedf816"], "metadata": {"page_label": "520", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9a18ad38-e308-464a-93d5-c528abcab29b": {"node_ids": ["a61a4895-5d80-427e-8542-e0236e71f4a8"], "metadata": {"page_label": "521", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "19cf6f4f-c7cc-49fe-9350-5a1712807e27": {"node_ids": ["3aafee90-d0a1-43d6-a631-c53dd8356493"], "metadata": {"page_label": "522", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0fd90f61-f53a-487c-b20d-52ca821bf0d2": {"node_ids": ["2439603d-d4e8-4b4a-a893-54c386e60f99"], "metadata": {"page_label": "523", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b33af683-9391-4dcb-8622-ca9001200c6f": {"node_ids": ["6afdfe52-0695-4cd9-881f-5ba7916422b2"], "metadata": {"page_label": "524", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3ae7dede-bc1b-4d1d-afe0-c1da08e70dc0": {"node_ids": ["21bc51cd-3465-43d5-8ee2-3226940cd88c"], "metadata": {"page_label": "525", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "57405947-f0a7-4856-9007-b0da7f4564ea": {"node_ids": ["11df4f14-db1c-4a10-a6e9-7505fec69361"], "metadata": {"page_label": "526", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "71840c48-b07e-40bb-8bce-82b568750df7": {"node_ids": ["bad3e458-b8ae-416b-a622-ae35a6b9f9db"], "metadata": {"page_label": "527", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "945f44c0-15d0-4061-b5ae-17dc69e978ca": {"node_ids": ["6710487f-18b0-4c14-ac11-b08080ab1076"], "metadata": {"page_label": "528", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "63b8cf5c-7a4b-4de1-bc36-d233578870e9": {"node_ids": ["610ca292-f2b3-41c5-a699-81a98d74adcd"], "metadata": {"page_label": "529", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1cca56ee-b6c6-4988-bf86-c4be660596c0": {"node_ids": ["4823058b-3475-4ef9-8b42-eb6aa834dba6"], "metadata": {"page_label": "530", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f0a17c75-01ed-4d00-8be1-450e1af02ab4": {"node_ids": ["564e5df2-3d22-4626-bd80-264b8ebe5361"], "metadata": {"page_label": "531", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1a1fa406-74d1-460f-833b-b99c5971c1c4": {"node_ids": ["f9386916-9617-4dab-998a-966caaa3b47f"], "metadata": {"page_label": "532", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1407516d-237d-466c-acfb-04980df71270": {"node_ids": ["64011947-dd46-477c-b5f3-0defc26b68a2"], "metadata": {"page_label": "533", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c24817e2-c8ed-4e22-aef7-0dab7f7a0f6d": {"node_ids": ["c22b4bf5-0843-478a-abdc-b224ae71614e"], "metadata": {"page_label": "534", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f2a898ea-f146-4897-83e4-70afc781587c": {"node_ids": ["a4b08d12-90d1-4be8-a4dc-30e300bf6ac8"], "metadata": {"page_label": "535", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ce9e5ecf-03e3-4a83-baf4-70b34a051c1f": {"node_ids": ["dc4d7294-bff5-44e6-9f51-58826b9c691a"], "metadata": {"page_label": "536", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0fbb9971-95f9-4188-abea-c208c994e6fa": {"node_ids": ["20b678e7-2421-4200-b2d8-24b53095d9a4"], "metadata": {"page_label": "537", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "916fe532-6486-4cef-83b4-919fffe60fc2": {"node_ids": ["7c5b449b-ae1c-49a7-bad6-4aa3b95976c9"], "metadata": {"page_label": "538", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "49896b79-db0f-49b9-8b7c-eaf9691848d6": {"node_ids": ["6f69bd6c-f930-42b4-9bd5-04f23ae6c922"], "metadata": {"page_label": "539", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2d3f0628-dde2-4485-b3b9-1199128e2e49": {"node_ids": ["77290d70-a63f-455e-bcbe-0d09bab23d5d"], "metadata": {"page_label": "540", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ddece4a9-0bf7-4695-ae96-f420ac79d310": {"node_ids": ["64121040-8c89-4803-90f1-acd379fcc38f"], "metadata": {"page_label": "541", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "320a33ac-d9e3-4da1-a7a2-8249cb518f58": {"node_ids": ["a1352bdc-784b-436d-a41c-38577d4ac776"], "metadata": {"page_label": "542", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b33a3dc7-3f20-4d4e-8352-12f945155105": {"node_ids": ["53ad5dd7-f435-4607-8d03-bc3069d9554a"], "metadata": {"page_label": "543", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e488a99a-0ce9-4ed5-aac2-2705841e6c86": {"node_ids": ["f2ab7693-ead7-4e4f-8999-4ba212554a01"], "metadata": {"page_label": "544", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8b74abb4-f08b-45f7-8337-08ec26f954c3": {"node_ids": ["0fec8412-8e4d-4a8c-bb63-c5c9a166c74f"], "metadata": {"page_label": "545", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "97988f04-df17-4b95-9e25-857aa86ce61c": {"node_ids": ["b6591875-e708-486e-8816-df5f8940fec6"], "metadata": {"page_label": "546", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1315fe7d-28da-4bea-832f-ab262e1459a1": {"node_ids": ["6d10261c-a581-441f-a135-9d03b4c6c9f8"], "metadata": {"page_label": "547", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "705816f0-fcd6-4b23-b2b5-b29e3eee70ab": {"node_ids": ["e622b7a3-bfea-4147-8e2a-5cce5fbdd2c2"], "metadata": {"page_label": "548", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "76c30e17-ae9c-4b60-9567-c1825ec9db78": {"node_ids": ["10de2dea-d32b-4d70-b1b0-b0a534c26248"], "metadata": {"page_label": "549", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "82edef89-8d0a-4563-896f-4d6c4bb990d2": {"node_ids": ["e304d41f-84d3-4479-a81e-b5e76b3fcfba"], "metadata": {"page_label": "550", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "bb1a5010-11a0-4661-bc33-678098c178a6": {"node_ids": ["b3c4aa5c-0c85-4664-963c-120ce7fa4529"], "metadata": {"page_label": "551", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3e12be2f-9b8c-46d2-a033-33452c432501": {"node_ids": ["cb7ce942-d179-4734-bc3a-ca5c8340beaf"], "metadata": {"page_label": "552", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "dc9c0258-3bad-4846-bbf1-a50297705b5e": {"node_ids": ["ce7edab5-04d9-4518-9e73-9f5e1838ff62"], "metadata": {"page_label": "553", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "885419e6-71b8-4db3-8eff-cf9ff319d571": {"node_ids": ["3f334e8b-4d41-4fc4-9da4-87cf84620924"], "metadata": {"page_label": "554", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "76b785d8-9237-4b49-84b8-a424901da45c": {"node_ids": ["faf74b75-a920-416b-b6ba-76c9e6869f49"], "metadata": {"page_label": "555", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "26427d66-bb77-49a5-a0fb-0e7562f29675": {"node_ids": ["5fb882ba-6dc1-4993-92c8-1d7da5a4426a"], "metadata": {"page_label": "556", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d5849112-bb6a-4bf1-9f92-33f624f2fda0": {"node_ids": ["66ae7106-7aa4-4730-b9b4-222f555849db"], "metadata": {"page_label": "557", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "70e058ad-160b-4b1c-844a-91825cfee09b": {"node_ids": ["0d4e2453-cf83-4d6a-88c8-d4d315c2bcb1"], "metadata": {"page_label": "558", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3bb9769c-a324-4150-b291-328b0f3e25d0": {"node_ids": ["fc8c2022-741a-4542-9447-1fc152e581ae"], "metadata": {"page_label": "559", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7a129958-1750-40f8-be0b-7b4be9c8ddbb": {"node_ids": ["6febec43-c48e-421d-960f-4e3c6a991303"], "metadata": {"page_label": "560", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3d097433-2c84-4dd2-a5a5-07fc1fab02e3": {"node_ids": ["f60830c3-0efb-4e61-bb5b-e803f3456dcd"], "metadata": {"page_label": "561", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "99e8ac6a-77fd-4bfd-9d60-696fc4026ffc": {"node_ids": ["59060058-95fa-4551-ab10-ce930f71d2f8"], "metadata": {"page_label": "562", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2d0b6c89-6b4d-4096-81fd-96e03686d751": {"node_ids": ["876eb332-7c61-4844-9d3c-ca94bcb7c660"], "metadata": {"page_label": "563", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f08dce25-ba5c-4739-b9be-e88e1553ec83": {"node_ids": ["a02d4209-cfc4-4f5b-9c58-b6708889ebee"], "metadata": {"page_label": "564", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b7b3d4ba-c1be-4781-a5f3-ae4707ad8773": {"node_ids": ["7bd98a1a-362e-49de-9dac-160fdb34c567"], "metadata": {"page_label": "565", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "68848041-6200-4312-a6c5-25420beb7e87": {"node_ids": ["287fd056-d2ac-49f6-bbef-7b5a8c4ce18d"], "metadata": {"page_label": "566", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6e955d32-9807-41ca-aa3e-d44c101c8bf3": {"node_ids": ["522dc3b3-2c48-40cd-b166-636fcba7aeba"], "metadata": {"page_label": "567", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "84304a1c-86a2-4927-8e05-3a8e5b843418": {"node_ids": ["8e8eed04-2f47-4ed5-9140-56b7a2c619f1"], "metadata": {"page_label": "568", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "75a0c649-f76a-46e8-82bb-8958c234cdb0": {"node_ids": ["cea71525-f98a-4a61-84ab-e2340b44257b"], "metadata": {"page_label": "569", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9613b036-2564-4969-89fc-ac5ad9ed1553": {"node_ids": ["7f84ae3d-673c-492a-8906-00919c09c13a"], "metadata": {"page_label": "570", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6b535e2f-4352-4ace-bdca-abfec18b9d72": {"node_ids": ["e2534734-09fe-4fe1-9f30-3cc26dc15652"], "metadata": {"page_label": "571", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "33766326-d603-4172-9216-185e1a3af1a3": {"node_ids": ["786be4ca-4d53-4f57-8350-0f9f1c292de7"], "metadata": {"page_label": "572", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c370eb14-5abf-4fc0-a567-6425e95f02a1": {"node_ids": ["677bd193-9f7f-4bf8-ab65-e650c4fabc73"], "metadata": {"page_label": "573", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4405f22e-4cf9-4990-bf49-716687071719": {"node_ids": ["7ba475a9-0dd7-45d3-b11c-50bbd10e2d9f"], "metadata": {"page_label": "574", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a3f8d2ca-b3eb-4dc4-811c-8f2b693827ce": {"node_ids": ["d828e48c-8a00-4f77-9945-af3902fb84f7"], "metadata": {"page_label": "575", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "bd6bef1a-f34b-4232-87b3-3bb9dc2cab93": {"node_ids": ["a9818429-45ca-4873-81aa-015f974842ec"], "metadata": {"page_label": "576", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f20b4cf3-a044-470d-8164-430f1ee28996": {"node_ids": ["fe71d3ab-d181-4514-96ca-e0c450bb7946"], "metadata": {"page_label": "577", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4f59675b-ba35-459a-a913-4af8efb4bfd5": {"node_ids": ["9dd81cc2-0402-4392-9e9d-f9f67e1926f1"], "metadata": {"page_label": "578", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "aee005ce-55ac-4a26-95d6-396f8d14c49d": {"node_ids": ["92897c38-0b87-466b-a41b-d4e7c1721fa1"], "metadata": {"page_label": "579", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "659a3f80-45e8-4de6-be6c-c5775355c661": {"node_ids": ["21f3961d-0dd1-41be-a2ee-1edb5b1f00b3"], "metadata": {"page_label": "580", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b0bcaf8a-712e-49d9-99e1-05d0f2f77725": {"node_ids": ["75c47b52-58b5-44f8-a6c7-150d6efa5b74"], "metadata": {"page_label": "581", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "23cd8a10-87fc-489d-ac8c-5768cbd0740b": {"node_ids": ["061d17d6-f278-4634-84e8-61789dc1aecd"], "metadata": {"page_label": "582", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "98b61723-8bb4-4570-93b8-8341d438cdcb": {"node_ids": ["8517f765-5cf8-4292-b78e-d455fed6b3bf"], "metadata": {"page_label": "583", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "91ea60f6-26f9-4363-9bdb-c955e293854d": {"node_ids": ["6775a72f-4cc8-41f7-bad7-364768ad9d02"], "metadata": {"page_label": "584", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "dfe497f8-26b8-4e5c-8e5c-6d5fd0d41055": {"node_ids": ["1f97f3aa-4adc-44a6-b110-57127c75971c"], "metadata": {"page_label": "585", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9a283e18-63b4-42d8-b7e3-f80434d36e7e": {"node_ids": ["78c7d9b4-6a25-4441-8a76-5e054bfd1370"], "metadata": {"page_label": "586", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d00d75a4-a8de-4271-8d56-c53f6cd68773": {"node_ids": ["81c5ef8f-88c0-4947-bb2a-76364e9467fe"], "metadata": {"page_label": "587", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5a0d48ab-4fd0-4eef-8497-2d9b40d14a8b": {"node_ids": ["a3561a9b-a250-49fa-b275-abe2c84f55db"], "metadata": {"page_label": "588", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9e70cb36-8e1f-4dec-bb42-04de56b1fb3e": {"node_ids": ["2526420f-0792-4e6f-91e7-c97c2e5f1416"], "metadata": {"page_label": "589", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "18425161-0e20-43d0-b022-b99fe8503b23": {"node_ids": ["8dc0b306-a33d-419e-8286-d6850f1726d8"], "metadata": {"page_label": "590", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c2ba2725-e4ae-4a92-888d-25bab2210d98": {"node_ids": ["a600cedf-4627-4ceb-af17-f20c1a759475"], "metadata": {"page_label": "591", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3c1a7493-275f-412f-af05-9ad0a1284987": {"node_ids": ["0baaa147-5430-4e8c-885c-abf3ed156158"], "metadata": {"page_label": "592", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "eeac4b2c-03b9-41e6-b4f3-0a3516d591a8": {"node_ids": ["e2a4c1ff-fc5d-4895-a03f-afbb52efd04c"], "metadata": {"page_label": "593", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f8c5f044-ffe1-4543-9822-f358fa2b0746": {"node_ids": ["c8051173-f18d-43fb-8652-c0cb2de9918f"], "metadata": {"page_label": "594", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8c0a8d1c-4b58-4ade-ab85-4ca953647091": {"node_ids": ["a34c5376-742a-43fd-ae82-c58161594746"], "metadata": {"page_label": "595", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5c303545-8bb9-437a-9cab-af251b99a2c7": {"node_ids": ["08322b45-ae66-4411-ad7f-22112b4bd09a"], "metadata": {"page_label": "596", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "94c4a39b-2d26-4d29-b6c0-5216ccb27556": {"node_ids": ["c7acfcbd-9738-47fe-8587-425f7c080d14"], "metadata": {"page_label": "597", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "73784c4d-3691-49ba-9fc7-a8adfe8eab80": {"node_ids": ["b17bf47a-0974-4c56-a6c0-3cf7774c7dc5"], "metadata": {"page_label": "598", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a2f14db2-b062-4977-a5c9-f2b5927c74b7": {"node_ids": ["24b42c5e-6c29-4bed-84cc-899eb4c53589"], "metadata": {"page_label": "599", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "74278583-c5b7-4b7d-b822-74bba33af6ba": {"node_ids": ["29eac260-7dad-48a6-aa40-c4142e8c878f"], "metadata": {"page_label": "600", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e67af9db-650b-4a47-a3e4-a6c12189f96f": {"node_ids": ["92f1b77a-0aa3-4dc6-b7c7-23d0acc94328"], "metadata": {"page_label": "601", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "bada4d5b-b22e-4d7f-8979-76aae5766bab": {"node_ids": ["4a399b1c-bd9c-4568-9c9b-b410c6c9a866"], "metadata": {"page_label": "602", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "17c7ab22-c0df-4df6-8204-6809e8e29948": {"node_ids": ["26528528-3ca4-43c5-9d82-a9e7a3cce09d"], "metadata": {"page_label": "603", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e22a1cec-dbd5-4a2a-847c-a1c50d3c1725": {"node_ids": ["985324a9-4979-445b-bf38-a225e760714f"], "metadata": {"page_label": "604", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8e3bdc00-76b2-45bd-b6eb-a511b520933f": {"node_ids": ["24ee6773-bb3d-425b-a9e2-3d64384a234d"], "metadata": {"page_label": "605", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "fa48f675-5675-42c3-a601-bf485b0e0bab": {"node_ids": ["e41f4c8a-b74c-495a-b224-50d14a628238"], "metadata": {"page_label": "606", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c166a0a0-9e66-4979-a029-ab5212a07344": {"node_ids": ["59db4051-6735-4080-840a-40fafb2f305f"], "metadata": {"page_label": "607", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "61dd2869-2bdb-4681-bd02-e1f69942b694": {"node_ids": ["a52d7ed7-c2cf-423a-83c7-177afe53de81"], "metadata": {"page_label": "608", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7b299776-5974-483a-82d1-6e2bb601df8d": {"node_ids": ["2e16f9fb-d05a-41a1-9aaf-1f573f9df918"], "metadata": {"page_label": "609", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c4e17d66-49ce-48aa-ba73-a4f113e958e4": {"node_ids": ["eb1fbbbf-25d7-4399-b5f5-2414bc720da3"], "metadata": {"page_label": "610", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6dca0a7b-c1a2-49cc-9dce-08a60063ad43": {"node_ids": ["444e85b1-1385-4429-8998-44263cc3a9ce"], "metadata": {"page_label": "611", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5662666c-6ed1-4d21-bf8b-a03bc949c465": {"node_ids": ["113d6fa4-5d9c-41b0-a036-c8d578170124"], "metadata": {"page_label": "612", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b1382c47-43b1-486f-8f79-58779993f163": {"node_ids": ["1932c12c-6421-4434-a382-82e48619946d"], "metadata": {"page_label": "613", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "fecb5b9d-ef87-4655-8aca-00b6ab50e016": {"node_ids": ["111d76be-c792-4f39-a6d9-07f36b8e92c3"], "metadata": {"page_label": "614", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0c248a63-bf2f-42ab-8ace-7f0ba7082233": {"node_ids": ["ff959260-1c5e-463c-9107-c5b20649b630"], "metadata": {"page_label": "615", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "54bdba4b-44ba-463e-a593-0820957beecd": {"node_ids": ["f6e84b64-e4c9-4280-aa9b-f6de74e2a7dd"], "metadata": {"page_label": "616", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3f68b80f-f5b1-4268-827e-ead61caabce6": {"node_ids": ["48403e61-3433-4b12-8e59-b3e247c8816f"], "metadata": {"page_label": "617", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3297c95f-dd53-4b24-8f0c-c00da4e2ab93": {"node_ids": ["4430042c-11ca-4dc5-9da4-23cb09193c3d"], "metadata": {"page_label": "618", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ad9e0bd3-20e5-42ff-86a1-7256963b9cdb": {"node_ids": ["6c2080bc-0e2b-4956-8658-52f201d3b885"], "metadata": {"page_label": "619", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2d09ec18-2c77-4acc-b7cd-61079b7a9185": {"node_ids": ["5537d7f9-6a19-47b1-b361-e8031cb0fa93"], "metadata": {"page_label": "620", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2def759f-7a43-4c2d-a5f7-1de7241c28c6": {"node_ids": ["10d91382-60e3-45ce-9f75-7ee6510a8a12"], "metadata": {"page_label": "621", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "401dcaab-930c-4884-a09c-15310af427cb": {"node_ids": ["7191a264-352b-4042-a71f-81ed889a9759"], "metadata": {"page_label": "622", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e7a41ef9-a50d-428e-8ffc-f079a7c4f162": {"node_ids": ["2db54de0-e99b-46aa-8448-4e05133b610a"], "metadata": {"page_label": "623", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "450295e0-9905-4c99-b8e7-2288c4f4d90e": {"node_ids": ["f89aa799-a5de-41e2-8240-b3465ece5a4e"], "metadata": {"page_label": "624", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d911535d-460b-4129-83bb-6dbebb4ad8fe": {"node_ids": ["dafb7ed2-80e9-4c3e-a2bb-5f84eac6ec22"], "metadata": {"page_label": "625", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f36c8323-9ce7-4b62-bd89-8dc796fd332c": {"node_ids": ["f31bebd2-944f-46cc-8b38-26311caa5a6d"], "metadata": {"page_label": "626", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "22bf24d7-b8ab-4660-a2db-0c80a883f6e0": {"node_ids": ["441a75e6-d042-4423-ba49-94fc087ee9b0"], "metadata": {"page_label": "627", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1ae750d6-e0ff-45ed-a316-6ad98edb5ed0": {"node_ids": ["360a489c-e4f5-41f3-9cd7-0efdcbec93f4"], "metadata": {"page_label": "628", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "588205ae-9ffb-43fe-9add-30d034640b97": {"node_ids": ["c91239bd-8a46-4469-9f75-363d4973c982"], "metadata": {"page_label": "629", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4e1e1247-74bb-4bc8-b245-3d58b479ffa2": {"node_ids": ["43323f28-ea2d-482b-8af2-ac465a90828a"], "metadata": {"page_label": "630", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "15956934-3793-48b6-9bc1-a63aa64ce66e": {"node_ids": ["a5d60bb0-6328-48fb-873d-a314663d1c9a"], "metadata": {"page_label": "631", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f2a5d221-9b02-4ea5-8779-124c392f208e": {"node_ids": ["d4b634ad-4fce-41a2-b33c-d0b5782dc502"], "metadata": {"page_label": "632", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5ea36e0a-80b8-46ed-b8f5-a722bd40e229": {"node_ids": ["639a3fd4-8897-48fb-9e54-76f3087d26bc"], "metadata": {"page_label": "633", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2c82261c-8143-47b5-b083-4e64c589b417": {"node_ids": ["b000af35-4c8c-4c41-b4fd-fc2c25e13be0"], "metadata": {"page_label": "634", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "055319b2-f77c-4052-a4a9-ea020923e7df": {"node_ids": ["e7e9909c-a677-4557-9b65-820e70adc961"], "metadata": {"page_label": "635", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c829bcd7-0bf8-4a06-91db-3daf3a884eba": {"node_ids": ["c759e932-fdc0-4db4-8281-e73ac57b186b"], "metadata": {"page_label": "636", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2f25975e-2093-49f4-b680-7adaa169f22b": {"node_ids": ["91752d62-abf1-4a0a-adda-c150916f2d88"], "metadata": {"page_label": "637", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f2f934a1-ddce-498d-a638-3a20511d33e3": {"node_ids": ["9016eb45-5b73-4920-b8a3-c48ef02b42ea"], "metadata": {"page_label": "638", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "50c21f9d-0dfd-4ac0-b37e-d70838f3ba88": {"node_ids": ["6bc77d9d-7cde-45e1-ac77-5a912aa254b5"], "metadata": {"page_label": "639", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9c78a1d5-1ba7-40de-850f-6d8cbbc9a9d4": {"node_ids": ["84f0c089-0781-4f37-a39d-01cb4e63786d"], "metadata": {"page_label": "640", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "41b3762e-a80c-4dc1-9311-fddd3b4d8a96": {"node_ids": ["55b2fdce-a1f0-422a-bf41-b89b1858c6bc"], "metadata": {"page_label": "641", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1d426c90-e48e-4c31-ba93-8c34b93863d1": {"node_ids": ["32796e75-0b48-4519-be10-e1a74ec64551"], "metadata": {"page_label": "642", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a0d5c30f-04dc-4871-a86e-adf4a5fd2a5e": {"node_ids": ["4dea2575-f8af-40d8-bea2-8c16ecb42d3c"], "metadata": {"page_label": "643", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5ef59e24-1d36-44de-9019-9e8fe7f4e06a": {"node_ids": ["9e77db68-9631-48df-a5df-439432fcae04"], "metadata": {"page_label": "644", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "63f1a725-0d47-4821-a0c9-096b57c983c2": {"node_ids": ["0b18e415-e5ef-467d-a2a8-f6c64199aafe"], "metadata": {"page_label": "645", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "962fcb5e-e515-4855-acd1-107467ae635a": {"node_ids": ["40ce9d40-d879-4996-be1a-6132894ac5a3"], "metadata": {"page_label": "646", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4ac7a742-d4fe-425d-9d6d-fbfb2edf007c": {"node_ids": ["a966fa04-5582-41e8-8ffd-ca3587b96ebb"], "metadata": {"page_label": "647", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a613607b-8467-4a55-855c-84b9851effe6": {"node_ids": ["aac7de60-f385-43f5-b46c-bbee26d0d967"], "metadata": {"page_label": "648", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "940b4034-192f-465f-a7e3-430659883273": {"node_ids": ["22ee009a-754c-4dd1-b6b1-d5fdc12d9593"], "metadata": {"page_label": "649", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6ae8203d-5ef5-4484-a0f7-4ce8175077d7": {"node_ids": ["cd58286e-3fd3-4649-8fa4-34e11ecfda48"], "metadata": {"page_label": "650", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "12f191f2-4cfc-48c8-bb32-3e97a4da2f9e": {"node_ids": ["7d58e881-0fef-43ed-9952-8c86d60928fa"], "metadata": {"page_label": "651", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "67490fd8-c040-48c4-b043-d68970ee6550": {"node_ids": ["b33180d2-e016-41ea-8a58-7107508ef3fd"], "metadata": {"page_label": "652", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "98497cbb-9b0f-4cc4-b880-f14045bdae36": {"node_ids": ["b84aaa2b-45be-42fa-b62e-0a4710d5714e"], "metadata": {"page_label": "653", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f0113cf9-4019-4a21-afa4-41eb2670161c": {"node_ids": ["8d8dc302-242b-49ac-a2dc-dccae977de3a"], "metadata": {"page_label": "654", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ba780ad5-23bb-4a48-9a5b-b263d64a0a61": {"node_ids": ["17e63669-0286-414e-acaa-ed6f1a964379"], "metadata": {"page_label": "655", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "571c684e-7859-44fc-aa97-5e111634a40e": {"node_ids": ["1bea119c-e6c7-44eb-ad0c-973c347a34b8"], "metadata": {"page_label": "656", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ae63c3f9-ba06-4474-8e6c-eb96b9430ccc": {"node_ids": ["ac301e55-66e9-4ffb-bc03-ac5380c9104c"], "metadata": {"page_label": "657", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e5013ee2-7dd7-4863-a6cd-cec086fc9c56": {"node_ids": ["a76315dd-97aa-4215-b021-ccdfab52e71f"], "metadata": {"page_label": "658", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7d3283b0-c096-4ea3-a09c-a5e42b75feb4": {"node_ids": ["cbf93dda-47a8-4a1a-84d5-83ea58cf5622"], "metadata": {"page_label": "659", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0954ae3d-bb52-4859-8c3e-a6f6512bd2b7": {"node_ids": ["004d6238-9e34-480e-b27c-15a925ad8cff"], "metadata": {"page_label": "660", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a0bfd182-e935-48c9-9d1d-e212a0d5041e": {"node_ids": ["eb6213b5-7784-43e8-8d01-6f163817497f"], "metadata": {"page_label": "661", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e5e4f878-744f-487f-b8d2-d67c50954d9c": {"node_ids": ["e5155f1e-39d7-40a1-8434-b92e796af74f"], "metadata": {"page_label": "662", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d8e968c8-6bb3-4b2c-8ce7-23b0f25c6e1a": {"node_ids": ["f970a831-c9a0-43c3-acb7-32dda11fbbf2"], "metadata": {"page_label": "663", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "536511dc-f9fd-49f2-9f46-2f5dd3182795": {"node_ids": ["66a82abb-3259-4fc6-9f31-792bac87a8b2"], "metadata": {"page_label": "664", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "35b9b383-a4af-40bc-868c-13bd48fdae21": {"node_ids": ["b02095b9-bf23-42f5-9956-a9150cdb36c9"], "metadata": {"page_label": "665", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c8d2e589-9149-4953-b819-102adea6d2c2": {"node_ids": ["38a1c611-8c23-45d8-b1de-35dee042e679"], "metadata": {"page_label": "666", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "67eeba84-66b9-4e07-84c1-e698d2a7085b": {"node_ids": ["8e338d10-3d3b-49ff-bdb1-2a1009e8c605"], "metadata": {"page_label": "667", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8195f182-88e0-4b54-9605-5526395e59b3": {"node_ids": ["0ef806ec-84eb-464c-937a-900ea1193522"], "metadata": {"page_label": "668", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "85194c68-6605-4d16-a1f6-bd81ebaf0940": {"node_ids": ["3f451ea8-a5b1-4dde-8cc5-a52fda6a3a28"], "metadata": {"page_label": "669", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "77ac52e2-e864-47fe-99c7-06a2185a9ce7": {"node_ids": ["415b51d7-48d5-4c17-89b9-ceede8bac490"], "metadata": {"page_label": "670", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e7503468-1f90-4dc5-b282-ec0f842c9bed": {"node_ids": ["a83b5352-5cf4-4d7a-b31d-9d967afa1af2"], "metadata": {"page_label": "671", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0c719a2c-e902-48d4-a205-2311bcccf33a": {"node_ids": ["fdb15ce4-838f-487e-9823-720668cf3a12"], "metadata": {"page_label": "672", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b463cebc-ee15-47a2-b61c-a156191dddd4": {"node_ids": ["549d37f0-6146-4610-8490-b4a21300e4f9"], "metadata": {"page_label": "673", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4e37e7d8-b83b-4221-bbb4-d676c85330d4": {"node_ids": ["971bcef0-fb2d-4ef5-81ea-5d4c1518ca9a"], "metadata": {"page_label": "674", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0cf36054-4a67-4372-a5b0-dfda28bc7112": {"node_ids": ["24d7eea2-8aa2-4657-953d-5cedac6b80d9"], "metadata": {"page_label": "675", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "10ace7a1-7cd4-419a-86b1-e93a4e4183c1": {"node_ids": ["65bc75da-3766-4fba-aca3-24105abc60de"], "metadata": {"page_label": "676", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1f0d9bb1-1ccd-4023-bd79-389b02a2afe6": {"node_ids": ["94d1d4f1-ff33-4bf3-8a0e-d1768e940ff6"], "metadata": {"page_label": "677", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1a6b3f20-6569-46d1-b328-51618d883000": {"node_ids": ["3d17982b-a403-4fcc-b1dc-1dd25d019140"], "metadata": {"page_label": "678", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2e02c9ae-f2e7-4f94-8b84-1a3283ece41c": {"node_ids": ["bab19f37-9c85-4876-a346-d8724a314b1e"], "metadata": {"page_label": "679", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "74543168-e3d0-45a6-ab32-b1db8373eba9": {"node_ids": ["e9834c17-7d59-478c-be33-a0906ecaeafd"], "metadata": {"page_label": "680", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "bd1e71f0-4068-4970-9bf4-97f3d42c7a3a": {"node_ids": ["98316f64-a853-4e39-9df0-abb90f65273c"], "metadata": {"page_label": "681", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "acad7d3c-c64e-497d-b395-137ea9e3a60e": {"node_ids": ["06f69ebc-c851-427b-b89f-54c1b17b1037"], "metadata": {"page_label": "682", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6687e31b-e712-432f-a822-87ca5a9664c4": {"node_ids": ["b3a60a60-0396-48b1-a2a5-86a7572340e4"], "metadata": {"page_label": "683", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "aeaa3def-8894-4f1c-bf9c-e93459d4f8b1": {"node_ids": ["37a999cc-0482-4a71-9dd0-daa7dc1207ca"], "metadata": {"page_label": "684", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "81ffbfc7-3c0b-4e30-8d40-3791f63420e9": {"node_ids": ["1b92fd02-e3dd-4dde-80d2-a045798cc23f"], "metadata": {"page_label": "685", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6bfc4933-3cbe-42e9-acaf-50f94033aa06": {"node_ids": ["96fe7fad-3eac-41bd-8700-0d33a109c03f"], "metadata": {"page_label": "686", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6c95f041-ea0b-493d-a919-438075a2ec39": {"node_ids": ["e86710e3-ca3b-4be3-a038-8d3c4aec89b7"], "metadata": {"page_label": "687", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "54a182e8-950e-429d-9878-d5b34b5a4aeb": {"node_ids": ["b358f0b2-365c-4a5d-b4ef-21f2d528cf53"], "metadata": {"page_label": "688", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "96661578-de76-4b54-97a1-944aba26e828": {"node_ids": ["9bf83a45-4e10-437e-ab14-1e14ca1291f1"], "metadata": {"page_label": "689", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e872e296-25c4-466a-bcd4-e182d05787d7": {"node_ids": ["c14ba7b6-dca4-499e-9ba9-c2f0c29dd523"], "metadata": {"page_label": "690", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "54906c16-4f34-4c80-bcc4-bbd2adf088c5": {"node_ids": ["5c0f51ae-e77e-4962-bcf1-fd3619158777"], "metadata": {"page_label": "691", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5dbf75de-5b89-43df-90d7-d5cfad2b432c": {"node_ids": ["c35ca160-d14c-4c1f-b966-2e4ec6beb940"], "metadata": {"page_label": "692", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f66b84bf-d464-4ad6-9767-007443a7810c": {"node_ids": ["0b7d2a6a-b9bb-46c0-920a-999ad2bd9133"], "metadata": {"page_label": "693", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ce5d38a9-229d-4925-a638-4616c16b20c6": {"node_ids": ["7f0dd1a3-6ef8-4c68-b8de-2d3d2d50164c"], "metadata": {"page_label": "694", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0600e155-c1fe-4827-a880-13cf16b0f115": {"node_ids": ["375f229f-0b1d-476b-8d46-fba4f8be8e12"], "metadata": {"page_label": "695", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "94139bdc-c867-4382-a491-fa903685cfd4": {"node_ids": ["7f2ec797-bd00-416f-b087-c5d7ca3b0256"], "metadata": {"page_label": "696", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3ebc838f-d1e0-49c4-a2f1-b6aa96f14414": {"node_ids": ["b121281e-9f9d-4354-b1b8-151e6d2aa856"], "metadata": {"page_label": "697", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b25244bd-4a17-4080-81c7-2a5af73e30da": {"node_ids": ["7d7a2756-3c77-4d52-9c09-a5549386817b"], "metadata": {"page_label": "698", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "767f7ce0-44b8-4305-9b71-8a32da287ab2": {"node_ids": ["a1d50ce2-baa6-4d6b-a058-1dfa1291f4d5"], "metadata": {"page_label": "699", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b67151d1-d6f4-44e3-8079-f756d45cfb4c": {"node_ids": ["5af6369e-7bb3-41d6-901b-d3e28ec04dd9"], "metadata": {"page_label": "700", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d2ca0c3f-af02-49fa-961b-466e63a3176d": {"node_ids": ["e9fd7ecd-ce51-4c4a-93dd-0364d6d2d8e3"], "metadata": {"page_label": "701", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4ae2cd3c-972e-422b-800d-460e15ced20d": {"node_ids": ["3867e158-f0c1-4c5a-87c9-208dbe39934c"], "metadata": {"page_label": "702", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a09df19c-f4df-4544-bec4-72aee698731c": {"node_ids": ["084b0b63-90d4-41c1-8f57-38a285ccf354"], "metadata": {"page_label": "703", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "50dca4cc-b14e-47ea-98fe-d1653f6ec074": {"node_ids": ["7ef352ff-c3f2-4d41-9382-72fb755c204d"], "metadata": {"page_label": "704", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1931494f-d371-4df1-82f0-84d2ea03d919": {"node_ids": ["4d1368f9-8b18-4e30-b5f1-c9cebe34f13a"], "metadata": {"page_label": "705", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c17bbe33-1200-4721-8520-f876d0adb457": {"node_ids": ["86187864-c3fa-4f20-9cef-e788a340a4c4"], "metadata": {"page_label": "706", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e0a3e621-2a67-46cc-9fe6-3dfb3a8ff135": {"node_ids": ["e4f044c3-3ce7-42b4-8e2e-8c50b203c618"], "metadata": {"page_label": "707", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d431aa1c-8e70-4daa-ae42-91320723f4f5": {"node_ids": ["bf5b7687-7425-4011-9b38-f54ebf528f0d"], "metadata": {"page_label": "708", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c6f211e0-0f9d-4b0a-9b4f-1f2d82c475f4": {"node_ids": ["49b688a4-1d26-46ef-84c8-cf184bb79edc"], "metadata": {"page_label": "709", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c47a7c2a-3bb4-4494-9e3c-80f72ee87686": {"node_ids": ["f4cde76b-b3c9-4684-aca8-f88c552c5dfb"], "metadata": {"page_label": "710", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "60ab0e0a-f4a2-4f95-89b2-3a7aacad0db9": {"node_ids": ["0a8f91aa-5802-4265-a4ca-dabc514043ed"], "metadata": {"page_label": "711", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7544ce3c-7874-457d-9776-144e26e5a513": {"node_ids": ["a0abde9b-3504-429d-82de-6414c852a500"], "metadata": {"page_label": "712", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2f50e948-a4fd-43e2-b0c5-e4218ab7250a": {"node_ids": ["848ab4ef-3b4d-4cc9-a26e-3cdfac742c3b"], "metadata": {"page_label": "713", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9a6532be-06cd-4b9c-83d3-c9650834f70d": {"node_ids": ["a9b0b53a-5763-48bb-9e05-b244f982554c"], "metadata": {"page_label": "714", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9e1b81a5-1b43-4a8e-817c-ae5eab8ca694": {"node_ids": ["b27e9f92-a9f1-44f1-9973-e3ea08fff93d"], "metadata": {"page_label": "715", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b1a9e740-9397-40a1-9594-f6f0241a1683": {"node_ids": ["24ec82ac-8e02-493f-8465-dd514877425b"], "metadata": {"page_label": "716", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b9733cf5-0ddd-42de-ace3-947310a4fb14": {"node_ids": ["e6b7b754-b1ff-413a-bb8a-09e952a57f11"], "metadata": {"page_label": "717", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "af7165b2-2c06-48fd-971f-588eb69ba380": {"node_ids": ["c5ba2e76-996e-4a3a-aeb3-997b50e84c97"], "metadata": {"page_label": "718", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ea730a95-560a-44ef-933a-8e91c37e2a50": {"node_ids": ["69ba29e3-db5f-422e-8c54-26cbf3481c34"], "metadata": {"page_label": "719", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9ab87de2-fbc9-47c8-b455-eda1baf0341a": {"node_ids": ["448ebf56-92fe-49ef-b2e5-4ba96bda8c60"], "metadata": {"page_label": "720", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "21d7109b-89b8-49fd-934b-3b055fdbfae3": {"node_ids": ["e39a2a6a-5805-4d0b-987c-9b6fbadaecba"], "metadata": {"page_label": "721", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "029032a8-c7fb-4478-adb1-d46f68484ed4": {"node_ids": ["4f10a778-98bb-4fdc-8cc9-6a46b5dee8e2"], "metadata": {"page_label": "722", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ee2b1074-0c5a-44e0-a28d-028a5b272fc5": {"node_ids": ["9ed296af-2752-4a87-a338-16b2ad7f8456"], "metadata": {"page_label": "723", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "919c220e-7685-48cd-a141-3dc8db69bb8d": {"node_ids": ["4ed1a545-f6a9-401c-b814-cb5de8be93e5"], "metadata": {"page_label": "724", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5848da35-33bb-4c46-8fd9-3f9954d37f8e": {"node_ids": ["acc08f8c-65f2-444f-9bf8-e6dfe80da91c"], "metadata": {"page_label": "725", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "72b6d932-5027-4e91-a335-ef3501da9fa5": {"node_ids": ["27eb8b18-c1ef-4326-88b5-a5d64d85fc8d"], "metadata": {"page_label": "726", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f4e384c2-f5b0-4c84-93c0-9bbcbfa0f5b0": {"node_ids": ["b2524302-4a0c-4aa0-8d8f-25c183b4316c"], "metadata": {"page_label": "727", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "51fe871e-6ec2-4837-a652-b35b674a7f51": {"node_ids": ["06893ac7-854d-4d75-ada5-af22a4a3bffa"], "metadata": {"page_label": "728", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f757476d-0bf9-4b51-a42c-47bc6bdaa407": {"node_ids": ["427a6952-b8e2-40b0-8e44-f1129e37c912"], "metadata": {"page_label": "729", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "cb09eeb7-13dc-4f01-ba2b-b7b108428e5e": {"node_ids": ["c5d38804-0f61-492c-b26f-531c78f9faa5"], "metadata": {"page_label": "730", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "986eef28-a71f-4aed-9c0f-9ef72e76bd0f": {"node_ids": ["09268533-bdd2-4eb2-b2ed-97f0c43f507f"], "metadata": {"page_label": "731", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "737d3138-22c9-40c5-8814-926b5fb812f3": {"node_ids": ["944a4ee7-68f3-4760-9845-4d76610d55e7"], "metadata": {"page_label": "732", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5b8380ab-1b08-4888-b05c-9213208ff1b0": {"node_ids": ["a3613171-8ac8-4ad8-9a69-2e4fe20b9dfe"], "metadata": {"page_label": "733", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4093de1b-3cdc-4f18-b83e-669a8af42b6e": {"node_ids": ["5e078a40-9fbf-4f7b-89ed-56ca9d20e905"], "metadata": {"page_label": "734", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "602183d4-35dc-420f-90b2-6356eca9890a": {"node_ids": ["54a671ea-3a50-439d-87e7-7879cb2619de"], "metadata": {"page_label": "735", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "990d2433-d43a-4cbe-ab72-b42d985ea07b": {"node_ids": ["d9d96d07-6d71-43a0-aee5-5577d1de6946"], "metadata": {"page_label": "736", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f55f5c3e-d03c-4f12-a66b-9a3b152808e1": {"node_ids": ["e6a08947-9e9f-4597-937a-7f0f15ae30d1"], "metadata": {"page_label": "737", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "80fef2b3-ec36-4731-a0f6-99a83f5b59c3": {"node_ids": ["9438799c-6a01-451b-ba86-e8c3900786e2"], "metadata": {"page_label": "738", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2c996bc3-3aee-426c-aa62-1a1e02782593": {"node_ids": ["6e41b1cb-2db2-498f-a9c3-5860c7bb5025"], "metadata": {"page_label": "739", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2c617a33-69e0-42ce-bfc9-ac0d53dc83dc": {"node_ids": ["bb8b6e27-ea3b-45be-b08f-72bcffa1e360"], "metadata": {"page_label": "740", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f5d050ad-4e19-4162-a2fc-a0ad1dc3b596": {"node_ids": ["bcf18004-0b85-4112-9bfc-c6de82b0b7b5"], "metadata": {"page_label": "741", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d0f4c974-e38a-4fd3-b521-55e3c4cb00e3": {"node_ids": ["a5f94873-3416-43fd-977e-4effa9116288"], "metadata": {"page_label": "742", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c27eecb4-a924-4dcb-a3f1-bee4ed903bbb": {"node_ids": ["05778a2a-094a-4fd7-a82d-2d04c87cd688"], "metadata": {"page_label": "743", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "dcb73c98-7e62-42bc-a609-4bc0b94950de": {"node_ids": ["606632c2-0837-4acd-a806-81333f8aacba"], "metadata": {"page_label": "744", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "94f845ae-9ae7-4b21-b610-60d9deb4567f": {"node_ids": ["c0877ad4-b3a6-4d36-b67a-eb3cbcdde036"], "metadata": {"page_label": "745", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "90fa99b1-bde8-4ece-9547-f04a2e29560d": {"node_ids": ["4e141240-b899-4fcc-825a-7aafce0d7fb0"], "metadata": {"page_label": "746", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "05c52de5-c3c1-4ffa-a21d-c65bdb3bf441": {"node_ids": ["9139a574-5210-4581-af17-64611b7c0a97"], "metadata": {"page_label": "747", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "cc652998-77c7-49be-88b1-578a100be085": {"node_ids": ["30f262cd-6882-4b6b-918d-1f53a0161c52"], "metadata": {"page_label": "748", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "53b1ee23-8b0c-4e24-aa72-e5fdf2d02c2d": {"node_ids": ["28a8c827-bb8b-4e62-b861-76e09018c668"], "metadata": {"page_label": "749", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "10afecce-3625-4507-83a6-d9fee956a9d4": {"node_ids": ["47ad9582-a9fa-4f3a-80b5-2648637073c8"], "metadata": {"page_label": "750", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a17f23e2-02f4-4e7e-9fb6-4cb204daf602": {"node_ids": ["fa9f3008-901f-4b5c-b427-70df0c56f0e9"], "metadata": {"page_label": "751", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "92983b45-c61c-42d2-97e3-d3a38da5db37": {"node_ids": ["09fa47e0-27fb-4328-9998-f9faf79dfd97"], "metadata": {"page_label": "752", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e52ee238-2792-41c3-9e67-e8f02fcba7c7": {"node_ids": ["64727e0e-9664-478f-a98a-264663566ef6"], "metadata": {"page_label": "753", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8f57ab49-0a4a-4d46-94cb-c97e8920e702": {"node_ids": ["523b6e35-dbdb-4e38-9d7d-46c6e3bbc238"], "metadata": {"page_label": "754", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e75767b7-e639-4500-85f6-cd520f40647a": {"node_ids": ["e86dd8c6-3c05-4e2e-896d-39f2a4af9cad"], "metadata": {"page_label": "755", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "523450c1-510d-40f3-a15c-dd4fc778f9a0": {"node_ids": ["a4c538ca-2685-43f9-b397-f7f6514751b3"], "metadata": {"page_label": "756", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "17ae0aa6-cb85-4a88-ad09-0c3a4bd07b44": {"node_ids": ["311ddd02-1346-4b0c-9a30-1b2794352a53"], "metadata": {"page_label": "757", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "321e694a-e991-4684-bcfa-24eb8d245c41": {"node_ids": ["c9b53925-1974-4b79-bc8d-6825dc54d187"], "metadata": {"page_label": "758", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0ed317aa-e899-4a1e-8f27-04e3bc41be77": {"node_ids": ["353676b0-3187-4c87-b937-c2c37eb3b809"], "metadata": {"page_label": "759", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e749d402-f0e2-4390-b5eb-67064c15ecfa": {"node_ids": ["e21a50e7-67b8-4ea3-8063-0f9312da8f49"], "metadata": {"page_label": "760", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1d7ce415-6604-4995-a43a-4ee24bccf562": {"node_ids": ["092aaf3b-92d1-42f3-beb1-de10a7c4d62d"], "metadata": {"page_label": "761", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "fa17b2e1-0e5b-4b3b-9d9a-b8a22f146159": {"node_ids": ["7fa9a13d-99e9-4d43-ade8-82e8fd6fb638"], "metadata": {"page_label": "762", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "53dbe7f9-f544-4cc4-a993-0398357ef3c4": {"node_ids": ["61d0f5c0-fc5c-4e57-9e3c-9a00075dceed"], "metadata": {"page_label": "763", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "434571bf-0853-4752-8101-b070b6c7f9ae": {"node_ids": ["efd41c02-20c7-43d8-a6bd-e9d8305762ac"], "metadata": {"page_label": "764", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "73388de3-854e-4f2c-b9d6-93c92508e410": {"node_ids": ["b5bd5186-429f-4421-b240-7ed922add1d3"], "metadata": {"page_label": "765", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "af4ee144-dd6b-4874-999c-fe160eb12564": {"node_ids": ["f4703e6b-a42d-46a9-a060-9f75766f7a8a"], "metadata": {"page_label": "766", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d73c732e-1f8f-46f7-9146-4820bb89278d": {"node_ids": ["1897280a-b836-4ff9-904c-c1dc94d11a44"], "metadata": {"page_label": "767", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1d95946b-d63d-4cb7-90c7-ba8f420c706d": {"node_ids": ["8104c6fe-eeb9-41e2-8f30-867d180cb20b"], "metadata": {"page_label": "768", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7d023df5-c0b1-478b-91d2-4b439b0f1708": {"node_ids": ["789a4a51-3638-4177-afb0-fa10c023525e"], "metadata": {"page_label": "769", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "81aefaea-93ca-4574-8ade-5699321c3199": {"node_ids": ["65b62ded-4030-422d-8398-38a797e71792"], "metadata": {"page_label": "770", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c1186e2d-3397-4b9f-8dc5-182fb14726bc": {"node_ids": ["002f2653-7965-4f66-88c2-d0abc4fe448a"], "metadata": {"page_label": "771", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "287635ec-41d8-436e-93fe-ea984371ca14": {"node_ids": ["c5b00810-2901-4a8b-972a-1f2754e029df"], "metadata": {"page_label": "772", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9c211d74-d1cb-4d2d-9b9a-81fd53693b1a": {"node_ids": ["d99d904b-2a04-4a81-aa6d-87d3acdd2b6f"], "metadata": {"page_label": "773", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "52260c23-8757-4e42-bb01-b539c48ec814": {"node_ids": ["4d325dbf-28e9-48d0-8167-56d10c0249fc"], "metadata": {"page_label": "774", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "92a6310d-e968-475e-b20c-690a862f92ed": {"node_ids": ["ff08ab2d-1e74-491e-99d6-81a0a7fc3533"], "metadata": {"page_label": "775", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c916c85f-ee99-4d77-b8c7-e5410a277ce4": {"node_ids": ["57c9e102-24bd-4b95-9035-a89f872b3321"], "metadata": {"page_label": "776", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3778621a-a86b-4563-966b-13693507d78b": {"node_ids": ["9d672dbf-896c-4836-a572-6b25a5cb81eb"], "metadata": {"page_label": "777", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0339c43f-4026-4aec-8643-161e64410fe4": {"node_ids": ["41301b75-9803-4cf6-8dcb-99dc2e22b9df"], "metadata": {"page_label": "778", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "9b8f441c-5445-43d4-b380-c13b990915d7": {"node_ids": ["ab4c367f-e282-4758-a27b-311454fc47d2"], "metadata": {"page_label": "779", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0e8d7f23-9740-4191-bba5-3c47ef423529": {"node_ids": ["6106c48c-4aa8-4f61-a990-7ac2846b7032"], "metadata": {"page_label": "780", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ac75df57-a701-4ff5-aaa3-60259267ac6d": {"node_ids": ["5255204f-12ed-464f-b321-8f9519ad8f81"], "metadata": {"page_label": "781", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c41120c3-1c0b-4f23-9cc9-f77ffca0c948": {"node_ids": ["79cf62c2-9334-4e1a-addf-1525555cf99c"], "metadata": {"page_label": "782", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f9c5373e-65a4-4004-b5f4-531f514338c0": {"node_ids": ["148cb244-9b08-4e52-813a-ae0bfd684051"], "metadata": {"page_label": "783", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "40f18496-5090-4d41-a7df-8998b620b53b": {"node_ids": ["50df09f4-c388-4f22-a571-c39453cdd296"], "metadata": {"page_label": "784", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d65b417f-6785-49b9-8f57-097ee233edef": {"node_ids": ["b128012f-c83f-4cc8-9ecb-a0f802767f9b"], "metadata": {"page_label": "785", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "60244075-a856-4e9f-8c67-d3c4fb4f665c": {"node_ids": ["cc802f69-14e8-406b-82f5-402baf5219de"], "metadata": {"page_label": "786", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6553cad4-099b-44a7-972d-363dc4433020": {"node_ids": ["5842e20c-881f-43e0-9952-a92757f4a647"], "metadata": {"page_label": "787", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5d4d00b2-7ac7-4ea9-bcc0-9950258f4883": {"node_ids": ["9fe3d8ae-c571-4fa2-9edc-5d24b9e659c8"], "metadata": {"page_label": "788", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "13dce4f4-5a0e-4c38-833b-fae01f2f8466": {"node_ids": ["988a4fa8-0417-490a-b358-06d23f95c4dc"], "metadata": {"page_label": "789", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "459be725-b836-41c4-a46e-4e06e145eafe": {"node_ids": ["5e277f85-28c2-4743-a65b-a0e96fb41dc7"], "metadata": {"page_label": "790", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e7e98414-23b7-4308-b98b-3a81c2a03dd5": {"node_ids": ["b43c4c85-a7e5-41a2-8cbc-4ace70b5884e"], "metadata": {"page_label": "791", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5e2393e7-e018-4140-94f0-83b5a468225e": {"node_ids": ["2a292172-dfa4-4d66-9d7c-68fe23b0b8ba"], "metadata": {"page_label": "792", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c05fed33-e00f-484b-b565-377ffd5b153f": {"node_ids": ["4a013f55-1010-43f8-b1a3-d1ccf30578bc"], "metadata": {"page_label": "793", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "af61b768-cc92-4f1c-9535-fb5bb3ab3107": {"node_ids": ["886505a2-1da8-4912-a512-0114d8c3cf0f"], "metadata": {"page_label": "794", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "56cbb6db-0771-4812-825e-198a63625322": {"node_ids": ["3a4bcd10-95e2-4541-aa2d-e39d0a226376"], "metadata": {"page_label": "795", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "25d1d366-8544-4b12-bcc1-adbe9a428023": {"node_ids": ["2ad6efd6-9e6e-4e27-b898-86abb8e79b90"], "metadata": {"page_label": "796", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "dc4e40d6-a244-4fe2-9048-aeb4d4feae8b": {"node_ids": ["a3fad1c8-a1ab-4125-a73a-94cad965c63b"], "metadata": {"page_label": "797", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "cb89d966-59ae-4dd8-a35d-f2538499a397": {"node_ids": ["2cd1078c-b0d2-4c04-aa26-f6c947622d09"], "metadata": {"page_label": "798", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c8ee4965-07c7-4bdb-8d31-d7630c1399b1": {"node_ids": ["f6ec15ca-6dda-4f52-a218-b207b74c0c9d"], "metadata": {"page_label": "799", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5a2dfb51-e907-486d-b1ae-7b069f5248ac": {"node_ids": ["d8260154-eeff-4e4c-ac1d-1b983bdfec12"], "metadata": {"page_label": "800", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0a027264-3433-47e2-9e87-5988d43b6bad": {"node_ids": ["b56e1f25-69c0-491f-a189-76cc53003d1a"], "metadata": {"page_label": "801", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "60969f08-e885-47d4-87b4-299b5b6eeb88": {"node_ids": ["1d116111-c4b8-4c68-8315-39c4abbbec54"], "metadata": {"page_label": "802", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "abe9725e-d4cc-426d-9701-f9165afb2385": {"node_ids": ["567df745-4ee3-4a9f-bb60-f9f577a7ae7b"], "metadata": {"page_label": "803", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "82429bda-c8e0-479a-9f37-22e6fa37882a": {"node_ids": ["efe3a180-4a90-4f48-b178-efb5aa7fb27b"], "metadata": {"page_label": "804", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "54e224f0-3c80-4bd2-9084-49271f5e021c": {"node_ids": ["6f869875-9856-4a5f-8465-39e1cd9376ee"], "metadata": {"page_label": "805", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5285a6c0-d572-4bd3-8d46-267a0266ee7f": {"node_ids": ["a04858c7-f7cc-4c24-abea-92a264143195"], "metadata": {"page_label": "806", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "14c13d83-48df-4eff-8eff-0785b57eda96": {"node_ids": ["d2d3917b-9336-462c-869f-c9eb3faf5219"], "metadata": {"page_label": "807", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "dac36450-5f05-4548-af08-418037cab426": {"node_ids": ["23c54143-ba4f-4b2b-b97e-5f0dac0bdca5"], "metadata": {"page_label": "808", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ef1aa146-846d-47e5-90b7-44a2e61cb4db": {"node_ids": ["394923a6-d9e8-4b2e-ac27-205e34f354b1"], "metadata": {"page_label": "809", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c6a26695-af0b-4ee1-8472-02518911b51b": {"node_ids": ["f9b60c87-0550-4454-a4cd-32043597f46c"], "metadata": {"page_label": "810", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4d131bb2-3a7b-46c6-945c-eae54ecf85de": {"node_ids": ["db5fddf4-11e8-4c29-b27c-a74c808b8cb2"], "metadata": {"page_label": "811", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7e456279-80be-4544-ba7a-1e4e487bd836": {"node_ids": ["0309724c-475a-4b65-b8bf-a612db274fc0"], "metadata": {"page_label": "812", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4bf83302-492d-47a5-aabd-ae033fdadfce": {"node_ids": ["baf96e59-ac46-42a1-9862-8b1327b07d49"], "metadata": {"page_label": "813", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d60d19e5-0d02-4f11-ab43-dfde5aa2ea53": {"node_ids": ["8799645b-9a04-4eb2-8840-3be229a37fd5"], "metadata": {"page_label": "814", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "20108313-1141-4a3a-a5f1-03614ecb7358": {"node_ids": ["ad1650f6-29ea-4f75-b44a-9e8125d8a33f"], "metadata": {"page_label": "815", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "c0b22d21-8a86-47d1-a5bf-ad3c902ab8e3": {"node_ids": ["ecc1f837-61e0-4c66-820c-adc01601992e"], "metadata": {"page_label": "816", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "84ea4b0e-914d-4385-9d51-3c1534e2b746": {"node_ids": ["d5648f18-da04-4b61-ad4e-39f011bb6e79"], "metadata": {"page_label": "817", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a331c541-af37-4df5-b11c-ac9c04277608": {"node_ids": ["722f4187-7cfd-4b93-a8ee-7d78b1093e12"], "metadata": {"page_label": "818", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7b608ee9-b540-47b0-a7ed-abdcf4932ab9": {"node_ids": ["b3a3a3b1-2382-4cf2-b5a8-f99597f63050"], "metadata": {"page_label": "819", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "eec00015-75a7-467b-8806-f6de9dff3bfd": {"node_ids": ["a2435507-aca2-4a1c-a1ee-c816fdfada04"], "metadata": {"page_label": "820", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "77a23b09-8130-42b8-8401-2fd16a0e5fdd": {"node_ids": ["11a0eea7-2a1b-4f30-b669-a436176111a9"], "metadata": {"page_label": "821", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6b458660-b582-4e63-b461-3bb2f53a5281": {"node_ids": ["161b1984-a9ef-455c-9837-c68ae3b5313c"], "metadata": {"page_label": "822", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "98d8d2b0-f15c-4957-bd3d-a394496b2209": {"node_ids": ["4a0b69a2-c4d3-4a4d-99a4-e11f41148e7e"], "metadata": {"page_label": "823", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "214c155e-49f0-4476-a356-f2716d035307": {"node_ids": ["d43128ca-b024-4b39-a57e-5a23cebbd196"], "metadata": {"page_label": "824", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "68df540e-eabd-44ae-9a65-78dbaeb6eab4": {"node_ids": ["eedd0c22-2488-4ab7-9bfd-753cf76e5a0d"], "metadata": {"page_label": "825", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2e191071-500e-439d-8d4a-3c439202f9a5": {"node_ids": ["796d1853-bc68-4207-a319-1d73b0259337"], "metadata": {"page_label": "826", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2d2be69b-4ada-4e90-ab5e-9547bc2e76d2": {"node_ids": ["7dd5a0c3-1b31-4c67-8787-6d156169bf27"], "metadata": {"page_label": "827", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8b02826c-3a69-47d5-8d90-7a85312bb61c": {"node_ids": ["34edbc66-01d6-42b4-8b5f-10117075046f"], "metadata": {"page_label": "828", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5d5ea859-3e92-4f0a-ad3d-a74e5567e5b0": {"node_ids": ["120b1017-cef1-4f39-bddf-a9f9d4a666ee"], "metadata": {"page_label": "829", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "670bbf4a-283b-4dfb-b616-3d078fe1b023": {"node_ids": ["bad80498-0aa4-44f8-bf93-23296d6c114b"], "metadata": {"page_label": "830", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a2bb51a4-ddd1-41b2-872d-ccb10b3dba41": {"node_ids": ["758050e3-b96e-46e8-99d4-a48b636f1735"], "metadata": {"page_label": "831", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b20967fe-1274-4e27-83b4-d8bbdba6e09a": {"node_ids": ["089d6625-d759-4ff0-b352-7e938466e16d"], "metadata": {"page_label": "832", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "14e9e442-3ba2-49c1-bf31-b1a0706f952f": {"node_ids": ["37d78203-df04-45eb-b3fd-715a5142d8a0"], "metadata": {"page_label": "833", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "00c6fed7-0a02-4a22-ab06-2a22e2ea32f9": {"node_ids": ["8c68952a-f25f-4bbf-8f90-212bfa8edb6f"], "metadata": {"page_label": "834", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "8912c0e6-624c-4f43-9652-ac58b0e533bd": {"node_ids": ["1a9a38ce-0b5a-4daf-906f-b5935157f0be"], "metadata": {"page_label": "835", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "e653ad23-6bf7-4e88-9fe6-108b90b4c9d3": {"node_ids": ["aaffe3f6-aa55-432a-bb6a-3b0da1f4dfd7"], "metadata": {"page_label": "836", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0f70974c-08c3-4554-af19-8b870cff9e11": {"node_ids": ["400ae7e4-c76c-41da-8539-0b5cba62024a"], "metadata": {"page_label": "837", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f8faa598-1d19-435c-95e1-ecd15be9f5a4": {"node_ids": ["61b8552c-4f53-4c68-96e0-87100e7a9652"], "metadata": {"page_label": "838", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "3d4fec62-7bf7-4026-a564-6476782b2c96": {"node_ids": ["f179f5e3-94bf-4a95-bbec-4c2eb3a59d5e"], "metadata": {"page_label": "839", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "fff21f70-85ff-4b02-8a2f-57045caa7af8": {"node_ids": ["369b21d4-7686-45c7-ab39-5950218c51c8"], "metadata": {"page_label": "840", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7972099b-d1cb-4c2e-b93d-42237ac77784": {"node_ids": ["2158a3aa-350a-4c5e-bb32-44b7a70fd294"], "metadata": {"page_label": "841", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "bd49c06a-9c55-4ebb-ba7f-be96dc08c4c3": {"node_ids": ["40c19cc3-5de8-4b2e-9153-61ea87e1cb73"], "metadata": {"page_label": "842", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "20d2d2aa-0ea4-463e-b729-34a2aad0fe1b": {"node_ids": ["6d44d683-8a3e-452a-91f3-60b9f92ef7a1"], "metadata": {"page_label": "843", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "becec475-812f-4f9f-bc4d-472d13dd6123": {"node_ids": ["1038dd1e-ab60-4adb-bacb-8216281486c1"], "metadata": {"page_label": "844", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "ecd46053-e3f1-4493-8de3-f6b437a8e188": {"node_ids": ["cea14d14-80e4-45c5-88b8-9dfd4a139a20"], "metadata": {"page_label": "845", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "792994ae-b0fb-4f88-8752-0dc43b03bfe4": {"node_ids": ["4536a512-727a-4c68-9f83-5bc1a77f2ea1"], "metadata": {"page_label": "846", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "52821e6a-c922-4d20-9fe4-872de3241e3f": {"node_ids": ["257564cc-88ef-4540-88f5-5314097b20f7"], "metadata": {"page_label": "847", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "fecb8cb7-09ce-4d21-b160-465a5536dfdb": {"node_ids": ["472eeb2a-c9b9-4326-919e-257744bc7b05"], "metadata": {"page_label": "848", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "a96e638b-6971-4d64-976e-6a44ce20f7ae": {"node_ids": ["92b5d58e-ebca-481a-895b-6d75f66a06d5"], "metadata": {"page_label": "849", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6355056a-b513-43c0-933a-a64b07a06d45": {"node_ids": ["997672ca-989f-4edc-a14b-c1984f0542fa"], "metadata": {"page_label": "850", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "fd2346c0-b51a-4e83-aee8-9a274c889e4e": {"node_ids": ["fabc3e3a-9393-4dbf-ab7d-644fa1658a22"], "metadata": {"page_label": "851", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "7bb2cc3a-d91e-49d1-aeed-30b6ba3946d2": {"node_ids": ["dc529e8a-d3e1-47a5-bc45-853c6614bfd7"], "metadata": {"page_label": "852", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "12606390-1b87-4fe5-b1a9-03913afaddc2": {"node_ids": ["1aae7460-e4fb-4829-82de-4559e870feb8"], "metadata": {"page_label": "853", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "da303fc4-2884-46b7-a71b-472eb1a1a710": {"node_ids": ["f8c5b212-9734-46ef-aa4b-1cf308ea813f"], "metadata": {"page_label": "854", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1e12b747-3f0c-4549-aeb2-d5b7c356598d": {"node_ids": ["fcd6b381-fd40-4066-b397-2297df9fec41"], "metadata": {"page_label": "855", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d7abdfca-0b3f-4b5e-af63-f73a7e2d8c69": {"node_ids": ["d88d984c-9438-440d-a9ca-365d229189e8"], "metadata": {"page_label": "856", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "07cb817a-97ac-479b-b7cd-f576870db28d": {"node_ids": ["e72e1aec-b700-4746-bdfc-714123578739"], "metadata": {"page_label": "857", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "597e862f-37cc-4000-b2df-4b6bd52d4dc0": {"node_ids": ["390bf8d6-6e49-47f1-943b-70fccd7c1070"], "metadata": {"page_label": "858", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "bcb58c89-afcd-4da4-a800-1d64bf1dde98": {"node_ids": ["46f48424-cd6c-43d9-8ce0-71fba2ba86ee"], "metadata": {"page_label": "859", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "18befa48-e6ca-4ae4-b08a-cc542b05e467": {"node_ids": ["0757a05f-e4b7-48ce-804d-2a8f14520e40"], "metadata": {"page_label": "860", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "0344de18-80c6-4863-9e49-5fd173711df4": {"node_ids": ["63343528-87fd-4645-a0e5-e398dda9038e"], "metadata": {"page_label": "861", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f4a34281-36db-4276-a05d-8e3334e4be2b": {"node_ids": ["217adf4e-81e4-42b3-84ce-53f2c9bf30b8"], "metadata": {"page_label": "862", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1f10c0d4-df56-4482-be45-f706961b42d5": {"node_ids": ["1d72bc69-0073-4277-9b49-63aa41b44732"], "metadata": {"page_label": "863", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "493e6a7d-088b-4892-8bab-10a13462b92c": {"node_ids": ["813d1bbb-4c58-4bb4-b699-d3db1bf93829"], "metadata": {"page_label": "864", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "b2ef41ec-a7dc-4e17-81f7-6b0a72664ed7": {"node_ids": ["ce894004-cb88-4347-a853-95bef5565f35"], "metadata": {"page_label": "865", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6b7a1b02-538a-4df2-8207-32d167042ea1": {"node_ids": ["6719e7ff-c1e4-4e06-9e39-a6f51f86f7d0"], "metadata": {"page_label": "866", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1186a45a-8103-4cea-9d98-6a1fc4c304b9": {"node_ids": ["201afeb1-ee4c-4d0e-8e6a-ce8e766ee757"], "metadata": {"page_label": "867", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "4c40406a-069f-48db-8ee5-adb03ee42bca": {"node_ids": ["508af3d3-1ecd-4b74-bfac-25e30ee95d28"], "metadata": {"page_label": "868", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "aacaf8c6-37c1-4aed-9725-5a09eddee5fd": {"node_ids": ["e0c11d94-56bb-448f-847e-64084c955fec"], "metadata": {"page_label": "869", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "2daa7317-af33-468f-99a1-dfc61f8f03fb": {"node_ids": ["baa89533-a06a-40ab-84a6-68c1310d4560"], "metadata": {"page_label": "870", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "6f8e84c0-c369-4938-ab0c-8d7113633710": {"node_ids": ["abd526ab-6ff8-4ddb-bacc-0c1714e20726"], "metadata": {"page_label": "871", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "f392f1d2-fa9e-4f96-bdf5-95a978d8d461": {"node_ids": ["e795c7ee-c711-4def-8fd4-6113828beebe"], "metadata": {"page_label": "872", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "71cedad1-8bb6-4eb7-b829-6019b5930533": {"node_ids": ["3a0f953c-658b-42d6-ad53-ea3176d35496"], "metadata": {"page_label": "873", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "d5097fce-5eb6-476e-a268-d1947633d02e": {"node_ids": ["be9c760c-11e6-41fe-8c6e-a6b3e334f7b4"], "metadata": {"page_label": "874", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "5fc82b6e-8c20-47c7-ba85-5db4fcd5dc99": {"node_ids": ["ae8ac654-4fd5-4328-8153-c6897ac58924"], "metadata": {"page_label": "875", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "db5a0812-25bf-43e2-b40c-33f557a50f2a": {"node_ids": ["22798472-40af-4920-8096-e39a927e4ef7"], "metadata": {"page_label": "876", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}, "1c3b5c0e-b2e6-4d09-9b4a-4ef3bd5af088": {"node_ids": ["3db4c6fb-c1d6-438b-8246-31d404fbdda6"], "metadata": {"page_label": "877", "file_name": "csc137.pdf", "file_path": "/home/gabriel/Desktop/hackathon/canvas-rag-knead-uhjahb/backend/data/csc137.pdf", "file_type": "application/pdf", "file_size": 49282721, "creation_date": "2024-10-20", "last_modified_date": "2024-10-20"}}}}